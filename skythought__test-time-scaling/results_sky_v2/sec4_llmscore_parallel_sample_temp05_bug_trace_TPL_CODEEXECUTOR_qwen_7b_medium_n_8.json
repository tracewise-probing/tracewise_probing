{"difficulty": "medium", "num_threads": 32, "temperature": 0.5, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp05_bug_trace_TPL_CODEEXECUTOR_qwen_7b_medium_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3485", "code": "def maxScore(start, d):\n    start.sort()\n    max_score = 0\n    for i in range(len(start)):\n        if i == 0:\n            max_score = start[i] + d - start[0]\n        elif i == len(start) - 1:\n            max_score = max(max_score, start[-1] - (start[-2] + d))\n        else:\n            max_score = max(max_score, min(start[i] + d - start[i-1], start[i+1] - (start[i] + d)))\n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    start.sort()\n    max_score = 0\n    for i in range(len(start)):\n        if i == 0:\n            max_score = start[i] + d - start[0]\n        elif i == len(start) - 1:\n            max_score = max(max_score, start[-1] - (start[-2] + d))\n        else:\n            max_score = max(max_score, min(start[i] + d - start[i-1], start[i+1] - (start[i] + d)))\n    return max_score\n```"}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    # Sort the array b\n    b.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate over the elements of a\n    for i in range(4):\n        if a[i] > 0:\n            # For positive a[i], take the largest remaining element in b\n            score += a[i] * b.pop()\n        else:\n            # For negative a[i], take the smallest remaining element in b\n            score += a[i] * b.pop(0)\n    \n    return score", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    # Sort the array b\n    b.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate over the elements of a\n    for i in range(4):\n        if a[i] > 0:\n            # For positive a[i], take the largest remaining element in b\n            score += a[i] * b.pop()\n        else:\n            # For negative a[i], take the smallest remaining element in b\n            score += a[i] * b.pop(0)\n    \n    return score\n```"}
{"task_id": "3534", "code": "def almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def swap_digits(num_str, pos1, pos2):\n        num_list = list(num_str)\n        num_list[pos1], num_list[pos2] = num_list[pos2], num_list[pos1]\n        return ''.join(num_list)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            if num1 == num2:\n                count += 1\n                continue\n            \n            for k in range(len(num1)):\n                for l in range(len(num2)):\n                    swapped_num1 = swap_digits(num1, k, k)\n                    swapped_num2 = swap_digits(num2, l, l)\n                    \n                    if swapped_num1 == num2 or swapped_num2 == num1:\n                        count += 1\n                        break\n                else:\n                    continue\n                break\n    \n    return count", "passed": false, "raw_code": "```python\ndef almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def swap_digits(num_str, pos1, pos2):\n        num_list = list(num_str)\n        num_list[pos1], num_list[pos2] = num_list[pos2], num_list[pos1]\n        return ''.join(num_list)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            if num1 == num2:\n                count += 1\n                continue\n            \n            for k in range(len(num1)):\n                for l in range(len(num2)):\n                    swapped_num1 = swap_digits(num1, k, k)\n                    swapped_num2 = swap_digits(num2, l, l)\n                    \n                    if swapped_num1 == num2 or swapped_num2 == num1:\n                        count += 1\n                        break\n                else:\n                    continue\n                break\n    \n    return count\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            results.append(len(bag))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            results.append(len(bag))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum((ord(char) - ord('a')) for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum((ord(char) - ord('a')) for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()", "passed": true, "raw_code": "```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()\n```"}
{"task_id": "3526", "code": "def minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range(n // 2) if row[i] != row[n - 1 - i])\n    \n    def flips_for_col(col):\n        return sum(1 for i in range(m // 2) if grid[i][col] != grid[m - 1 - i][col])\n    \n    total_flips_rows = sum(flips_for_row(grid[i]) for i in range(m))\n    total_flips_cols = sum(flips_for_col(j) for j in range(n))\n    \n    return min(total_flips_rows, total_flips_cols)", "passed": true, "raw_code": "```python\ndef minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range(n // 2) if row[i] != row[n - 1 - i])\n    \n    def flips_for_col(col):\n        return sum(1 for i in range(m // 2) if grid[i][col] != grid[m - 1 - i][col])\n    \n    total_flips_rows = sum(flips_for_row(grid[i]) for i in range(m))\n    total_flips_cols = sum(flips_for_col(j) for j in range(n))\n    \n    return min(total_flips_rows, total_flips_cols)\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dpA = [0] * n\n    dpB = [0] * n\n    \n    dpA[0] = energyDrinkA[0]\n    dpB[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dpA[i] = max(dpA[i-1], dpB[i-1] - energyDrinkB[i] + energyDrinkA[i])\n        dpB[i] = max(dpB[i-1], dpA[i-1] - energyDrinkA[i] + energyDrinkB[i])\n    \n    return max(dpA[n-1], dpB[n-1])", "passed": false, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dpA = [0] * n\n    dpB = [0] * n\n    \n    dpA[0] = energyDrinkA[0]\n    dpB[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dpA[i] = max(dpA[i-1], dpB[i-1] - energyDrinkB[i] + energyDrinkA[i])\n        dpB[i] = max(dpB[i-1], dpA[i-1] - energyDrinkA[i] + energyDrinkB[i])\n    \n    return max(dpA[n-1], dpB[n-1])\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        common_diff = None\n        \n        for r in range(l, N):\n            if r > l:\n                current_diff = A[r] - A[r-1]\n                \n                if common_diff is None:\n                    common_diff = current_diff\n                elif current_diff != common_diff:\n                    break\n                \n                diff_count[current_diff] = diff_count.get(current_diff, 0) + 1\n            \n            count += 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        common_diff = None\n        \n        for r in range(l, N):\n            if r > l:\n                current_diff = A[r] - A[r-1]\n                \n                if common_diff is None:\n                    common_diff = current_diff\n                elif current_diff != common_diff:\n                    break\n                \n                diff_count[current_diff] = diff_count.get(current_diff, 0) + 1\n            \n            count += 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortestPath(n, queries):\n    # Step 1: Initialize the graph with initial roads\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    # Function to perform Dijkstra's algorithm\n    def dijkstra(start):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            for v, weight in graph[u]:\n                distance = current_dist + weight\n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return dist[n - 1]\n    \n    # Step 2: Process each query\n    results = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        results.append(dijkstra(0))\n    \n    return results", "passed": true, "raw_code": "```python\nimport heapq\n\ndef shortestPath(n, queries):\n    # Step 1: Initialize the graph with initial roads\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    # Function to perform Dijkstra's algorithm\n    def dijkstra(start):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            for v, weight in graph[u]:\n                distance = current_dist + weight\n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return dist[n - 1]\n    \n    # Step 2: Process each query\n    results = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        results.append(dijkstra(0))\n    \n    return results\n```"}
{"task_id": "3559", "code": "def minValidStrings(words, target):\n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for word in words:\n            if i >= len(word) and target[i - len(word):i] == word:\n                dp[i] = min(dp[i], dp[i - len(word)] + 1)\n    \n    return dp[n] if dp[n] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef minValidStrings(words, target):\n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for word in words:\n            if i >= len(word) and target[i - len(word):i] == word:\n                dp[i] = min(dp[i], dp[i - len(word)] + 1)\n    \n    return dp[n] if dp[n] != float('inf') else -1\n```"}
{"task_id": "arc183_a", "code": "import math\nfrom itertools import permutations\n\ndef good_integer_sequence(N, K):\n    # Calculate the total number of good integer sequences\n    S = math.factorial(N * K) // (math.factorial(K) ** N)\n    \n    # Calculate the target position\n    target_position = (S + 1) // 2\n    \n    # Generate all permutations of the sequence\n    elements = [i for i in range(1, N + 1)] * K\n    all_permutations = sorted(set(permutations(elements)))\n    \n    # Get the target permutation\n    target_sequence = all_permutations[target_position - 1]\n    \n    # Print the target sequence\n    print(' '.join(map(str, target_sequence)))\n\n# Example usage:\n# good_integer_sequence(2, 2)\n# good_integer_sequence(1, 5)\n# good_integer_sequence(6, 1)\n# good_integer_sequence(3, 3)", "passed": false, "raw_code": "```python\nimport math\nfrom itertools import permutations\n\ndef good_integer_sequence(N, K):\n    # Calculate the total number of good integer sequences\n    S = math.factorial(N * K) // (math.factorial(K) ** N)\n    \n    # Calculate the target position\n    target_position = (S + 1) // 2\n    \n    # Generate all permutations of the sequence\n    elements = [i for i in range(1, N + 1)] * K\n    all_permutations = sorted(set(permutations(elements)))\n    \n    # Get the target permutation\n    target_sequence = all_permutations[target_position - 1]\n    \n    # Print the target sequence\n    print(' '.join(map(str, target_sequence)))\n\n# Example usage:\n# good_integer_sequence(2, 2)\n# good_integer_sequence(1, 5)\n# good_integer_sequence(6, 1)\n# good_integer_sequence(3, 3)\n```"}
{"task_id": "abc372_d", "code": "def count_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    stack = []\n    result = [0] * N\n    for i in range(N-1, -1, -1):\n        while stack and stack[-1] <= heights[i]:\n            stack.pop()\n        result[i] = len(stack)\n        stack.append(heights[i])\n    print(' '.join(map(str, result)))\ncount_buildings()", "passed": false, "raw_code": "def count_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    stack = []\n    result = [0] * N\n    for i in range(N-1, -1, -1):\n        while stack and stack[-1] <= heights[i]:\n            stack.pop()\n        result[i] = len(stack)\n        stack.append(heights[i])\n    print(' '.join(map(str, result)))\ncount_buildings()"}
{"task_id": "3522", "code": "def findPowerOfSubarrays(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if isConsecutiveAndSorted(subarray):\n            results[i] = max(subarray)\n    \n    return results\n\ndef isConsecutiveAndSorted(subarray):\n    return subarray == sorted(subarray) and all(subarray[j] + 1 == subarray[j + 1] for j in range(len(subarray) - 1))", "passed": true, "raw_code": "```python\ndef findPowerOfSubarrays(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if isConsecutiveAndSorted(subarray):\n            results[i] = max(subarray)\n    \n    return results\n\ndef isConsecutiveAndSorted(subarray):\n    return subarray == sorted(subarray) and all(subarray[j] + 1 == subarray[j + 1] for j in range(len(subarray) - 1))\n```"}
{"task_id": "abc370_c", "code": "d", "passed": false, "raw_code": "```python\ndef min_transformations(S, T):\n    X = [S]\n    while S != T:\n        for i in range(len(S)):\n            if S[i] != T[i]:\n                S = S[:i] + T[i] + S[i+1:]\n                break\n        X.append(S)\n    return X\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nS = data[0]\nT = data[1]\n\n# Get the result\nresult = min_transformations(S, T)\n\n# Print the result\nprint(len(result))\nfor s in result:\n    print(s)"}
{"task_id": "3496", "code": "def minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        return sum(worker * (time // worker) for worker in workerTimes) >= height\n    \n    left, right = 1, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        return sum(worker * (time // worker) for worker in workerTimes) >= height\n    \n    left, right = 1, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3579", "code": "def max_binary_number(nums):\n    # Convert each number to its binary string representation without '0b' prefix\n    binary_strings = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings based on the concatenated result in descending order\n    binary_strings.sort(key=lambda x: x + x, reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_strings)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "passed": true, "raw_code": "```python\ndef max_binary_number(nums):\n    # Convert each number to its binary string representation without '0b' prefix\n    binary_strings = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings based on the concatenated result in descending order\n    binary_strings.sort(key=lambda x: x + x, reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_strings)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    n, m = len(word1), len(word2)\n    count = 0\n    counter_w2 = Counter(word2)\n    \n    for i in range(n):\n        counter_ws = Counter(word1[:i+1])\n        if all(counter_ws[char] >= counter_w2[char] for char in counter_w2):\n            count += 1\n            \n    return count", "passed": false, "raw_code": "```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    n, m = len(word1), len(word2)\n    count = 0\n    counter_w2 = Counter(word2)\n    \n    for i in range(n):\n        counter_ws = Counter(word1[:i+1])\n        if all(counter_ws[char] >= counter_w2[char] for char in counter_w2):\n            count += 1\n            \n    return count\n```"}
{"task_id": "abc367_c", "code": "def find_sequences(N, K, R):\n    def backtrack(index, current_sum, current_sequence):\n        if index == N:\n            if current_sum % K == 0:\n                result.append(current_sequence[:])\n            return\n        for num in range(1, R[index] + 1):\n            current_sequence.append(num)\n            backtrack(index + 1, current_sum + num, current_sequence)\n            current_sequence.pop()\n\n    result = []\n    backtrack(0, 0, [])\n    result.sort()\n    return result\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nR = list(map(int, data[2:]))\nsequences = find_sequences(N, K, R)\nfor seq in sequences:\n    print(' '.join(map(str, seq)))", "passed": true, "raw_code": "def find_sequences(N, K, R):\n    def backtrack(index, current_sum, current_sequence):\n        if index == N:\n            if current_sum % K == 0:\n                result.append(current_sequence[:])\n            return\n        for num in range(1, R[index] + 1):\n            current_sequence.append(num)\n            backtrack(index + 1, current_sum + num, current_sequence)\n            current_sequence.pop()\n\n    result = []\n    backtrack(0, 0, [])\n    result.sort()\n    return result\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nR = list(map(int, data[2:]))\nsequences = find_sequences(N, K, R)\nfor seq in sequences:\n    print(' '.join(map(str, seq)))"}
{"task_id": "abc372_c", "code": "def process_queries(N, Q, S, queries):\n    def count_ABC(s):\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i+3] == 'ABC':\n                count += 1\n        return count\n\n    result = []\n    current_count = count_ABC(S)\n    result.append(current_count)\n\n    for X, C in queries:\n        X -= 1\n        if S[X] != C:\n            current_count += count_ABC(C * 3) - count_ABC(S[X:X+3])\n        S = S[:X] + C + S[X+1:]\n        result.append(current_count)\n\n    for r in result[1:]:\n        print(r)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[2 + 2 * i]), data[3 + 2 * i]) for i in range(Q)]\n\nprocess_queries(N, Q, S, queries)", "passed": false, "raw_code": "def process_queries(N, Q, S, queries):\n    def count_ABC(s):\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i+3] == 'ABC':\n                count += 1\n        return count\n\n    result = []\n    current_count = count_ABC(S)\n    result.append(current_count)\n\n    for X, C in queries:\n        X -= 1\n        if S[X] != C:\n            current_count += count_ABC(C * 3) - count_ABC(S[X:X+3])\n        S = S[:X] + C + S[X+1:]\n        result.append(current_count)\n\n    for r in result[1:]:\n        print(r)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[2 + 2 * i]), data[3 + 2 * i]) for i in range(Q)]\n\nprocess_queries(N, Q, S, queries)"}
{"task_id": "abc367_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate the prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n\n    # Dictionary to store the remainder of prefix sums when divided by M\n    remainder_count = {0: 1}\n    result = 0\n\n    for i in range(N + 1):\n        target_remainder = (prefix_sum[i] % M)\n        if target_remainder in remainder_count:\n            result += remainder_count[target_remainder]\n        remainder_count[target_remainder] = remainder_count.get(target_remainder, 0) + 1\n\n    print(result)\n\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate the prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n\n    # Dictionary to store the remainder of prefix sums when divided by M\n    remainder_count = {0: 1}\n    result = 0\n\n    for i in range(N + 1):\n        target_remainder = (prefix_sum[i] % M)\n        if target_remainder in remainder_count:\n            result += remainder_count[target_remainder]\n        remainder_count[target_remainder] = remainder_count.get(target_remainder, 0) + 1\n\n    print(result)\n\nmain()"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Check if the subsidy limit can be infinitely large\n    if sum(A) <= M:\n        print(\"infinite\")\n        return\n    \n    # Binary search for the maximum subsidy limit\n    low, high = 0, 10**9\n    while low < high:\n        mid = (low + high + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            low = mid\n        else:\n            high = mid - 1\n    \n    print(low)\n\nmax_subsidy_limit()", "passed": true, "raw_code": "```python\ndef max_subsidy_limit():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Check if the subsidy limit can be infinitely large\n    if sum(A) <= M:\n        print(\"infinite\")\n        return\n    \n    # Binary search for the maximum subsidy limit\n    low, high = 0, 10**9\n    while low < high:\n        mid = (low + high + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            low = mid\n        else:\n            high = mid - 1\n    \n    print(low)\n\nmax_subsidy_limit()\n```"}
{"task_id": "abc371_d", "code": "import sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    P = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        index += 2\n        queries.append((L, R))\n    \n    # Create prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for p in P:\n        current_sum += p\n        prefix_sum.append(current_sum)\n    \n    # Process each query\n    for L, R in queries:\n        # Find the first village greater than or equal to L\n        left_index = bisect_left(X, L)\n        # Find the first village greater than R\n        right_index = bisect_right(X, R)\n        \n        # Calculate the number of villagers in the range [L, R]\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\nimport sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    P = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        index += 2\n        queries.append((L, R))\n    \n    # Create prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for p in P:\n        current_sum += p\n        prefix_sum.append(current_sum)\n    \n    # Process each query\n    for L, R in queries:\n        # Find the first village greater than or equal to L\n        left_index = bisect_left(X, L)\n        # Find the first village greater than R\n        right_index = bisect_right(X, R)\n        \n        # Calculate the number of villagers in the range [L, R]\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc370_d", "code": "import heapq\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nH = int(data[0])\nW = int(data[1])\nQ = int(data[2])\n\n# Initialize the grid with walls\ngrid = [[1] * W for _ in range(H)]\n\n# Priority queue to keep track of walls to be destroyed\npq = []\n\n# Read the queries and process them\nindex = 3\nfor _ in range(Q):\n    R_q = int(data[index]) - 1\n    C_q = int(data[index + 1]) - 1\n    index += 2\n    \n    if grid[R_q][C_q] == 1:\n        # Destroy the wall at (R_q, C_q)\n        grid[R_q][C_q] = 0\n    else:\n        # Destroy the first walls that appear when looking up, down, left, and right from (R_q, C_q)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dr, dc in directions:\n            r, c = R_q + dr, C_q + dc\n            while 0 <= r < H and 0 <= c < W and grid[r][c] == 0:\n                r += dr\n                c += dc\n            if 0 <= r < H and 0 <= c < W and grid[r][c] == 1:\n                heapq.heappush(pq, (r, c))\n                grid[r][c] = 0\n\n# Process the priority queue to destroy the walls\nwhile pq:\n    r, c = heapq.heappop(pq)\n    if grid[r][c] == 1:\n        grid[r][c] = 0\n\n# Count the remaining walls\nremaining_walls = sum(row.count(1) for row in grid)\n\n# Print the number of remaining walls\nprint(remaining_walls)", "passed": false, "raw_code": "```python\nimport heapq\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nH = int(data[0])\nW = int(data[1])\nQ = int(data[2])\n\n# Initialize the grid with walls\ngrid = [[1] * W for _ in range(H)]\n\n# Priority queue to keep track of walls to be destroyed\npq = []\n\n# Read the queries and process them\nindex = 3\nfor _ in range(Q):\n    R_q = int(data[index]) - 1\n    C_q = int(data[index + 1]) - 1\n    index += 2\n    \n    if grid[R_q][C_q] == 1:\n        # Destroy the wall at (R_q, C_q)\n        grid[R_q][C_q] = 0\n    else:\n        # Destroy the first walls that appear when looking up, down, left, and right from (R_q, C_q)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dr, dc in directions:\n            r, c = R_q + dr, C_q + dc\n            while 0 <= r < H and 0 <= c < W and grid[r][c] == 0:\n                r += dr\n                c += dc\n            if 0 <= r < H and 0 <= c < W and grid[r][c] == 1:\n                heapq.heappush(pq, (r, c))\n                grid[r][c] = 0\n\n# Process the priority queue to destroy the walls\nwhile pq:\n    r, c = heapq.heappop(pq)\n    if grid[r][c] == 1:\n        grid[r][c] = 0\n\n# Count the remaining walls\nremaining_walls = sum(row.count(1) for row in grid)\n\n# Print the number of remaining walls\nprint(remaining_walls)\n```"}
{"task_id": "arc181_a", "code": "import sys\n\ndef min_operations(N, P):\n    operations = 0\n    i = 0\n    while i < N:\n        if P[i] != i + 1:\n            j = i\n            while j < N and P[j] != i + 1:\n                j += 1\n            P[i:j+1] = sorted(P[i:j+1])\n            operations += 1\n        i += 1\n    return operations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    index = 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index+N]))\n        index += N\n        results.append(min_operations(N, P))\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "import sys\n\ndef min_operations(N, P):\n    operations = 0\n    i = 0\n    while i < N:\n        if P[i] != i + 1:\n            j = i\n            while j < N and P[j] != i + 1:\n                j += 1\n            P[i:j+1] = sorted(P[i:j+1])\n            operations += 1\n        i += 1\n    return operations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    index = 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index+N]))\n        index += N\n        results.append(min_operations(N, P))\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "3584", "code": "def find_lexicographically_smallest_sequence(word1, word2):\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    sequence = []\n    \n    while i < n and j < m:\n        if word1[i] != word2[j]:\n            # Check if changing word1[i] to word2[j] makes it almost equal\n            if i + 1 < n and word1[i+1] == word2[j]:\n                sequence.append(i)\n                i += 2\n            elif i < n and word1[i] == word2[j+1]:\n                sequence.append(i)\n                i += 1\n                j += 2\n            else:\n                return []\n        else:\n            i += 1\n            j += 1\n    \n    return sequence", "passed": false, "raw_code": "```python\ndef find_lexicographically_smallest_sequence(word1, word2):\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    sequence = []\n    \n    while i < n and j < m:\n        if word1[i] != word2[j]:\n            # Check if changing word1[i] to word2[j] makes it almost equal\n            if i + 1 < n and word1[i+1] == word2[j]:\n                sequence.append(i)\n                i += 2\n            elif i < n and word1[i] == word2[j+1]:\n                sequence.append(i)\n                i += 1\n                j += 2\n            else:\n                return []\n        else:\n            i += 1\n            j += 1\n    \n    return sequence\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 3\n                    break\n        else:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 1\n                    break\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 3\n                    break\n        else:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 1\n                    break\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength in descending order\n    A.sort(reverse=True)\n    \n    total_points = 0\n    \n    for i in range(N):\n        if i % 2 == 0:\n            total_points += A[i]\n        else:\n            total_points += 2 * A[i]\n    \n    print(total_points)\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength in descending order\n    A.sort(reverse=True)\n    \n    total_points = 0\n    \n    for i in range(N):\n        if i % 2 == 0:\n            total_points += A[i]\n        else:\n            total_points += 2 * A[i]\n    \n    print(total_points)\n\nmax_experience_points()\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```"}
{"task_id": "3558", "code": "def hasPath(grid, health):\n    def dfs(x, y, health):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or health <= 0:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        if dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp):\n            return True\n        \n        grid[x][y] = temp  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef hasPath(grid, health):\n    def dfs(x, y, health):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or health <= 0:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        if dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp):\n            return True\n        \n        grid[x][y] = temp  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "3570", "code": "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for start in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        vowel_set = set()\n        \n        for end in range(start, n):\n            char = word[end]\n            if char in vowels:\n                vowel_count += 1\n                vowel_set.add(char)\n            else:\n                consonant_count += 1\n            \n            if len(vowel_set) == 5 and consonant_count == k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for start in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        vowel_set = set()\n        \n        for end in range(start, n):\n            char = word[end]\n            if char in vowels:\n                vowel_count += 1\n                vowel_set.add(char)\n            else:\n                consonant_count += 1\n            \n            if len(vowel_set) == 5 and consonant_count == k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "3495", "code": "def kthSmallestObstacleDistance(queries, k):\n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        distances.append(distance)\n        distances.sort()\n        \n        if len(distances) >= k:\n            results.append(distances[k-1])\n        else:\n            results.append(-1)\n    \n    return results", "passed": false, "raw_code": "```python\ndef kthSmallestObstacleDistance(queries, k):\n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        distances.append(distance)\n        distances.sort()\n        \n        if len(distances) >= k:\n            results.append(distances[k-1])\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    # Initialize the count of wins\n    wins = 0\n    \n    # Iterate through Aoki's moves\n    for i in range(N):\n        if S[i] == 'R':\n            if i % 2 == 0:\n                wins += 1\n        elif S[i] == 'P':\n            if i % 2 == 1:\n                wins += 1\n        elif S[i] == 'S':\n            if i % 2 == 0:\n                wins += 1\n    \n    return wins\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    # Initialize the count of wins\n    wins = 0\n    \n    # Iterate through Aoki's moves\n    for i in range(N):\n        if S[i] == 'R':\n            if i % 2 == 0:\n                wins += 1\n        elif S[i] == 'P':\n            if i % 2 == 1:\n                wins += 1\n        elif S[i] == 'S':\n            if i % 2 == 0:\n                wins += 1\n    \n    return wins\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "abc366_d", "code": "d", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize the 3D array and prefix sum array\n    A = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n    prefix_sum = [[[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n    \n    # Read the 3D array\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                A[x][y][z] = int(data[index])\n                index += 1\n    \n    # Precompute the prefix sums\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix_sum[x][y][z][0] = prefix_sum[x][y][z-1][0] + A[x][y][z]\n                prefix_sum[x][y][0][z] = prefix_sum[x][y-1][0][z] + A[x][y][z]\n                prefix_sum[0][y][z][x] = prefix_sum[0][y][z][x-1] + A[x][y][z]\n                prefix_sum[x][y][z][x] = prefix_sum[x-1][y][z][x] + prefix_sum[x][y-1][z][x] + prefix_sum[x][y][z-1][x] - prefix_sum[x-1][y-1][z-1][x] + A[x][y][z]\n    \n    # Process the queries\n    Q = int(data[index])\n    index += 1\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        result = (prefix_sum[Rx][Ry][Rz][Rz] - prefix_sum[Lx-1][Ry][Rz][Rz] - prefix_sum[Rx][Ly-1][Rz][Rz] - prefix_sum[Rx][Ry][Lz-1][Rz] + prefix_sum[Lx-1][Ly-1][Lz-1][Rz] - prefix_sum[Lx-1][Ly-1][Rz][R"}
{"task_id": "3510", "code": "def maxTowerSum(maximumHeight):\n    maximumHeight.sort()\n    n = len(maximumHeight)\n    used_heights = set()\n    current_height = 0\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        if current_height + 1 > mh:\n            return -1\n        while current_height + 1 in used_heights:\n            current_height += 1\n        used_heights.add(current_height + 1)\n        total_sum += current_height + 1\n        current_height += 1\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerSum(maximumHeight):\n    maximumHeight.sort()\n    n = len(maximumHeight)\n    used_heights = set()\n    current_height = 0\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        if current_height + 1 > mh:\n            return -1\n        while current_height + 1 in used_heights:\n            current_height += 1\n        used_heights.add(current_height + 1)\n        total_sum += current_height + 1\n        current_height += 1\n    \n    return total_sum\n```"}
{"task_id": "abc371_c", "code": "from itertools import permutations\n\ndef min_cost_to_isomorphic(G, H, A):\n    N = len(G)\n    min_cost = float('inf')\n    \n    # Generate all permutations of H\n    for perm in permutations(range(N)):\n        cost = 0\n        # Check each edge in G\n        for i in range(N):\n            for j in range(i + 1, N):\n                if (i + 1, j + 1) in G:\n                    if (perm[i] + 1, perm[j] + 1) not in H:\n                        cost += A[i][j]\n                else:\n                    if (perm[i] + 1, perm[j] + 1) in H:\n                        cost += A[i][j]\n        min_cost = min(min_cost, cost)\n    \n    return min_cost\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM_G = int(data[1])\nG = set()\nindex = 2\nfor _ in range(M_G):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    G.add((u, v))\n    G.add((v, u))\n    index += 2\n\nM_H = int(data[index])\nH = set()\nfor _ in range(M_H):\n    a = int(data[index]) - 1\n    b = int(data[index + 1]) - 1\n    H.add((a, b))\n    H.add((b, a))\n    index += 2\n\nA = []\nfor i in range(N - 1):\n    row = list(map(int, data[index:index + N - i - 1]))\n    A.append(row)\n    index += N - i - 1\n\n# Calculate the minimum cost\nresult = min_cost_to_isomorphic(G, H, A)\nprint(result)", "passed": false, "raw_code": "```python\nfrom itertools import permutations\n\ndef min_cost_to_isomorphic(G, H, A):\n    N = len(G)\n    min_cost = float('inf')\n    \n    # Generate all permutations of H\n    for perm in permutations(range(N)):\n        cost = 0\n        # Check each edge in G\n        for i in range(N):\n            for j in range(i + 1, N):\n                if (i + 1, j + 1) in G:\n                    if (perm[i] + 1, perm[j] + 1) not in H:\n                        cost += A[i][j]\n                else:\n                    if (perm[i] + 1, perm[j] + 1) in H:\n                        cost += A[i][j]\n        min_cost = min(min_cost, cost)\n    \n    return min_cost\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM_G = int(data[1])\nG = set()\nindex = 2\nfor _ in range(M_G):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    G.add((u, v))\n    G.add((v, u))\n    index += 2\n\nM_H = int(data[index])\nH = set()\nfor _ in range(M_H):\n    a = int(data[index]) - 1\n    b = int(data[index + 1]) - 1\n    H.add((a, b))\n    H.add((b, a))\n    index += 2\n\nA = []\nfor i in range(N - 1):\n    row = list(map(int, data[index:index + N - i - 1]))\n    A.append(row)\n    index += N - i - 1\n\n# Calculate the minimum cost\nresult = min_cost_to_isomorphic(G, H, A)\nprint(result)\n```"}
{"final_accuracy": "29.73%"}
