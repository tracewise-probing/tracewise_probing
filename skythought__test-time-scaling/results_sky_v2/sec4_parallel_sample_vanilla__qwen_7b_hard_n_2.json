{"difficulty": "hard", "num_threads": 32, "temperature": 0.7, "n": 2, "context": "all", "selection": "oracle", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_parallel_sample_vanilla__qwen_7b_hard_n_2.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc368_f", "codes": ["def determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    def is_composite(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    # Since Anna always starts and can force Bruno into a composite number,\n    # Anna will always win if she plays optimally.\n    print(\"Anna\")\n\ndetermine_winner()", "def determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_operations = 0\n    \n    for num in A:\n        # Count the number of operations needed to reduce the number to 1\n        while num > 1:\n            num //= 2\n            total_operations += 1\n    \n    # If the total number of operations is odd, Anna wins; otherwise, Bruno wins\n    if total_operations % 2 == 1:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\ndetermine_winner()"], "passed": [false, false], "raw_code": ["```python\ndef determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    def is_composite(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    # Since Anna always starts and can force Bruno into a composite number,\n    # Anna will always win if she plays optimally.\n    print(\"Anna\")\n\ndetermine_winner()\n```", "```python\ndef determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_operations = 0\n    \n    for num in A:\n        # Count the number of operations needed to reduce the number to 1\n        while num > 1:\n            num //= 2\n            total_operations += 1\n    \n    # If the total number of operations is odd, Anna wins; otherwise, Bruno wins\n    if total_operations % 2 == 1:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\ndetermine_winner()\n```"]}
{"task_id": "abc366_f", "codes": ["i", "def max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    functions = []\n    index = 2\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Sort functions by their slopes A in descending order\n    functions.sort(reverse=True, key=lambda x: x[0])\n    \n    # Initialize the result with the first function applied to 1\n    result = functions[0][0] * 1 + functions[0][1]\n    \n    # Apply the remaining functions sequentially\n    for i in range(1, K):\n        result = functions[i][0] * result + functions[i][1]\n    \n    print(result)\n\nmax_nested_function_value()"], "passed": [false, false], "raw_code": ["```python\nimport sys\nfrom typing import List, Tuple\n\ndef max_nested_function_value(N: int, K: int, functions: List[Tuple[int, int]]) -> int:\n    # Sort functions by A_i in descending order\n    sorted_functions = sorted(functions, key=lambda x: -x[0])\n    \n    # Initialize the result with the innermost function applied to 1\n    result = 1 + sorted_functions[0][1]\n    \n    # Apply the remaining functions in sorted order\n    for i in range(1, K):\n        A, B = sorted_functions[i]\n        result = A * result + B\n    \n    return result\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\n\nfunctions = []\nfor i in range(N):\n    A = int(data[2 + 2 * i])\n    B = int(data[3 + 2 * i])\n    functions.append((A, B))\n\n# Get the result\nresult = max_nested_function_value(N, K, functions)\n\n# Print the result\nprint(result)", "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    functions = []\n    index = 2\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Sort functions by their slopes A in descending order\n    functions.sort(reverse=True, key=lambda x: x[0])\n    \n    # Initialize the result with the first function applied to 1\n    result = functions[0][0] * 1 + functions[0][1]\n    \n    # Apply the remaining functions sequentially\n    for i in range(1, K):\n        result = functions[i][0] * result + functions[i][1]\n    \n    print(result)\n\nmax_nested_function_value()\n```"]}
{"task_id": "3535", "codes": ["def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP arrays\n    dp_inc = [[0] * 51 for _ in range(n)]\n    dp_dec = [[0] * 51 for _ in range(n)]\n    \n    # Base cases\n    dp_inc[0][nums[0]] = 1\n    dp_dec[0][nums[0]] = 1\n    \n    for i in range(1, n):\n        for j in range(51):\n            if j <= nums[i]:\n                dp_inc[i][j] = dp_inc[i-1][j] + dp_inc[i-1][j-1]\n                dp_inc[i][j] %= MOD\n            if j >= nums[i]:\n                dp_dec[i][j] = dp_dec[i-1][j] + dp_dec[i-1][j+1]\n                dp_dec[i][j] %= MOD\n    \n    count = 0\n    for i in range(n):\n        for j in range(51):\n            if j <= nums[i]:\n                count += dp_inc[i][j]\n            if j >= nums[i]:\n                count += dp_dec[i][j]\n            count %= MOD\n    \n    return count", "def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_non_decreasing = [[0] * 51 for _ in range(n)]\n    dp_non_increasing = [[0] * 51 for _ in range(n)]\n    \n    # Base cases\n    for i in range(51):\n        dp_non_decreasing[0][i] = 1\n        dp_non_increasing[-1][i] = 1\n    \n    # Fill DP tables\n    for i in range(1, n):\n        for j in range(51):\n            dp_non_decreasing[i][j] = dp_non_decreasing[i-1][j]\n            if j > 0:\n                dp_non_decreasing[i][j] += dp_non_decreasing[i-1][j-1]\n            dp_non_increasing[-i-1][j] = dp_non_increasing[-i][j]\n            if j < 50:\n                dp_non_increasing[-i-1][j] += dp_non_increasing[-i][j+1]\n    \n    # Count valid pairs\n    count = 0\n    for i in range(n):\n        for j in range(nums[i] + 1):\n            if dp_non_decreasing[i][j] > 0 and dp_non_increasing[-i-1][nums[i]-j] > 0:\n                count = (count + dp_non_decreasing[i][j] * dp_non_increasing[-i-1][nums[i]-j]) % MOD\n    \n    return count"], "passed": [false, false], "raw_code": ["```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP arrays\n    dp_inc = [[0] * 51 for _ in range(n)]\n    dp_dec = [[0] * 51 for _ in range(n)]\n    \n    # Base cases\n    dp_inc[0][nums[0]] = 1\n    dp_dec[0][nums[0]] = 1\n    \n    for i in range(1, n):\n        for j in range(51):\n            if j <= nums[i]:\n                dp_inc[i][j] = dp_inc[i-1][j] + dp_inc[i-1][j-1]\n                dp_inc[i][j] %= MOD\n            if j >= nums[i]:\n                dp_dec[i][j] = dp_dec[i-1][j] + dp_dec[i-1][j+1]\n                dp_dec[i][j] %= MOD\n    \n    count = 0\n    for i in range(n):\n        for j in range(51):\n            if j <= nums[i]:\n                count += dp_inc[i][j]\n            if j >= nums[i]:\n                count += dp_dec[i][j]\n            count %= MOD\n    \n    return count\n```", "```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_non_decreasing = [[0] * 51 for _ in range(n)]\n    dp_non_increasing = [[0] * 51 for _ in range(n)]\n    \n    # Base cases\n    for i in range(51):\n        dp_non_decreasing[0][i] = 1\n        dp_non_increasing[-1][i] = 1\n    \n    # Fill DP tables\n    for i in range(1, n):\n        for j in range(51):\n            dp_non_decreasing[i][j] = dp_non_decreasing[i-1][j]\n            if j > 0:\n                dp_non_decreasing[i][j] += dp_non_decreasing[i-1][j-1]\n            dp_non_increasing[-i-1][j] = dp_non_increasing[-i][j]\n            if j < 50:\n                dp_non_increasing[-i-1][j] += dp_non_increasing[-i][j+1]\n    \n    # Count valid pairs\n    count = 0\n    for i in range(n):\n        for j in range(nums[i] + 1):\n            if dp_non_decreasing[i][j] > 0 and dp_non_increasing[-i-1][nums[i]-j] > 0:\n                count = (count + dp_non_decreasing[i][j] * dp_non_increasing[-i-1][nums[i]-j]) % MOD\n    \n    return count\n```"]}
{"task_id": "arc181_c", "codes": ["def generate_grid(N, P, Q):\n    # Step 1: Create a Latin square using 0s and 1s\n    latin_square = []\n    for i in range(N):\n        row = [0] * i + [1] * (N - i)\n        latin_square.append(row)\n\n    # Step 2: Sort the rows based on the permutation P\n    sorted_rows = [latin_square[i-1] for i in P]\n\n    # Step 3: Sort the columns based on the permutation Q\n    transposed = list(zip(*sorted_rows))\n    sorted_columns = [list(col) for col in zip(*sorted(transposed))]\n\n    # Print the result\n    for row in sorted_columns:\n        print(''.join(map(str, row)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:]))\n\ngenerate_grid(N, P, Q)", "d"], "passed": [false, false], "raw_code": ["```python\ndef generate_grid(N, P, Q):\n    # Step 1: Create a Latin square using 0s and 1s\n    latin_square = []\n    for i in range(N):\n        row = [0] * i + [1] * (N - i)\n        latin_square.append(row)\n\n    # Step 2: Sort the rows based on the permutation P\n    sorted_rows = [latin_square[i-1] for i in P]\n\n    # Step 3: Sort the columns based on the permutation Q\n    transposed = list(zip(*sorted_rows))\n    sorted_columns = [list(col) for col in zip(*sorted(transposed))]\n\n    # Print the result\n    for row in sorted_columns:\n        print(''.join(map(str, row)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:]))\n\ngenerate_grid(N, P, Q)\n```", "```python\ndef generate_grid(N, P, Q):\n    grid = [['' for _ in range(N)] for _ in range(N)]\n    \n    def is_valid(grid, i, j, char):\n        if i > 0 and grid[i-1][j] + char >= grid[i][j]:\n            return False\n        if j > 0 and grid[i][j-1] + char >= grid[i][j]:\n            return False\n        return True\n    \n    def backtrack(row, col):\n        if row == N:\n            return True\n        if col == N:\n            return backtrack(row+1, 0)\n        \n        for char in ['0', '1']:\n            if is_valid(grid, row, col, char):\n                grid[row][col] = char\n                if backtrack(row, col+1):\n                    return True\n                grid[row][col] = ''\n        \n        return False\n    \n    backtrack(0, 0)\n    \n    for row in grid:\n        print(''.join(row))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\ngenerate_grid(N, P, Q)"]}
{"task_id": "abc366_e", "codes": ["d", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n\n    points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points.append((x, y))\n        index += 2\n\n    # Sort points by x-coordinate, then by y-coordinate\n    points.sort(key=lambda p: (p[0], p[1]))\n\n    # Initialize prefix sums\n    prefix_x = [0] * (N + 1)\n    prefix_y = [0] * (N + 1)\n\n    for i in range(N):\n        prefix_x[i + 1] = prefix_x[i] + abs(points[i][0] - points[0][0])\n        prefix_y[i + 1] = prefix_y[i] + abs(points[i][1] - points[0][1])\n\n    result = 0\n\n    for i in range(N):\n        x = points[i][0]\n        y = points[i][1]\n\n        left_x = max(0, x - D)\n        right_x = min(x + D, 2 * 10**6)\n        left_y = max(0, y - D)\n        right_y = min(y + D, 2 * 10**6)\n\n        # Find the indices for the sliding window\n        start_x = bisect_left(points, (left_x, float('-inf')), key=lambda p: p[0])\n        end_x = bisect_right(points, (right_x, float('inf')), key=lambda p: p[0])\n        start_y = bisect_left(points, (float('-inf'), left_y), key=lambda p: p[1])\n        end_y = bisect_right(points, (float('inf'), right_y), key=lambda p: p[1])\n\n        if start_x <= i < end_x and start_y <= i < end_y:\n            # Count valid pairs using prefix sums\n            count_x = (end_x - i) * (prefix_x[end_x] - prefix_x[i]) - (i - start_x) * (prefix_x[i] - prefix_x[start_x])\n            count_y = (end_y - i) * (prefix_y[end_y] - prefix_y[i]) - (i - start_y) * (prefix_y[i] - prefix_y[start_y])\n            result += count_x + count_y - (end_x - i) * (end_y - i)\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef count_valid_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    D = int(data[1])\n    \n    points_x = []\n    points_y = []\n    \n    index = 2\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points_x.append((x, y))\n        points_y.append((y, x))\n        index += 2\n    \n    def count_points(points):\n        points.sort()\n        left = 0\n        result = 0\n        \n        for right in range(len(points)):\n            while points[right][0] - points[left][0] > D:\n                left += 1\n            result += right - left + 1\n        \n        return result\n    \n    result_x = count_points(points_x)\n    result_y = count_points(points_y)\n    \n    print(result_x * result_y)\n\ncount_valid_points()", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n\n    points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points.append((x, y))\n        index += 2\n\n    # Sort points by x-coordinate, then by y-coordinate\n    points.sort(key=lambda p: (p[0], p[1]))\n\n    # Initialize prefix sums\n    prefix_x = [0] * (N + 1)\n    prefix_y = [0] * (N + 1)\n\n    for i in range(N):\n        prefix_x[i + 1] = prefix_x[i] + abs(points[i][0] - points[0][0])\n        prefix_y[i + 1] = prefix_y[i] + abs(points[i][1] - points[0][1])\n\n    result = 0\n\n    for i in range(N):\n        x = points[i][0]\n        y = points[i][1]\n\n        left_x = max(0, x - D)\n        right_x = min(x + D, 2 * 10**6)\n        left_y = max(0, y - D)\n        right_y = min(y + D, 2 * 10**6)\n\n        # Find the indices for the sliding window\n        start_x = bisect_left(points, (left_x, float('-inf')), key=lambda p: p[0])\n        end_x = bisect_right(points, (right_x, float('inf')), key=lambda p: p[0])\n        start_y = bisect_left(points, (float('-inf'), left_y), key=lambda p: p[1])\n        end_y = bisect_right(points, (float('inf'), right_y), key=lambda p: p[1])\n\n        if start_x <= i < end_x and start_y <= i < end_y:\n            # Count valid pairs using prefix sums\n            count_x = (end_x - i) * (prefix_x[end_x] - prefix_x[i]) - (i - start_x) * (prefix_x[i] - prefix_x[start_x])\n            count_y = (end_y - i) * (prefix_y[end_y] - prefix_y[i]) - (i - start_y) * (prefix_y[i] - prefix_y[start_y])\n            result += count_x + count_y - (end_x - i) * (end_y - i)\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc373_f", "codes": ["d", "d"], "passed": [false, false], "raw_code": ["```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    \n    weights = []\n    values = []\n    index = 2\n    for _ in range(N):\n        weights.append(int(data[index]))\n        values.append(int(data[index + 1]))\n        index += 2\n    \n    dp = [-float('inf')] * (W + 1)\n    dp[0] = 0\n    \n    for w, v in zip(weights, values):\n        for j in range(W, w - 1, -1):\n            for k in range(1, 10**10 + 1):\n                if j >= k * w:\n                    dp[j] = max(dp[j], dp[j - k * w] + k * v - k**2)\n                else:\n                    break\n    \n    print(max(dp))\n\nmax_happiness()", "```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    items = []\n    \n    index = 2\n    for i in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        index += 2\n        items.append((w, v))\n    \n    dp = [[0] * (W + 1) for _ in range(N + 1)]\n    \n    for i in range(1, N + 1):\n        w, v = items[i - 1]\n        for j in range(W + 1):\n            for k in range(1, 10**10 + 1):\n                if j < k * w:\n                    break\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + k * v - k**2)\n                dp[i][j] = max(dp[i][j], dp[i][j - k * w] + k * v - k**2)\n    \n    print(dp[N][W])\n\nmax_happiness()"]}
{"task_id": "arc181_b", "codes": ["d", "d"], "passed": [false, false], "raw_code": ["```python\ndef f(S, T, X):\n    result = []\n    for char in X:\n        if char == '0':\n            result.append(S)\n        else:\n            result.append(T)\n    return ''.join(result)\n\ndef check_cases():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        index += 3\n        \n        count_X_0 = X.count('0')\n        count_X_1 = X.count('1')\n        count_Y_0 = Y.count('0')\n        count_Y_1 = Y.count('1')\n        \n        if count_X_0 != count_Y_0 or count_X_1 != count_Y_1:\n            results.append(\"No\")\n        else:\n            results.append(\"Yes\")\n    \n    for result in results:\n        print(result)\n\ncheck_cases()", "```python\ndef f(S, T, X):\n    for c in X:\n        if c == '0':\n            T += S\n        else:\n            T += T\n    return T\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        index += 3\n        \n        len_X = len(X)\n        len_Y = len(Y)\n        \n        if len_X == len_Y:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nsolve()"]}
{"task_id": "abc372_e", "codes": ["import heapq\nfrom sys import stdin\n\ndef main():\n    input = stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = [[] for _ in range(N + 1)]\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1])\n            v = int(data[index + 2])\n            index += 3\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n        elif query_type == 2:\n            v = int(data[index + 1])\n            k = int(data[index + 2])\n            index += 3\n            \n            if not adj_list[v]:\n                results.append(-1)\n                continue\n            \n            heap = []\n            for neighbor in adj_list[v]:\n                if len(heap) < k:\n                    heapq.heappush(heap, neighbor)\n                elif neighbor > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, neighbor)\n            \n            if len(heap) < k:\n                results.append(-1)\n            else:\n                results.append(heap[0])\n    \n    for result in results:\n        print(result)\n\nmain()", "i"], "passed": [false, false], "raw_code": ["```python\nimport heapq\nfrom sys import stdin\n\ndef main():\n    input = stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = [[] for _ in range(N + 1)]\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1])\n            v = int(data[index + 2])\n            index += 3\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n        elif query_type == 2:\n            v = int(data[index + 1])\n            k = int(data[index + 2])\n            index += 3\n            \n            if not adj_list[v]:\n                results.append(-1)\n                continue\n            \n            heap = []\n            for neighbor in adj_list[v]:\n                if len(heap) < k:\n                    heapq.heappush(heap, neighbor)\n                elif neighbor > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, neighbor)\n            \n            if len(heap) < k:\n                results.append(-1)\n            else:\n                results.append(heap[0])\n    \n    for result in results:\n        print(result)\n\nmain()\n```", "```python\nimport heapq\nfrom collections import defaultdict\n\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    graph = defaultdict(list)\n    results = []\n    \n    def add_edge(u, v):\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def kth_largest_vertex(v, k):\n        neighbors = set(graph[v])\n        if len(neighbors) < k:\n            return -1\n        max_heap = [-n for n in neighbors]\n        heapq.heapify(max_heap)\n        for _ in range(k):\n            result = -heapq.heappop(max_heap)\n        return result\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        if query_type == 1:\n            u = int(data[index]) - 1\n            v = int(data[index + 1]) - 1\n            index += 2\n            add_edge(u, v)\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            k = int(data[index + 1])\n            index += 2\n            results.append(str(kth_largest_vertex(v, k)))\n    \n    print('\\n'.join(results))\n\nprocess_queries()"]}
{"task_id": "3532", "codes": ["def minTimeToMarkAllNodes(edges):\n    from collections import defaultdict, deque\n    \n    n = len(edges) + 1\n    adj_list = defaultdict(list)\n    \n    # Build the adjacency list\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Initialize marking times\n    marking_times = [float('inf')] * n\n    \n    # Find leaf nodes and initialize their marking times\n    leaves = deque([node for node in range(n) if len(adj_list[node]) == 1])\n    \n    while leaves:\n        current_node = leaves.popleft()\n        \n        for neighbor in adj_list[current_node]:\n            if marking_times[neighbor] != float('inf'):\n                continue\n            \n            if current_node % 2 == 0:\n                marking_times[neighbor] = marking_times[current_node] + 2\n            else:\n                marking_times[neighbor] = marking_times[current_node] + 1\n            \n            adj_list[neighbor].remove(current_node)\n            \n            if len(adj_list[neighbor]) == 1:\n                leaves.append(neighbor)\n    \n    return marking_times", "def timeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    n = len(edges) + 1\n    adj_list = defaultdict(list)\n    times = [-1] * n\n    \n    # Build the adjacency list\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # BFS to determine marking times\n    queue = deque([0])\n    times[0] = 0\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in adj_list[node]:\n            if times[neighbor] == -1:\n                if node % 2 == 0:\n                    times[neighbor] = times[node] + 2\n                else:\n                    times[neighbor] = times[node] + 1\n                queue.append(neighbor)\n    \n    return times"], "passed": [false, false], "raw_code": ["```python\ndef minTimeToMarkAllNodes(edges):\n    from collections import defaultdict, deque\n    \n    n = len(edges) + 1\n    adj_list = defaultdict(list)\n    \n    # Build the adjacency list\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Initialize marking times\n    marking_times = [float('inf')] * n\n    \n    # Find leaf nodes and initialize their marking times\n    leaves = deque([node for node in range(n) if len(adj_list[node]) == 1])\n    \n    while leaves:\n        current_node = leaves.popleft()\n        \n        for neighbor in adj_list[current_node]:\n            if marking_times[neighbor] != float('inf'):\n                continue\n            \n            if current_node % 2 == 0:\n                marking_times[neighbor] = marking_times[current_node] + 2\n            else:\n                marking_times[neighbor] = marking_times[current_node] + 1\n            \n            adj_list[neighbor].remove(current_node)\n            \n            if len(adj_list[neighbor]) == 1:\n                leaves.append(neighbor)\n    \n    return marking_times\n```", "```python\ndef timeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    n = len(edges) + 1\n    adj_list = defaultdict(list)\n    times = [-1] * n\n    \n    # Build the adjacency list\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # BFS to determine marking times\n    queue = deque([0])\n    times[0] = 0\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in adj_list[node]:\n            if times[neighbor] == -1:\n                if node % 2 == 0:\n                    times[neighbor] = times[node] + 2\n                else:\n                    times[neighbor] = times[node] + 1\n                queue.append(neighbor)\n    \n    return times\n```"]}
{"task_id": "abc367_f", "codes": ["d", "d"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    queries = []\n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        queries.append((l_i, r_i, L_i, R_i))\n        index += 4\n    \n    for l_i, r_i, L_i, R_i in queries:\n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        if sorted(subseq_A) == sorted(subseq_B):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nif __name__ == \"__main__\":\n    main()", "```python\ndef can_rearrange_subsequence(N, Q, A, B, queries):\n    results = []\n    for l_i, r_i, L_i, R_i in queries:\n        subseq_A = A[l_i-1:r_i]\n        subseq_B = B[L_i-1:R_i]\n        if sorted(subseq_A) == sorted(subseq_B):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    return results\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nA = list(map(int, data[2:2+N]))\nB = list(map(int, data[2+N:2+N+N]))\n\nqueries = []\nfor i in range(Q):\n    l_i = int(data[2+N+N+2*i])\n    r_i = int(data[2+N+N+2*i+1])\n    L_i = int(data[2+N+N+2*i+2])\n    R_i = int(data[2+N+N+2*i+3])\n    queries.append((l_i, r_i, L_i, R_i))\n\n# Get results\nresults = can_rearrange_subsequence(N, Q, A, B, queries)\n\n# Print results\nfor result in results:\n    print(result)"]}
{"task_id": "3527", "codes": ["def alternatingGroups(colors, queries):\n    n = len(colors)\n    colors = colors + colors[:2]  # Extend the array to handle circular nature\n    ans = []\n\n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            is_valid = True\n            for j in range(1, size):\n                if colors[i + j] == colors[i + j - 1]:\n                    is_valid = False\n                    break\n            if is_valid and colors[i + size] == colors[i + size - 1]:\n                is_valid = False\n            if is_valid:\n                count += 1\n        return count\n\n    for query in queries:\n        if query[0] == 1:\n            ans.append(count_alternating_groups(query[1]))\n        elif query[0] == 2:\n            colors[query[1] + n] = query[2]\n\n    return ans", "def alternatingGroups(colors, queries):\n    n = len(colors)\n    colors = colors + colors[:2]  # Extend the list to handle circular nature\n    count = {i: 0 for i in range(3, n + 1)}  # Initialize count dictionary\n    result = []\n    \n    def count_alternating_groups(size):\n        nonlocal count\n        count[size] = 0\n        for i in range(n):\n            if i + size > 2 * n:\n                break\n            group = colors[i:i+size]\n            if all(group[j] != group[j+1] for j in range(size - 1)):\n                count[size] += 1\n    \n    def update_color(index, new_color):\n        nonlocal colors, count\n        old_color = colors[index]\n        colors[index] = new_color\n        \n        for size in range(3, n + 1):\n            if index < size - 1 or index >= 2 * n - size:\n                continue\n            \n            if old_color == colors[index - 1]:\n                count[size] -= 1\n            \n            if new_color == colors[index - 1]:\n                count[size] += 1\n            \n            if old_color == colors[(index + size) % (2 * n)]:\n                count[size] -= 1\n            \n            if new_color == colors[(index + size) % (2 * n)]:\n                count[size] += 1\n    \n    for query in queries:\n        if query[0] == 1:\n            result.append(count[query[1]])\n        elif query[0] == 2:\n            update_color(query[1], query[2])\n    \n    return result"], "passed": [false, false], "raw_code": ["def alternatingGroups(colors, queries):\n    n = len(colors)\n    colors = colors + colors[:2]  # Extend the array to handle circular nature\n    ans = []\n\n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            is_valid = True\n            for j in range(1, size):\n                if colors[i + j] == colors[i + j - 1]:\n                    is_valid = False\n                    break\n            if is_valid and colors[i + size] == colors[i + size - 1]:\n                is_valid = False\n            if is_valid:\n                count += 1\n        return count\n\n    for query in queries:\n        if query[0] == 1:\n            ans.append(count_alternating_groups(query[1]))\n        elif query[0] == 2:\n            colors[query[1] + n] = query[2]\n\n    return ans", "```python\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    colors = colors + colors[:2]  # Extend the list to handle circular nature\n    count = {i: 0 for i in range(3, n + 1)}  # Initialize count dictionary\n    result = []\n    \n    def count_alternating_groups(size):\n        nonlocal count\n        count[size] = 0\n        for i in range(n):\n            if i + size > 2 * n:\n                break\n            group = colors[i:i+size]\n            if all(group[j] != group[j+1] for j in range(size - 1)):\n                count[size] += 1\n    \n    def update_color(index, new_color):\n        nonlocal colors, count\n        old_color = colors[index]\n        colors[index] = new_color\n        \n        for size in range(3, n + 1):\n            if index < size - 1 or index >= 2 * n - size:\n                continue\n            \n            if old_color == colors[index - 1]:\n                count[size] -= 1\n            \n            if new_color == colors[index - 1]:\n                count[size] += 1\n            \n            if old_color == colors[(index + size) % (2 * n)]:\n                count[size] -= 1\n            \n            if new_color == colors[(index + size) % (2 * n)]:\n                count[size] += 1\n    \n    for query in queries:\n        if query[0] == 1:\n            result.append(count[query[1]])\n        elif query[0] == 2:\n            update_color(query[1], query[2])\n    \n    return result\n```"]}
{"task_id": "abc371_g", "codes": ["def find_smallest_array():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    A = list(map(int, data[N+1:]))\n    # Sort array A to get the lexicographically smallest array\n    A.sort()\n    # Apply the permutation P to the sorted array A\n    smallest_A = [A[P[i]-1] for i in range(N)]\n    # Print the result\n    print(' '.join(map(str, smallest_A)))\n\nfind_smallest_array()", "d"], "passed": [false, false], "raw_code": ["def find_smallest_array():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    A = list(map(int, data[N+1:]))\n    # Sort array A to get the lexicographically smallest array\n    A.sort()\n    # Apply the permutation P to the sorted array A\n    smallest_A = [A[P[i]-1] for i in range(N)]\n    # Print the result\n    print(' '.join(map(str, smallest_A)))\n\nfind_smallest_array()", "```python\ndef smallest_array(N, P, A):\n    # Create a list of tuples (value, original_index)\n    indexed_A = [(A[i], i) for i in range(N)]\n    \n    # Sort the list based on the value of A\n    sorted_A = sorted(indexed_A)\n    \n    # Create the result array using the sorted indices\n    result = [0] * N\n    for i, (_, original_index) in enumerate(sorted_A):\n        result[original_index] = i + 1\n    \n    # Print the result array\n    print(' '.join(map(str, result)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\nsmallest_array(N, P, A)"]}
{"task_id": "abc367_g", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    dp = [[0] * M for _ in range(N + 1)]\n    \n    for i in range(1, N + 1):\n        x = A[i - 1]\n        new_dp = [0] * M\n        \n        for j in range(M):\n            new_dp[j] = dp[i - 1][j]\n        \n        for j in range(M):\n            new_dp[(j + 1) % M] += (dp[i - 1][j] * x) % MOD\n        \n        for j in range(M):\n            new_dp[j] = pow(new_dp[j], K, MOD)\n        \n        dp = new_dp\n    \n    result = sum(dp[j] for j in range(0, M, M)) % MOD\n    print(result)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n\n    MOD = 998244353\n    dp = [0] * (1 << N)\n    dp[0] = 1\n\n    for i in range(N):\n        new_dp = [0] * (1 << N)\n        for j in range(1 << N):\n            x = dp[j]\n            y = A[i]\n            z = j | (1 << i)\n            new_dp[z] += x * (y ^ (z & (z - 1))) % MOD\n            new_dp[z] %= MOD\n        dp = new_dp\n\n    result = 0\n    for i in range(1, 1 << N):\n        if bin(i).count('1') % M == 0:\n            result += pow(dp[i], K, MOD)\n            result %= MOD\n\n    print(result)\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    dp = [[0] * M for _ in range(N + 1)]\n    \n    for i in range(1, N + 1):\n        x = A[i - 1]\n        new_dp = [0] * M\n        \n        for j in range(M):\n            new_dp[j] = dp[i - 1][j]\n        \n        for j in range(M):\n            new_dp[(j + 1) % M] += (dp[i - 1][j] * x) % MOD\n        \n        for j in range(M):\n            new_dp[j] = pow(new_dp[j], K, MOD)\n        \n        dp = new_dp\n    \n    result = sum(dp[j] for j in range(0, M, M)) % MOD\n    print(result)\n\nmain()\n```", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n\n    MOD = 998244353\n    dp = [0] * (1 << N)\n    dp[0] = 1\n\n    for i in range(N):\n        new_dp = [0] * (1 << N)\n        for j in range(1 << N):\n            x = dp[j]\n            y = A[i]\n            z = j | (1 << i)\n            new_dp[z] += x * (y ^ (z & (z - 1))) % MOD\n            new_dp[z] %= MOD\n        dp = new_dp\n\n    result = 0\n    for i in range(1, 1 << N):\n        if bin(i).count('1') % M == 0:\n            result += pow(dp[i], K, MOD)\n            result %= MOD\n\n    print(result)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc373_g", "codes": ["f", "import sys\nfrom collections import deque, defaultdict\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    N = int(data[index])\n    index += 1\n    \n    P = []\n    Q = []\n    \n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        P.append((A, B))\n        index += 2\n    \n    for _ in range(N):\n        C = int(data[index])\n        D = int(data[index + 1])\n        Q.append((C, D))\n        index += 2\n    \n    return N, P, Q\n\ndef slope(P, Q):\n    dx = Q[0] - P[0]\n    dy = Q[1] - P[1]\n    gcd = math.gcd(dx, dy)\n    return (dx // gcd, dy // gcd)\n\ndef topological_sort(N, graph):\n    indegree = [0] * N\n    queue = deque()\n    result = []\n    \n    for u in range(N):\n        for v in graph[u]:\n            indegree[v] += 1\n    \n    for u in range(N):\n        if indegree[u] == 0:\n            queue.append(u)\n    \n    while queue:\n        u = queue.popleft()\n        result.append(u)\n        \n        for v in graph[u]:\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                queue.append(v)\n    \n    return result if len(result) == N else None\n\ndef main():\n    N, P, Q = read_input()\n    graph = defaultdict(list)\n    \n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                s = slope(P[i], Q[j])\n                graph[i].append(j)\n    \n    result = topological_sort(N, graph)\n    \n    if result:\n        print(\" \".join(map(str, result)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\nfrom fractions import Fraction\nimport sys\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    A = []\n    B = []\n    C = []\n    D = []\n    index = 1\n    for i in range(N):\n        A.append(int(data[index + 2 * i]))\n        B.append(int(data[index + 2 * i + 1]))\n    for i in range(N):\n        C.append(int(data[N + 2 * i + 2]))\n        D.append(int(data[N + 2 * i + 3]))\n    return N, A, B, C, D\n\ndef find_permutation(N, A, B, C, D):\n    points = []\n    for i in range(N):\n        points.append((Fraction(C[i] - D[i], A[i] - C[i]), C[i], D[i], i + 1))\n    \n    points.sort()\n    \n    q_points = [(C[i], D[i]) for i in range(N)]\n    q_points.sort(key=lambda x: (x[0], -x[1]))\n    \n    permutation = []\n    for point in points:\n        for i, (x, y) in enumerate(q_points):\n            if (x, y) == (point[1], point[2]):\n                permutation.append(i + 1)\n                q_points.pop(i)\n                break\n    \n    return permutation\n\ndef main():\n    N, A, B, C, D = read_input()\n    result = find_permutation(N, A, B, C, D)\n    if result:\n        print(' '.join(map(str, result)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()", "```python\nimport sys\nfrom collections import deque, defaultdict\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    N = int(data[index])\n    index += 1\n    \n    P = []\n    Q = []\n    \n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        P.append((A, B))\n        index += 2\n    \n    for _ in range(N):\n        C = int(data[index])\n        D = int(data[index + 1])\n        Q.append((C, D))\n        index += 2\n    \n    return N, P, Q\n\ndef slope(P, Q):\n    dx = Q[0] - P[0]\n    dy = Q[1] - P[1]\n    gcd = math.gcd(dx, dy)\n    return (dx // gcd, dy // gcd)\n\ndef topological_sort(N, graph):\n    indegree = [0] * N\n    queue = deque()\n    result = []\n    \n    for u in range(N):\n        for v in graph[u]:\n            indegree[v] += 1\n    \n    for u in range(N):\n        if indegree[u] == 0:\n            queue.append(u)\n    \n    while queue:\n        u = queue.popleft()\n        result.append(u)\n        \n        for v in graph[u]:\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                queue.append(v)\n    \n    return result if len(result) == N else None\n\ndef main():\n    N, P, Q = read_input()\n    graph = defaultdict(list)\n    \n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                s = slope(P[i], Q[j])\n                graph[i].append(j)\n    \n    result = topological_sort(N, graph)\n    \n    if result:\n        print(\" \".join(map(str, result)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "arc182_d", "codes": ["def min_operations_to_transform(A, B, M):\n    n = len(A)\n    total_operations = 0\n    \n    for i in range(n):\n        diff = abs(B[i] - A[i])\n        min_ops = min(diff, M - diff)\n        total_operations += min_ops\n    \n    return total_operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:]))\n\n# Calculate and print the result\nresult = min_operations_to_transform(A, B, M)\nprint(result)", "def min_operations_to_transform(N, M, A, B):\n    # Calculate the difference between corresponding elements of A and B modulo M\n    diffs = [(B[i] - A[i]) % M for i in range(N)]\n    total_ops = 0\n\n    # Iterate through the differences and count the operations needed\n    for i in range(N):\n        if i > 0 and (diffs[i] == diffs[i-1] or (diffs[i] == 0 and (diffs[i-1] == 1 or diffs[i-1] == M-1))):\n            return -1\n        if i < N-1 and (diffs[i] == diffs[i+1] or (diffs[i] == 0 and (diffs[i+1] == 1 or diffs[i+1] == M-1))):\n            return -1\n        total_ops += abs(diffs[i])\n\n    return total_ops\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Print the result\nprint(min_operations_to_transform(N, M, A, B))"], "passed": [false, false], "raw_code": ["```python\ndef min_operations_to_transform(A, B, M):\n    n = len(A)\n    total_operations = 0\n    \n    for i in range(n):\n        diff = abs(B[i] - A[i])\n        min_ops = min(diff, M - diff)\n        total_operations += min_ops\n    \n    return total_operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:]))\n\n# Calculate and print the result\nresult = min_operations_to_transform(A, B, M)\nprint(result)\n```", "def min_operations_to_transform(N, M, A, B):\n    # Calculate the difference between corresponding elements of A and B modulo M\n    diffs = [(B[i] - A[i]) % M for i in range(N)]\n    total_ops = 0\n\n    # Iterate through the differences and count the operations needed\n    for i in range(N):\n        if i > 0 and (diffs[i] == diffs[i-1] or (diffs[i] == 0 and (diffs[i-1] == 1 or diffs[i-1] == M-1))):\n            return -1\n        if i < N-1 and (diffs[i] == diffs[i+1] or (diffs[i] == 0 and (diffs[i+1] == 1 or diffs[i+1] == M-1))):\n            return -1\n        total_ops += abs(diffs[i])\n\n    return total_ops\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Print the result\nprint(min_operations_to_transform(N, M, A, B))"]}
{"task_id": "abc372_f", "codes": ["d", "def main():\\n    import sys\\n    input = sys.stdin.read\\n    data = input().split()\\n    \\n    N = int(data[0])\\n    M = int(data[1])\\n    K = int(data[2])\\n    edges = []\\n    for i in range(M):\\n        x = int(data[3 + 2 * i]) - 1\\n        y = int(data[4 + 2 * i]) - 1\\n        edges.append((x, y))\\n    \\n    MOD = 998244353\\n    dp = [[0] * N for _ in range(K + 1)]\\n    dp[0][0] = 1\\n    \\n    for k in range(1, K + 1):\\n        for v in range(N):\\n            if v == 0:\\n                dp[k][v] = sum(dp[k-1][v]) % MOD\\n            else:\\n                dp[k][v] = sum(dp[k-1][u] for u, w in edges if w == v) % MOD\\n                if v != N - 1:\\n                    dp[k][v] += dp[k-1][(v + 1) % N]\\n                dp[k][v] %= MOD\\n    \\n    result = sum(dp[K]) % MOD\\n    print(result)\\n\\nif __name__ == '__main__':\\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    # Initialize dp table\n    MOD = 998244353\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    # Process additional edges\n    index = 3\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        index += 2\n        \n        for k in range(K):\n            dp[v][(k + 1) % (K + 1)] = (dp[v][(k + 1) % (K + 1)] + dp[u][k]) % MOD\n    \n    # Sum up the ways to be at any vertex after K moves\n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\nmain()", "def main():\\n    import sys\\n    input = sys.stdin.read\\n    data = input().split()\\n    \\n    N = int(data[0])\\n    M = int(data[1])\\n    K = int(data[2])\\n    edges = []\\n    for i in range(M):\\n        x = int(data[3 + 2 * i]) - 1\\n        y = int(data[4 + 2 * i]) - 1\\n        edges.append((x, y))\\n    \\n    MOD = 998244353\\n    dp = [[0] * N for _ in range(K + 1)]\\n    dp[0][0] = 1\\n    \\n    for k in range(1, K + 1):\\n        for v in range(N):\\n            if v == 0:\\n                dp[k][v] = sum(dp[k-1][v]) % MOD\\n            else:\\n                dp[k][v] = sum(dp[k-1][u] for u, w in edges if w == v) % MOD\\n                if v != N - 1:\\n                    dp[k][v] += dp[k-1][(v + 1) % N]\\n                dp[k][v] %= MOD\\n    \\n    result = sum(dp[K]) % MOD\\n    print(result)\\n\\nif __name__ == '__main__':\\n    main()"]}
{"task_id": "abc368_d", "codes": ["i", "i"], "passed": [false, false], "raw_code": ["```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef dfs(node, parent):\n    euler.append(node)\n    level[node] = level[parent] + 1\n    first_occurrence[node] = len(euler) - 1\n    for neighbor in adj_list[node]:\n        if neighbor != parent:\n            dfs(", "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nclass LCA:\n    def __init__(self, n, edges):\n        self.n = n\n        self.edges = edges\n        self.parent = [-1] * n\n        self.depth = [0] * n\n        self.log = self.n.bit_length()\n        self.dp = [[-1] * self.log for _ in range(n)]\n        \n        # Build parent array using DFS\n        def dfs(v, p):\n            self.parent[v] = p\n            self.depth[v] = self.depth[p] + 1\n            for u in self.edges[v]:\n                if u != p:\n                    dfs(u, v)\n        \n        dfs(0, -1)\n        \n        # Precompute LCA using binary lifting\n        for k in range(self.log - 1):\n            for v in range(self.n):\n                if self.dp[v][k] != -1:\n                    self.dp[v][k + 1] = self.dp[self.dp[v][k]][k]\n    \n    def lca(self, u, v):\n        if self.depth[u] > self.depth[v]:\n            u, v = v, u\n        \n        d = self.depth[v] - self.depth[u]\n        for k in range(self.log):\n            if d & (1 << k):\n                v = self.dp[v][k]\n        \n        if u == v:\n            return u\n        \n        for k in range(self.log - 1, -1, -1):\n            if self.dp[u][k] != self.dp[v][k]:\n                u = self.dp[u][k]\n                v = self.dp[v][k]\n        \n        return self.dp[u][0]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k = int(data[1])\n    edges = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a = int(data[2 + 2 * i]) - 1\n        b = int(data[3 + 2 * i]) - 1\n        edges[a].append(b)\n        edges[b].append(a)\n    \n    v = list(map(int, data[2 + 2 * (n - 1):])) - 1\n    \n    lca = LCA(n, edges)\n    min_vertices = float('inf')\n    \n    for i in range(k - 1):\n        min_vertices = min(min_vertices, lca.lca(v[i], v[i + 1]) + 1)\n    \n    print(min_vertices)\n\nmain()"]}
{"task_id": "3563", "codes": ["def maxScore(grid):\n    n = len(grid)\n    m = len(grid[0])\n    \n    # Sort each row in descending order\n    for i in range(n):\n        grid[i].sort(reverse=True)\n    \n    selected_values = set()\n    max_score = 0\n    \n    # Try to select the highest value from each column\n    for j in range(m):\n        for i in range(n):\n            if grid[i][j] not in selected_values:\n                selected_values.add(grid[i][j])\n                max_score += grid[i][j]\n                break\n    \n    return max_score", "def max_score(grid):\n    import numpy as np\n    from scipy.optimize import linear_sum_assignment\n    \n    # Transform the grid into a cost matrix\n    cost_matrix = -np.array(grid)\n    \n    # Find the minimum weight matching\n    row_ind, col_ind = linear_sum_assignment(cost_matrix)\n    \n    # Calculate the maximum score\n    max_score = -cost_matrix[row_ind, col_ind].sum()\n    \n    return max_score"], "passed": [false, false], "raw_code": ["```python\ndef maxScore(grid):\n    n = len(grid)\n    m = len(grid[0])\n    \n    # Sort each row in descending order\n    for i in range(n):\n        grid[i].sort(reverse=True)\n    \n    selected_values = set()\n    max_score = 0\n    \n    # Try to select the highest value from each column\n    for j in range(m):\n        for i in range(n):\n            if grid[i][j] not in selected_values:\n                selected_values.add(grid[i][j])\n                max_score += grid[i][j]\n                break\n    \n    return max_score\n```", "```python\ndef max_score(grid):\n    import numpy as np\n    from scipy.optimize import linear_sum_assignment\n    \n    # Transform the grid into a cost matrix\n    cost_matrix = -np.array(grid)\n    \n    # Find the minimum weight matching\n    row_ind, col_ind = linear_sum_assignment(cost_matrix)\n    \n    # Calculate the maximum score\n    max_score = -cost_matrix[row_ind, col_ind].sum()\n    \n    return max_score\n```"]}
{"task_id": "abc366_g", "codes": ["i", "import sys\nfrom collections import defaultdict\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n\n    edges = defaultdict(list)\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        edges[u].append(v)\n        edges[v].append(u)\n        index += 2\n\n    def dfs(node, parent, value, visited, assignments):\n        visited[node] = True\n        assignments[node] = value\n        xor_sum = value\n\n        for neighbor in edges[node]:\n            if neighbor == parent:\n                continue\n            if not visited[neighbor]:\n                xor_sum ^= dfs(neighbor, node, value, visited, assignments)\n            else:\n                xor_sum ^= assignments[neighbor]\n\n        if xor_sum != 0:\n            return -1\n\n        return xor_sum\n\n    visited = [False] * N\n    assignments = [-1] * N\n    result = dfs(0, -1, 1, visited, assignments)\n\n    if result == -1:\n        print('No')\n    else:\n        print('Yes')\n        print(' '.join(map(str, assignments)))\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["```python\nimport sys\nfrom sympy import Matrix\n\ndef solve_xor_graph():\n    # Read input\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    edges = []\n    index = 2\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        edges.append((u, v))\n        index += 2\n    \n    # Create adjacency matrix\n    A = Matrix(N, N, lambda i, j: 1 if (i, j) in edges or (j, i) in edges else 0)\n    \n    # Solve the system A * x = 0\n    null_space = A.nullspace()\n    \n    if null_space:\n        # Find a non-trivial solution\n        x = null_space[0]\n        # Ensure all values are in the range [1, 2^60 - 1]\n        x = [x[i] % (1 << 60) + 1 for i in range(N)]\n        print(\"Yes\")\n        print(\" \".join(map(str, x)))\n    else:\n        print(\"No\")\n\nsolve_xor_graph()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n\n    edges = defaultdict(list)\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        edges[u].append(v)\n        edges[v].append(u)\n        index += 2\n\n    def dfs(node, parent, value, visited, assignments):\n        visited[node] = True\n        assignments[node] = value\n        xor_sum = value\n\n        for neighbor in edges[node]:\n            if neighbor == parent:\n                continue\n            if not visited[neighbor]:\n                xor_sum ^= dfs(neighbor, node, value, visited, assignments)\n            else:\n                xor_sum ^= assignments[neighbor]\n\n        if xor_sum != 0:\n            return -1\n\n        return xor_sum\n\n    visited = [False] * N\n    assignments = [-1] * N\n    result = dfs(0, -1, 1, visited, assignments)\n\n    if result == -1:\n        print('No')\n    else:\n        print('Yes')\n        print(' '.join(map(str, assignments)))\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc369_g", "codes": ["i", "import sys\nfrom collections import defaultdict, deque\n\ndef find_path(graph, start, end):\n    queue = deque([start])\n    visited = set([start])\n    parent = {start: None}\n    \n    while queue:\n        node = queue.popleft()\n        if node == end:\n            break\n        for neighbor, distance in graph[node].items():\n            if neighbor not in visited:\n                visited.add(neighbor)\n                parent[neighbor] = node\n                queue.append(neighbor)\n    \n    path = []\n    while end is not None:\n        path.append(end)\n        end = parent[end]\n    path.reverse()\n    return path\n\ndef min_max_score(N, edges, K):\n    graph = defaultdict(dict)\n    for U, V, L in edges:\n        graph[U][V] = L\n        graph[V][U] = L\n    \n    scores = []\n    for k in range(1, N + 1):\n        min_score = float('inf')\n        for comb in combinations(range(1, N + 1), k):\n            total_length = 0\n            current_node = 1\n            for vertex in comb:\n                path = find_path(graph, current_node, vertex)\n                total_length += sum(graph[path[i]][path[i + 1]] for i in range(len(path) - 1))\n                current_node = vertex\n            path = find_path(graph, current_node, 1)\n            total_length += sum(graph[path[i]][path[i + 1]] for i in range(len(path) - 1))\n            min_score = min(min_score, total_length)\n        scores.append(min_score)\n    \n    return scores\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    edges = []\n    idx = 1\n    for i in range(N - 1):\n        U = int(data[idx])\n        V = int(data[idx + 1])\n        L = int(data[idx + 2])\n        edges.append((U, V, L))\n        idx += 3\n    \n    scores = min_max_score(N, edges, N)\n    \n    for score in scores:\n        print(score)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\nimport sys\n\ndef floyd_warshall(n, edges):\n    dist = [[float('inf')] * n for _ in range(n)]\n    for u, v, l in edges:\n        dist[u-1][v-1] = dist[v-1][u-1] = l\n    \n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    \n    return dist\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    edges = []\n    index = 1\n    for _ in range(n-1):\n        u = int(data[index])\n        v = int(data[index+1])\n        l = int(data[index+2])\n        edges.append((u, v, l))\n        index += 3\n    \n    dist = floyd_warshall(n, edges)\n    \n    results = []\n    for k in range(1, n+1):\n        max_distance = float('-inf')\n        for comb in combinations(range(n), k):\n            current_distance = 0\n            for i in range(k):\n                for j in range(i+1, k):\n                    current_distance += dist[list(comb)[i]][list(comb)[j]]\n            max_distance = max(max_distance, current_distance)\n        results.append(2 * dist[0][0] - max_distance)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef find_path(graph, start, end):\n    queue = deque([start])\n    visited = set([start])\n    parent = {start: None}\n    \n    while queue:\n        node = queue.popleft()\n        if node == end:\n            break\n        for neighbor, distance in graph[node].items():\n            if neighbor not in visited:\n                visited.add(neighbor)\n                parent[neighbor] = node\n                queue.append(neighbor)\n    \n    path = []\n    while end is not None:\n        path.append(end)\n        end = parent[end]\n    path.reverse()\n    return path\n\ndef min_max_score(N, edges, K):\n    graph = defaultdict(dict)\n    for U, V, L in edges:\n        graph[U][V] = L\n        graph[V][U] = L\n    \n    scores = []\n    for k in range(1, N + 1):\n        min_score = float('inf')\n        for comb in combinations(range(1, N + 1), k):\n            total_length = 0\n            current_node = 1\n            for vertex in comb:\n                path = find_path(graph, current_node, vertex)\n                total_length += sum(graph[path[i]][path[i + 1]] for i in range(len(path) - 1))\n                current_node = vertex\n            path = find_path(graph, current_node, 1)\n            total_length += sum(graph[path[i]][path[i + 1]] for i in range(len(path) - 1))\n            min_score = min(min_score, total_length)\n        scores.append(min_score)\n    \n    return scores\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    edges = []\n    idx = 1\n    for i in range(N - 1):\n        U = int(data[idx])\n        V = int(data[idx + 1])\n        L = int(data[idx + 2])\n        edges.append((U, V, L))\n        idx += 3\n    \n    scores = min_max_score(N, edges, N)\n    \n    for score in scores:\n        print(score)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc368_e", "codes": ["def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    X1 = int(data[index + 2])\n    index += 3\n    trains = []\n    for _ in range(M):\n        A = int(data[index])\n        B = int(data[index + 1])\n        S = int(data[index + 2])\n        T = int(data[index + 3])\n        trains.append((A, B, S, T))\n        index += 4\n    trains.sort(key=lambda x: x[3])\n    delays = [0] * M\n    delays[0] = X1 - trains[0][3]\n    for i in range(1, M):\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        current_A, current_B, current_S, current_T = trains[i]\n        if current_B == prev_A and current_S <= prev_T:\n            delays[i] = max(delays[i], prev_T - current_S + delays[i - 1])\n    print(' '.join(map(str, delays[1:])))\nsolve()", "def solve(N, M, X1, trains):\n    # Sort trains based on their arrival times\n    trains.sort(key=lambda x: x[3])\n\n    # Initialize delays with the given X1\n    delays = [X1] * M\n\n    # Iterate through the sorted trains and calculate delays\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        for j in range(i - 1, -1, -1):\n            A_j, B_j, S_j, T_j = trains[j]\n            if B_i == A_j and T_i <= S_j:\n                delays[i] = max(delays[i], S_j - T_i)\n                break\n\n    # Print the result\n    print(' '.join(map(str, delays[1:])))\n\n# Read input\nimport sys\ninput = sys.stdin.read\nN, M, X1 = map(int, input().split())\ntrains = [tuple(map(int, input().split())) for _ in range(M)]\n\n# Solve and print the result\ndef main():\n    solve(N, M, X1, trains)\n\nmain()"], "passed": [false, false], "raw_code": ["def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    X1 = int(data[index + 2])\n    index += 3\n    trains = []\n    for _ in range(M):\n        A = int(data[index])\n        B = int(data[index + 1])\n        S = int(data[index + 2])\n        T = int(data[index + 3])\n        trains.append((A, B, S, T))\n        index += 4\n    trains.sort(key=lambda x: x[3])\n    delays = [0] * M\n    delays[0] = X1 - trains[0][3]\n    for i in range(1, M):\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        current_A, current_B, current_S, current_T = trains[i]\n        if current_B == prev_A and current_S <= prev_T:\n            delays[i] = max(delays[i], prev_T - current_S + delays[i - 1])\n    print(' '.join(map(str, delays[1:])))\nsolve()", "def solve(N, M, X1, trains):\n    # Sort trains based on their arrival times\n    trains.sort(key=lambda x: x[3])\n\n    # Initialize delays with the given X1\n    delays = [X1] * M\n\n    # Iterate through the sorted trains and calculate delays\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        for j in range(i - 1, -1, -1):\n            A_j, B_j, S_j, T_j = trains[j]\n            if B_i == A_j and T_i <= S_j:\n                delays[i] = max(delays[i], S_j - T_i)\n                break\n\n    # Print the result\n    print(' '.join(map(str, delays[1:])))\n\n# Read input\nimport sys\ninput = sys.stdin.read\nN, M, X1 = map(int, input().split())\ntrains = [tuple(map(int, input().split())) for _ in range(M)]\n\n# Solve and print the result\ndef main():\n    solve(N, M, X1, trains)\n\nmain()"]}
{"task_id": "abc368_g", "codes": ["import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self, n: int):\n        self.n = n\n        self.tree = [0] * (4 * n)\n        self.lazy = [0] * (4 * n)\n\n    def push(self, k: int):\n        if self.lazy[k] == 0:\n            return\n        self.tree[2*k] += self.lazy[k]\n        self.tree[2*k+1] += self.lazy[k]\n        self.lazy[2*k] += self.lazy[k]\n        self.lazy[2*k+1] += self.lazy[k]\n        self.lazy[k] = 0\n\n    def update_range(self, a: int, b: int, x: int, k: int = 1, l: int = 0, r: int = None):\n        if r is None:\n            r = self.n - 1\n        if b < l or r < a:\n            return\n        if a <= l and r <= b:\n            self.lazy[k] += x\n            self.push(k)\n            return\n        self.push(k)\n        m = (l + r) // 2\n        self.update_range(a, b, x, 2*k, l, m)\n        self.update_range(a, b, x, 2*k+1, m+1, r)\n        self.tree[k] = max(self.tree[2*k], self.tree[2*k+1])\n\n    def query_range(self, a: int, b: int, k: int = 1, l: int = 0, r: int = None) -> int:\n        if r is None:\n            r = self.n - 1\n        if b < l or r < a:\n            return 0\n        if a <= l and r <= b:\n            return self.tree[k]\n        self.push(k)\n        m = (l + r) // 2\n        left = self.query_range(a, b, 2*k, l, m)\n        right = self.query_range(a, b, 2*k+1, m+1, r)\n        return max(left, right)\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = data[2*N+2:]\n\n    seg_tree = SegmentTree(N)\n\n    for i in range(Q):\n        query_type = int(queries[i*3])\n        if query_type == 1:\n            idx = int(queries[i*3+1]) - 1\n            val = int(queries[i*3+2])\n            seg_tree.update_range(idx, idx, val)\n        elif query_type == 2:\n            idx = int(queries[i*3+1]) - 1\n            val = int(queries[i*3+2])\n            seg_tree.update_range(idx, idx, val)\n        elif query_type == 3:\n            l = int(queries[i*3+1]) - 1\n            r = int(queries[i*3+2]) - 1\n            v = 0\n            for j in range(l, r+1):\n                v = max(v + A[j], v * B[j])\n            print(v)\n\nif __name__ == '__main__':\n    main()", "def max_value(A, B, queries):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    idx = 2*N+2\n    \n    def apply_operations(l, r, op_A, op_B):\n        v = 0\n        for i in range(l, r+1):\n            if op_A[i] == '+':\n                v += A[i]\n            elif op_A[i] == '*':\n                v *= B[i]\n        return v\n    \n    op_A = ['+'] * N\n    op_B = ['*'] * N\n    \n    results = []\n    for _ in range(Q):\n        query_type = int(data[idx])\n        idx += 1\n        \n        if query_type == 1:\n            i = int(data[idx]) - 1\n            x = int(data[idx+1])\n            idx += 2\n            A[i] = x\n            op_A[i] = '+' if x > 0 else '-'\n        \n        elif query_type == 2:\n            i = int(data[idx]) - 1\n            x = int(data[idx+1])\n            idx += 2\n            B[i] = x\n            op_B[i] = '*' if x > 1 else '/'\n        \n        elif query_type == 3:\n            l = int(data[idx]) - 1\n            r = int(data[idx+1])\n            idx += 2\n            result = apply_operations(l, r, op_A, op_B)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the function with stdin\nmax_value(None, None, None)"], "passed": [false, false], "raw_code": ["import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self, n: int):\n        self.n = n\n        self.tree = [0] * (4 * n)\n        self.lazy = [0] * (4 * n)\n\n    def push(self, k: int):\n        if self.lazy[k] == 0:\n            return\n        self.tree[2*k] += self.lazy[k]\n        self.tree[2*k+1] += self.lazy[k]\n        self.lazy[2*k] += self.lazy[k]\n        self.lazy[2*k+1] += self.lazy[k]\n        self.lazy[k] = 0\n\n    def update_range(self, a: int, b: int, x: int, k: int = 1, l: int = 0, r: int = None):\n        if r is None:\n            r = self.n - 1\n        if b < l or r < a:\n            return\n        if a <= l and r <= b:\n            self.lazy[k] += x\n            self.push(k)\n            return\n        self.push(k)\n        m = (l + r) // 2\n        self.update_range(a, b, x, 2*k, l, m)\n        self.update_range(a, b, x, 2*k+1, m+1, r)\n        self.tree[k] = max(self.tree[2*k], self.tree[2*k+1])\n\n    def query_range(self, a: int, b: int, k: int = 1, l: int = 0, r: int = None) -> int:\n        if r is None:\n            r = self.n - 1\n        if b < l or r < a:\n            return 0\n        if a <= l and r <= b:\n            return self.tree[k]\n        self.push(k)\n        m = (l + r) // 2\n        left = self.query_range(a, b, 2*k, l, m)\n        right = self.query_range(a, b, 2*k+1, m+1, r)\n        return max(left, right)\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = data[2*N+2:]\n\n    seg_tree = SegmentTree(N)\n\n    for i in range(Q):\n        query_type = int(queries[i*3])\n        if query_type == 1:\n            idx = int(queries[i*3+1]) - 1\n            val = int(queries[i*3+2])\n            seg_tree.update_range(idx, idx, val)\n        elif query_type == 2:\n            idx = int(queries[i*3+1]) - 1\n            val = int(queries[i*3+2])\n            seg_tree.update_range(idx, idx, val)\n        elif query_type == 3:\n            l = int(queries[i*3+1]) - 1\n            r = int(queries[i*3+2]) - 1\n            v = 0\n            for j in range(l, r+1):\n                v = max(v + A[j], v * B[j])\n            print(v)\n\nif __name__ == '__main__':\n    main()", "```python\ndef max_value(A, B, queries):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    idx = 2*N+2\n    \n    def apply_operations(l, r, op_A, op_B):\n        v = 0\n        for i in range(l, r+1):\n            if op_A[i] == '+':\n                v += A[i]\n            elif op_A[i] == '*':\n                v *= B[i]\n        return v\n    \n    op_A = ['+'] * N\n    op_B = ['*'] * N\n    \n    results = []\n    for _ in range(Q):\n        query_type = int(data[idx])\n        idx += 1\n        \n        if query_type == 1:\n            i = int(data[idx]) - 1\n            x = int(data[idx+1])\n            idx += 2\n            A[i] = x\n            op_A[i] = '+' if x > 0 else '-'\n        \n        elif query_type == 2:\n            i = int(data[idx]) - 1\n            x = int(data[idx+1])\n            idx += 2\n            B[i] = x\n            op_B[i] = '*' if x > 1 else '/'\n        \n        elif query_type == 3:\n            l = int(data[idx]) - 1\n            r = int(data[idx+1])\n            idx += 2\n            result = apply_operations(l, r, op_A, op_B)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the function with stdin\nmax_value(None, None, None)\n```"]}
{"task_id": "abc369_e", "codes": ["i", "import sys\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n\n    INF = float('inf')\n    dp = [[INF] * (1 << M) for _ in range(N + 1)]\n    dp[1][0] = 0\n\n    pq = [(0, 1, 0)]\n    while pq:\n        time, node, mask = heappop(pq)\n        if dp[node][mask] < time:\n            continue\n        for neighbor, weight in graph[node]:\n            new_mask = mask | (1 << (bridges.index((min(node, neighbor), max(node, neighbor))) if (node, neighbor) in bridges or (neighbor, node) in bridges else -1))\n            new_time = time + weight\n            if dp[neighbor][new_mask] > new_time:\n                dp[neighbor][new_mask] = new_time\n                heappush(pq, (new_time, neighbor, new_mask))\n\n    results = []\n    for K, query in enumerate(queries, start=1):\n        result = INF\n        for mask in range(1 << M):\n            if sum(mask & (1 << i) != 0 for i in range(M) if bridges[i] in query) == len(query):\n                result = min(result, dp[N][mask])\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    bridges = []\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        bridges.append((u, v, t))\n\n    Q = int(data[index])\n    index += 1\n    queries = []\n    for _ in range(Q):\n        K = int(data[index])\n        index += 1\n        query = [int(data[index]) for _ in range(K)]\n        index += K\n        queries.append(query)\n\n    min_time_to_travel(N, M, bridges, Q, queries)"], "passed": [false, false], "raw_code": ["```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nindex = 0\nN = int(data[index])\nM = int(data[index + 1])\nindex += 2\n\nedges = []\nfor _ in range(M):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    t = int(data[index + 2])\n    index += 3\n    edges.append((u, v, t))\n\nQ = int(data[index])\nindex += 1\n\nqueries = []\nfor _ in range(Q):\n    K = int(data[index])\n    index += 1\n    B = list(map(int, data[index:index + K]))\n    queries.append(B)\n    index += K\n\n# Function to find the minimum time using Floyd-Warshall algorithm\ndef floyd_warshall(n, edges):\n    dist = [[float('inf')] * n for _ in range(n)]\n    for u, v, t in edges:\n        dist[u][v] = min(dist[u][v], t)\n        dist[v][u] = min(dist[v][u], t)\n    \n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    \n    return dist\n\n# Precompute the shortest paths\ndist = floyd_warshall(N, edges)\n\n# Function to find the minimum time for a given query\ndef min_time_for_query(query):\n    mask = (1 << len(query)) - 1\n    dp = [[float('inf')] * N for _ in range(1 << len(query))]\n    dp[0][0] = 0\n    \n    for s in range(1 << len(query)):\n        for i in range(len(query)):\n            if s & (1 << i):\n                b = query[i]\n                u, v, t = edges[b - 1]\n                for j in range(N):\n                    dp[s][u] = min(dp[s][u], dp[s ^ (1 << i)][j] + dist[j][u] + t)\n                    dp[s][v] = min(dp[s][v], dp[s ^ (1 << i)][j] + dist[j][v] + t)\n    \n    return min(dp[(1 << len(query)) - 1])\n\n# Process each query and print the result\nresults = [min_time_for_query(query) for query in queries]\nfor result in results:\n    print(result)", "import sys\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n\n    INF = float('inf')\n    dp = [[INF] * (1 << M) for _ in range(N + 1)]\n    dp[1][0] = 0\n\n    pq = [(0, 1, 0)]\n    while pq:\n        time, node, mask = heappop(pq)\n        if dp[node][mask] < time:\n            continue\n        for neighbor, weight in graph[node]:\n            new_mask = mask | (1 << (bridges.index((min(node, neighbor), max(node, neighbor))) if (node, neighbor) in bridges or (neighbor, node) in bridges else -1))\n            new_time = time + weight\n            if dp[neighbor][new_mask] > new_time:\n                dp[neighbor][new_mask] = new_time\n                heappush(pq, (new_time, neighbor, new_mask))\n\n    results = []\n    for K, query in enumerate(queries, start=1):\n        result = INF\n        for mask in range(1 << M):\n            if sum(mask & (1 << i) != 0 for i in range(M) if bridges[i] in query) == len(query):\n                result = min(result, dp[N][mask])\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    bridges = []\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        bridges.append((u, v, t))\n\n    Q = int(data[index])\n    index += 1\n    queries = []\n    for _ in range(Q):\n        K = int(data[index])\n        index += 1\n        query = [int(data[index]) for _ in range(K)]\n        index += K\n        queries.append(query)\n\n    min_time_to_travel(N, M, bridges, Q, queries)"]}
{"task_id": "abc371_f", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index+N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    tasks = []\n    for _ in range(Q):\n        T = int(data[index])\n        index += 1\n        G = int(data[index])\n        index += 1\n        tasks.append((T, G))\n\n    result = 0\n    for T, G in tasks:\n        distance = abs(X[T-1] - G)\n        result += distance\n\n    print(result)\n\nif __name__ == '__main__':\n    main()", "def min_movements(N, X, Q, tasks):\n    # Sort tasks based on the target position\n    tasks.sort(key=lambda x: x[1])\n    # Initialize variables\n    movements = 0\n    last_position = [0] * (N + 1)\n    # Process each task\n    for T, G in tasks:\n        current_position = X[T - 1]\n        # Calculate the difference between current and target position\n        diff = abs(current_position - G)\n        # Check if there is a person already at the target position\n        if last_position[G] == 0:\n            # Move the current person to the target position\n            movements += diff\n            last_position[current_position] = 0\n            last_position[G] = T\n        else:\n            # Use the person at the target position to help\n            helper_person = last_position[G]\n            helper_position = X[helper_person - 1]\n            # Calculate the distance to the helper person's position\n            helper_diff = abs(helper_position - current_position)\n            # Move the current person to the helper person's position\n            movements += helper_diff\n            # Move the helper person to the target position\n            movements += abs(helper_position - G)\n            # Update the last position of the helper person\n            last_position[current_position] = 0\n            last_position[G] = T\n    return movements\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nx = list(map(int, data[1:n+1]))\nm = int(data[n+1])\ntasks = [(int(data[n+2+i*2]), int(data[n+3+i*2])) for i in range(m)]\n\n# Calculate and print the result\nresult = min_movements(n, x, m, tasks)\nprint(result)"], "passed": [false, false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index+N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    tasks = []\n    for _ in range(Q):\n        T = int(data[index])\n        index += 1\n        G = int(data[index])\n        index += 1\n        tasks.append((T, G))\n\n    result = 0\n    for T, G in tasks:\n        distance = abs(X[T-1] - G)\n        result += distance\n\n    print(result)\n\nif __name__ == '__main__':\n    main()", "def min_movements(N, X, Q, tasks):\n    # Sort tasks based on the target position\n    tasks.sort(key=lambda x: x[1])\n    # Initialize variables\n    movements = 0\n    last_position = [0] * (N + 1)\n    # Process each task\n    for T, G in tasks:\n        current_position = X[T - 1]\n        # Calculate the difference between current and target position\n        diff = abs(current_position - G)\n        # Check if there is a person already at the target position\n        if last_position[G] == 0:\n            # Move the current person to the target position\n            movements += diff\n            last_position[current_position] = 0\n            last_position[G] = T\n        else:\n            # Use the person at the target position to help\n            helper_person = last_position[G]\n            helper_position = X[helper_person - 1]\n            # Calculate the distance to the helper person's position\n            helper_diff = abs(helper_position - current_position)\n            # Move the current person to the helper person's position\n            movements += helper_diff\n            # Move the helper person to the target position\n            movements += abs(helper_position - G)\n            # Update the last position of the helper person\n            last_position[current_position] = 0\n            last_position[G] = T\n    return movements\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nx = list(map(int, data[1:n+1]))\nm = int(data[n+1])\ntasks = [(int(data[n+2+i*2]), int(data[n+3+i*2])) for i in range(m)]\n\n# Calculate and print the result\nresult = min_movements(n, x, m, tasks)\nprint(result)"]}
{"task_id": "arc183_b", "codes": ["def can_make_identical(T):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = list(map(int, data[index + 2:index + 2 + N]))\n        B = list(map(int, data[index + 2 + N:index + 2 + 2 * N]))\n        index += 2 + 2 * N\n        \n        def get_frequency_distribution(seq, window_size):\n            freqs = [{} for _ in range(window_size)]\n            current_freq = {}\n            for i, num in enumerate(seq):\n                if i >= window_size:\n                    for key, val in current_freq.items():\n                        if val == 0:\n                            del current_freq[key]\n                        else:\n                            current_freq[key] -= 1\n                if num not in current_freq:\n                    current_freq[num] = 0\n                current_freq[num] += 1\n                freqs[i % window_size][num] = current_freq[num]\n            return freqs\n        \n        freq_A = get_frequency_distribution(A, K + 1)\n        freq_B = get_frequency_distribution(B, K + 1)\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\n# Call the function with the number of test cases\ncan_make_identical(125000)", "def can_transform_to_B():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        \n        A = list(map(int, data[index:index + N]))\n        B = list(map(int, data[index + N:index + 2 * N]))\n        index += 2 * N\n        \n        freq_A = {}\n        freq_B = {}\n        \n        for num in A:\n            if num in freq_A:\n                freq_A[num] += 1\n            else:\n                freq_A[num] = 1\n        \n        for num in B:\n            if num in freq_B:\n                freq_B[num] += 1\n            else:\n                freq_B[num] = 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_transform_to_B()"], "passed": [false, false], "raw_code": ["```python\ndef can_make_identical(T):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = list(map(int, data[index + 2:index + 2 + N]))\n        B = list(map(int, data[index + 2 + N:index + 2 + 2 * N]))\n        index += 2 + 2 * N\n        \n        def get_frequency_distribution(seq, window_size):\n            freqs = [{} for _ in range(window_size)]\n            current_freq = {}\n            for i, num in enumerate(seq):\n                if i >= window_size:\n                    for key, val in current_freq.items():\n                        if val == 0:\n                            del current_freq[key]\n                        else:\n                            current_freq[key] -= 1\n                if num not in current_freq:\n                    current_freq[num] = 0\n                current_freq[num] += 1\n                freqs[i % window_size][num] = current_freq[num]\n            return freqs\n        \n        freq_A = get_frequency_distribution(A, K + 1)\n        freq_B = get_frequency_distribution(B, K + 1)\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\n# Call the function with the number of test cases\ncan_make_identical(125000)\n```", "```python\ndef can_transform_to_B():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        \n        A = list(map(int, data[index:index + N]))\n        B = list(map(int, data[index + N:index + 2 * N]))\n        index += 2 * N\n        \n        freq_A = {}\n        freq_B = {}\n        \n        for num in A:\n            if num in freq_A:\n                freq_A[num] += 1\n            else:\n                freq_A[num] = 1\n        \n        for num in B:\n            if num in freq_B:\n                freq_B[num] += 1\n            else:\n                freq_B[num] = 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_transform_to_B()\n```"]}
{"task_id": "abc370_f", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Initialize DP table\n    dp = [[float('-inf')] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 0\n\n    # Fill DP table\n    for i in range(1, N + 1):\n        prefix_sum = [0]\n        current_sum = 0\n        for j in range(i):\n            current_sum += A[j]\n            prefix_sum.append(current_sum)\n\n        for j in range(1, min(K, i) + 1):\n            for k in range(j - 1, i):\n                dp[i][j] = max(dp[i][j], min(dp[k][j - 1], prefix_sum[-1] - prefix_sum[k]))\n\n    # Find the maximum possible minimum weight\n    max_min_weight = dp[N][K]\n\n    # Count the number of cut lines that are never cut\n    cut_lines_never_cut = 0\n    for i in range(N - 1):\n        if dp[i + 1][K] == dp[i][K]:\n            cut_lines_never_cut += 1\n\n    print(max_min_weight, cut_lines_never_cut)\n\nif __name__ == '__main__':\n    main()", "def max_min_mass(N, K, A):\n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Binary search for the maximum possible min_mass\n    left, right = max(A), prefix_sum[-1] // K\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_divide(N, K, A, prefix_sum, mid):\n            left = mid\n        else:\n            right = mid - 1\n    \n    # Count uncut cut lines\n    uncut_cut_lines = 0\n    current_mass = 0\n    for i in range(1, N + 1):\n        current_mass += A[i - 1]\n        if current_mass >= left:\n            uncut_cut_lines += 1\n            current_mass = 0\n    \n    return left, uncut_cut_lines\n\ndef can_divide(N, K, A, prefix_sum, min_mass):\n    current_mass = 0\n    num_people = 1\n    for i in range(1, N + 1):\n        current_mass += A"], "passed": [false, false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Initialize DP table\n    dp = [[float('-inf')] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 0\n\n    # Fill DP table\n    for i in range(1, N + 1):\n        prefix_sum = [0]\n        current_sum = 0\n        for j in range(i):\n            current_sum += A[j]\n            prefix_sum.append(current_sum)\n\n        for j in range(1, min(K, i) + 1):\n            for k in range(j - 1, i):\n                dp[i][j] = max(dp[i][j], min(dp[k][j - 1], prefix_sum[-1] - prefix_sum[k]))\n\n    # Find the maximum possible minimum weight\n    max_min_weight = dp[N][K]\n\n    # Count the number of cut lines that are never cut\n    cut_lines_never_cut = 0\n    for i in range(N - 1):\n        if dp[i + 1][K] == dp[i][K]:\n            cut_lines_never_cut += 1\n\n    print(max_min_weight, cut_lines_never_cut)\n\nif __name__ == '__main__':\n    main()", "def max_min_mass(N, K, A):\n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Binary search for the maximum possible min_mass\n    left, right = max(A), prefix_sum[-1] // K\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_divide(N, K, A, prefix_sum, mid):\n            left = mid\n        else:\n            right = mid - 1\n    \n    # Count uncut cut lines\n    uncut_cut_lines = 0\n    current_mass = 0\n    for i in range(1, N + 1):\n        current_mass += A[i - 1]\n        if current_mass >= left:\n            uncut_cut_lines += 1\n            current_mass = 0\n    \n    return left, uncut_cut_lines\n\ndef can_divide(N, K, A, prefix_sum, min_mass):\n    current_mass = 0\n    num_people = 1\n    for i in range(1, N + 1):\n        current_mass += A"]}
{"task_id": "arc182_e", "codes": ["d", "d"], "passed": [false, false], "raw_code": ["```python\ndef calculate_min_mod_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    min_mod_sum = 0\n    for k in range(K):\n        min_val = float('inf')\n        for A_i in A:\n            mod_val = (C * k + A_i) % M\n            if mod_val < min_val:\n                min_val = mod_val\n        min_mod_sum += min_val\n    \n    print(min_mod_sum)\n\ncalculate_min_mod_sum()", "```python\ndef calculate_min_mod_sum(N, M, C, K, A):\n    # Step 1: Precompute the results for one period of M\n    min_values = [float('inf')] * M\n    for i in range(N):\n        for k in range(M):\n            mod_val = (C * k + A[i]) % M\n            if mod_val < min_values[k]:\n                min_values[k] = mod_val\n    \n    # Step 2: Calculate the sum for the first M values of k\n    total_sum = sum(min_values)\n    \n    # Step 3: Extend the sum for the remaining K - M values of k\n    full_periods = K // M\n    remainder = K % M\n    total_sum += full_periods * sum(min_values[:remainder])\n    \n    return total_sum\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nC = int(data[2])\nK = int(data[3])\nA = list(map(int, data[4:]))\n\n# Calculate and print the result\nresult = calculate_min_mod_sum(N, M, C, K, A)\nprint(result)"]}
{"task_id": "3552", "codes": ["def largest_k_palindrome(n, k):\n    if n == 1:\n        return str(9 if 9 % k == 0 else 8)\n    \n    half_len = (n + 1) // 2\n    half = '9' * half_len\n    \n    while True:\n        half = str(int(half) - 1)\n        if int(half) % k == 0:\n            half = half.zfill(half_len)\n            if n % 2 == 1:\n                return half + half[:-1][::-1]\n            else:\n                return half + half[::-1]", "d"], "passed": [false, false], "raw_code": ["```python\ndef largest_k_palindrome(n, k):\n    if n == 1:\n        return str(9 if 9 % k == 0 else 8)\n    \n    half_len = (n + 1) // 2\n    half = '9' * half_len\n    \n    while True:\n        half = str(int(half) - 1)\n        if int(half) % k == 0:\n            half = half.zfill(half_len)\n            if n % 2 == 1:\n                return half + half[:-1][::-1]\n            else:\n                return half + half[::-1]\n```", "```python\ndef largest_k_palindrome(n: int, k: int) -> str:\n    def is_palindrome(num: str) -> bool:\n        return num == num[::-1]\n    \n    def largest_palindrome_with_prefix(prefix: str) -> str:\n        half_len = len(prefix)\n        left = prefix[:half_len]\n        right = prefix[::-1]\n        if half_len % 2 == 1:\n            middle = str(k - k % 10)  # Ensure divisibility by k\n        else:\n            middle = ''\n        return left + middle + right\n    \n    start = '9' * ((n + 1) // 2)\n    while True:\n        candidate = largest_palindrome_with_prefix(start)\n        if len(candidate) > n:\n            start = str(int(start) - 1)\n            continue\n        if is_palindrome(candidate) and int(candidate) % k == 0:\n            return candidate\n        start = str(int(start) - 1)"]}
{"task_id": "3531", "codes": ["def minimum_damage(power, damage, health):\n    n = len(damage)\n    # Calculate the number of seconds required to defeat each enemy\n    seconds = [health[i] // damage[i] + (1 if health[i] % damage[i] != 0 else 0) for i in range(n)]\n    # Sort enemies based on the number of seconds required to defeat them\n    sorted_indices = sorted(range(n), key=lambda i: seconds[i])\n    # Simulate the attacks\n    total_damage = 0\n    for i in sorted_indices:\n        total_damage += power * seconds[i]\n    return total_damage", "def min_damage(power: int, damage: List[int], health: List[int]) -> int:\n    n = len(damage)\n    # Calculate the time each enemy takes to die\n    time_to_die = [(health[i] / damage[i], i) for i in range(n)]\n    # Sort enemies by the time it takes for them to die\n    time_to_die.sort()\n    \n    total_damage = 0\n    current_time = 0\n    \n    for ttd, i in time_to_die:\n        # Calculate the number of full attacks Bob can make before the enemy dies\n        full_attacks = int(ttd)\n        remaining_health = health[i] - full_attacks * damage[i]\n        \n        if remaining_health > 0:\n            partial_attack = max(0, int(remaining_health // power))\n            full_attacks += partial_attack\n        \n        # Update the total damage Bob takes\n        total_damage += full_attacks * power\n        \n        # Update the current time\n        current_time += full_attacks\n    \n    return total_damage"], "passed": [false, false], "raw_code": ["```python\ndef minimum_damage(power, damage, health):\n    n = len(damage)\n    # Calculate the number of seconds required to defeat each enemy\n    seconds = [health[i] // damage[i] + (1 if health[i] % damage[i] != 0 else 0) for i in range(n)]\n    # Sort enemies based on the number of seconds required to defeat them\n    sorted_indices = sorted(range(n), key=lambda i: seconds[i])\n    # Simulate the attacks\n    total_damage = 0\n    for i in sorted_indices:\n        total_damage += power * seconds[i]\n    return total_damage\n```", "```python\ndef min_damage(power: int, damage: List[int], health: List[int]) -> int:\n    n = len(damage)\n    # Calculate the time each enemy takes to die\n    time_to_die = [(health[i] / damage[i], i) for i in range(n)]\n    # Sort enemies by the time it takes for them to die\n    time_to_die.sort()\n    \n    total_damage = 0\n    current_time = 0\n    \n    for ttd, i in time_to_die:\n        # Calculate the number of full attacks Bob can make before the enemy dies\n        full_attacks = int(ttd)\n        remaining_health = health[i] - full_attacks * damage[i]\n        \n        if remaining_health > 0:\n            partial_attack = max(0, int(remaining_health // power))\n            full_attacks += partial_attack\n        \n        # Update the total damage Bob takes\n        total_damage += full_attacks * power\n        \n        # Update the current time\n        current_time += full_attacks\n    \n    return total_damage\n```"]}
{"task_id": "3550", "codes": ["def maxRookSum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(row) for row in board]\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    rook_positions = []\n    for i in range(m):\n        if sum(board[i]) == row_sums[i] and board[i].count(0) == n - 1:\n            rook_positions.append((i, board[i].index(0)))\n    for j in range(n):\n        if sum(col_sums[j]) == col_sums[j] and board[0][j].count(0) == m - 1:\n            rook_positions.append((board[0][j].index(0), j))\n    \n    if len(rook_positions) < 3:\n        return 0\n    \n    rook_positions = rook_positions[:3]\n    max_sum = 0\n    for i1, j1 in rook_positions:\n        for i2, j2 in rook_positions:\n            if i1 != i2 and j1 != j2:\n                for i3, j3 in rook_positions:\n                    if i1 != i3 and j1 != j3 and i2 != i3 and j2 != j3:\n                        max_sum = max(max_sum, board[i1][j1] + board[i2][j2] + board[i3][j3])\n    \n    return max_sum", "def max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(board[i]) for i in range(m)]\n    col_sums = [sum(board[j][i] for j in range(m)) for i in range(n)]\n    \n    # Sort the row and column sums in descending order\n    sorted_rows = sorted(range(m), key=lambda x: row_sums[x], reverse=True)\n    sorted_cols = sorted(range(n), key=lambda y: col_sums[y], reverse=True)\n    \n    # Select the top three non-overlapping rows and columns\n    selected_rows = sorted_rows[:3]\n    selected_cols = sorted_cols[:3]\n    \n    # Calculate the maximum sum of the selected positions\n    max_sum = 0\n    for r in selected_rows:\n        for c in selected_cols:\n            if r != c:\n                max_sum += board[r][c]\n    \n    return max_sum"], "passed": [false, false], "raw_code": ["```python\ndef maxRookSum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(row) for row in board]\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    rook_positions = []\n    for i in range(m):\n        if sum(board[i]) == row_sums[i] and board[i].count(0) == n - 1:\n            rook_positions.append((i, board[i].index(0)))\n    for j in range(n):\n        if sum(col_sums[j]) == col_sums[j] and board[0][j].count(0) == m - 1:\n            rook_positions.append((board[0][j].index(0), j))\n    \n    if len(rook_positions) < 3:\n        return 0\n    \n    rook_positions = rook_positions[:3]\n    max_sum = 0\n    for i1, j1 in rook_positions:\n        for i2, j2 in rook_positions:\n            if i1 != i2 and j1 != j2:\n                for i3, j3 in rook_positions:\n                    if i1 != i3 and j1 != j3 and i2 != i3 and j2 != j3:\n                        max_sum = max(max_sum, board[i1][j1] + board[i2][j2] + board[i3][j3])\n    \n    return max_sum\n```", "```python\ndef max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(board[i]) for i in range(m)]\n    col_sums = [sum(board[j][i] for j in range(m)) for i in range(n)]\n    \n    # Sort the row and column sums in descending order\n    sorted_rows = sorted(range(m), key=lambda x: row_sums[x], reverse=True)\n    sorted_cols = sorted(range(n), key=lambda y: col_sums[y], reverse=True)\n    \n    # Select the top three non-overlapping rows and columns\n    selected_rows = sorted_rows[:3]\n    selected_cols = sorted_cols[:3]\n    \n    # Calculate the maximum sum of the selected positions\n    max_sum = 0\n    for r in selected_rows:\n        for c in selected_cols:\n            if r != c:\n                max_sum += board[r][c]\n    \n    return max_sum\n```"]}
{"task_id": "3575", "codes": ["def max_xor_subsequence(nums, k):\n    n = len(nums)\n    max_xor = 0\n    \n    # Iterate over all possible splits\n    for i in range(k):\n        left_or_sum = 0\n        right_or_sum = 0\n        \n        # Calculate OR sum for the left part\n        for j in range(i):\n            left_or_sum |= nums[j]\n        \n        # Calculate OR sum for the right part\n        for j in range(i, i + k):\n            right_or_sum |= nums[j]\n        \n        # Calculate XOR of the two OR sums\n        current_xor = left_or_sum ^ right_or_sum\n        \n        # Update the maximum XOR value\n        if current_xor > max_xor:\n            max_xor = current_xor\n    \n    return max_xor", "def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    def or_range(start, end):\n        return reduce(lambda x, y: x | y, nums[start:end])\n    \n    def xor_range(start, end):\n        return reduce(lambda x, y: x ^ y, nums[start:end])\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            dp[i][j] = dp[i-1][j-1] | nums[j-1]\n    \n    max_value = 0\n    for i in range(k, n - k + 1):\n        left_or = dp[k][i]\n        right_or = or_range(i, n)\n        current_value = left_or ^ right_or\n        if current_value > max_value:\n            max_value = current_value\n    \n    return max_value"], "passed": [false, false], "raw_code": ["```python\ndef max_xor_subsequence(nums, k):\n    n = len(nums)\n    max_xor = 0\n    \n    # Iterate over all possible splits\n    for i in range(k):\n        left_or_sum = 0\n        right_or_sum = 0\n        \n        # Calculate OR sum for the left part\n        for j in range(i):\n            left_or_sum |= nums[j]\n        \n        # Calculate OR sum for the right part\n        for j in range(i, i + k):\n            right_or_sum |= nums[j]\n        \n        # Calculate XOR of the two OR sums\n        current_xor = left_or_sum ^ right_or_sum\n        \n        # Update the maximum XOR value\n        if current_xor > max_xor:\n            max_xor = current_xor\n    \n    return max_xor\n```", "```python\ndef maxSubsequenceValue(nums, k):\n    n = len(nums)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    def or_range(start, end):\n        return reduce(lambda x, y: x | y, nums[start:end])\n    \n    def xor_range(start, end):\n        return reduce(lambda x, y: x ^ y, nums[start:end])\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            dp[i][j] = dp[i-1][j-1] | nums[j-1]\n    \n    max_value = 0\n    for i in range(k, n - k + 1):\n        left_or = dp[k][i]\n        right_or = or_range(i, n)\n        current_value = left_or ^ right_or\n        if current_value > max_value:\n            max_value = current_value\n    \n    return max_value\n```"]}
{"task_id": "3583", "codes": ["def getGCD(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sortGCDPairs(nums, queries):\n    max_val = max(nums)\n    gcd_count = {}\n    \n    # Count the frequency of each GCD value\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            gcd_val = getGCD(nums[i], nums[j])\n            if gcd_val not in gcd_count:\n                gcd_count[gcd_val] = 0\n            gcd_count[gcd_val] += 1\n    \n    # Create a list of unique GCD values and sort it\n    unique_gcds = sorted(gcd_count.keys())\n    \n    # Create a prefix sum array to quickly find the cumulative frequency\n    prefix_sum = [0]\n    for gcd_val in unique_gcds:\n        prefix_sum.append(prefix_sum[-1] + gcd_count[gcd_val])\n    \n    # Answer the queries\n    result = []\n    for q in queries:\n        idx = bisect.bisect_left(prefix_sum, q + 1)\n        result.append(unique_gcds[idx - 1])\n    \n    return result", "from collections import defaultdict\nimport math\n\ndef getGCDPairs(nums, queries):\n    n = len(nums)\n    gcd_counts = defaultdict(int)\n    \n    # Compute GCD for all pairs and count occurrences\n    for i in range(n):\n        for j in range(i + 1, n):\n            gcd_val = math.gcd(nums[i], nums[j])\n            gcd_counts[gcd_val] += 1\n    \n    # Extract unique GCD values and sort them\n    unique_gcds = sorted(gcd_counts.keys())\n    \n    # Compute prefix sums for quick lookup\n    prefix_sums = [0]\n    current_sum = 0\n    for gcd_val in unique_gcds:\n        current_sum += gcd_counts[gcd_val]\n        prefix_sums.append(current_sum)\n    \n    # Answer each query\n    answer = []\n    for query in queries:\n        if query >= prefix_sums[-1]:\n            answer.append(unique_gcds[-1])\n        else:\n            idx = bisect.bisect_right(prefix_sums, query)\n            answer.append(unique_gcds[idx - 1])\n    \n    return answer"], "passed": [false, false], "raw_code": ["```python\ndef getGCD(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sortGCDPairs(nums, queries):\n    max_val = max(nums)\n    gcd_count = {}\n    \n    # Count the frequency of each GCD value\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            gcd_val = getGCD(nums[i], nums[j])\n            if gcd_val not in gcd_count:\n                gcd_count[gcd_val] = 0\n            gcd_count[gcd_val] += 1\n    \n    # Create a list of unique GCD values and sort it\n    unique_gcds = sorted(gcd_count.keys())\n    \n    # Create a prefix sum array to quickly find the cumulative frequency\n    prefix_sum = [0]\n    for gcd_val in unique_gcds:\n        prefix_sum.append(prefix_sum[-1] + gcd_count[gcd_val])\n    \n    # Answer the queries\n    result = []\n    for q in queries:\n        idx = bisect.bisect_left(prefix_sum, q + 1)\n        result.append(unique_gcds[idx - 1])\n    \n    return result\n```", "```python\nfrom collections import defaultdict\nimport math\n\ndef getGCDPairs(nums, queries):\n    n = len(nums)\n    gcd_counts = defaultdict(int)\n    \n    # Compute GCD for all pairs and count occurrences\n    for i in range(n):\n        for j in range(i + 1, n):\n            gcd_val = math.gcd(nums[i], nums[j])\n            gcd_counts[gcd_val] += 1\n    \n    # Extract unique GCD values and sort them\n    unique_gcds = sorted(gcd_counts.keys())\n    \n    # Compute prefix sums for quick lookup\n    prefix_sums = [0]\n    current_sum = 0\n    for gcd_val in unique_gcds:\n        current_sum += gcd_counts[gcd_val]\n        prefix_sums.append(current_sum)\n    \n    # Answer each query\n    answer = []\n    for query in queries:\n        if query >= prefix_sums[-1]:\n            answer.append(unique_gcds[-1])\n        else:\n            idx = bisect.bisect_right(prefix_sums, query)\n            answer.append(unique_gcds[idx - 1])\n    \n    return answer\n```"]}
{"task_id": "3551", "codes": ["class TrieNode:\n    def __init__(self):\n        self.left = None\n        self.right = None\n        self.value = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit == 0:\n                if not node.left:\n                    node.left = TrieNode()\n                node = node.left\n            else:\n                if not node.right:\n                    node.right = TrieNode()\n                node = node.right\n            node.value |= (1 << i)\n\n    def query(self, num):\n        node = self.root\n        max_xor = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit == 0:\n                if node.right:\n                    node = node.right\n                    max_xor |= (1 << i)\n                else:\n                    node = node.left\n            else:\n                if node.left:\n                    node = node.left\n                    max_xor |= (1 << i)\n                else:\n                    node = node.right\n        return max_xor\n\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = Trie()\n    for i in range(n + 1):\n        trie.insert(prefix_xor[i])\n    \n    result = []\n    for l, r in queries:\n        max_xor = trie.query(prefix_xor[l] ^ prefix_xor[r + 1])\n        result.append(max_xor)\n    \n    return result", "class TrieNode:\n    def __init__(self):\n        self.children = {}\n\ndef insert(trie, num):\n    node = trie\n    for bit in range(31, -1, -1):\n        bit_val = (num >> bit) & 1\n        if bit_val not in node.children:\n            node.children[bit_val] = TrieNode()\n        node = node.children[bit_val]\n\ndef find_max_xor(trie, num):\n    xor = 0\n    node = trie\n    for bit in range(31, -1, -1):\n        bit_val = (num >> bit) & 1\n        alt_bit_val = 1 - bit_val\n        if alt_bit_val in node.children:\n            xor |= (1 << bit)\n            node = node.children[alt_bit_val]\n        else:\n            node = node.children[bit_val]\n    return xor\n\ndef max_xor_subarray(nums, queries):\n    n, q = len(nums), len(queries)\n    answers = [-1] * q\n    sorted_queries = sorted((queries[i][1], i) for i in range(q))\n    \n    trie = TrieNode()\n    left = 0\n    \n    for right, qi in sorted_queries:\n        while left <= right:\n            insert(trie, nums[left])\n            left += 1\n        \n        if trie.children:\n            answers[qi] = find_max_xor(trie, nums[right])\n    \n    return answers"], "passed": [false, false], "raw_code": ["```python\nclass TrieNode:\n    def __init__(self):\n        self.left = None\n        self.right = None\n        self.value = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit == 0:\n                if not node.left:\n                    node.left = TrieNode()\n                node = node.left\n            else:\n                if not node.right:\n                    node.right = TrieNode()\n                node = node.right\n            node.value |= (1 << i)\n\n    def query(self, num):\n        node = self.root\n        max_xor = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit == 0:\n                if node.right:\n                    node = node.right\n                    max_xor |= (1 << i)\n                else:\n                    node = node.left\n            else:\n                if node.left:\n                    node = node.left\n                    max_xor |= (1 << i)\n                else:\n                    node = node.right\n        return max_xor\n\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = Trie()\n    for i in range(n + 1):\n        trie.insert(prefix_xor[i])\n    \n    result = []\n    for l, r in queries:\n        max_xor = trie.query(prefix_xor[l] ^ prefix_xor[r + 1])\n        result.append(max_xor)\n    \n    return result\n```", "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n\ndef insert(trie, num):\n    node = trie\n    for bit in range(31, -1, -1):\n        bit_val = (num >> bit) & 1\n        if bit_val not in node.children:\n            node.children[bit_val] = TrieNode()\n        node = node.children[bit_val]\n\ndef find_max_xor(trie, num):\n    xor = 0\n    node = trie\n    for bit in range(31, -1, -1):\n        bit_val = (num >> bit) & 1\n        alt_bit_val = 1 - bit_val\n        if alt_bit_val in node.children:\n            xor |= (1 << bit)\n            node = node.children[alt_bit_val]\n        else:\n            node = node.children[bit_val]\n    return xor\n\ndef max_xor_subarray(nums, queries):\n    n, q = len(nums), len(queries)\n    answers = [-1] * q\n    sorted_queries = sorted((queries[i][1], i) for i in range(q))\n    \n    trie = TrieNode()\n    left = 0\n    \n    for right, qi in sorted_queries:\n        while left <= right:\n            insert(trie, nums[left])\n            left += 1\n        \n        if trie.children:\n            answers[qi] = find_max_xor(trie, nums[right])\n    \n    return answers\n```"]}
{"task_id": "3560", "codes": ["from collections import deque\n\ndef min_moves_to_capture(kx, ky, px, py):\n    directions = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = deque([(kx, ky, 0)])\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, steps = queue.popleft()\n        \n        if cx == px and cy == py:\n            return steps\n        \n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            \n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, steps + 1))\n    \n    return float('inf')\n\ndef max_alice_moves(kx, ky, positions):\n    n = len(positions)\n    dp = [[[-1] * n for _ in range(n)] for _ in range(2)]\n    \n    def dfs(turn, alice_pawn, bob_pawn):\n        if alice_pawn >= n or bob_pawn >= n:\n            return 0\n        \n        if dp[turn][alice_pawn][bob_pawn] != -1:\n            return dp[turn][alice_pawn][bob_pawn]\n        \n        if turn % 2 == 0:  # Alice's turn\n            max_moves = 0\n            for i in range(n):\n                if i == alice_pawn:\n                    continue\n                moves = min_moves_to_capture(kx, ky, positions[i][0], positions[i][1])\n                if moves < float('inf'):\n                    max_moves = max(max_moves, moves + dfs(turn + 1, i, bob_pawn))\n            dp[turn][alice_pawn][bob_pawn] = max_moves\n        else:  # Bob's turn\n            min_moves = float('inf')\n            for i in range(n):\n                if i == bob_pawn:\n                    continue\n                moves = min_moves_to_capture(kx, ky, positions[i][0], positions[i][1])\n                if moves < float('inf'):\n                    min_moves = min(min_moves, moves + dfs(turn + 1, alice_pawn, i))\n            dp[turn][alice_pawn][bob_pawn] = min_moves\n        \n        return dp[turn][alice_pawn][bob_pawn]\n    \n    return dfs(0, 0, 0)\n\n# Example usage:\nkx, ky = 1, 1\npositions = [[0, 0]]\nprint(max_alice_moves(kx, ky, positions))  # Output: 4\n\nkx, ky = 0, 2\npositions = [[1, 1], [2, 2], [3, 3]]\nprint(max_alice_moves(kx, ky, positions))  # Output: 8\n\nkx, ky = 0, 0\npositions = [[1, 2], [2, 4]]\nprint(max_alice_moves(kx, ky, positions))  # Output: 3", "def min_moves_to_capture(kx, ky, px, py):\n    directions = [\n        (-2, -1), (-2, 1), (-1, -2), (-1, 2),\n        (1, -2), (1, 2), (2, -1), (2, 1)\n    ]\n    queue = [(0, kx, ky)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        moves, cx, cy = heapq.heappop(queue)\n        if (cx, cy) == (px, py):\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                heapq.heappush(queue, (moves + 1, nx, ny))\n\ndef max_total_moves(kx, ky, positions):\n    pq = []\n    for px, py in positions:\n        moves = min_moves_to_capture(kx, ky, px, py)\n        heapq.heappush(pq, (-moves, px, py))  # Negative because we use a min-heap\n    \n    alice_turn = True\n    total_moves = 0\n    \n    while pq:\n        _, px, py = heapq.heappop(pq)\n        moves = -min_moves_to_capture(kx, ky, px, py)\n        total_moves += moves\n        \n        if alice_turn:\n            # Alice's turn: choose the pawn with the most moves\n            alice_turn = False\n        else:\n            # Bob's turn: choose the pawn with the fewest moves\n            alice_turn = True\n    \n    return total_moves\n\nimport heapq\n\n# Example usage:\nprint(max_total_moves(1, 1, [[0, 0]]))  # Output: 4\nprint(max_total_moves(0, 2, [[1, 1], [2, 2], [3, 3]]))  # Output: 8\nprint(max_total_moves(0, 0, [[1, 2], [2, 4]]))  # Output: 3"], "passed": [false, false], "raw_code": ["```python\nfrom collections import deque\n\ndef min_moves_to_capture(kx, ky, px, py):\n    directions = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = deque([(kx, ky, 0)])\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, steps = queue.popleft()\n        \n        if cx == px and cy == py:\n            return steps\n        \n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            \n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, steps + 1))\n    \n    return float('inf')\n\ndef max_alice_moves(kx, ky, positions):\n    n = len(positions)\n    dp = [[[-1] * n for _ in range(n)] for _ in range(2)]\n    \n    def dfs(turn, alice_pawn, bob_pawn):\n        if alice_pawn >= n or bob_pawn >= n:\n            return 0\n        \n        if dp[turn][alice_pawn][bob_pawn] != -1:\n            return dp[turn][alice_pawn][bob_pawn]\n        \n        if turn % 2 == 0:  # Alice's turn\n            max_moves = 0\n            for i in range(n):\n                if i == alice_pawn:\n                    continue\n                moves = min_moves_to_capture(kx, ky, positions[i][0], positions[i][1])\n                if moves < float('inf'):\n                    max_moves = max(max_moves, moves + dfs(turn + 1, i, bob_pawn))\n            dp[turn][alice_pawn][bob_pawn] = max_moves\n        else:  # Bob's turn\n            min_moves = float('inf')\n            for i in range(n):\n                if i == bob_pawn:\n                    continue\n                moves = min_moves_to_capture(kx, ky, positions[i][0], positions[i][1])\n                if moves < float('inf'):\n                    min_moves = min(min_moves, moves + dfs(turn + 1, alice_pawn, i))\n            dp[turn][alice_pawn][bob_pawn] = min_moves\n        \n        return dp[turn][alice_pawn][bob_pawn]\n    \n    return dfs(0, 0, 0)\n\n# Example usage:\nkx, ky = 1, 1\npositions = [[0, 0]]\nprint(max_alice_moves(kx, ky, positions))  # Output: 4\n\nkx, ky = 0, 2\npositions = [[1, 1], [2, 2], [3, 3]]\nprint(max_alice_moves(kx, ky, positions))  # Output: 8\n\nkx, ky = 0, 0\npositions = [[1, 2], [2, 4]]\nprint(max_alice_moves(kx, ky, positions))  # Output: 3\n```", "```python\ndef min_moves_to_capture(kx, ky, px, py):\n    directions = [\n        (-2, -1), (-2, 1), (-1, -2), (-1, 2),\n        (1, -2), (1, 2), (2, -1), (2, 1)\n    ]\n    queue = [(0, kx, ky)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        moves, cx, cy = heapq.heappop(queue)\n        if (cx, cy) == (px, py):\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                heapq.heappush(queue, (moves + 1, nx, ny))\n\ndef max_total_moves(kx, ky, positions):\n    pq = []\n    for px, py in positions:\n        moves = min_moves_to_capture(kx, ky, px, py)\n        heapq.heappush(pq, (-moves, px, py))  # Negative because we use a min-heap\n    \n    alice_turn = True\n    total_moves = 0\n    \n    while pq:\n        _, px, py = heapq.heappop(pq)\n        moves = -min_moves_to_capture(kx, ky, px, py)\n        total_moves += moves\n        \n        if alice_turn:\n            # Alice's turn: choose the pawn with the most moves\n            alice_turn = False\n        else:\n            # Bob's turn: choose the pawn with the fewest moves\n            alice_turn = True\n    \n    return total_moves\n\nimport heapq\n\n# Example usage:\nprint(max_total_moves(1, 1, [[0, 0]]))  # Output: 4\nprint(max_total_moves(0, 2, [[1, 1], [2, 2], [3, 3]]))  # Output: 8\nprint(max_total_moves(0, 0, [[1, 2], [2, 4]]))  # Output: 3\n```"]}
{"task_id": "arc183_d", "codes": ["import sys\nfrom collections import defaultdict, deque\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    edges = []\n    for _ in range(N - 1):\n        A = int(data[index]) - 1\n        B = int(data[index + 1]) - 1\n        edges.append((A, B))\n        index += 2\n    \n    return N, edges\n\ndef find_leaves(N, edges):\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    leaves = [i for i in range(N) if len(adj_list[i]) == 1]\n    return leaves\n\ndef remove_leaf(leaf, parent, adj_list):\n    adj_list[leaf] = []\n    for neighbor in adj_list[parent]:\n        if neighbor != leaf:\n            adj_list[neighbor].remove(parent)\n            break\n\ndef get_max_distance_leaf(leaves, adj_list):\n    max_dist = -1\n    farthest_leaf = None\n    for leaf in leaves:\n        visited = set()\n        queue = deque([(leaf, 0)])\n        while queue:\n            node, dist = queue.popleft()\n            if node not in visited:\n                visited.add(node)\n                for neighbor in adj_list[node]:\n                    if neighbor not in visited:\n                        queue.append((neighbor, dist + 1))\n        if dist > max_dist:\n            max_dist = dist\n            farthest_leaf = leaf\n    return farthest_leaf\n\ndef main():\n    N, edges = read_input()\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    leaves = find_leaves(N, edges)\n    result = []\n    \n    while len(leaves) >= 2:\n        leaf1 = leaves.pop()\n        parent1 = None\n        for neighbor in adj_list[leaf1]:\n            if neighbor in leaves:\n                parent1 = neighbor\n                break\n        \n        leaf2 = leaves.pop()\n        parent2 = None\n        for neighbor in adj_list[leaf2]:\n            if neighbor in leaves:\n                parent2 = neighbor\n                break\n        \n        result.append((leaf1 + 1, leaf2 + 1))\n        \n        remove_leaf(leaf1, parent1, adj_list)\n        remove_leaf(leaf2, parent2, adj_list)\n        \n        leaves.remove(parent1)\n        leaves.remove(parent2)\n    \n    for x, y in result:\n        print(x, y)\n\nif __name__ == \"__main__\":\n    main()", "from collections import deque, defaultdict\n\ndef read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    edges = []\n    for _ in range(N - 1):\n        A = int(data[index]) - 1\n        B = int(data[index + 1]) - 1\n        edges.append((A, B))\n        index += 2\n    \n    return N, edges\n\ndef find_leaves(N, edges):\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    leaves = []\n    for node in range(N):\n        if len(adj_list[node]) == 1:\n            leaves.append(node)\n    \n    return leaves\n\ndef max_score_operations(N, edges):\n    leaves = find_leaves(N, edges)\n    result = []\n    \n    while len(leaves) >= 2:\n        # Find the furthest leaves\n        leaf1 = leaves.pop(0)\n        leaf2 = leaves[-1]\n        \n        # Calculate the distance between leaf1 and leaf2\n        queue = deque([(leaf1, 0)])\n        visited = set([leaf1])\n        \n        while queue:\n            current, dist = queue.popleft()\n            if current == leaf2:\n                break\n            \n            for neighbor in adj_list[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, dist + 1))\n        \n        result.append((leaf1 + 1, leaf2 + 1))\n        leaves.remove(leaf2)\n    \n    return result\n\ndef main():\n    N, edges = read_input()\n    result = max_score_operations(N, edges)\n    \n    for x, y in result:\n        print(x, y)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    edges = []\n    for _ in range(N - 1):\n        A = int(data[index]) - 1\n        B = int(data[index + 1]) - 1\n        edges.append((A, B))\n        index += 2\n    \n    return N, edges\n\ndef find_leaves(N, edges):\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    leaves = [i for i in range(N) if len(adj_list[i]) == 1]\n    return leaves\n\ndef remove_leaf(leaf, parent, adj_list):\n    adj_list[leaf] = []\n    for neighbor in adj_list[parent]:\n        if neighbor != leaf:\n            adj_list[neighbor].remove(parent)\n            break\n\ndef get_max_distance_leaf(leaves, adj_list):\n    max_dist = -1\n    farthest_leaf = None\n    for leaf in leaves:\n        visited = set()\n        queue = deque([(leaf, 0)])\n        while queue:\n            node, dist = queue.popleft()\n            if node not in visited:\n                visited.add(node)\n                for neighbor in adj_list[node]:\n                    if neighbor not in visited:\n                        queue.append((neighbor, dist + 1))\n        if dist > max_dist:\n            max_dist = dist\n            farthest_leaf = leaf\n    return farthest_leaf\n\ndef main():\n    N, edges = read_input()\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    leaves = find_leaves(N, edges)\n    result = []\n    \n    while len(leaves) >= 2:\n        leaf1 = leaves.pop()\n        parent1 = None\n        for neighbor in adj_list[leaf1]:\n            if neighbor in leaves:\n                parent1 = neighbor\n                break\n        \n        leaf2 = leaves.pop()\n        parent2 = None\n        for neighbor in adj_list[leaf2]:\n            if neighbor in leaves:\n                parent2 = neighbor\n                break\n        \n        result.append((leaf1 + 1, leaf2 + 1))\n        \n        remove_leaf(leaf1, parent1, adj_list)\n        remove_leaf(leaf2, parent2, adj_list)\n        \n        leaves.remove(parent1)\n        leaves.remove(parent2)\n    \n    for x, y in result:\n        print(x, y)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\nfrom collections import deque, defaultdict\n\ndef read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    edges = []\n    for _ in range(N - 1):\n        A = int(data[index]) - 1\n        B = int(data[index + 1]) - 1\n        edges.append((A, B))\n        index += 2\n    \n    return N, edges\n\ndef find_leaves(N, edges):\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    leaves = []\n    for node in range(N):\n        if len(adj_list[node]) == 1:\n            leaves.append(node)\n    \n    return leaves\n\ndef max_score_operations(N, edges):\n    leaves = find_leaves(N, edges)\n    result = []\n    \n    while len(leaves) >= 2:\n        # Find the furthest leaves\n        leaf1 = leaves.pop(0)\n        leaf2 = leaves[-1]\n        \n        # Calculate the distance between leaf1 and leaf2\n        queue = deque([(leaf1, 0)])\n        visited = set([leaf1])\n        \n        while queue:\n            current, dist = queue.popleft()\n            if current == leaf2:\n                break\n            \n            for neighbor in adj_list[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, dist + 1))\n        \n        result.append((leaf1 + 1, leaf2 + 1))\n        leaves.remove(leaf2)\n    \n    return result\n\ndef main():\n    N, edges = read_input()\n    result = max_score_operations(N, edges)\n    \n    for x, y in result:\n        print(x, y)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "arc183_c", "codes": ["def count_permutations(N, conditions, mod=998244353):\n    from functools import lru_cache\n    \n    @lru_cache(None)\n    def dp(pos, last_chosen, can_choose_max):\n        if pos == N + 1:\n            return 1\n        \n        count = 0\n        for value in range(1, N + 1):\n            if value == last_chosen:\n                continue\n            \n            if can_choose_max:\n                if any(value == P[i] for i in range(pos - 1, min(N, pos + conditions[pos - 1][2] - 1))):\n                    continue\n                \n                count = (count + dp(pos + 1, value, False)) % mod\n            else:\n                count = (count + dp(pos + 1, value, True)) % mod\n        \n        return count\n    \n    return dp(1, 0, True)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nconditions = []\nfor i in range(M):\n    L = int(data[3 + 3 * i])\n    R = int(data[4 + 3 * i])\n    X = int(data[5 + 3 * i])\n    conditions.append((L, R, X))\n\n# Calculate and print the result\nresult = count_permutations(N, conditions)\nprint(result)", "import sys\nfrom collections import defaultdict\n\ndef count_valid_permutations(N, M, conditions):\n    MOD = 998244353\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for l, r, x in conditions:\n        new_dp = [0] * (N + 1)\n        for i in range(N + 1):\n            if i < l - 1 or i > r:\n                new_dp[i] += dp[i]\n            elif i == x - 1:\n                if l <= x <= r:\n                    new_dp[i] += dp[i - 1]\n            else:\n                new_dp[i] += dp[i - 1]\n        dp = [x % MOD for x in new_dp]\n    return dp[N]\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    conditions = [(int(data[2 + 3 * i]) - 1, int(data[3 + 3 * i]) - 1, int(data[4 + 3 * i]) - 1) for i in range(M)]\n    result = count_valid_permutations(N, M, conditions)\n    print(result)\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef count_permutations(N, conditions, mod=998244353):\n    from functools import lru_cache\n    \n    @lru_cache(None)\n    def dp(pos, last_chosen, can_choose_max):\n        if pos == N + 1:\n            return 1\n        \n        count = 0\n        for value in range(1, N + 1):\n            if value == last_chosen:\n                continue\n            \n            if can_choose_max:\n                if any(value == P[i] for i in range(pos - 1, min(N, pos + conditions[pos - 1][2] - 1))):\n                    continue\n                \n                count = (count + dp(pos + 1, value, False)) % mod\n            else:\n                count = (count + dp(pos + 1, value, True)) % mod\n        \n        return count\n    \n    return dp(1, 0, True)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nconditions = []\nfor i in range(M):\n    L = int(data[3 + 3 * i])\n    R = int(data[4 + 3 * i])\n    X = int(data[5 + 3 * i])\n    conditions.append((L, R, X))\n\n# Calculate and print the result\nresult = count_permutations(N, conditions)\nprint(result)\n```", "import sys\nfrom collections import defaultdict\n\ndef count_valid_permutations(N, M, conditions):\n    MOD = 998244353\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for l, r, x in conditions:\n        new_dp = [0] * (N + 1)\n        for i in range(N + 1):\n            if i < l - 1 or i > r:\n                new_dp[i] += dp[i]\n            elif i == x - 1:\n                if l <= x <= r:\n                    new_dp[i] += dp[i - 1]\n            else:\n                new_dp[i] += dp[i - 1]\n        dp = [x % MOD for x in new_dp]\n    return dp[N]\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    conditions = [(int(data[2 + 3 * i]) - 1, int(data[3 + 3 * i]) - 1, int(data[4 + 3 * i]) - 1) for i in range(M)]\n    result = count_valid_permutations(N, M, conditions)\n    print(result)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "arc182_c", "codes": ["import sys\nMOD = 998244353\ndef count_divisors(n):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count + 2\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    for _ in range(N - 1):\n        new_dp = [0] * (M + 1)\n        for i in range(1, M + 1):\n            for j in range(1, M + 1):\n                if i * j <= M:\n                    new_dp[i * j] += dp[i]\n                    new_dp[i * j] %= MOD\n        dp = new_dp\n    result = 0\n    for i in range(1, M + 1):\n        result += dp[i] * count_divisors(i)\n        result %= MOD\n    print(result)\nif __name__ == '__main__':\n    main()", "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\ndef good_sequences_score(N, M):\n    MOD = 998244353\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    for i in range(2, M + 1):\n        dp[i] = dp[i - 1] * count_divisors(i) % MOD\n\n    total_score = 0\n    for k in range(1, N + 1):\n        total_score = (total_score + dp[M] ** k) % MOD\n\n    return total_score\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    print(good_sequences_score(N, M))"], "passed": [false, false], "raw_code": ["import sys\nMOD = 998244353\ndef count_divisors(n):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count + 2\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    for _ in range(N - 1):\n        new_dp = [0] * (M + 1)\n        for i in range(1, M + 1):\n            for j in range(1, M + 1):\n                if i * j <= M:\n                    new_dp[i * j] += dp[i]\n                    new_dp[i * j] %= MOD\n        dp = new_dp\n    result = 0\n    for i in range(1, M + 1):\n        result += dp[i] * count_divisors(i)\n        result %= MOD\n    print(result)\nif __name__ == '__main__':\n    main()", "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\ndef good_sequences_score(N, M):\n    MOD = 998244353\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    for i in range(2, M + 1):\n        dp[i] = dp[i - 1] * count_divisors(i) % MOD\n\n    total_score = 0\n    for k in range(1, N + 1):\n        total_score = (total_score + dp[M] ** k) % MOD\n\n    return total_score\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    print(good_sequences_score(N, M))"]}
{"task_id": "arc182_a", "codes": ["MOD = 998244353\n\ndef count_sequences(N, Q, P, V):\n    # Initialize DP table\n    dp = [[0] * 2 for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(Q):\n        p, v = P[i], V[i]\n        new_dp = [[0] * 2 for _ in range(N + 1)]\n        \n        if p <= N:\n            # Left part replacement\n            for j in range(N - p + 1):\n                if j < p:\n                    new_dp[j][0] = (new_dp[j][0] + dp[j][0]) % MOD\n                if j == p - 1:\n                    new_dp[j][0] = (new_dp[j][0] + dp[j][1]) % MOD\n        \n        if p >= 1:\n            # Right part replacement\n            for j in range(1, N + 1):\n                if j > N - p + 1:\n                    new_dp[j][1] = (new_dp[j][1] + dp[j][1]) % MOD\n                if j == N - p + 1:\n                    new_dp[j][1] = (new_dp[j][1] + dp[j][0]) % MOD\n        \n        dp = new_dp\n    \n    return (dp[N][0] + dp[N][1]) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nP = []\nV = []\n\nfor i in range(Q):\n    p = int(data[2 + 2 * i])\n    v = int(data[3 + 2 * i])\n    P.append(p)\n    V.append(v)\n\n# Calculate and print the result\nprint(count_sequences(N, Q, P, V))", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    Q = int(data[1])\n\n    P = [int(data[i*2 + 2]) for i in range(Q)]\n    V = [int(data[i*2 + 3]) for i in range(Q)]\n\n    MOD = 998244353\n\n    # dp[i][j] will store the number of ways to reach state j after i operations\n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, Q + 1):\n        p = P[i - 1]\n        v = V[i - 1]\n\n        for j in range(N, 0, -1):\n            if j >= p:\n                dp[i][j] += dp[i - 1][j - p]\n                dp[i][j] %= MOD\n            if j <= N - p + 1:\n                dp[i][j] += dp[i - 1][j]\n                dp[i][j] %= MOD\n\n    result = sum(dp[-1]) % MOD\n    print(result)\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["```python\nMOD = 998244353\n\ndef count_sequences(N, Q, P, V):\n    # Initialize DP table\n    dp = [[0] * 2 for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(Q):\n        p, v = P[i], V[i]\n        new_dp = [[0] * 2 for _ in range(N + 1)]\n        \n        if p <= N:\n            # Left part replacement\n            for j in range(N - p + 1):\n                if j < p:\n                    new_dp[j][0] = (new_dp[j][0] + dp[j][0]) % MOD\n                if j == p - 1:\n                    new_dp[j][0] = (new_dp[j][0] + dp[j][1]) % MOD\n        \n        if p >= 1:\n            # Right part replacement\n            for j in range(1, N + 1):\n                if j > N - p + 1:\n                    new_dp[j][1] = (new_dp[j][1] + dp[j][1]) % MOD\n                if j == N - p + 1:\n                    new_dp[j][1] = (new_dp[j][1] + dp[j][0]) % MOD\n        \n        dp = new_dp\n    \n    return (dp[N][0] + dp[N][1]) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nP = []\nV = []\n\nfor i in range(Q):\n    p = int(data[2 + 2 * i])\n    v = int(data[3 + 2 * i])\n    P.append(p)\n    V.append(v)\n\n# Calculate and print the result\nprint(count_sequences(N, Q, P, V))\n```", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    Q = int(data[1])\n\n    P = [int(data[i*2 + 2]) for i in range(Q)]\n    V = [int(data[i*2 + 3]) for i in range(Q)]\n\n    MOD = 998244353\n\n    # dp[i][j] will store the number of ways to reach state j after i operations\n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, Q + 1):\n        p = P[i - 1]\n        v = V[i - 1]\n\n        for j in range(N, 0, -1):\n            if j >= p:\n                dp[i][j] += dp[i - 1][j - p]\n                dp[i][j] %= MOD\n            if j <= N - p + 1:\n                dp[i][j] += dp[i - 1][j]\n                dp[i][j] %= MOD\n\n    result = sum(dp[-1]) % MOD\n    print(result)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc367_e", "codes": ["def process_sequence(N, K, X, A):\n    # Dictionary to store the last seen index of each element\n    last_seen = {}\n    # List to store the states of the sequence\n    states = []\n    \n    current_A = A[:]\n    while True:\n        # Append the current state of the sequence\n        states.append(current_A[:])\n        \n        # Create the next state based on the operation\n        next_A = [current_A[X[i] - 1] for i in range(N)]\n        \n        # Check if the next state has been seen before\n        if next_A in states:\n            # Find the start of the cycle\n            cycle_start = states.index(next_A)\n            cycle_length = len(states) - cycle_start\n            \n            # Calculate the effective number of operations within the cycle\n            effective_K = K % cycle_length\n            \n            # Get the final state within the cycle\n            if effective_K == 0:\n                final_state = states[-1]\n            else:\n                final_state = states[cycle_start + effective_K - 1]\n            \n            break\n        \n        # Update the current state\n        current_A = next_A\n    \n    return ' '.join(map(str, final_state))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Process the sequence and print the result\nprint(process_sequence(N, K, X, A))", "def process_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    X = list(map(int, data[2:N+2]))\n    A = list(map(int, data[N+2:]))\n    \n    # Determine the effective number of operations\n    K_mod_N = K % N\n    \n    if K_mod_N == 0:\n        # No change needed\n        final_state = A\n    else:\n        # Apply the operation K_mod_N times\n        for _ in range(K_mod_N):\n            A = [A[X[i] - 1] for i in range(N)]\n    \n    # Print the final state\n    print(' '.join(map(str, final_state)))\n\nprocess_sequence()"], "passed": [false, false], "raw_code": ["```python\ndef process_sequence(N, K, X, A):\n    # Dictionary to store the last seen index of each element\n    last_seen = {}\n    # List to store the states of the sequence\n    states = []\n    \n    current_A = A[:]\n    while True:\n        # Append the current state of the sequence\n        states.append(current_A[:])\n        \n        # Create the next state based on the operation\n        next_A = [current_A[X[i] - 1] for i in range(N)]\n        \n        # Check if the next state has been seen before\n        if next_A in states:\n            # Find the start of the cycle\n            cycle_start = states.index(next_A)\n            cycle_length = len(states) - cycle_start\n            \n            # Calculate the effective number of operations within the cycle\n            effective_K = K % cycle_length\n            \n            # Get the final state within the cycle\n            if effective_K == 0:\n                final_state = states[-1]\n            else:\n                final_state = states[cycle_start + effective_K - 1]\n            \n            break\n        \n        # Update the current state\n        current_A = next_A\n    \n    return ' '.join(map(str, final_state))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Process the sequence and print the result\nprint(process_sequence(N, K, X, A))\n```", "```python\ndef process_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    X = list(map(int, data[2:N+2]))\n    A = list(map(int, data[N+2:]))\n    \n    # Determine the effective number of operations\n    K_mod_N = K % N\n    \n    if K_mod_N == 0:\n        # No change needed\n        final_state = A\n    else:\n        # Apply the operation K_mod_N times\n        for _ in range(K_mod_N):\n            A = [A[X[i] - 1] for i in range(N)]\n    \n    # Print the final state\n    print(' '.join(map(str, final_state)))\n\nprocess_sequence()\n```"]}
{"task_id": "abc370_e", "codes": ["def count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * 2 for _ in range(N + 1)]\n    dp[0][0] = 1  # Base case: empty sequence sums to 0\n    \n    for i in range(1, N + 1):\n        prefix_sum = 0\n        for j in range(i, 0, -1):\n            prefix_sum += A[j - 1]\n            if prefix_sum == K:\n                dp[i][1] += dp[j - 1][0]\n            else:\n                dp[i][0] += dp[j - 1][0] + dp[j - 1][1]\n            dp[i][0] %= MOD\n            dp[i][1] %= MOD\n    \n    return (dp[N][0] + dp[N][1]) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Calculate and print result\nresult = count_partitions(N, K, A)\nprint(result)", "d"], "passed": [false, false], "raw_code": ["```python\ndef count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * 2 for _ in range(N + 1)]\n    dp[0][0] = 1  # Base case: empty sequence sums to 0\n    \n    for i in range(1, N + 1):\n        prefix_sum = 0\n        for j in range(i, 0, -1):\n            prefix_sum += A[j - 1]\n            if prefix_sum == K:\n                dp[i][1] += dp[j - 1][0]\n            else:\n                dp[i][0] += dp[j - 1][0] + dp[j - 1][1]\n            dp[i][0] %= MOD\n            dp[i][1] %= MOD\n    \n    return (dp[N][0] + dp[N][1]) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Calculate and print result\nresult = count_partitions(N, K, A)\nprint(result)\n```", "```python\ndef count_partitions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    MOD = 998244353\n    \n    # Initialize dp table\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        prefix_sum = 0\n        for j in range(K + 1):\n            if dp[i - 1][j]:\n                # Include A[i] in the current subsequence\n                dp[i][(j + A[i]) % (K + 1)] += dp[i - 1][j]\n                dp[i][(j + A[i]) % (K + 1)] %= MOD\n                \n                # Start a new subsequence with A[i]\n                dp[i][A[i]] += dp[i - 1][j]\n                dp[i][A[i]] %= MOD\n                \n                # Update prefix sum\n                prefix_sum += A[i]\n                prefix_sum %= (K + 1)\n                \n                # Exclude A[i] from the previous subsequence\n                if prefix_sum == K:\n                    dp[i][prefix_sum] -= dp[i - 1][j]\n                    dp[i][prefix_sum] %= MOD\n    \n    # Sum up valid partitions where the last subsequence does not sum to K\n    result = 0\n    for j in range(K + 1):\n        if j != K:\n            result += dp[N][j]\n            result %= MOD\n    \n    print(result)\n\n# Call the function\ncount_partitions()"]}
{"task_id": "arc181_d", "codes": ["import sys\nfrom typing import List\n\ndef build_fenwick(n: int) -> List[int]:\n    return [0] * (n + 1)\n\ndef update(fenwick: List[int], idx: int, val: int) -> None:\n    while idx < len(fenwick):\n        fenwick[idx] += val\n        idx += idx & -idx\n\ndef query(fenwick: List[int], idx: int) -> int:\n    result = 0\n    while idx > 0:\n        result += fenwick[idx]\n        idx -= idx & -idx\n    return result\n\ndef get_inversion_count(sequence: List[int]) -> int:\n    n = len(sequence)\n    fenwick = build_fenwick(n)\n    inversions = 0\n    for num in sequence:\n        inversions += query(fenwick, num - 1)\n        update(fenwick, num, 1)\n    return inversions\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    p = list(map(int, data[1:n+1]))\n    m = int(data[n+1])\n    a = list(map(int, data[n+2:n+m+2]))\n\n    results = []\n    current_p = p[:]\n    for ai in a:\n        for i in range(ai - 1):\n            if current_p[i] > current_p[i + 1]:\n                current_p[i], current_p[i + 1] = current_p[i + 1], current_p[i]\n        results.append(get_inversion_count(current_p))\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "from sortedcontainers import SortedList\n\ndef calculate_inversions(P):\n    sl = SortedList()\n    inversions = 0\n    for p in P:\n        pos = sl.bisect_left(p)\n        inversions += len(sl) - pos\n        sl.add(p)\n    return inversions\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n    \n    inversions = calculate_inversions(P)\n    print(inversions)\n    \n    for ai in A:\n        for _ in range(ai - 1):\n            if not P:\n                break\n            min_val = P.pop(0)\n            inversions -= sum(1 for x in P if x < min_val)\n            P.append(min_val)\n        print(inversions)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["import sys\nfrom typing import List\n\ndef build_fenwick(n: int) -> List[int]:\n    return [0] * (n + 1)\n\ndef update(fenwick: List[int], idx: int, val: int) -> None:\n    while idx < len(fenwick):\n        fenwick[idx] += val\n        idx += idx & -idx\n\ndef query(fenwick: List[int], idx: int) -> int:\n    result = 0\n    while idx > 0:\n        result += fenwick[idx]\n        idx -= idx & -idx\n    return result\n\ndef get_inversion_count(sequence: List[int]) -> int:\n    n = len(sequence)\n    fenwick = build_fenwick(n)\n    inversions = 0\n    for num in sequence:\n        inversions += query(fenwick, num - 1)\n        update(fenwick, num, 1)\n    return inversions\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    p = list(map(int, data[1:n+1]))\n    m = int(data[n+1])\n    a = list(map(int, data[n+2:n+m+2]))\n\n    results = []\n    current_p = p[:]\n    for ai in a:\n        for i in range(ai - 1):\n            if current_p[i] > current_p[i + 1]:\n                current_p[i], current_p[i + 1] = current_p[i + 1], current_p[i]\n        results.append(get_inversion_count(current_p))\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "```python\nfrom sortedcontainers import SortedList\n\ndef calculate_inversions(P):\n    sl = SortedList()\n    inversions = 0\n    for p in P:\n        pos = sl.bisect_left(p)\n        inversions += len(sl) - pos\n        sl.add(p)\n    return inversions\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n    \n    inversions = calculate_inversions(P)\n    print(inversions)\n    \n    for ai in A:\n        for _ in range(ai - 1):\n            if not P:\n                break\n            min_val = P.pop(0)\n            inversions -= sum(1 for x in P if x < min_val)\n            P.append(min_val)\n        print(inversions)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc372_g", "codes": ["import sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef count_valid_pairs(A, B, C):\n    n = len(A)\n    count = 0\n    for i in range(n):\n        if B[i] == 0:\n            if A[i] * 1 + C[i] > 0:\n                count += 1\n        else:\n            max_x = (C[i] - 1) // A[i]\n            min_y = 0\n            while min_y <= max_x:\n                mid_y = (min_y + max_x) // 2\n                if A[i] * mid_y + B[i] * mid_y >= C[i]:\n                    min_y = mid_y + 1\n                else:\n                    max_x = mid_y - 1\n            count += max_x\n    return count\n\ndef main():\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = []\n        B = []\n        C = []\n        for i in range(N):\n            A.append(int(data[index]))\n            B.append(int(data[index + 1]))\n            C.append(int(data[index + 2]))\n            index += 3\n        result = count_valid_pairs(A, B, C)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "def count_valid_pairs(A, B, C):\n    n = len(A)\n    count = 0\n    \n    for x in range(1, max(A)):\n        left, right = 0, max(C) // B[0] + 1\n        while left < right:\n            mid = (left + right) // 2\n            if all(B[i] * mid + A[i] * x < C[i] for i in range(n)):\n                left = mid + 1\n            else:\n                right = mid\n        count += left - 1\n    \n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        A = [int(data[index]) for index in range(index, index + n)]\n        index += n\n        B = [int(data[index]) for index in range(index, index + n)]\n        index += n\n        C = [int(data[index]) for index in range(index, index + n)]\n        index += n\n        \n        results.append(count_valid_pairs(A, B, C))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef count_valid_pairs(A, B, C):\n    n = len(A)\n    count = 0\n    for i in range(n):\n        if B[i] == 0:\n            if A[i] * 1 + C[i] > 0:\n                count += 1\n        else:\n            max_x = (C[i] - 1) // A[i]\n            min_y = 0\n            while min_y <= max_x:\n                mid_y = (min_y + max_x) // 2\n                if A[i] * mid_y + B[i] * mid_y >= C[i]:\n                    min_y = mid_y + 1\n                else:\n                    max_x = mid_y - 1\n            count += max_x\n    return count\n\ndef main():\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = []\n        B = []\n        C = []\n        for i in range(N):\n            A.append(int(data[index]))\n            B.append(int(data[index + 1]))\n            C.append(int(data[index + 2]))\n            index += 3\n        result = count_valid_pairs(A, B, C)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\ndef count_valid_pairs(A, B, C):\n    n = len(A)\n    count = 0\n    \n    for x in range(1, max(A)):\n        left, right = 0, max(C) // B[0] + 1\n        while left < right:\n            mid = (left + right) // 2\n            if all(B[i] * mid + A[i] * x < C[i] for i in range(n)):\n                left = mid + 1\n            else:\n                right = mid\n        count += left - 1\n    \n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        A = [int(data[index]) for index in range(index, index + n)]\n        index += n\n        B = [int(data[index]) for index in range(index, index + n)]\n        index += n\n        C = [int(data[index]) for index in range(index, index + n)]\n        index += n\n        \n        results.append(count_valid_pairs(A, B, C))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "3548", "codes": ["from itertools import combinations_with_replacement, permutations\n\ndef count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def can_form_palindrome(digit_counts):\n        odd_count = sum(1 for count in digit_counts.values() if count % 2 != 0)\n        return odd_count <= 1\n    \n    def count_permutations(digit_counts):\n        total = 1\n        for count in digit_counts.values():\n            total *= factorial(count) // (factorial(count // 2) * factorial((count + 1) // 2))\n        return total\n    \n    digit_set = set(range(1, 10))\n    good_count = 0\n    \n    for r in range(1, n + 1):\n        for combo in combinations_with_replacement(digit_set, r):\n            if can_form_palindrome({digit: combo.count(digit) for digit in digit_set}):\n                for perm in permutations(combo):\n                    num = int(''.join(map(str, perm)))\n                    if num % k == 0:\n                        good_count += 1\n    \n    return good_count", "def count_good_integers(n: int, k: int) -> int:\n    def is_palindrome(num: int) -> bool:\n        return str(num) == str(num)[::-1]\n    \n    def is_divisible(num: int, divisor: int) -> bool:\n        return num % divisor == 0\n    \n    def count_good_integers_helper(n: int, k: int) -> int:\n        if n == 1:\n            return len([i for i in range(1, 10) if i % k == 0])\n        \n        count = 0\n        half = n // 2\n        for i in range(10**half, 10**(half+1)):\n            if str(i)[0] != '0' and is_palindrome(i):\n                num = int(str(i) + str(i)[::-1] if n % 2 == 0 else str(i)[:-1] + str(i)[::-1])\n                if is_divisible(num, k):\n                    count += 1\n        return count\n    \n    return count_good_integers_helper(n, k)"], "passed": [false, false], "raw_code": ["```python\nfrom itertools import combinations_with_replacement, permutations\n\ndef count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def can_form_palindrome(digit_counts):\n        odd_count = sum(1 for count in digit_counts.values() if count % 2 != 0)\n        return odd_count <= 1\n    \n    def count_permutations(digit_counts):\n        total = 1\n        for count in digit_counts.values():\n            total *= factorial(count) // (factorial(count // 2) * factorial((count + 1) // 2))\n        return total\n    \n    digit_set = set(range(1, 10))\n    good_count = 0\n    \n    for r in range(1, n + 1):\n        for combo in combinations_with_replacement(digit_set, r):\n            if can_form_palindrome({digit: combo.count(digit) for digit in digit_set}):\n                for perm in permutations(combo):\n                    num = int(''.join(map(str, perm)))\n                    if num % k == 0:\n                        good_count += 1\n    \n    return good_count\n```", "```python\ndef count_good_integers(n: int, k: int) -> int:\n    def is_palindrome(num: int) -> bool:\n        return str(num) == str(num)[::-1]\n    \n    def is_divisible(num: int, divisor: int) -> bool:\n        return num % divisor == 0\n    \n    def count_good_integers_helper(n: int, k: int) -> int:\n        if n == 1:\n            return len([i for i in range(1, 10) if i % k == 0])\n        \n        count = 0\n        half = n // 2\n        for i in range(10**half, 10**(half+1)):\n            if str(i)[0] != '0' and is_palindrome(i):\n                num = int(str(i) + str(i)[::-1] if n % 2 == 0 else str(i)[:-1] + str(i)[::-1])\n                if is_divisible(num, k):\n                    count += 1\n        return count\n    \n    return count_good_integers_helper(n, k)\n```"]}
{"task_id": "3571", "codes": ["from collections import defaultdict, deque\n\ndef maxIncreasingPath(coordinates, k):\n    n = len(coordinates)\n    # Step 1: Sort coordinates\n    coordinates.sort()\n    \n    # Step 2: Build the graph and indegree count\n    graph = defaultdict(list)\n    indegree = [0] * n\n    \n    for i in range(n):\n        x1, y1 = coordinates[i]\n        for j in range(i + 1, n):\n            x2, y2 = coordinates[j]\n            if x2 > x1 and y2 > y1:\n                graph[i].append(j)\n                indegree[j] += 1\n    \n    # Step 3: Topological sort using Kahn's algorithm\n    queue = deque([i for i in range(n) if indegree[i] == 0])\n    dp = [1] * n\n    \n    while queue:\n        u = queue.popleft()\n        for v in graph[u]:\n            dp[v] = max(dp[v], dp[u] + 1)\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                queue.append(v)\n    \n    return dp[k]", "def maxIncreasingPath(coordinates, k):\n    def dfs(x, y):\n        if dp[x][y] != -1:\n            return dp[x][y]\n        \n        max_length = 1\n        for dx, dy in [(0, 1), (1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and coordinates[nx][ny] > coordinates[x][y]:\n                max_length = max(max_length, 1 + dfs(nx, ny))\n        \n        dp[x][y] = max_length\n        return dp[x][y]\n    \n    n, m = len(coordinates), len(coordinates[0])\n    coordinates.sort()\n    dp = [[-1] * m for _ in range(n)]\n    \n    max_path_length = 0\n    for i in range(n):\n        for j in range(m):\n            if i == k or j == k // m:\n                max_path_length = max(max_path_length, dfs(i, j))\n    \n    return max_path_length"], "passed": [false, false], "raw_code": ["```python\nfrom collections import defaultdict, deque\n\ndef maxIncreasingPath(coordinates, k):\n    n = len(coordinates)\n    # Step 1: Sort coordinates\n    coordinates.sort()\n    \n    # Step 2: Build the graph and indegree count\n    graph = defaultdict(list)\n    indegree = [0] * n\n    \n    for i in range(n):\n        x1, y1 = coordinates[i]\n        for j in range(i + 1, n):\n            x2, y2 = coordinates[j]\n            if x2 > x1 and y2 > y1:\n                graph[i].append(j)\n                indegree[j] += 1\n    \n    # Step 3: Topological sort using Kahn's algorithm\n    queue = deque([i for i in range(n) if indegree[i] == 0])\n    dp = [1] * n\n    \n    while queue:\n        u = queue.popleft()\n        for v in graph[u]:\n            dp[v] = max(dp[v], dp[u] + 1)\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                queue.append(v)\n    \n    return dp[k]\n```", "```python\ndef maxIncreasingPath(coordinates, k):\n    def dfs(x, y):\n        if dp[x][y] != -1:\n            return dp[x][y]\n        \n        max_length = 1\n        for dx, dy in [(0, 1), (1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and coordinates[nx][ny] > coordinates[x][y]:\n                max_length = max(max_length, 1 + dfs(nx, ny))\n        \n        dp[x][y] = max_length\n        return dp[x][y]\n    \n    n, m = len(coordinates), len(coordinates[0])\n    coordinates.sort()\n    dp = [[-1] * m for _ in range(n)]\n    \n    max_path_length = 0\n    for i in range(n):\n        for j in range(m):\n            if i == k or j == k // m:\n                max_path_length = max(max_path_length, dfs(i, j))\n    \n    return max_path_length\n```"]}
{"task_id": "abc370_g", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n    \n    # Precompute divisor sums modulo 3\n    max_val = N + 1\n    divisor_sum_mod_3 = [0] * max_val\n    for i in range(1, max_val):\n        for j in range(i, max_val, i):\n            divisor_sum_mod_3[j] += i % 3\n    \n    # Initialize DP table\n    dp = [[0] * 3 for _ in range(M + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(1, M + 1):\n        for num in range(1, max_val):\n            if num > N:\n                break\n            dp[i][divisor_sum_mod_3[num]] += dp[i - 1][(divisor_sum_mod_3[num] * 3) % 3]\n            dp[i][divisor_sum_mod_3[num]] %= MOD\n    \n    # Sum up all valid sequences of length M\n    result = sum(dp[M]) % MOD\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "import sys\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef divisors(n):\n    divs = defaultdict(int)\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divs[i] += 1\n            if i != n // i:\n                divs[n // i] += 1\n    return divs\n\ndef good(n):\n    div_sum = sum(divisors(n).values())\n    return div_sum % 3 == 0\n\ndef main():\n    N, M = map(int, input().split())\n    dp = [[0] * 3 for _ in range(M + 1)]\n    dp[0][0] = 1\n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            if good(j):\n                dp[i][j % 3] += dp[i - 1][(j - 1) % 3]\n                dp[i][j % 3] %= MOD\n    print(dp[M][0])\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n    \n    # Precompute divisor sums modulo 3\n    max_val = N + 1\n    divisor_sum_mod_3 = [0] * max_val\n    for i in range(1, max_val):\n        for j in range(i, max_val, i):\n            divisor_sum_mod_3[j] += i % 3\n    \n    # Initialize DP table\n    dp = [[0] * 3 for _ in range(M + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(1, M + 1):\n        for num in range(1, max_val):\n            if num > N:\n                break\n            dp[i][divisor_sum_mod_3[num]] += dp[i - 1][(divisor_sum_mod_3[num] * 3) % 3]\n            dp[i][divisor_sum_mod_3[num]] %= MOD\n    \n    # Sum up all valid sequences of length M\n    result = sum(dp[M]) % MOD\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```", "import sys\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef divisors(n):\n    divs = defaultdict(int)\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divs[i] += 1\n            if i != n // i:\n                divs[n // i] += 1\n    return divs\n\ndef good(n):\n    div_sum = sum(divisors(n).values())\n    return div_sum % 3 == 0\n\ndef main():\n    N, M = map(int, input().split())\n    dp = [[0] * 3 for _ in range(M + 1)]\n    dp[0][0] = 1\n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            if good(j):\n                dp[i][j % 3] += dp[i - 1][(j - 1) % 3]\n                dp[i][j % 3] %= MOD\n    print(dp[M][0])\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "3580", "codes": ["def smallest_almost_equal_index(s: str, pattern: str) -> int:\n    n = len(pattern)\n    for i in range(len(s) - n + 1):\n        diff_count = sum(1 for j in range(n) if s[i + j] != pattern[j])\n        if diff_count <= 1:\n            return i\n    return -1", "def find_almost_equal_substring(s: str, pattern: str) -> int:\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    \n    return -1"], "passed": [false, true], "raw_code": ["```python\ndef smallest_almost_equal_index(s: str, pattern: str) -> int:\n    n = len(pattern)\n    for i in range(len(s) - n + 1):\n        diff_count = sum(1 for j in range(n) if s[i + j] != pattern[j])\n        if diff_count <= 1:\n            return i\n    return -1\n```", "```python\ndef find_almost_equal_substring(s: str, pattern: str) -> int:\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    \n    return -1\n```"]}
{"task_id": "abc365_e", "codes": ["def calculate_xor_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute the prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Initialize the result\n    result = 0\n    \n    # Iterate over all pairs (i, j)\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            result += prefix_xor[j] ^ prefix_xor[i - 1]\n    \n    print(result)\n\ncalculate_xor_sum()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n\n    # Compute prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Calculate the result\n    result = 0\n    for j in range(1, N + 1):\n        for i in range(j):\n            result += prefix_xor[j] ^ prefix_xor[i]\n    \n    print(result)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef calculate_xor_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute the prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Initialize the result\n    result = 0\n    \n    # Iterate over all pairs (i, j)\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            result += prefix_xor[j] ^ prefix_xor[i - 1]\n    \n    print(result)\n\ncalculate_xor_sum()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n\n    # Compute prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Calculate the result\n    result = 0\n    for j in range(1, N + 1):\n        for i in range(j):\n            result += prefix_xor[j] ^ prefix_xor[i]\n    \n    print(result)\n\nmain()\n```"]}
{"task_id": "abc371_e", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    result = 0\n    \n    for i in range(N):\n        distinct_values = set()\n        for j in range(i, N):\n            distinct_values.add(A[j])\n            result += len(distinct_values)\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    \n    for i in range(N):\n        distinct_values = set()\n        for j in range(i, N):\n            distinct_values.add(A[j])\n            total_sum += len(distinct_values)\n    \n    print(total_sum)\n\n# Call the function to execute it\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    result = 0\n    \n    for i in range(N):\n        distinct_values = set()\n        for j in range(i, N):\n            distinct_values.add(A[j])\n            result += len(distinct_values)\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    \n    for i in range(N):\n        distinct_values = set()\n        for j in range(i, N):\n            distinct_values.add(A[j])\n            total_sum += len(distinct_values)\n    \n    print(total_sum)\n\n# Call the function to execute it\nmain()\n```"]}
{"task_id": "abc373_e", "codes": ["def min_additional_votes(N, M, K, votes):\n    total_votes = sum(votes)\n    remaining_votes = K - total_votes\n    C = [-1] * N\n    votes_sorted = sorted(votes, reverse=True)\n    for i in range(N):\n        needed_votes = float('inf')\n        for j in range(N):\n            if j == i:\n                continue\n            if votes[j] > votes[i]:\n                needed_votes = min(needed_votes, votes[j] - votes[i] + 1)\n        if needed_votes <= remaining_votes:\n            C[i] = needed_votes\n    return ' '.join(map(str, C))\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nvotes = list(map(int, data[3:]))\n\n# Print the result\nc = min_additional_votes(N, M, K, votes)\nprint(c)\n", "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\ndef min_additional_votes(N, M, K, A):\n    C = [-1] * N\n    \n    for i in range(N):\n        if A[i] >= K - sum(A) + A[i]:\n            C[i] = 0\n            continue\n        \n        left, right = 0, K - sum(A) + A[i]\n        while left < right:\n            mid = (left + right) // 2\n            if is_winning(N, M, K, A, i, mid):\n                right = mid\n            else:\n                left = mid + 1\n        \n        if is_winning(N, M, K, A, i, left):\n            C[i] = left\n    \n    return C\n\ndef is_winning(N, M, K, A, i, X):\n    votes = A[:]\n    votes[i] += X\n    votes.sort(reverse=True)\n    \n    count = 0\n    for j in range(N):\n        if j < M and votes[j] > votes[i]:\n            count += 1\n    \n    return count < M\n\nC = min_additional_votes(N, M, K, A)\nprint(' '.join(map(str, C)))"], "passed": [false, false], "raw_code": ["def min_additional_votes(N, M, K, votes):\n    total_votes = sum(votes)\n    remaining_votes = K - total_votes\n    C = [-1] * N\n    votes_sorted = sorted(votes, reverse=True)\n    for i in range(N):\n        needed_votes = float('inf')\n        for j in range(N):\n            if j == i:\n                continue\n            if votes[j] > votes[i]:\n                needed_votes = min(needed_votes, votes[j] - votes[i] + 1)\n        if needed_votes <= remaining_votes:\n            C[i] = needed_votes\n    return ' '.join(map(str, C))\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nvotes = list(map(int, data[3:]))\n\n# Print the result\nc = min_additional_votes(N, M, K, votes)\nprint(c)\n", "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\ndef min_additional_votes(N, M, K, A):\n    C = [-1] * N\n    \n    for i in range(N):\n        if A[i] >= K - sum(A) + A[i]:\n            C[i] = 0\n            continue\n        \n        left, right = 0, K - sum(A) + A[i]\n        while left < right:\n            mid = (left + right) // 2\n            if is_winning(N, M, K, A, i, mid):\n                right = mid\n            else:\n                left = mid + 1\n        \n        if is_winning(N, M, K, A, i, left):\n            C[i] = left\n    \n    return C\n\ndef is_winning(N, M, K, A, i, X):\n    votes = A[:]\n    votes[i] += X\n    votes.sort(reverse=True)\n    \n    count = 0\n    for j in range(N):\n        if j < M and votes[j] > votes[i]:\n            count += 1\n    \n    return count < M\n\nC = min_additional_votes(N, M, K, A)\nprint(' '.join(map(str, C)))\n```"]}
{"final_accuracy": "0.00%"}
{"difficulty": "hard", "num_threads": 32, "temperature": 0.7, "n": 2, "context": "all", "selection": "oracle", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_parallel_sample_vanilla__qwen_7b_hard_n_2.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"final_accuracy": "0.00%"}
{"difficulty": "hard", "num_threads": 32, "temperature": 0.7, "n": 2, "context": "all", "selection": "oracle", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_parallel_sample_vanilla__qwen_7b_hard_n_2.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"final_accuracy": "0.00%"}
