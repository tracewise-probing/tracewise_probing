{"difficulty": "medium", "num_threads": 32, "temperature": 0.9, "n": 16, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_OUR01_qwen_7b_medium_n_16.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    count = 0\n    for word in message:\n        if word in banned_set:\n            count += 1\n            if count >= 2:\n                return True\n    return False", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    count = 0\n    for word in message:\n        if word in banned_set:\n            count += 1\n            if count >= 2:\n                return True\n    return False\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()", "passed": true, "raw_code": "```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()\n```"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    # Create a list of potential choices for each interval\n    choices = []\n    for s in start:\n        choices.append(s)\n        choices.append(s + d)\n    \n    # Sort the choices\n    choices.sort()\n    \n    # Calculate the differences between consecutive choices\n    max_diff = 0\n    for i in range(1, len(choices)):\n        max_diff = max(max_diff, choices[i] - choices[i-1])\n    \n    return max_diff", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    # Create a list of potential choices for each interval\n    choices = []\n    for s in start:\n        choices.append(s)\n        choices.append(s + d)\n    \n    # Sort the choices\n    choices.sort()\n    \n    # Calculate the differences between consecutive choices\n    max_diff = 0\n    for i in range(1, len(choices)):\n        max_diff = max(max_diff, choices[i] - choices[i-1])\n    \n    return max_diff\n```"}
{"task_id": "3518", "code": "def max_score(a, b):\n    # Sort array b in ascending order\n    b.sort()\n    \n    # Select the four largest elements from b\n    largest_b = b[-4:]\n    \n    # Calculate the score\n    score = a[0] * largest_b[0] + a[1] * largest_b[1] + a[2] * largest_b[2] + a[3] * largest_b[3]\n    \n    return score", "passed": false, "raw_code": "```python\ndef max_score(a, b):\n    # Sort array b in ascending order\n    b.sort()\n    \n    # Select the four largest elements from b\n    largest_b = b[-4:]\n    \n    # Calculate the score\n    score = a[0] * largest_b[0] + a[1] * largest_b[1] + a[2] * largest_b[2] + a[3] * largest_b[3]\n    \n    return score\n```"}
{"task_id": "abc366_c", "code": "import sys\nfrom collections import Counter\n\ndef process_queries():\n    Q = int(sys.stdin.readline().strip())\n    queries = [sys.stdin.readline().strip().split() for _ in range(Q)]\n    \n    bag = Counter()\n    answers = []\n    \n    for query in queries:\n        if query[0] == '1':\n            x = int(query[1])\n            bag[x] += 1\n        elif query[0] == '2':\n            x = int(query[1])\n            if bag[x] > 0:\n                bag[x] -= 1\n                if bag[x] == 0:\n                    del bag[x]\n        elif query[0] == '3':\n            answers.append(len(bag))\n    \n    for answer in answers:\n        print(answer)\n\n# Call the function to process the queries\nprocess_queries()", "passed": true, "raw_code": "```python\nimport sys\nfrom collections import Counter\n\ndef process_queries():\n    Q = int(sys.stdin.readline().strip())\n    queries = [sys.stdin.readline().strip().split() for _ in range(Q)]\n    \n    bag = Counter()\n    answers = []\n    \n    for query in queries:\n        if query[0] == '1':\n            x = int(query[1])\n            bag[x] += 1\n        elif query[0] == '2':\n            x = int(query[1])\n            if bag[x] > 0:\n                bag[x] -= 1\n                if bag[x] == 0:\n                    del bag[x]\n        elif query[0] == '3':\n            answers.append(len(bag))\n    \n    for answer in answers:\n        print(answer)\n\n# Call the function to process the queries\nprocess_queries()\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Initialize the first hour\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkB[i]) if i >= 2 else dp_A[i-1] + energyDrinkA[i]\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkA[i]) if i >= 2 else dp_B[i-1] + energyDrinkB[i]\n    \n    return max(dp_A[-1], dp_B[-1])", "passed": false, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Initialize the first hour\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkB[i]) if i >= 2 else dp_A[i-1] + energyDrinkA[i]\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkA[i]) if i >= 2 else dp_B[i-1] + energyDrinkB[i]\n    \n    return max(dp_A[-1], dp_B[-1])\n```"}
{"task_id": "3526", "code": "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range(n // 2) if row[i] != row[n - i - 1])\n    \n    def flips_for_col(col):\n        return sum(1 for i in range(m // 2) if grid[i][col] != grid[m - i - 1][col])\n    \n    total_flips_rows = sum(flips_for_row(grid[i]) for i in range(m))\n    total_flips_cols = sum(flips_for_col(j) for j in range(n))\n    \n    return min(total_flips_rows, total_flips_cols)", "passed": true, "raw_code": "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range(n // 2) if row[i] != row[n - i - 1])\n    \n    def flips_for_col(col):\n        return sum(1 for i in range(m // 2) if grid[i][col] != grid[m - i - 1][col])\n    \n    total_flips_rows = sum(flips_for_row(grid[i]) for i in range(m))\n    total_flips_cols = sum(flips_for_col(j) for j in range(n))\n    \n    return min(total_flips_rows, total_flips_cols)\n```"}
{"task_id": "abc372_d", "code": "d", "passed": false, "raw_code": "```python\ndef count_taller_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    stack = []\n    \n    for i in range(N):\n        while stack and heights[i] > heights[stack[-1]]:\n            result[stack.pop()] += 1\n        if stack:\n            result[stack[-1]] += 1\n        stack.append(i)\n    \n    print(' '.join(map(str, result)))\n\ncount_taller_buildings()"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)\n```"}
{"task_id": "3534", "code": "def count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def generate_swapped_numbers(num_str):\n        swapped_numbers = set()\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swapped_num_str = num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:]\n                swapped_numbers.add(swapped_num_str)\n        return swapped_numbers\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            if num1 == num2:\n                count += 1\n            else:\n                swapped_nums1 = generate_swapped_numbers(num1)\n                if num2 in swapped_nums1:\n                    count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def generate_swapped_numbers(num_str):\n        swapped_numbers = set()\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swapped_num_str = num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:]\n                swapped_numbers.add(swapped_num_str)\n        return swapped_numbers\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            if num1 == num2:\n                count += 1\n            else:\n                swapped_nums1 = generate_swapped_numbers(num1)\n                if num2 in swapped_nums1:\n                    count += 1\n    \n    return count\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    dp = [[0, 0] for _ in range(N)]\n    \n    dp[0][0] = 0\n    dp[0][1] = A[0]\n    \n    for i in range(1, N):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1])\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1]) + A[i] + (A[i] * (i % 2 == 1))\n    \n    print(max(dp[N-1][0], dp[N-1][1]))\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    dp = [[0, 0] for _ in range(N)]\n    \n    dp[0][0] = 0\n    dp[0][1] = A[0]\n    \n    for i in range(1, N):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1])\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1]) + A[i] + (A[i] * (i % 2 == 1))\n    \n    print(max(dp[N-1][0], dp[N-1][1]))\n\nmax_experience_points()\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    # Dictionary to store the frequency of differences\n    diff_count = {}\n    \n    for i in range(N):\n        for j in range(i - 1, -1, -1):\n            diff = A[i] - A[j]\n            if (j, diff) in diff_count:\n                count += diff_count[(j, diff)]\n            \n            # Update the count for the current difference\n            if (i, diff) in diff_count:\n                diff_count[(i, diff)] += 1\n            else:\n                diff_count[(i, diff)] = 1\n    \n    print(count + N)  # Adding N because every single element is an AP by itself\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    # Dictionary to store the frequency of differences\n    diff_count = {}\n    \n    for i in range(N):\n        for j in range(i - 1, -1, -1):\n            diff = A[i] - A[j]\n            if (j, diff) in diff_count:\n                count += diff_count[(j, diff)]\n            \n            # Update the count for the current difference\n            if (i, diff) in diff_count:\n                diff_count[(i, diff)] += 1\n            else:\n                diff_count[(i, diff)] = 1\n    \n    print(count + N)  # Adding N because every single element is an AP by itself\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "3522", "code": "def getSubarrayPowers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j+1] > subarray[j] for j in range(k-1)) and all(subarray[j+1] == subarray[j] + 1 or subarray[j+1] == subarray[j] for j in range(k-1)):\n            results[i] = max(subarray)\n    \n    return results", "passed": true, "raw_code": "```python\ndef getSubarrayPowers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j+1] > subarray[j] for j in range(k-1)) and all(subarray[j+1] == subarray[j] + 1 or subarray[j+1] == subarray[j] for j in range(k-1)):\n            results[i] = max(subarray)\n    \n    return results\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortest_path_after_queries(n, queries):\n    # Initialize the graph with direct edges\n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    def dijkstra(start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            if current_dist > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_dist + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return distances[end]\n    \n    result = []\n    for u, v in queries:\n        # Add the new edge to the graph\n        graph[u][v] = 1\n        \n        # Calculate the shortest path from 0 to n-1\n        path_length = dijkstra(0, n - 1)\n        result.append(path_length)\n    \n    return result", "passed": true, "raw_code": "```python\nimport heapq\n\ndef shortest_path_after_queries(n, queries):\n    # Initialize the graph with direct edges\n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    def dijkstra(start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            if current_dist > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_dist + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return distances[end]\n    \n    result = []\n    for u, v in queries:\n        # Add the new edge to the graph\n        graph[u][v] = 1\n        \n        # Calculate the shortest path from 0 to n-1\n        path_length = dijkstra(0, n - 1)\n        result.append(path_length)\n    \n    return result\n```"}
{"task_id": "abc367_c", "code": "def find_sequences(N, K, R):\n    def backtrack(index, current_sum, current_sequence):\n        if index == N:\n            if current_sum % K == 0:\n                result.append(current_sequence[:])\n            return\n        for i in range(1, R[index] + 1):\n            current_sequence[index] = i\n            backtrack(index + 1, current_sum + i, current_sequence)\n\n    result = []\n    current_sequence = [0] * N\n    backtrack(0, 0, current_sequence)\n    result.sort()\n    for seq in result:\n        print(' '.join(map(str, seq)))\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nR = list(map(int, data[2:]))\nfind_sequences(N, K, R)", "passed": true, "raw_code": "def find_sequences(N, K, R):\n    def backtrack(index, current_sum, current_sequence):\n        if index == N:\n            if current_sum % K == 0:\n                result.append(current_sequence[:])\n            return\n        for i in range(1, R[index] + 1):\n            current_sequence[index] = i\n            backtrack(index + 1, current_sum + i, current_sequence)\n\n    result = []\n    current_sequence = [0] * N\n    backtrack(0, 0, current_sequence)\n    result.sort()\n    for seq in result:\n        print(' '.join(map(str, seq)))\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nR = list(map(int, data[2:]))\nfind_sequences(N, K, R)"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    A.sort()\n    \n    if M >= sum(A):\n        print(\"infinite\")\n        return\n    \n    left, right = 0, M\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        total_subsidy = sum(min(mid, a) for a in A)\n        \n        if total_subsidy <= M:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    print(result)\n\nmax_subsidy_limit()", "passed": true, "raw_code": "```python\ndef max_subsidy_limit():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    A.sort()\n    \n    if M >= sum(A):\n        print(\"infinite\")\n        return\n    \n    left, right = 0, M\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        total_subsidy = sum(min(mid, a) for a in A)\n        \n        if total_subsidy <= M:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    print(result)\n\nmax_subsidy_limit()\n```"}
{"task_id": "arc181_a", "code": "def min_operations_to_sort(perm):\n    n = len(perm)\n    ops = 0\n    for i in range(n):\n        if perm[i] != i + 1:\n            target_index = perm.index(i + 1)\n            ops += abs(target_index - i)\n            perm[:target_index+1] = sorted(perm[:target_index+1])\n            perm[target_index+1:] = sorted(perm[target_index+1:])\n    return ops\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        perm = list(map(int, data[index:index+n]))\n        index += n\n        \n        result = min_operations_to_sort(perm)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef min_operations_to_sort(perm):\n    n = len(perm)\n    ops = 0\n    for i in range(n):\n        if perm[i] != i + 1:\n            target_index = perm.index(i + 1)\n            ops += abs(target_index - i)\n            perm[:target_index+1] = sorted(perm[:target_index+1])\n            perm[target_index+1:] = sorted(perm[target_index+1:])\n    return ops\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        perm = list(map(int, data[index:index+n]))\n        index += n\n        \n        result = min_operations_to_sort(perm)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[n-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[n-1]\n```"}
{"task_id": "abc370_c", "code": "def generate_min_array(S, T):\n    n = len(S)\n    X = []\n    \n    # Iterate through each character position\n    for i in range(n):\n        if S[i] != T[i]:\n            # Find the smallest character to replace S[i] with\n            for char in sorted(set('abcdefghijklmnopqrstuvwxyz')):\n                if char > S[i]:\n                    new_S = S[:i] + char + S[i+1:]\n                    if new_S <= S:\n                        X.append(new_S)\n                        break\n            else:\n                raise ValueError(\"No suitable replacement found\")\n    \n    return X\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nS = data[0]\nT = data[1]\n\n# Generate the array\nresult = generate_min_array(S, T)\n\n# Print the result\nprint(len(result))\nfor s in result:\n    print(s)", "passed": false, "raw_code": "```python\ndef generate_min_array(S, T):\n    n = len(S)\n    X = []\n    \n    # Iterate through each character position\n    for i in range(n):\n        if S[i] != T[i]:\n            # Find the smallest character to replace S[i] with\n            for char in sorted(set('abcdefghijklmnopqrstuvwxyz')):\n                if char > S[i]:\n                    new_S = S[:i] + char + S[i+1:]\n                    if new_S <= S:\n                        X.append(new_S)\n                        break\n            else:\n                raise ValueError(\"No suitable replacement found\")\n    \n    return X\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nS = data[0]\nT = data[1]\n\n# Generate the array\nresult = generate_min_array(S, T)\n\n# Print the result\nprint(len(result))\nfor s in result:\n    print(s)\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    index = 0\n    \n    while True:\n        # Find the next enemy with health > 0\n        while index < N and H[index] <= 0:\n            index += 1\n        \n        if index == N:\n            break\n        \n        # Increment T\n        T += 1\n        \n        # Attack the frontmost enemy\n        if T % 3 == 0:\n            H[index] -= 3\n        else:\n            H[index] -= 1\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    index = 0\n    \n    while True:\n        # Find the next enemy with health > 0\n        while index < N and H[index] <= 0:\n            index += 1\n        \n        if index == N:\n            break\n        \n        # Increment T\n        T += 1\n        \n        # Attack the frontmost enemy\n        if T % 3 == 0:\n            H[index] -= 3\n        else:\n            H[index] -= 1\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "3495", "code": "def kthObstacleDistance(queries, k):\n    import heapq\n    \n    distances = []\n    \n    def get_distance(x, y):\n        return abs(x) + abs(y)\n    \n    result = []\n    for x, y in queries:\n        dist = get_distance(x, y)\n        heapq.heappush(distances, dist)\n        \n        if len(distances) < k:\n            result.append(-1)\n        else:\n            result.append(heapq.nsmallest(k, distances)[-1])\n    \n    return result", "passed": false, "raw_code": "```python\ndef kthObstacleDistance(queries, k):\n    import heapq\n    \n    distances = []\n    \n    def get_distance(x, y):\n        return abs(x) + abs(y)\n    \n    result = []\n    for x, y in queries:\n        dist = get_distance(x, y)\n        heapq.heappush(distances, dist)\n        \n        if len(distances) < k:\n            result.append(-1)\n        else:\n            result.append(heapq.nsmallest(k, distances)[-1])\n    \n    return result\n```"}
{"task_id": "3558", "code": "def hasPath(grid, health):\n    def dfs(x, y, health):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or health <= 0:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return health >= 1\n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        health -= temp\n        result = dfs(x + 1, y, health) or dfs(x - 1, y, health) or dfs(x, y + 1, health) or dfs(x, y - 1, health)\n        grid[x][y] = temp  # Unmark\n        return result\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef hasPath(grid, health):\n    def dfs(x, y, health):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or health <= 0:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return health >= 1\n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        health -= temp\n        result = dfs(x + 1, y, health) or dfs(x - 1, y, health) or dfs(x, y + 1, health) or dfs(x, y - 1, health)\n        grid[x][y] = temp  # Unmark\n        return result\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    # Initialize set to store walls\n    walls = set((i, j) for i in range(H) for j in range(W))\n    \n    for _ in range(Q):\n        r = int(data[index]) - 1\n        c = int(data[index + 1]) - 1\n        index += 2\n        \n        if (r, c) in walls:\n            walls.remove((r, c))\n        else:\n            # Directions: up, down, left, right\n            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n            \n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                \n                while 0 <= nr < H and 0 <= nc < W:\n                    if (nr, nc) in walls:\n                        walls.remove((nr, nc))\n                        break\n                    nr += dr\n                    nc += dc\n    \n    # Output the number of remaining walls\n    print(len(walls))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    # Initialize set to store walls\n    walls = set((i, j) for i in range(H) for j in range(W))\n    \n    for _ in range(Q):\n        r = int(data[index]) - 1\n        c = int(data[index + 1]) - 1\n        index += 2\n        \n        if (r, c) in walls:\n            walls.remove((r, c))\n        else:\n            # Directions: up, down, left, right\n            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n            \n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                \n                while 0 <= nr < H and 0 <= nc < W:\n                    if (nr, nc) in walls:\n                        walls.remove((nr, nc))\n                        break\n                    nr += dr\n                    nc += dc\n    \n    # Output the number of remaining walls\n    print(len(walls))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc371_d", "code": "i", "passed": false, "raw_code": "```python\nimport sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    P = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        index += 2\n        queries.append((L, R))\n    \n    # Preprocess\n    sorted_indices = sorted(range(N), key=lambda i: X[i])\n    prefix_sum = [0]\n    for i in range(N):\n        prefix_sum.append(prefix_sum[-1] + P[sorted_indices[i]])\n    \n    # Process queries\n    for L, R in queries:\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        \n        if left_index == len(X) or X[left_index] > R:\n            result = 0\n        else:\n            result = prefix_sum[right_index] - prefix_sum[left_index]\n        \n        print(result)\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "3559", "code": "def min_valid_strings(words, target):\n    prefix_map = {}\n    for i, word in enumerate(words):\n        for j in range(1, len(word) + 1):\n            prefix = word[:j]\n            if prefix not in prefix_map:\n                prefix_map[prefix] = []\n            prefix_map[prefix].append(i)\n    \n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    for i in range(1, len(target) + 1):\n        for prefix in prefix_map:\n            if i >= len(prefix) and target[i - len(prefix):i] == prefix:\n                for index in prefix_map[prefix]:\n                    dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef min_valid_strings(words, target):\n    prefix_map = {}\n    for i, word in enumerate(words):\n        for j in range(1, len(word) + 1):\n            prefix = word[:j]\n            if prefix not in prefix_map:\n                prefix_map[prefix] = []\n            prefix_map[prefix].append(i)\n    \n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    for i in range(1, len(target) + 1):\n        for prefix in prefix_map:\n            if i >= len(prefix) and target[i - len(prefix):i] == prefix:\n                for index in prefix_map[prefix]:\n                    dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    target_count = Counter(word2)\n    window_count = Counter()\n    \n    start = 0\n    end = 0\n    n = len(word1)\n    m = len(word2)\n    result = 0\n    \n    while end < n:\n        window_count[word1[end]] += 1\n        \n        # Check if the current window matches the target\n        while start <= end and window_count >= target_count:\n            result += n - end  # Count all valid substrings ending at 'end'\n            window_count[word1[start]] -= 1\n            if window_count[word1[start]] == 0:\n                del window_count[word1[start]]\n            start += 1\n    \n        end += 1\n    \n    return result", "passed": true, "raw_code": "```python\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    target_count = Counter(word2)\n    window_count = Counter()\n    \n    start = 0\n    end = 0\n    n = len(word1)\n    m = len(word2)\n    result = 0\n    \n    while end < n:\n        window_count[word1[end]] += 1\n        \n        # Check if the current window matches the target\n        while start <= end and window_count >= target_count:\n            result += n - end  # Count all valid substrings ending at 'end'\n            window_count[word1[start]] -= 1\n            if window_count[word1[start]] == 0:\n                del window_count[word1[start]]\n            start += 1\n    \n        end += 1\n    \n    return result\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    wins = 0\n    last_move = None\n    \n    for move in S:\n        if move == 'R':\n            if last_move != 'P':\n                wins += 1\n                last_move = 'P'\n            elif last_move != 'S':\n                last_move = 'S'\n        elif move == 'P':\n            if last_move != 'S':\n                wins += 1\n                last_move = 'S'\n            elif last_move != 'R':\n                last_move = 'R'\n        elif move == 'S':\n            if last_move != 'R':\n                wins += 1\n                last_move = 'R'\n            elif last_move != 'P':\n                last_move = 'P'\n    \n    return wins\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    wins = 0\n    last_move = None\n    \n    for move in S:\n        if move == 'R':\n            if last_move != 'P':\n                wins += 1\n                last_move = 'P'\n            elif last_move != 'S':\n                last_move = 'S'\n        elif move == 'P':\n            if last_move != 'S':\n                wins += 1\n                last_move = 'S'\n            elif last_move != 'R':\n                last_move = 'R'\n        elif move == 'S':\n            if last_move != 'R':\n                wins += 1\n                last_move = 'R'\n            elif last_move != 'P':\n                last_move = 'P'\n    \n    return wins\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "3496", "code": "def minTimeToReduceMountain(mountainHeight, workerTimes):\n    def calculateTime(workerTime, x):\n        return workerTime * x * (x + 1) // 2\n    \n    n = len(workerTimes)\n    dp = [[float('inf')] * (mountainHeight + 1) for _ in range(n + 1)]\n    \n    for j in range(mountainHeight + 1):\n        dp[0][j] = float('inf')\n    dp[0][0] = 0\n    \n    for i in range(1, n + 1):\n        for j in range(mountainHeight + 1):\n            for x in range(j + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - x] + calculateTime(workerTimes[i - 1], x))\n    \n    return min(max(row) for row in dp)", "passed": false, "raw_code": "```python\ndef minTimeToReduceMountain(mountainHeight, workerTimes):\n    def calculateTime(workerTime, x):\n        return workerTime * x * (x + 1) // 2\n    \n    n = len(workerTimes)\n    dp = [[float('inf')] * (mountainHeight + 1) for _ in range(n + 1)]\n    \n    for j in range(mountainHeight + 1):\n        dp[0][j] = float('inf')\n    dp[0][0] = 0\n    \n    for i in range(1, n + 1):\n        for j in range(mountainHeight + 1):\n            for x in range(j + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - x] + calculateTime(workerTimes[i - 1], x))\n    \n    return min(max(row) for row in dp)\n```"}
{"task_id": "3579", "code": "from itertools import permutations\n\ndef max_binary_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binaries = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = permutations(binaries)\n    \n    max_num = 0\n    \n    for perm in perms:\n        # Concatenate the permutation and convert to integer\n        concatenated = ''.join(perm)\n        num = int(concatenated, 2)\n        \n        # Update the maximum number if the current one is greater\n        if num > max_num:\n            max_num = num\n    \n    return max_num", "passed": true, "raw_code": "```python\nfrom itertools import permutations\n\ndef max_binary_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binaries = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = permutations(binaries)\n    \n    max_num = 0\n    \n    for perm in perms:\n        # Concatenate the permutation and convert to integer\n        concatenated = ''.join(perm)\n        num = int(concatenated, 2)\n        \n        # Update the maximum number if the current one is greater\n        if num > max_num:\n            max_num = num\n    \n    return max_num\n```"}
{"task_id": "abc367_d", "code": "def find_pairs(N, M, A):\n    # Initialize prefix sum and modulo count\n    prefix_sum = 0\n    modulo_count = {0: 1}  # To handle the case when prefix sum itself is a multiple of M\n    result = 0\n    \n    for i in range(N):\n        prefix_sum += A[i]\n        mod_value = prefix_sum % M\n        result += modulo_count.get(mod_value, 0)\n        modulo_count[mod_value] = modulo_count.get(mod_value, 0) + 1\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(find_pairs(N, M, A))", "passed": false, "raw_code": "```python\ndef find_pairs(N, M, A):\n    # Initialize prefix sum and modulo count\n    prefix_sum = 0\n    modulo_count = {0: 1}  # To handle the case when prefix sum itself is a multiple of M\n    result = 0\n    \n    for i in range(N):\n        prefix_sum += A[i]\n        mod_value = prefix_sum % M\n        result += modulo_count.get(mod_value, 0)\n        modulo_count[mod_value] = modulo_count.get(mod_value, 0) + 1\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(find_pairs(N, M, A))\n```"}
{"task_id": "3584", "code": "def smallestSequenceIndices(word1, word2):\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    res = []\n    changes = 0\n    while i < n and j < m:\n        if word1[i] == word2[j]:\n            res.append(j)\n            i += 1\n            j += 1\n        else:\n            if changes == 0:\n                changes += 1\n                j += 1\n            else:\n                return []\n    while j < m:\n        if changes == 0:\n            changes += 1\n            res.append(j)\n            j += 1\n        else:\n            return []\n    return res", "passed": false, "raw_code": "def smallestSequenceIndices(word1, word2):\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    res = []\n    changes = 0\n    while i < n and j < m:\n        if word1[i] == word2[j]:\n            res.append(j)\n            i += 1\n            j += 1\n        else:\n            if changes == 0:\n                changes += 1\n                j += 1\n            else:\n                return []\n    while j < m:\n        if changes == 0:\n            changes += 1\n            res.append(j)\n            j += 1\n        else:\n            return []\n    return res"}
{"task_id": "arc183_a", "code": "import itertools\n\ndef find_middle_sequence(N, K):\n    # Create the sequence [1, 1, ..., N, 2, 2, ..., N]\n    sequence = [i for i in range(1, N + 1)] * K\n    \n    # Generate all unique permutations of the sequence\n    all_permutations = set(itertools.permutations(sequence))\n    \n    # Convert the set to a sorted list\n    sorted_permutations = sorted(all_permutations)\n    \n    # Calculate the index of the middle permutation\n    S = len(sorted_permutations)\n    mid_index = (S + 1) // 2 - 1\n    \n    # Print the middle permutation\n    print(' '.join(map(str, sorted_permutations[mid_index])))\n\n# Call the function with the input arguments\nfind_middle_sequence(*map(int, input().split()))", "passed": false, "raw_code": "```python\nimport itertools\n\ndef find_middle_sequence(N, K):\n    # Create the sequence [1, 1, ..., N, 2, 2, ..., N]\n    sequence = [i for i in range(1, N + 1)] * K\n    \n    # Generate all unique permutations of the sequence\n    all_permutations = set(itertools.permutations(sequence))\n    \n    # Convert the set to a sorted list\n    sorted_permutations = sorted(all_permutations)\n    \n    # Calculate the index of the middle permutation\n    S = len(sorted_permutations)\n    mid_index = (S + 1) // 2 - 1\n    \n    # Print the middle permutation\n    print(' '.join(map(str, sorted_permutations[mid_index])))\n\n# Call the function with the input arguments\nfind_middle_sequence(*map(int, input().split()))\n```"}
{"task_id": "abc372_c", "code": "d", "passed": false, "raw_code": "```python\ndef count_abc(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == \"ABC\":\n            count += 1\n    return count\n\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    queries = [(int(data[2 + 2 * i]) - 1, data[2 + 2 * i + 1]) for i in range(Q)]\n    \n    abc_count = count_abc(S)\n    print(abc_count)\n    \n    for x, c in queries:\n        if S[x] == c:\n            continue\n        \n        # Remove the old character from the window\n        if x - 1 >= 0 and x + 2 < N:\n            if S[x - 1:x + 3] == \"ABC\":\n                abc_count -= 1\n        elif x + 2 < N:\n            if S[x + 1:x + 4] == \"ABC\":\n                abc_count -= 1\n        elif x - 1 >= 0:\n            if S[x - 2:x + 1] == \"ABC\":\n                abc_count -= 1\n        \n        # Add the new character to the window\n        if x - 1 >= 0 and x + 2 < N:\n            if S[x - 1:x + 3] == \"ABC\":\n                abc_count += 1\n        elif x + 2 < N:\n            if S[x:x + 3] == \"ABC\":\n                abc_count += 1\n        elif x - 1 >= 0:\n            if S[x - 1:x + 2] == \"ABC\":\n                abc_count += 1\n        \n        print(abc_count)\n        S = S[:x] + c + S[x+1:]\n\n# Call the function to process queries\nprocess_queries()"}
{"task_id": "3510", "code": "def assign_tower_heights(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    assigned_heights = set()\n    total_sum = 0\n    max_height = 0\n    \n    for maxHeight in maximumHeight:\n        for height in range(maxHeight, 0, -1):\n            if height not in assigned_heights:\n                assigned_heights.add(height)\n                total_sum += height\n                max_height = max(max_height, height)\n                break\n        else:\n            return -1\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef assign_tower_heights(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    assigned_heights = set()\n    total_sum = 0\n    max_height = 0\n    \n    for maxHeight in maximumHeight:\n        for height in range(maxHeight, 0, -1):\n            if height not in assigned_heights:\n                assigned_heights.add(height)\n                total_sum += height\n                max_height = max(max_height, height)\n                break\n        else:\n            return -1\n    \n    return total_sum\n```"}
{"task_id": "abc366_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    # Read the 3D array\n    A = [[[0] * N for _ in range(N)] for _ in range(N)]\n    for x in range(N):\n        for y in range(N):\n            A[x][y] = list(map(int, data[index:index+N]))\n            index += N\n\n    Q = int(data[index])\n    index += 1\n\n    # Preprocess the 3D array\n    prefix_sum = [[[0] * (N+1) for _ in range(N+1)] for _ in range(N+1)]\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z] = A[x-1][y-1][z-1] + \\\n                    prefix_sum[x-1][y][z] + \\\n                    prefix_sum[x][y-1][z] + \\\n                    prefix_sum[x][y][z-1] - \\\n                    prefix_sum[x-1][y-1][z] - \\\n                    prefix_sum[x-1][y][z-1] - \\\n                    prefix_sum[x][y-1][z-1] + \\\n                    prefix_sum[x-1][y-1][z-1]\n\n    # Answer each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        result = prefix_sum[Rx][Ry][Rz] - (\n            prefix_sum[Lx-1][Ry][Rz] + \n            prefix_sum[Rx][Ly-1][Rz] + \n            prefix_sum[Rx][Ry][Lz-1] - \n            prefix_sum[Lx-1][Ly-1][Rz] - \n            prefix_sum[Lx-1][Ry][Lz-1] - \n            prefix_sum[Rx][Ly-1][Lz-1] + \n            prefix_sum[Lx-1][Ly-1][Lz-1]\n        )\n        results.append(result)\n\n    # Print the results\n    for result in results:\n        print(result)\n\n# Call the main function\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    # Read the 3D array\n    A = [[[0] * N for _ in range(N)] for _ in range(N)]\n    for x in range(N):\n        for y in range(N):\n            A[x][y] = list(map(int, data[index:index+N]))\n            index += N\n\n    Q = int(data[index])\n    index += 1\n\n    # Preprocess the 3D array\n    prefix_sum = [[[0] * (N+1) for _ in range(N+1)] for _ in range(N+1)]\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z] = A[x-1][y-1][z-1] + \\\n                    prefix_sum[x-1][y][z] + \\\n                    prefix_sum[x][y-1][z] + \\\n                    prefix_sum[x][y][z-1] - \\\n                    prefix_sum[x-1][y-1][z] - \\\n                    prefix_sum[x-1][y][z-1] - \\\n                    prefix_sum[x][y-1][z-1] + \\\n                    prefix_sum[x-1][y-1][z-1]\n\n    # Answer each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        result = prefix_sum[Rx][Ry][Rz] - (\n            prefix_sum[Lx-1][Ry][Rz] + \n            prefix_sum[Rx][Ly-1][Rz] + \n            prefix_sum[Rx][Ry][Lz-1] - \n            prefix_sum[Lx-1][Ly-1][Rz] - \n            prefix_sum[Lx-1][Ry][Lz-1] - \n            prefix_sum[Rx][Ly-1][Lz-1] + \n            prefix_sum[Lx-1][Ly-1][Lz-1]\n        )\n        results.append(result)\n\n    # Print the results\n    for result in results:\n        print(result)\n\n# Call the main function\nmain()\n```"}
{"task_id": "3570", "code": "def count_substrings(word: str, k: int) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    word_length = len(word)\n    \n    for start in range(word_length):\n        substr_vowels = set()\n        substr_consonants = 0\n        for end in range(start, word_length):\n            char = word[end]\n            if char in vowels:\n                substr_vowels.add(char)\n            else:\n                substr_consonants += 1\n            if len(substr_vowels) == 5 and substr_consonants == k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    word_length = len(word)\n    \n    for start in range(word_length):\n        substr_vowels = set()\n        substr_consonants = 0\n        for end in range(start, word_length):\n            char = word[end]\n            if char in vowels:\n                substr_vowels.add(char)\n            else:\n                substr_consonants += 1\n            if len(substr_vowels) == 5 and substr_consonants == k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc371_c", "code": "import sys\nfrom itertools import permutations\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    def next_value():\n        nonlocal index\n        value = int(data[index])\n        index += 1\n        return value\n    \n    N = next_value()\n    M_G = next_value()\n    G = [[0] * N for _ in range(N)]\n    for _ in range(M_G):\n        u = next_value() - 1\n        v = next_value() - 1\n        G[u][v] = G[v][u] = 1\n    \n    M_H = next_value()\n    H = [[0] * N for _ in range(N)]\n    for _ in range(M_H):\n        a = next_value() - 1\n        b = next_value() - 1\n        H[a][b] = H[b][a] = 1\n    \n    A = []\n    for i in range(1, N):\n        row = []\n        for j in range(i + 1, N):\n            row.append(next_value())\n        A.append(row)\n    \n    return N, G, H, A\n\ndef calculate_initial_cost(G, H):\n    cost = 0\n    for i in range(len(G)):\n        for j in range(i + 1, len(G)):\n            if G[i][j] != H[i][j]:\n                cost += A[i][j]\n    return cost\n\ndef is_isomorphic(G, H, perm):\n    for i in range(len(G)):\n        for j in range(i + 1, len(G)):\n            if G[i][j] != H[perm[i]][perm[j]]:\n                return False\n    return True\n\ndef backtrack(N, G, H, A, start, perm, visited, min_cost):\n    if len(visited) == N:\n        if is_isomorphic(G, H, perm):\n            return sum(A[i][j] for i in range(N) for j in range(i + 1, N) if G[i][j] != H[perm[i]][perm[j]])\n        return float('inf')\n    \n    min_cost = float('inf')\n    for i in range(start, N):\n        if i not in visited:\n            visited.add(i)\n            perm[len(visited) - 1] = i\n            min_cost = min(min_cost, backtrack(N, G, H, A, i + 1, perm, visited, min_cost))\n            visited.remove(i)\n    return min_cost\n\ndef main():\n    N, G, H, A = read_input()\n    initial_cost = calculate_initial_cost(G, H)\n    perm = [0] * N\n    visited = set()\n    min_cost = backtrack(N, G, H, A, 0, perm, visited, initial_cost)\n    print(min_cost)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom itertools import permutations\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    def next_value():\n        nonlocal index\n        value = int(data[index])\n        index += 1\n        return value\n    \n    N = next_value()\n    M_G = next_value()\n    G = [[0] * N for _ in range(N)]\n    for _ in range(M_G):\n        u = next_value() - 1\n        v = next_value() - 1\n        G[u][v] = G[v][u] = 1\n    \n    M_H = next_value()\n    H = [[0] * N for _ in range(N)]\n    for _ in range(M_H):\n        a = next_value() - 1\n        b = next_value() - 1\n        H[a][b] = H[b][a] = 1\n    \n    A = []\n    for i in range(1, N):\n        row = []\n        for j in range(i + 1, N):\n            row.append(next_value())\n        A.append(row)\n    \n    return N, G, H, A\n\ndef calculate_initial_cost(G, H):\n    cost = 0\n    for i in range(len(G)):\n        for j in range(i + 1, len(G)):\n            if G[i][j] != H[i][j]:\n                cost += A[i][j]\n    return cost\n\ndef is_isomorphic(G, H, perm):\n    for i in range(len(G)):\n        for j in range(i + 1, len(G)):\n            if G[i][j] != H[perm[i]][perm[j]]:\n                return False\n    return True\n\ndef backtrack(N, G, H, A, start, perm, visited, min_cost):\n    if len(visited) == N:\n        if is_isomorphic(G, H, perm):\n            return sum(A[i][j] for i in range(N) for j in range(i + 1, N) if G[i][j] != H[perm[i]][perm[j]])\n        return float('inf')\n    \n    min_cost = float('inf')\n    for i in range(start, N):\n        if i not in visited:\n            visited.add(i)\n            perm[len(visited) - 1] = i\n            min_cost = min(min_cost, backtrack(N, G, H, A, i + 1, perm, visited, min_cost))\n            visited.remove(i)\n    return min_cost\n\ndef main():\n    N, G, H, A = read_input()\n    initial_cost = calculate_initial_cost(G, H)\n    perm = [0] * N\n    visited = set()\n    min_cost = backtrack(N, G, H, A, 0, perm, visited, initial_cost)\n    print(min_cost)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"final_accuracy": "35.14%"}
