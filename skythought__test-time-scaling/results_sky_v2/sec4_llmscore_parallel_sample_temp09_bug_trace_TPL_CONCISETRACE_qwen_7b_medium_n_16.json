{"difficulty": "medium", "num_threads": 32, "temperature": 0.9, "n": 16, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_CONCISETRACE_qwen_7b_medium_n_16.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3541", "code": "def isSpam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count == 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef isSpam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count == 2:\n                return True\n    \n    return False\n```"}
{"task_id": "3485", "code": "def max_score(start, d):\n    # Calculate the upper bounds of the intervals\n    upper_bounds = [s + d for s in start]\n    # Sort the upper bounds\n    upper_bounds.sort()\n    # The maximum possible score is the difference between the largest and smallest upper bounds\n    return upper_bounds[-1] - upper_bounds[0]", "passed": false, "raw_code": "```python\ndef max_score(start, d):\n    # Calculate the upper bounds of the intervals\n    upper_bounds = [s + d for s in start]\n    # Sort the upper bounds\n    upper_bounds.sort()\n    # The maximum possible score is the difference between the largest and smallest upper bounds\n    return upper_bounds[-1] - upper_bounds[0]\n```"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    b_sorted = sorted(b)\n    return a[0] * b_sorted[0] + a[1] * b_sorted[1] + a[2] * b_sorted[2] + a[3] * b_sorted[-1]", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    b_sorted = sorted(b)\n    return a[0] * b_sorted[0] + a[1] * b_sorted[1] + a[2] * b_sorted[2] + a[3] * b_sorted[-1]\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()", "passed": true, "raw_code": "```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()\n```"}
{"task_id": "3526", "code": "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_needed(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_needed(row) for row in grid)\n    col_flips = sum(flips_needed([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)", "passed": true, "raw_code": "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_needed(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_needed(row) for row in grid)\n    col_flips = sum(flips_needed([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        if queries[index] == '3':\n            results.append(len(bag))\n            index += 1\n        elif queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        if queries[index] == '3':\n            results.append(len(bag))\n            index += 1\n        elif queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result\n```"}
{"task_id": "3534", "code": "def almostEqualPairs(nums):\n    def generate_swapped_numbers(num):\n        num_str = str(num)\n        if len(num_str) == 1:\n            return {num}\n        swap_set = set()\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swapped_num_str = num_str[:i] + num_str[j] + num_str[i + 1:j] + num_str[i] + num_str[j + 1:]\n                swap_set.add(int(swapped_num_str))\n        return swap_set\n\n    swap_sets = [generate_swapped_numbers(num) for num in nums]\n    count = 0\n    for i in range(len(swap_sets)):\n        for j in range(i + 1, len(swap_sets)):\n            if nums[i] in swap_sets[j] or nums[j] in swap_sets[i]:\n                count += 1\n    return count", "passed": false, "raw_code": "```python\ndef almostEqualPairs(nums):\n    def generate_swapped_numbers(num):\n        num_str = str(num)\n        if len(num_str) == 1:\n            return {num}\n        swap_set = set()\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swapped_num_str = num_str[:i] + num_str[j] + num_str[i + 1:j] + num_str[i] + num_str[j + 1:]\n                swap_set.add(int(swapped_num_str))\n        return swap_set\n\n    swap_sets = [generate_swapped_numbers(num) for num in nums]\n    count = 0\n    for i in range(len(swap_sets)):\n        for j in range(i + 1, len(swap_sets)):\n            if nums[i] in swap_sets[j] or nums[j] in swap_sets[i]:\n                count += 1\n    return count\n```"}
{"task_id": "abc367_c", "code": "def find_sequences(N, K, R, current=[]):\n    if len(current) == N:\n        if sum(current) % K == 0:\n            print(' '.join(map(str, current)))\n        return\n    for i in range(1, R[len(current)] + 1):\n        find_sequences(N, K, R, current + [i])\n\nN, K = map(int, input().split())\nR = list(map(int, input().split()))\n\nfind_sequences(N, K, R)", "passed": true, "raw_code": "def find_sequences(N, K, R, current=[]):\n    if len(current) == N:\n        if sum(current) % K == 0:\n            print(' '.join(map(str, current)))\n        return\n    for i in range(1, R[len(current)] + 1):\n        find_sequences(N, K, R, current + [i])\n\nN, K = map(int, input().split())\nR = list(map(int, input().split()))\n\nfind_sequences(N, K, R)"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i - 1] + energyDrinkA[i], dp_B[i - 1])\n        dp_B[i] = max(dp_B[i - 1] + energyDrinkB[i], dp_A[i - 1])\n    \n    return max(dp_A[-1], dp_B[-1])", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i - 1] + energyDrinkA[i], dp_B[i - 1])\n        dp_B[i] = max(dp_B[i - 1] + energyDrinkB[i], dp_A[i - 1])\n    \n    return max(dp_A[-1], dp_B[-1])\n```"}
{"task_id": "3522", "code": "def findPowerOfSubarrays(nums, k):\n    results = []\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if subarray == sorted(subarray) and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    return results", "passed": false, "raw_code": "```python\ndef findPowerOfSubarrays(nums, k):\n    results = []\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if subarray == sorted(subarray) and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    return results\n```"}
{"task_id": "abc367_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Dictionary to store the count of remainders\n    remainder_count = {}\n    result = 0\n    \n    for i in range(N):\n        remainder = prefix_sum[i] % M\n        if remainder in remainder_count:\n            result += remainder_count[remainder]\n        remainder_count[remainder] = remainder_count.get(remainder, 0) + 1\n    \n    print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Dictionary to store the count of remainders\n    remainder_count = {}\n    result = 0\n    \n    for i in range(N):\n        remainder = prefix_sum[i] % M\n        if remainder in remainder_count:\n            result += remainder_count[remainder]\n        remainder_count[remainder] = remainder_count.get(remainder, 0) + 1\n    \n    print(result)\n\nmain()\n```"}
{"task_id": "abc372_d", "code": "def count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N):\n            if heights[j] >= heights[i]:\n                count += 1\n            else:\n                break\n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()", "passed": false, "raw_code": "```python\ndef count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N):\n            if heights[j] >= heights[i]:\n                count += 1\n            else:\n                break\n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()\n```"}
{"task_id": "abc369_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n\n    count = 0\n\n    for l in range(N):\n        for r in range(l, N):\n            if r - l == 0 or r - l == 1:\n                count += 1\n            elif r - l >= 2:\n                diff = A[l + 1] - A[l]\n                is_ap = True\n                for i in range(l + 2, r + 1):\n                    if A[i] - A[i - 1] != diff:\n                        is_ap = False\n                        break\n                if is_ap:\n                    count += 1\n\n    print(count)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n\n    count = 0\n\n    for l in range(N):\n        for r in range(l, N):\n            if r - l == 0 or r - l == 1:\n                count += 1\n            elif r - l >= 2:\n                diff = A[l + 1] - A[l]\n                is_ap = True\n                for i in range(l + 2, r + 1):\n                    if A[i] - A[i - 1] != diff:\n                        is_ap = False\n                        break\n                if is_ap:\n                    count += 1\n\n    print(count)\n\nmain()\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength in descending order\n    A.sort(reverse=True)\n    \n    total_points = 0\n    \n    # Iterate through the sorted list and calculate the total points\n    for i in range(N):\n        if (i + 1) % 2 == 0:\n            total_points += A[i] * 2\n        else:\n            total_points += A[i]\n    \n    print(total_points)\n\n# Call the function to execute\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength in descending order\n    A.sort(reverse=True)\n    \n    total_points = 0\n    \n    # Iterate through the sorted list and calculate the total points\n    for i in range(N):\n        if (i + 1) % 2 == 0:\n            total_points += A[i] * 2\n        else:\n            total_points += A[i]\n    \n    print(total_points)\n\n# Call the function to execute\nmax_experience_points()\n```"}
{"task_id": "3496", "code": "def min_time_to_reduce_height(mountainHeight, workerTimes):\n    def can_reduce_in_time(time_limit):\n        remaining_height = mountainHeight\n        for time in sorted(workerTimes, reverse=True):\n            if time > time_limit:\n                return False\n            x = 1\n            while time * (1 + x) <= time_limit:\n                x += 1\n            remaining_height -= x - 1\n            if remaining_height <= 0:\n                break\n        return remaining_height <= 0\n    \n    left, right = max(workerTimes), max(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if can_reduce_in_time(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef min_time_to_reduce_height(mountainHeight, workerTimes):\n    def can_reduce_in_time(time_limit):\n        remaining_height = mountainHeight\n        for time in sorted(workerTimes, reverse=True):\n            if time > time_limit:\n                return False\n            x = 1\n            while time * (1 + x) <= time_limit:\n                x += 1\n            remaining_height -= x - 1\n            if remaining_height <= 0:\n                break\n        return remaining_height <= 0\n    \n    left, right = max(workerTimes), max(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if can_reduce_in_time(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortest_path(n, queries):\n    def dijkstra(graph, start, end):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            for v in graph[u]:\n                distance = current_dist + 1\n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return dist[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        graph[v].append(u)  # Ensure bidirectional connection for simplicity\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "passed": false, "raw_code": "```python\nimport heapq\n\ndef shortest_path(n, queries):\n    def dijkstra(graph, start, end):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            for v in graph[u]:\n                distance = current_dist + 1\n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return dist[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        graph[v].append(u)  # Ensure bidirectional connection for simplicity\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    # Define the moves and their beats\n    beats = {'R': 'S', 'P': 'R', 'S': 'P'}\n    \n    # Initialize the count of wins\n    wins = 0\n    \n    # Initialize the previous move of Takahashi\n    prev_move = None\n    \n    for move in S:\n        # Find the best move for Takahashi\n        for takahashi_move in ['R', 'P', 'S']:\n            if takahashi_move == beats[move] and takahashi_move != prev_move:\n                wins += 1\n                prev_move = takahashi_move\n                break\n    \n    return wins\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    # Define the moves and their beats\n    beats = {'R': 'S', 'P': 'R', 'S': 'P'}\n    \n    # Initialize the count of wins\n    wins = 0\n    \n    # Initialize the previous move of Takahashi\n    prev_move = None\n    \n    for move in S:\n        # Find the best move for Takahashi\n        for takahashi_move in ['R', 'P', 'S']:\n            if takahashi_move == beats[move] and takahashi_move != prev_move:\n                wins += 1\n                prev_move = takahashi_move\n                break\n    \n    return wins\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "3579", "code": "def max_concatenated_binary(nums):\n    from itertools import permutations\n    \n    # Generate all permutations of the input list\n    perms = permutations(nums)\n    \n    max_value = 0\n    \n    # Iterate through each permutation and calculate the concatenated value\n    for perm in perms:\n        binary_str = ''.join(format(num, 'b') for num in perm)\n        decimal_value = int(binary_str, 2)\n        if decimal_value > max_value:\n            max_value = decimal_value\n    \n    return max_value", "passed": true, "raw_code": "```python\ndef max_concatenated_binary(nums):\n    from itertools import permutations\n    \n    # Generate all permutations of the input list\n    perms = permutations(nums)\n    \n    max_value = 0\n    \n    # Iterate through each permutation and calculate the concatenated value\n    for perm in perms:\n        binary_str = ''.join(format(num, 'b') for num in perm)\n        decimal_value = int(binary_str, 2)\n        if decimal_value > max_value:\n            max_value = decimal_value\n    \n    return max_value\n```"}
{"task_id": "abc371_d", "code": "d", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    P = list(map(int, data[index:index + N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = [(int(data[index]), int(data[index + 1])) for _ in range(Q)]\n    index += 2 * Q\n\n    # Compute prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + P[i]\n\n    # Process each query\n    for L, R in queries:\n        result = prefix_sum[R + 1] - prefix_sum[L]\n        print(result)\n\n# Call the function\nmain()"}
{"task_id": "3558", "code": "def hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        # Mark the cell as visited by setting it to 1 (unsafe)\n        temp = grid[x][y]\n        grid[x][y] = 1\n        \n        # Explore all four directions\n        if dfs(x + 1, y, health - temp) or \\\n           dfs(x - 1, y, health - temp) or \\\n           dfs(x, y + 1, health - temp) or \\\n           dfs(x, y - 1, health - temp):\n            return True\n        \n        # Unmark the cell\n        grid[x][y] = temp\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        # Mark the cell as visited by setting it to 1 (unsafe)\n        temp = grid[x][y]\n        grid[x][y] = 1\n        \n        # Explore all four directions\n        if dfs(x + 1, y, health - temp) or \\\n           dfs(x - 1, y, health - temp) or \\\n           dfs(x, y + 1, health - temp) or \\\n           dfs(x, y - 1, health - temp):\n            return True\n        \n        # Unmark the cell\n        grid[x][y] = temp\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Parse input\n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    queries = [(int(data[index + 2 * i]), int(data[index + 2 * i + 1])) for i in range(Q)]\n\n    # Initialize the grid with walls\n    walls = set()\n    for i in range(H):\n        for j in range(W):\n            walls.add((i, j))\n\n    # Process each query\n    for R_q, C_q in queries:\n        if (R_q - 1, C_q - 1) in walls:\n            walls.remove((R_q - 1, C_q - 1))\n        else:\n            # Find the first wall above, below, left, and right\n            up = next(((i, C_q - 1) for i in range(R_q - 2, -1, -1) if (i, C_q - 1) in walls), None)\n            down = next(((i, C_q - 1) for i in range(R_q, H) if (i, C_q - 1) in walls), None)\n            left = next(((R_q - 1, j) for j in range(C_q - 2, -1, -1) if (R_q - 1, j) in walls), None)\n            right = next(((R_q - 1, j) for j in range(C_q, W) if (R_q - 1, j) in walls), None)\n\n            # Destroy the found walls\n            if up: walls.remove(up)\n            if down: walls.remove(down)\n            if left: walls.remove(left)\n            if right: walls.remove(right)\n\n    # Print the number of remaining walls\n    print(len(walls))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Parse input\n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    queries = [(int(data[index + 2 * i]), int(data[index + 2 * i + 1])) for i in range(Q)]\n\n    # Initialize the grid with walls\n    walls = set()\n    for i in range(H):\n        for j in range(W):\n            walls.add((i, j))\n\n    # Process each query\n    for R_q, C_q in queries:\n        if (R_q - 1, C_q - 1) in walls:\n            walls.remove((R_q - 1, C_q - 1))\n        else:\n            # Find the first wall above, below, left, and right\n            up = next(((i, C_q - 1) for i in range(R_q - 2, -1, -1) if (i, C_q - 1) in walls), None)\n            down = next(((i, C_q - 1) for i in range(R_q, H) if (i, C_q - 1) in walls), None)\n            left = next(((R_q - 1, j) for j in range(C_q - 2, -1, -1) if (R_q - 1, j) in walls), None)\n            right = next(((R_q - 1, j) for j in range(C_q, W) if (R_q - 1, j) in walls), None)\n\n            # Destroy the found walls\n            if up: walls.remove(up)\n            if down: walls.remove(down)\n            if left: walls.remove(left)\n            if right: walls.remove(right)\n\n    # Print the number of remaining walls\n    print(len(walls))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```"}
{"task_id": "3573", "code": "from collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    n, m = len(word1), len(word2)\n    if m > n:\n        return 0\n    \n    target_count = Counter(word2)\n    current_count = Counter()\n    \n    left = 0\n    result = 0\n    \n    for right in range(n):\n        current_count[word1[right]] += 1\n        \n        # Shrink the window until it matches the target count\n        while current_count[word1[left]] > target_count[word1[left]]:\n            current_count[word1[left]] -= 1\n            left += 1\n        \n        # Check if the current window matches the target count\n        if current_count == target_count:\n            result += left + 1\n    \n    return result", "passed": false, "raw_code": "```python\nfrom collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    n, m = len(word1), len(word2)\n    if m > n:\n        return 0\n    \n    target_count = Counter(word2)\n    current_count = Counter()\n    \n    left = 0\n    result = 0\n    \n    for right in range(n):\n        current_count[word1[right]] += 1\n        \n        # Shrink the window until it matches the target count\n        while current_count[word1[left]] > target_count[word1[left]]:\n            current_count[word1[left]] -= 1\n            left += 1\n        \n        # Check if the current window matches the target count\n        if current_count == target_count:\n            result += left + 1\n    \n    return result\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    A.sort()\n    \n    if sum(A) <= M:\n        return \"infinite\"\n    \n    left, right = 0, max(A)\n    \n    while left < right:\n        mid = (left + right + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    A.sort()\n    \n    if sum(A) <= M:\n        return \"infinite\"\n    \n    left, right = 0, max(A)\n    \n    while left < right:\n        mid = (left + right + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "3559", "code": "def min_valid_words(words, target):\n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(n):\n        for word in words:\n            for j in range(min(len(word), n - i)):\n                if word[:j+1] == target[i:i+j+1]:\n                    dp[i+j+1] = min(dp[i+j+1], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef min_valid_words(words, target):\n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(n):\n        for word in words:\n            for j in range(min(len(word), n - i)):\n                if word[:j+1] == target[i:i+j+1]:\n                    dp[i+j+1] = min(dp[i+j+1], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n```"}
{"task_id": "arc181_a", "code": "def min_operations_to_sort(stdin):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n\n        # Find the longest increasing subarray at the beginning\n        start = 0\n        while start + 1 < n and p[start] < p[start + 1]:\n            start += 1\n\n        # Find the longest increasing subarray at the end\n        end = n - 1\n        while end - 1 >= 0 and p[end - 1] < p[end]:\n            end -= 1\n\n        # The minimum operations required is the sum of the lengths of these subarrays minus 1\n        result = max(0, start - (end - 1))\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nmin_operations_to_sort(sys.stdin)\n", "passed": false, "raw_code": "def min_operations_to_sort(stdin):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n\n        # Find the longest increasing subarray at the beginning\n        start = 0\n        while start + 1 < n and p[start] < p[start + 1]:\n            start += 1\n\n        # Find the longest increasing subarray at the end\n        end = n - 1\n        while end - 1 >= 0 and p[end - 1] < p[end]:\n            end -= 1\n\n        # The minimum operations required is the sum of the lengths of these subarrays minus 1\n        result = max(0, start - (end - 1))\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nmin_operations_to_sort(sys.stdin)\n"}
{"task_id": "3495", "code": "def kthObstacleDistance(queries, k):\n    import heapq\n    \n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(distances, distance)\n        \n        if len(distances) < k:\n            results.append(-1)\n        else:\n            results.append(heapq.nsmallest(k, distances)[-1])\n    \n    return results", "passed": false, "raw_code": "```python\ndef kthObstacleDistance(queries, k):\n    import heapq\n    \n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(distances, distance)\n        \n        if len(distances) < k:\n            results.append(-1)\n        else:\n            results.append(heapq.nsmallest(k, distances)[-1])\n    \n    return results\n```"}
{"task_id": "abc370_c", "code": "def generate_minimal_array(S: str, T: str) -> None:\n    if S == T:\n        print(0)\n        return\n\n    n = len(S)\n    changes = [0] * n\n\n    for i in range(n-2, -1, -1):\n        if S[i] != T[i]:\n            changes[i] = changes[i+1] + 1\n        else:\n            changes[i] = changes[i+1]\n\n    max_changes = changes[0]\n    res = [''] * (max_changes + 1)\n\n    for i in range(max_changes + 1):\n        res[i] = S\n        for j in range(26):\n            for k in range(n-1, -1, -1):\n                if S[k] != chr(ord('a') + j):\n                    res[i] = res[i][:k] + chr(ord('a') + j) + res[i][k+1:]\n                    break\n        S = res[i]\n\n    for s in res:\n        print(s)\n\ngenerate_minimal_array(input(), input())", "passed": false, "raw_code": "def generate_minimal_array(S: str, T: str) -> None:\n    if S == T:\n        print(0)\n        return\n\n    n = len(S)\n    changes = [0] * n\n\n    for i in range(n-2, -1, -1):\n        if S[i] != T[i]:\n            changes[i] = changes[i+1] + 1\n        else:\n            changes[i] = changes[i+1]\n\n    max_changes = changes[0]\n    res = [''] * (max_changes + 1)\n\n    for i in range(max_changes + 1):\n        res[i] = S\n        for j in range(26):\n            for k in range(n-1, -1, -1):\n                if S[k] != chr(ord('a') + j):\n                    res[i] = res[i][:k] + chr(ord('a') + j) + res[i][k+1:]\n                    break\n        S = res[i]\n\n    for s in res:\n        print(s)\n\ngenerate_minimal_array(input(), input())"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 3\n                    break\n        else:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 1\n                    break\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 3\n                    break\n        else:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 1\n                    break\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "3584", "code": "def smallest_sequence(word1, word2):\n    m, n = len(word1), len(word2)\n    i, j = 0, 0\n    result = []\n\n    while i < m and j < n:\n        if word1[i] != word2[j]:\n            # Find the next matching or changeable character in word1\n            k = i + 1\n            while k < m and word1[k] != word2[j]:\n                k += 1\n            \n            if k == m:\n                return []  # No valid sequence found\n\n            result.append(k - 1)  # Append the index to the result\n            i = k  # Move to the next character in word1\n        else:\n            result.append(i)  # Append the index to the result\n            i += 1\n            j += 1\n\n    return result", "passed": false, "raw_code": "```python\ndef smallest_sequence(word1, word2):\n    m, n = len(word1), len(word2)\n    i, j = 0, 0\n    result = []\n\n    while i < m and j < n:\n        if word1[i] != word2[j]:\n            # Find the next matching or changeable character in word1\n            k = i + 1\n            while k < m and word1[k] != word2[j]:\n                k += 1\n            \n            if k == m:\n                return []  # No valid sequence found\n\n            result.append(k - 1)  # Append the index to the result\n            i = k  # Move to the next character in word1\n        else:\n            result.append(i)  # Append the index to the result\n            i += 1\n            j += 1\n\n    return result\n```"}
{"task_id": "arc183_a", "code": "def generate_good_sequence(N, K):\n    from itertools import permutations\n    \n    # Generate all permutations of the sequence [1, 2, ..., N] repeated K times\n    elements = [i for i in range(1, N + 1) for _ in range(K)]\n    all_permutations = list(permutations(elements))\n    \n    # Sort the permutations lexicographically\n    all_permutations.sort()\n    \n    # Calculate the index we need to find\n    S = len(all_permutations)\n    target_index = (S + 1) // 2\n    \n    # Get the target permutation\n    target_sequence = all_permutations[target_index - 1]\n    \n    # Print the sequence\n    print(' '.join(map(str, target_sequence)))\n\n# Call the function with the input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\n\ngenerate_good_sequence(N, K)", "passed": false, "raw_code": "```python\ndef generate_good_sequence(N, K):\n    from itertools import permutations\n    \n    # Generate all permutations of the sequence [1, 2, ..., N] repeated K times\n    elements = [i for i in range(1, N + 1) for _ in range(K)]\n    all_permutations = list(permutations(elements))\n    \n    # Sort the permutations lexicographically\n    all_permutations.sort()\n    \n    # Calculate the index we need to find\n    S = len(all_permutations)\n    target_index = (S + 1) // 2\n    \n    # Get the target permutation\n    target_sequence = all_permutations[target_index - 1]\n    \n    # Print the sequence\n    print(' '.join(map(str, target_sequence)))\n\n# Call the function with the input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\n\ngenerate_good_sequence(N, K)\n```"}
{"task_id": "abc372_c", "code": "d", "passed": false, "raw_code": "```python\ndef count_abc_substrings(s):\n    n = len(s)\n    prefix_sum = [0] * (n + 1)\n    \n    for i in range(2, n):\n        if s[i - 2:i + 1] == \"ABC\":\n            prefix_sum[i + 1] = prefix_sum[i] + 1\n        else:\n            prefix_sum[i + 1] = prefix_sum[i]\n    \n    return prefix_sum\n\ndef process_queries(n, q, s, queries):\n    prefix_sum = count_abc_substrings(s)\n    results = []\n    \n    for x, c in queries:\n        x -= 1\n        if s[x] == c:\n            results.append(prefix_sum[-1])\n        else:\n            temp = s[:x] + c + s[x+1:]\n            temporary_prefix_sum = count_abc_substrings(temp)\n            results.append(temporary_prefix_sum[-1])\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    s = data[2]\n    queries = [(int(data[3 + 2 * i]) - 1, data[4 + 2 * i]) for i in range(q)]\n    \n    results = process_queries(n, q, s, queries)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "abc366_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read N\n    N = int(data[index])\n    index += 1\n    \n    # Read the 3D grid\n    grid = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                grid[x][y][z] = int(data[index])\n                index += 1\n    \n    # Precompute prefix sums\n    prefix_sum = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z] = (grid[x][y][z] +\n                                      prefix_sum[x-1][y][z] +\n                                      prefix_sum[x][y-1][z] +\n                                      prefix_sum[x][y][z-1] -\n                                      prefix_sum[x-1][y-1][z] -\n                                      prefix_sum[x-1][y][z-1] -\n                                      prefix_sum[x][y-1][z-1] +\n                                      prefix_sum[x-1][y-1][z-1])\n    \n    # Read Q\n    Q = int(data[index])\n    index += 1\n    \n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        \n        # Calculate the result using prefix sums\n        result = (prefix_sum[Rx][Ry][Rz] -\n                  prefix_sum[Lx-1][Ry][Rz] -\n                  prefix_sum[Rx][Ly-1][Rz] -\n                  prefix_sum[Rx][Ry][Lz-1] +\n                  prefix_sum[Lx-1][Ly-1][Rz] +\n                  prefix_sum[Lx-1][Ry][Lz-1] +\n                  prefix_sum[Rx][Ly-1][Lz-1] -\n                  prefix_sum[Lx-1][Ly-1][Lz-1])\n        \n        results.append(result)\n    \n    # Print all results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read N\n    N = int(data[index])\n    index += 1\n    \n    # Read the 3D grid\n    grid = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                grid[x][y][z] = int(data[index])\n                index += 1\n    \n    # Precompute prefix sums\n    prefix_sum = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z] = (grid[x][y][z] +\n                                      prefix_sum[x-1][y][z] +\n                                      prefix_sum[x][y-1][z] +\n                                      prefix_sum[x][y][z-1] -\n                                      prefix_sum[x-1][y-1][z] -\n                                      prefix_sum[x-1][y][z-1] -\n                                      prefix_sum[x][y-1][z-1] +\n                                      prefix_sum[x-1][y-1][z-1])\n    \n    # Read Q\n    Q = int(data[index])\n    index += 1\n    \n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        \n        # Calculate the result using prefix sums\n        result = (prefix_sum[Rx][Ry][Rz] -\n                  prefix_sum[Lx-1][Ry][Rz] -\n                  prefix_sum[Rx][Ly-1][Rz] -\n                  prefix_sum[Rx][Ry][Lz-1] +\n                  prefix_sum[Lx-1][Ly-1][Rz] +\n                  prefix_sum[Lx-1][Ry][Lz-1] +\n                  prefix_sum[Rx][Ly-1][Lz-1] -\n                  prefix_sum[Lx-1][Ly-1][Lz-1])\n        \n        results.append(result)\n    \n    # Print all results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3570", "code": "def count_substrings(word: str, k: int) -> int:\n    def is_vowel(c):\n        return c in 'aeiou'\n    \n    def count_vowels(s):\n        return sum(is_vowel(c) for c in s)\n    \n    def count_consonants(s):\n        return len(s) - count_vowels(s)\n    \n    n = len(word)\n    vowels = set('aeiou')\n    result = 0\n    \n    for i in range(n):\n        vowel_count = set()\n        consonant_count = 0\n        for j in range(i, n):\n            char = word[j]\n            if is_vowel(char):\n                vowel_count.add(char)\n            else:\n                consonant_count += 1\n            \n            if len(vowel_count) == 5 and consonant_count == k:\n                result += 1\n    \n    return result", "passed": true, "raw_code": "```python\ndef count_substrings(word: str, k: int) -> int:\n    def is_vowel(c):\n        return c in 'aeiou'\n    \n    def count_vowels(s):\n        return sum(is_vowel(c) for c in s)\n    \n    def count_consonants(s):\n        return len(s) - count_vowels(s)\n    \n    n = len(word)\n    vowels = set('aeiou')\n    result = 0\n    \n    for i in range(n):\n        vowel_count = set()\n        consonant_count = 0\n        for j in range(i, n):\n            char = word[j]\n            if is_vowel(char):\n                vowel_count.add(char)\n            else:\n                consonant_count += 1\n            \n            if len(vowel_count) == 5 and consonant_count == k:\n                result += 1\n    \n    return result\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    assigned_heights = set()\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        for h in range(mh, 0, -1):\n            if h not in assigned_heights:\n                assigned_heights.add(h)\n                total_sum += h\n                break\n        else:\n            return -1\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    assigned_heights = set()\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        for h in range(mh, 0, -1):\n            if h not in assigned_heights:\n                assigned_heights.add(h)\n                total_sum += h\n                break\n        else:\n            return -1\n    \n    return total_sum\n```"}
{"task_id": "abc371_c", "code": "def min_cost_to_isomorph():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    def read_int():\n        nonlocal index\n        value = int(data[index])\n        index += 1\n        return value\n\n    N = read_int()\n    M_G = read_int()\n    G_edges = []\n    for _ in range(M_G):\n        u = read_int() - 1\n        v = read_int() - 1\n        G_edges.append((u, v))\n\n    M_H = read_int()\n    H_edges = []\n    for _ in range(M_H):\n        a = read_int() - 1\n        b = read_int() - 1\n        H_edges.append((a, b))\n\n    A = [[0] * N for _ in range(N)]\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            A[i][j] = read_int()\n\n    # Convert edge lists to adjacency matrices\n    G_adj = [[0] * N for _ in range(N)]\n    for u, v in G_edges:\n        G_adj[u][v] = 1\n        G_adj[v][u] = 1\n\n    H_adj = [[0] * N for _ in range(N)]\n    for a, b in H_edges:\n        H_adj[a][b] = 1\n        H_adj[b][a] = 1\n\n    # Initialize DP table\n    dp = [float('inf')] * N\n    dp[0] = 0\n\n    # Fill DP table\n    for i in range(1, N):\n        new_dp = [float('inf')] * N\n        for j in range(i):\n            if G_adj[j][i]:\n                if H_adj[j][i]:\n                    new_dp[i] = min(new_dp[i], dp[j])\n                else:\n                    new_dp[i] = min(new_dp[i], dp[j] + A[j][i])\n            else:\n                if H_adj[j][i]:\n                    new_dp[i] = min(new_dp[i], dp[j] + A[j][i])\n                else:\n                    new_dp[i] = min(new_dp[i], dp[j])\n        dp = new_dp\n\n    print(dp[-1])\n\nmin_cost_to_isomorph()", "passed": false, "raw_code": "```python\ndef min_cost_to_isomorph():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    def read_int():\n        nonlocal index\n        value = int(data[index])\n        index += 1\n        return value\n\n    N = read_int()\n    M_G = read_int()\n    G_edges = []\n    for _ in range(M_G):\n        u = read_int() - 1\n        v = read_int() - 1\n        G_edges.append((u, v))\n\n    M_H = read_int()\n    H_edges = []\n    for _ in range(M_H):\n        a = read_int() - 1\n        b = read_int() - 1\n        H_edges.append((a, b))\n\n    A = [[0] * N for _ in range(N)]\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            A[i][j] = read_int()\n\n    # Convert edge lists to adjacency matrices\n    G_adj = [[0] * N for _ in range(N)]\n    for u, v in G_edges:\n        G_adj[u][v] = 1\n        G_adj[v][u] = 1\n\n    H_adj = [[0] * N for _ in range(N)]\n    for a, b in H_edges:\n        H_adj[a][b] = 1\n        H_adj[b][a] = 1\n\n    # Initialize DP table\n    dp = [float('inf')] * N\n    dp[0] = 0\n\n    # Fill DP table\n    for i in range(1, N):\n        new_dp = [float('inf')] * N\n        for j in range(i):\n            if G_adj[j][i]:\n                if H_adj[j][i]:\n                    new_dp[i] = min(new_dp[i], dp[j])\n                else:\n                    new_dp[i] = min(new_dp[i], dp[j] + A[j][i])\n            else:\n                if H_adj[j][i]:\n                    new_dp[i] = min(new_dp[i], dp[j] + A[j][i])\n                else:\n                    new_dp[i] = min(new_dp[i], dp[j])\n        dp = new_dp\n\n    print(dp[-1])\n\nmin_cost_to_isomorph()\n```"}
{"final_accuracy": "27.03%"}
