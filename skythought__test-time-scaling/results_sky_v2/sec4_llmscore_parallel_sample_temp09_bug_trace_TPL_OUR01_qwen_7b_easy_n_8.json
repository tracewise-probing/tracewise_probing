{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_OUR01_qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    s = input()\n    result = s.replace('.', '')\n    print(result)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    s = input()\n    result = s.replace('.', '')\n    print(result)\n\nremove_dots()\n```"}
{"task_id": "3555", "code": "def apply_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] = min_val * multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef apply_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] = min_val * multiplier\n    return nums\n```"}
{"task_id": "abc373_a", "code": "def main():\n    count = 0\n    for i in range(1, 13):\n        s = input().strip()\n        if len(s) == i:\n            count += 1\n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    count = 0\n    for i in range(1, 13):\n        s = input().strip()\n        if len(s) == i:\n            count += 1\n    print(count)\n\nmain()\n```"}
{"task_id": "3600", "code": "def kthCharacter(k):\n    n = 0\n    while n * (n + 1) // 2 < k:\n        n += 1\n    \n    remaining_length = k - (n * (n - 1) // 2)\n    current_char = chr(ord('a') + remaining_length - 1)\n    \n    return current_char", "passed": false, "raw_code": "```python\ndef kthCharacter(k):\n    n = 0\n    while n * (n + 1) // 2 < k:\n        n += 1\n    \n    remaining_length = k - (n * (n - 1) // 2)\n    current_char = chr(ord('a') + remaining_length - 1)\n    \n    return current_char\n```"}
{"task_id": "3606", "code": "def min_digit_sum(nums):\n    return min(sum(int(digit) for digit in str(num)) for num in nums)", "passed": true, "raw_code": "```python\ndef min_digit_sum(nums):\n    return min(sum(int(digit) for digit in str(num)) for num in nums)\n```"}
{"task_id": "abc366_a", "code": "def is_election_decided():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    majority = (N + 1) // 2\n    \n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nis_election_decided()", "passed": true, "raw_code": "```python\ndef is_election_decided():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    majority = (N + 1) // 2\n    \n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nis_election_decided()\n```"}
{"task_id": "abc370_b", "code": "d", "passed": false, "raw_code": "```python\ndef combine_elements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1):\n            A[i][j] = int(data[index])\n            index += 1\n    \n    current_element = 1\n    for i in range(1, N):\n        if i >= current_element:\n            current_element = A[i][current_element - 1]\n        else:\n            current_element = A[current_element - 1][i]\n    \n    print(current_element)\n\ncombine_elements()"}
{"task_id": "abc370_a", "code": "def check_takoyaki():\n    L, R = map(int, input().split())\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif R == 1 and L == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 0:\n        print(\"Invalid\")\n    elif L == 1 and R == 1:\n        print(\"Invalid\")\n    else:\n        print(\"Invalid\")\n\ncheck_takoyaki()", "passed": false, "raw_code": "```python\ndef check_takoyaki():\n    L, R = map(int, input().split())\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif R == 1 and L == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 0:\n        print(\"Invalid\")\n    elif L == 1 and R == 1:\n        print(\"Invalid\")\n    else:\n        print(\"Invalid\")\n\ncheck_takoyaki()\n```"}
{"task_id": "abc365_a", "code": "def days_in_year(Y):\n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Call the function with the input from standard input\nimport sys\ndays_in_year(int(sys.stdin.read().strip()))", "passed": true, "raw_code": "```python\ndef days_in_year(Y):\n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Call the function with the input from standard input\nimport sys\ndays_in_year(int(sys.stdin.read().strip()))\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n    \n    # Determine the sleep duration\n    if B < C:\n        sleep_start = B\n        sleep_end = C\n    else:\n        sleep_start = B\n        sleep_end = C + 24\n    \n    # Check if A falls within the sleep duration\n    if sleep_start <= A <= sleep_end:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n# Call the function to execute\ncan_shout_takoyaki()", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n    \n    # Determine the sleep duration\n    if B < C:\n        sleep_start = B\n        sleep_end = C\n    else:\n        sleep_start = B\n        sleep_end = C + 24\n    \n    # Check if A falls within the sleep duration\n    if sleep_start <= A <= sleep_end:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n# Call the function to execute\ncan_shout_takoyaki()\n```"}
{"task_id": "3519", "code": "def countWinners(n, pick):\n    # Dictionary to store the count of each color picked by each player\n    player_colors = {i: {} for i in range(n)}\n    \n    # Iterate through each pick and update the count\n    for player, color in pick:\n        if color not in player_colors[player]:\n            player_colors[player][color] = 0\n        player_colors[player][color] += 1\n    \n    # Initialize the number of winners\n    winners = 0\n    \n    # Check each player's counts\n    for player in range(n):\n        max_required = player + 1\n        if any(count >= max_required for count in player_colors[player].values()):\n            winners += 1\n    \n    return winners", "passed": true, "raw_code": "```python\ndef countWinners(n, pick):\n    # Dictionary to store the count of each color picked by each player\n    player_colors = {i: {} for i in range(n)}\n    \n    # Iterate through each pick and update the count\n    for player, color in pick:\n        if color not in player_colors[player]:\n            player_colors[player][color] = 0\n        player_colors[player][color] += 1\n    \n    # Initialize the number of winners\n    winners = 0\n    \n    # Check each player's counts\n    for player in range(n):\n        max_required = player + 1\n        if any(count >= max_required for count in player_colors[player].values()):\n            winners += 1\n    \n    return winners\n```"}
{"task_id": "abc367_b", "code": "def process_number():\n    import sys\n    X = float(sys.stdin.read().strip())\n    formatted_X = \"{:.3f}\".format(X).rstrip('0').rstrip('.')\n    print(formatted_X)\n\nprocess_number()", "passed": true, "raw_code": "```python\ndef process_number():\n    import sys\n    X = float(sys.stdin.read().strip())\n    formatted_X = \"{:.3f}\".format(X).rstrip('0').rstrip('.')\n    print(formatted_X)\n\nprocess_number()\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for i, num in enumerate(A):\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif num > second_max:\n            second_max = num\n    \n    # Find the index of the second maximum element\n    for i, num in enumerate(A):\n        if num == second_max:\n            print(i + 1)\n            return\n\n# Call the function to execute\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for i, num in enumerate(A):\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif num > second_max:\n            second_max = num\n    \n    # Find the index of the second maximum element\n    for i, num in enumerate(A):\n        if num == second_max:\n            print(i + 1)\n            return\n\n# Call the function to execute\nfind_second_largest_index()\n```"}
{"task_id": "abc368_a", "code": "def rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input values\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Extract the last K elements\n    moved_elements = A[-K:]\n    \n    # Remove the last K elements from the list\n    A = A[:-K]\n    \n    # Insert the extracted elements at the beginning of the list\n    A = moved_elements + A\n    \n    # Print the result\n    print(' '.join(map(str, A)))\n\n# Call the function to execute\nrearrange_cards()", "passed": true, "raw_code": "```python\ndef rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input values\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Extract the last K elements\n    moved_elements = A[-K:]\n    \n    # Remove the last K elements from the list\n    A = A[:-K]\n    \n    # Insert the extracted elements at the beginning of the list\n    A = moved_elements + A\n    \n    # Print the result\n    print(' '.join(map(str, A)))\n\n# Call the function to execute\nrearrange_cards()\n```"}
{"task_id": "3553", "code": "def same_color(coordinate1: str, coordinate2: str) -> bool:\n    col1, row1 = coordinate1[0], coordinate1[1]\n    col2, row2 = coordinate2[0], coordinate2[1]\n    return (ord(col1) + ord(row1)) % 2 == (ord(col2) + ord(row2)) % 2", "passed": true, "raw_code": "```python\ndef same_color(coordinate1: str, coordinate2: str) -> bool:\n    col1, row1 = coordinate1[0], coordinate1[1]\n    col2, row2 = coordinate2[0], coordinate2[1]\n    return (ord(col1) + ord(row1)) % 2 == (ord(col2) + ord(row2)) % 2\n```"}
{"task_id": "abc371_b", "code": "def assign_names(N, M, babies):\n    boys_count = [0] * N\n    results = []\n\n    for family, gender in babies:\n        if gender == 'M':\n            boys_count[family - 1] += 1\n            if boys_count[family - 1] == 1:\n                results.append(\"Yes\")\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n\n    return \"\\n\".join(results)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nbabies = [(int(data[i * 2 + 2]), data[i * 2 + 3]) for i in range(M)]\n\n# Assign names and print results\nprint(assign_names(N, M, babies))", "passed": true, "raw_code": "```python\ndef assign_names(N, M, babies):\n    boys_count = [0] * N\n    results = []\n\n    for family, gender in babies:\n        if gender == 'M':\n            boys_count[family - 1] += 1\n            if boys_count[family - 1] == 1:\n                results.append(\"Yes\")\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n\n    return \"\\n\".join(results)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nbabies = [(int(data[i * 2 + 2]), data[i * 2 + 3]) for i in range(M)]\n\n# Assign names and print results\nprint(assign_names(N, M, babies))\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    # Initialize the starting position of the finger at coordinate 1\n    current_position = 1\n    total_distance = 0\n    \n    # Iterate through each character in the permutation S\n    for char in S:\n        # Calculate the target position\n        target_position = ord(char) - ord('A') + 1\n        \n        # Calculate the distance from the current position to the target position\n        distance = abs(target_position - current_position)\n        \n        # Add the distance to the total distance traveled\n        total_distance += distance\n        \n        # Update the current position to the target position\n        current_position = target_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function to test\nmin_traveled_distance(input())", "passed": false, "raw_code": "```python\ndef min_traveled_distance(S):\n    # Initialize the starting position of the finger at coordinate 1\n    current_position = 1\n    total_distance = 0\n    \n    # Iterate through each character in the permutation S\n    for char in S:\n        # Calculate the target position\n        target_position = ord(char) - ord('A') + 1\n        \n        # Calculate the distance from the current position to the target position\n        distance = abs(target_position - current_position)\n        \n        # Add the distance to the total distance traveled\n        total_distance += distance\n        \n        # Update the current position to the target position\n        current_position = target_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function to test\nmin_traveled_distance(input())\n```"}
{"task_id": "abc366_b", "code": "def convert_to_vertical():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Number of strings\n    N = int(data[0])\n    \n    # List of strings\n    strings = data[1:]\n    \n    # Maximum length of the strings\n    max_length = max(len(s) for s in strings)\n    \n    # Initialize the result list with empty strings\n    result = [''] * max_length\n    \n    # Process each string\n    for s in strings:\n        for i in range(max_length):\n            if i < len(s):\n                result[i] += s[-(i + 1)]\n            else:\n                result[i] += '*'\n    \n    # Print the result\n    print('\\n'.join(result))\n\nconvert_to_vertical()", "passed": false, "raw_code": "```python\ndef convert_to_vertical():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Number of strings\n    N = int(data[0])\n    \n    # List of strings\n    strings = data[1:]\n    \n    # Maximum length of the strings\n    max_length = max(len(s) for s in strings)\n    \n    # Initialize the result list with empty strings\n    result = [''] * max_length\n    \n    # Process each string\n    for s in strings:\n        for i in range(max_length):\n            if i < len(s):\n                result[i] += s[-(i + 1)]\n            else:\n                result[i] += '*'\n    \n    # Print the result\n    print('\\n'.join(result))\n\nconvert_to_vertical()\n```"}
{"task_id": "3567", "code": "def binary_representation(date):\n    # Split the date into year, month, and day\n    parts = date.split('-')\n    \n    # Convert each part to an integer and then to binary, removing the '0b' prefix\n    binary_year = bin(int(parts[0]))[2:]\n    binary_month = bin(int(parts[1]))[2:]\n    binary_day = bin(int(parts[2]))[2:]\n    \n    # Concatenate the binary strings with hyphens\n    return f\"{binary_year}-{binary_month}-{binary_day}\"", "passed": true, "raw_code": "```python\ndef binary_representation(date):\n    # Split the date into year, month, and day\n    parts = date.split('-')\n    \n    # Convert each part to an integer and then to binary, removing the '0b' prefix\n    binary_year = bin(int(parts[0]))[2:]\n    binary_month = bin(int(parts[1]))[2:]\n    binary_day = bin(int(parts[2]))[2:]\n    \n    # Concatenate the binary strings with hyphens\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n```"}
{"task_id": "abc369_a", "code": "def count_arithmetic_sequences(A, B):\n    x1 = 2 * B - A\n    x2 = (A + B) // 2\n    x3 = 2 * A - B\n    \n    # Use a set to store unique values of x\n    unique_x = {x1, x2, x3}\n    \n    # Filter out non-integer values and values that are not in the range [1, 100]\n    valid_x = [x for x in unique_x if x.is_integer() and 1 <= x <= 100]\n    \n    # Return the number of valid integers x\n    return len(valid_x)\n\n# Call the function with input from stdin\nimport sys\nA, B = map(int, sys.stdin.readline().split())\nprint(count_arithmetic_sequences(A, B))", "passed": false, "raw_code": "```python\ndef count_arithmetic_sequences(A, B):\n    x1 = 2 * B - A\n    x2 = (A + B) // 2\n    x3 = 2 * A - B\n    \n    # Use a set to store unique values of x\n    unique_x = {x1, x2, x3}\n    \n    # Filter out non-integer values and values that are not in the range [1, 100]\n    valid_x = [x for x in unique_x if x.is_integer() and 1 <= x <= 100]\n    \n    # Return the number of valid integers x\n    return len(valid_x)\n\n# Call the function with input from stdin\nimport sys\nA, B = map(int, sys.stdin.readline().split())\nprint(count_arithmetic_sequences(A, B))\n```"}
{"task_id": "3568", "code": "def getKey(num1, num2, num3):\n    # Pad the numbers with leading zeros to make them four digits long\n    str_num1 = str(num1).zfill(4)\n    str_num2 = str(num2).zfill(4)\n    str_num3 = str(num3).zfill(4)\n    \n    # Initialize the key as an empty list\n    key = []\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(str_num1[i]), int(str_num2[i]), int(str_num3[i]))\n        key.append(min_digit)\n    \n    # Join the digits to form the key\n    key_str = ''.join(map(str, key))\n    \n    # Return the key as an integer, or 0 if it's all zeros\n    return int(key_str) if key_str != '0000' else 0", "passed": true, "raw_code": "```python\ndef getKey(num1, num2, num3):\n    # Pad the numbers with leading zeros to make them four digits long\n    str_num1 = str(num1).zfill(4)\n    str_num2 = str(num2).zfill(4)\n    str_num3 = str(num3).zfill(4)\n    \n    # Initialize the key as an empty list\n    key = []\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(str_num1[i]), int(str_num2[i]), int(str_num3[i]))\n        key.append(min_digit)\n    \n    # Join the digits to form the key\n    key_str = ''.join(map(str, key))\n    \n    # Return the key as an integer, or 0 if it's all zeros\n    return int(key_str) if key_str != '0000' else 0\n```"}
{"task_id": "abc369_b", "code": "def min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    actions = [(int(data[i*2 + 1]), data[i*2 + 2]) for i in range(N)]\n    \n    left_hand = 0\n    right_hand = 0\n    fatigue = 0\n    \n    for action in actions:\n        key, hand = action\n        \n        if hand == 'L':\n            if key < left_hand:\n                fatigue += left_hand - key\n                left_hand = key\n            elif key > left_hand:\n                left_hand = key\n        elif hand == 'R':\n            if key < right_hand:\n                fatigue += right_hand - key\n                right_hand = key\n            elif key > right_hand:\n                right_hand = key\n    \n    print(fatigue)\n\nmin_fatigue_level()", "passed": false, "raw_code": "```python\ndef min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    actions = [(int(data[i*2 + 1]), data[i*2 + 2]) for i in range(N)]\n    \n    left_hand = 0\n    right_hand = 0\n    fatigue = 0\n    \n    for action in actions:\n        key, hand = action\n        \n        if hand == 'L':\n            if key < left_hand:\n                fatigue += left_hand - key\n                left_hand = key\n            elif key > left_hand:\n                left_hand = key\n        elif hand == 'R':\n            if key < right_hand:\n                fatigue += right_hand - key\n                right_hand = key\n            elif key > right_hand:\n                right_hand = key\n    \n    print(fatigue)\n\nmin_fatigue_level()\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    # Initial position of the snake\n    x, y = 0, 0\n    \n    # Directions: UP, RIGHT, DOWN, LEFT\n    directions = {\n        \"UP\": (-1, 0),\n        \"RIGHT\": (0, 1),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1)\n    }\n    \n    # Process each command\n    for command in commands:\n        dx, dy = directions[command]\n        nx, ny = x + dx, y + dy\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= nx < n and 0 <= ny < n:\n            x, y = nx, ny\n    \n    # Return the final position\n    return (x * n) + y", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    # Initial position of the snake\n    x, y = 0, 0\n    \n    # Directions: UP, RIGHT, DOWN, LEFT\n    directions = {\n        \"UP\": (-1, 0),\n        \"RIGHT\": (0, 1),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1)\n    }\n    \n    # Process each command\n    for command in commands:\n        dx, dy = directions[command]\n        nx, ny = x + dx, y + dy\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= nx < n and 0 <= ny < n:\n            x, y = nx, ny\n    \n    # Return the final position\n    return (x * n) + y\n```"}
{"task_id": "abc368_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nmain()\n```"}
{"task_id": "3543", "code": "def count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count_0 = 0\n    count_1 = 0\n    left = 0\n    valid_substrings = 0\n    \n    for right in range(n):\n        if s[right] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        while count_0 > k and count_1 > k:\n            if s[left] == '0':\n                count_0 -= 1\n            else:\n                count_1 -= 1\n            left += 1\n        \n        valid_substrings += (right - left + 1)\n    \n    return valid_substrings", "passed": true, "raw_code": "```python\ndef count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count_0 = 0\n    count_1 = 0\n    left = 0\n    valid_substrings = 0\n    \n    for right in range(n):\n        if s[right] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        while count_0 > k and count_1 > k:\n            if s[left] == '0':\n                count_0 -= 1\n            else:\n                count_1 -= 1\n            left += 1\n        \n        valid_substrings += (right - left + 1)\n    \n    return valid_substrings\n```"}
{"task_id": "abc371_a", "code": "def middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB = data[0]\n    S_AC = data[1]\n    S_BC = data[2]\n    \n    if S_AB == '<' and S_AC == '<':\n        if S_BC == '<':\n            print('B')\n        elif S_BC == '>':\n            print('C')\n    elif S_AB == '>' and S_AC == '>':\n        if S_BC == '<':\n            print('C')\n        elif S_BC == '>':\n            print('A')\n    elif S_AB == '<' and S_AC == '>':\n        print('B')\n    elif S_AB == '>' and S_AC == '<':\n        print('B')\n\nmiddle_brother()", "passed": false, "raw_code": "```python\ndef middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB = data[0]\n    S_AC = data[1]\n    S_BC = data[2]\n    \n    if S_AB == '<' and S_AC == '<':\n        if S_BC == '<':\n            print('B')\n        elif S_BC == '>':\n            print('C')\n    elif S_AB == '>' and S_AC == '>':\n        if S_BC == '<':\n            print('C')\n        elif S_BC == '>':\n            print('A')\n    elif S_AB == '<' and S_AC == '>':\n        print('B')\n    elif S_AB == '>' and S_AC == '<':\n        print('B')\n\nmiddle_brother()\n```"}
{"final_accuracy": "65.38%"}
