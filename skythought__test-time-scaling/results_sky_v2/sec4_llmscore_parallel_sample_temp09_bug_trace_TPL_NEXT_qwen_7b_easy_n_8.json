{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_NEXT_qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "import sys\n\ndef main():\n    # Read the input string\n    s = sys.stdin.read().strip()\n    \n    # Remove all occurrences of '.'\n    result = s.replace('.', '')\n    \n    # Print the result\n    print(result)\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\nimport sys\n\ndef main():\n    # Read the input string\n    s = sys.stdin.read().strip()\n    \n    # Remove all occurrences of '.'\n    result = s.replace('.', '')\n    \n    # Print the result\n    print(result)\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3555", "code": "def modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        index = nums.index(min_val)\n        nums[index] = min_val * multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        index = nums.index(min_val)\n        nums[index] = min_val * multiplier\n    return nums\n```"}
{"task_id": "3606", "code": "def min_digit_sum(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    return min(sum_of_digits(num) for num in nums)", "passed": true, "raw_code": "```python\ndef min_digit_sum(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    return min(sum_of_digits(num) for num in nums)\n```"}
{"task_id": "abc370_a", "code": "def takoyaki_eating(L, R):\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\ntakoyaki_eating(L, R)", "passed": true, "raw_code": "```python\ndef takoyaki_eating(L, R):\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\ntakoyaki_eating(L, R)\n```"}
{"task_id": "abc367_b", "code": "def format_number():\n    import sys\n    X = float(sys.stdin.read().strip())\n    formatted_X = \"{:.3f}\".format(X).rstrip('0').rstrip('.')\n    print(formatted_X)\n\nformat_number()", "passed": true, "raw_code": "```python\ndef format_number():\n    import sys\n    X = float(sys.stdin.read().strip())\n    formatted_X = \"{:.3f}\".format(X).rstrip('0').rstrip('.')\n    print(formatted_X)\n\nformat_number()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki(A, B, C):\n    # Check if the intervals [B, C) and [0, A) overlap\n    if (B < C <= A) or (C == 0 and A == 24):\n        return \"No\"\n    \n    # Check if the interval [C, 24) overlaps with [0, B)\n    if (C < B) or (C == 0 and B > A):\n        return \"Yes\"\n    \n    return \"No\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki(A, B, C):\n    # Check if the intervals [B, C) and [0, A) overlap\n    if (B < C <= A) or (C == 0 and A == 24):\n        return \"No\"\n    \n    # Check if the interval [C, 24) overlaps with [0, B)\n    if (C < B) or (C == 0 and B > A):\n        return \"Yes\"\n    \n    return \"No\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))\n```"}
{"task_id": "abc366_a", "code": "def is_election_decided():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    remaining_votes = N - (T + A)\n    if abs(T - A) >= remaining_votes + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nis_election_decided()", "passed": true, "raw_code": "```python\ndef is_election_decided():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    remaining_votes = N - (T + A)\n    if abs(T - A) >= remaining_votes + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nis_election_decided()\n```"}
{"task_id": "3600", "code": "def kthCharacter(k):\n    i = 0\n    length = 1\n    \n    # Find the segment where the k-th character lies\n    while k > length:\n        k -= length\n        i += 1\n        length *= 26\n    \n    # Convert k to zero-indexed\n    k -= 1\n    \n    # Calculate the position within the segment\n    char_index = k % 26\n    \n    # Return the character at the calculated index\n    return chr(ord('a') + char_index)", "passed": false, "raw_code": "```python\ndef kthCharacter(k):\n    i = 0\n    length = 1\n    \n    # Find the segment where the k-th character lies\n    while k > length:\n        k -= length\n        i += 1\n        length *= 26\n    \n    # Convert k to zero-indexed\n    k -= 1\n    \n    # Calculate the position within the segment\n    char_index = k % 26\n    \n    # Return the character at the calculated index\n    return chr(ord('a') + char_index)\n```"}
{"task_id": "3567", "code": "def binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"", "passed": true, "raw_code": "```python\ndef binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n```"}
{"task_id": "abc368_a", "code": "def rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n    \n    rotated_cards = cards[-K:] + cards[:-K]\n    print(' '.join(map(str, rotated_cards)))\n\nrotate_cards()", "passed": true, "raw_code": "```python\ndef rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n    \n    rotated_cards = cards[-K:] + cards[:-K]\n    print(' '.join(map(str, rotated_cards)))\n\nrotate_cards()\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first = float('-inf')\n    second = float('-inf')\n    \n    for num in A:\n        if num > first:\n            second = first\n            first = num\n        elif num > second:\n            second = num\n    \n    second_largest_index = A.index(second) + 1\n    print(second_largest_index)\n\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first = float('-inf')\n    second = float('-inf')\n    \n    for num in A:\n        if num > first:\n            second = first\n            first = num\n        elif num > second:\n            second = num\n    \n    second_largest_index = A.index(second) + 1\n    print(second_largest_index)\n\nfind_second_largest_index()\n```"}
{"task_id": "abc373_a", "code": "def count_matching_strings():\n    count = 0\n    for i in range(12):\n        s = input()\n        if len(s) == i + 1:\n            count += 1\n    print(count)\n\ncount_matching_strings()", "passed": true, "raw_code": "```python\ndef count_matching_strings():\n    count = 0\n    for i in range(12):\n        s = input()\n        if len(s) == i + 1:\n            count += 1\n    print(count)\n\ncount_matching_strings()\n```"}
{"task_id": "abc365_a", "code": "def get_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\nget_days_in_year()", "passed": true, "raw_code": "```python\ndef get_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\nget_days_in_year()\n```"}
{"task_id": "abc371_b", "code": "def determine_names(N, M, babies):\n    # Initialize an array to keep track of the earliest male child born in each family\n    earliest_male = [-1] * N\n    \n    results = []\n    \n    for family, gender in babies:\n        family -= 1  # Convert to zero-indexed\n        \n        if gender == 'M':\n            # Check if this is the earliest male child born in this family\n            if earliest_male[family] == -1:\n                results.append(\"Yes\")\n                earliest_male[family] = family\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    return \"\\n\".join(results)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbabies = [(int(data[i*2 + 2]), data[i*2 + 3]) for i in range(M)]\n\n# Determine the names and print the results\nprint(determine_names(N, M, babies))", "passed": true, "raw_code": "```python\ndef determine_names(N, M, babies):\n    # Initialize an array to keep track of the earliest male child born in each family\n    earliest_male = [-1] * N\n    \n    results = []\n    \n    for family, gender in babies:\n        family -= 1  # Convert to zero-indexed\n        \n        if gender == 'M':\n            # Check if this is the earliest male child born in this family\n            if earliest_male[family] == -1:\n                results.append(\"Yes\")\n                earliest_male[family] = family\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    return \"\\n\".join(results)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbabies = [(int(data[i*2 + 2]), data[i*2 + 3]) for i in range(M)]\n\n# Determine the names and print the results\nprint(determine_names(N, M, babies))\n```"}
{"task_id": "abc366_b", "code": "def convert_to_vertical_text():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    S = data[1:N+1]\n    max_len = max(len(s) for s in S)\n    result = [['*'] * max_len for _ in range(N)]\n    for i, s in enumerate(S):\n        for j, char in enumerate(s[::-1]):\n            result[N-i-1][j] = char\n    for row in result:\n        print(''.join(row))\nconvert_to_vertical_text()", "passed": false, "raw_code": "def convert_to_vertical_text():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    S = data[1:N+1]\n    max_len = max(len(s) for s in S)\n    result = [['*'] * max_len for _ in range(N)]\n    for i, s in enumerate(S):\n        for j, char in enumerate(s[::-1]):\n            result[N-i-1][j] = char\n    for row in result:\n        print(''.join(row))\nconvert_to_vertical_text()"}
{"task_id": "abc369_b", "code": "def min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    actions = [(int(data[i*2+1]), data[i*2+2]) for i in range(N)]\n    left_hand = right_hand = None\n    fatigue = 0\n    for action in actions:\n        key, hand = action\n        if hand == 'L':\n            if left_hand is None:\n                left_hand = key\n            else:\n                fatigue += abs(key - left_hand)\n                left_hand = key\n        elif hand == 'R':\n            if right_hand is None:\n                right_hand = key\n            else:\n                fatigue += abs(key - right_hand)\n                right_hand = key\n    print(fatigue)\nmin_fatigue_level()", "passed": true, "raw_code": "def min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    actions = [(int(data[i*2+1]), data[i*2+2]) for i in range(N)]\n    left_hand = right_hand = None\n    fatigue = 0\n    for action in actions:\n        key, hand = action\n        if hand == 'L':\n            if left_hand is None:\n                left_hand = key\n            else:\n                fatigue += abs(key - left_hand)\n                left_hand = key\n        elif hand == 'R':\n            if right_hand is None:\n                right_hand = key\n            else:\n                fatigue += abs(key - right_hand)\n                right_hand = key\n    print(fatigue)\nmin_fatigue_level()"}
{"task_id": "abc368_b", "code": "def takahashi_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\ntakahashi_operations()", "passed": true, "raw_code": "```python\ndef takahashi_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\ntakahashi_operations()\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    # Define the standard keyboard positions\n    standard_positions = {chr(i + ord('A')): i for i in range(26)}\n    \n    # Calculate the custom keyboard positions\n    custom_positions = {char: idx for idx, char in enumerate(S)}\n    \n    # Initial position of the finger\n    current_position = custom_positions['A']\n    total_distance = 0\n    \n    # Iterate through the characters in the input string\n    for char in S[1:]:\n        next_position = custom_positions[char]\n        distance = abs(next_position - current_position)\n        total_distance += distance\n        current_position = next_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with input from stdin\nmin_traveled_distance(input().strip())", "passed": false, "raw_code": "```python\ndef min_traveled_distance(S):\n    # Define the standard keyboard positions\n    standard_positions = {chr(i + ord('A')): i for i in range(26)}\n    \n    # Calculate the custom keyboard positions\n    custom_positions = {char: idx for idx, char in enumerate(S)}\n    \n    # Initial position of the finger\n    current_position = custom_positions['A']\n    total_distance = 0\n    \n    # Iterate through the characters in the input string\n    for char in S[1:]:\n        next_position = custom_positions[char]\n        distance = abs(next_position - current_position)\n        total_distance += distance\n        current_position = next_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with input from stdin\nmin_traveled_distance(input().strip())\n```"}
{"task_id": "abc369_a", "code": "def count_valid_x(A, B):\n    valid_x = set()\n    \n    # Check all possible arrangements\n    if 2*B == A + A:\n        valid_x.add(A)\n    if 2*A == B + B:\n        valid_x.add(B)\n    if 2*B == A + A and 2*A == B + B:\n        valid_x.add(B)\n    if 2*B == A + A and 2*A == B + B and A == B:\n        valid_x.add(A)\n    \n    # Check for x values in the range [min(A, B), max(A, B)]\n    for x in range(min(A, B) - abs(A - B), max(A, B) + abs(A - B) + 1):\n        if 2*B == A + x or 2*A == B + x or 2*B == x + A or 2*A == x + B or 2*x == A + B:\n            valid_x.add(x)\n    \n    return len(valid_x)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\n\nprint(count_valid_x(A, B))", "passed": true, "raw_code": "```python\ndef count_valid_x(A, B):\n    valid_x = set()\n    \n    # Check all possible arrangements\n    if 2*B == A + A:\n        valid_x.add(A)\n    if 2*A == B + B:\n        valid_x.add(B)\n    if 2*B == A + A and 2*A == B + B:\n        valid_x.add(B)\n    if 2*B == A + A and 2*A == B + B and A == B:\n        valid_x.add(A)\n    \n    # Check for x values in the range [min(A, B), max(A, B)]\n    for x in range(min(A, B) - abs(A - B), max(A, B) + abs(A - B) + 1):\n        if 2*B == A + x or 2*A == B + x or 2*B == x + A or 2*A == x + B or 2*x == A + B:\n            valid_x.add(x)\n    \n    return len(valid_x)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\n\nprint(count_valid_x(A, B))\n```"}
{"task_id": "abc370_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    N = int(data[0])\n    \n    # Read the transformation matrix A\n    A = []\n    index = 1\n    for i in range(N):\n        row = list(map(int, data[index:index + i + 1]))\n        A.append(row)\n        index += i + 1\n    \n    # Start with element 1\n    current_element = 1\n    \n    # Combine current_element with each subsequent element\n    for i in range(1, N):\n        if i >= current_element - 1:\n            current_element = A[i][current_element - 1]\n        else:\n            current_element = A[current_element - 1][i]\n    \n    # Print the final element\n    print(current_element)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    N = int(data[0])\n    \n    # Read the transformation matrix A\n    A = []\n    index = 1\n    for i in range(N):\n        row = list(map(int, data[index:index + i + 1]))\n        A.append(row)\n        index += i + 1\n    \n    # Start with element 1\n    current_element = 1\n    \n    # Combine current_element with each subsequent element\n    for i in range(1, N):\n        if i >= current_element - 1:\n            current_element = A[i][current_element - 1]\n        else:\n            current_element = A[current_element - 1][i]\n    \n    # Print the final element\n    print(current_element)\n\nmain()\n```"}
{"task_id": "3519", "code": "def countWinners(n, pick):\n    # Dictionary to store the count of balls picked by each player for each color\n    player_balls = {i: {} for i in range(n)}\n    \n    # Iterate through the picks and update the count of balls for each player and color\n    for player, color in pick:\n        if color not in player_balls[player]:\n            player_balls[player][color] = 0\n        player_balls[player][color] += 1\n    \n    # Initialize the count of winners\n    winners = 0\n    \n    # Check for winners\n    for player in range(n):\n        for color, count in player_balls[player].items():\n            if count >= player + 1:\n                winners += 1\n                break\n    \n    return winners", "passed": true, "raw_code": "```python\ndef countWinners(n, pick):\n    # Dictionary to store the count of balls picked by each player for each color\n    player_balls = {i: {} for i in range(n)}\n    \n    # Iterate through the picks and update the count of balls for each player and color\n    for player, color in pick:\n        if color not in player_balls[player]:\n            player_balls[player][color] = 0\n        player_balls[player][color] += 1\n    \n    # Initialize the count of winners\n    winners = 0\n    \n    # Check for winners\n    for player in range(n):\n        for color, count in player_balls[player].items():\n            if count >= player + 1:\n                winners += 1\n                break\n    \n    return winners\n```"}
{"task_id": "3568", "code": "def getKey(num1: int, num2: int, num3: int) -> int:\n    # Convert numbers to strings and pad with leading zeros\n    str1 = f\"{num1:04d}\"\n    str2 = f\"{num2:04d}\"\n    str3 = f\"{num3:04d}\"\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(str1[i]), int(str2[i]), int(str3[i]))\n        # Append the minimum digit to the key\n        key += str(min_digit)\n    \n    # Convert the key string to an integer\n    return int(key)", "passed": true, "raw_code": "```python\ndef getKey(num1: int, num2: int, num3: int) -> int:\n    # Convert numbers to strings and pad with leading zeros\n    str1 = f\"{num1:04d}\"\n    str2 = f\"{num2:04d}\"\n    str3 = f\"{num3:04d}\"\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(str1[i]), int(str2[i]), int(str3[i]))\n        # Append the minimum digit to the key\n        key += str(min_digit)\n    \n    # Convert the key string to an integer\n    return int(key)\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    x, y = 0, 0\n    for command in commands:\n        if command == \"RIGHT\":\n            y += 1\n        elif command == \"LEFT\":\n            y -= 1\n        elif command == \"DOWN\":\n            x += 1\n        elif command == \"UP\":\n            x -= 1\n        # Ensure the snake stays within bounds\n        x = max(0, min(x, n - 1))\n        y = max(0, min(y, n - 1))\n    return x * n + y", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    x, y = 0, 0\n    for command in commands:\n        if command == \"RIGHT\":\n            y += 1\n        elif command == \"LEFT\":\n            y -= 1\n        elif command == \"DOWN\":\n            x += 1\n        elif command == \"UP\":\n            x -= 1\n        # Ensure the snake stays within bounds\n        x = max(0, min(x, n - 1))\n        y = max(0, min(y, n - 1))\n    return x * n + y\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother(relationships):\n    # Parse the relationships\n    AB, AC, BC = relationships.split()\n\n    # Determine the relative ages\n    if AB == '<' and AC == '<' and BC == '<':\n        return 'B'\n    elif AB == '<' and AC == '<' and BC == '>':\n        return 'C'\n    elif AB == '<' and AC == '>' and BC == '<':\n        return 'A'\n    elif AB == '<' and AC == '>' and BC == '>':\n        return 'B'\n    elif AB == '>' and AC == '<' and BC == '<':\n        return 'A'\n    elif AB == '>' and AC == '<' and BC == '>':\n        return 'C'\n    elif AB == '>' and AC == '>' and BC == '<':\n        return 'B'\n    elif AB == '>' and AC == '>' and BC == '>':\n        return 'A'\n\n# Read input from standard input\nimport sys\ninput_data = sys.stdin.read().strip()\n\n# Find and print the middle brother\nmiddle_brother = find_middle_brother(input_data)\nprint(middle_brother)\n", "passed": false, "raw_code": "def find_middle_brother(relationships):\n    # Parse the relationships\n    AB, AC, BC = relationships.split()\n\n    # Determine the relative ages\n    if AB == '<' and AC == '<' and BC == '<':\n        return 'B'\n    elif AB == '<' and AC == '<' and BC == '>':\n        return 'C'\n    elif AB == '<' and AC == '>' and BC == '<':\n        return 'A'\n    elif AB == '<' and AC == '>' and BC == '>':\n        return 'B'\n    elif AB == '>' and AC == '<' and BC == '<':\n        return 'A'\n    elif AB == '>' and AC == '<' and BC == '>':\n        return 'C'\n    elif AB == '>' and AC == '>' and BC == '<':\n        return 'B'\n    elif AB == '>' and AC == '>' and BC == '>':\n        return 'A'\n\n# Read input from standard input\nimport sys\ninput_data = sys.stdin.read().strip()\n\n# Find and print the middle brother\nmiddle_brother = find_middle_brother(input_data)\nprint(middle_brother)\n"}
{"task_id": "3553", "code": "def are_squares_same_color(coordinate1, coordinate2):\n    return (ord(coordinate1[0]) + ord(coordinate1[1])) % 2 == (ord(coordinate2[0]) + ord(coordinate2[1])) % 2", "passed": true, "raw_code": "```python\ndef are_squares_same_color(coordinate1, coordinate2):\n    return (ord(coordinate1[0]) + ord(coordinate1[1])) % 2 == (ord(coordinate2[0]) + ord(coordinate2[1])) % 2\n```"}
{"task_id": "3543", "code": "def count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if zeros <= k or ones <= k:\n                count += 1\n                \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if zeros <= k or ones <= k:\n                count += 1\n                \n    return count\n```"}
{"final_accuracy": "76.92%"}
