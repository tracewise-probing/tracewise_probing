"{\"difficulty\": \"hard\", \"num_threads\": 32, \"temperature\": 0.2, \"n\": 2, \"context\": \"all\", \"selection\": \"oracle\", \"num_round\": 1, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/sec4_parallel_sample_temp02_bug_trace_TPL_CONCISETRACE_qwen_7b_hard_n_2.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"openai/gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"api_base\": \"http://127.0.0.1:8001/8001/v1\", \"no_refine\": true, \"no_dspy_gen\": false, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42, \"resume\": true}"
{"task_id": "abc368_f", "codes": ["def determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Since Anna can always reduce one number to 1, she will always win\n    print(\"Anna\")\n\ndetermine_winner()", "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef determine_winner(N, A):\n    prime_count = sum(is_prime(a) for a in A)\n    if prime_count % 2 == 1:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\n\ndetermine_winner(N, A)"], "passed": [false, false], "raw_code": ["```python\ndef determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Since Anna can always reduce one number to 1, she will always win\n    print(\"Anna\")\n\ndetermine_winner()\n```", "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef determine_winner(N, A):\n    prime_count = sum(is_prime(a) for a in A)\n    if prime_count % 2 == 1:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\n\ndetermine_winner(N, A)\n```"]}
{"task_id": "3532", "codes": ["def minTimeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    # Step 1: Build the graph\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def bfs(start):\n        queue = deque([start])\n        visited = set()\n        marked_time = {start: 0}\n        \n        while queue:\n            current = queue.popleft()\n            visited.add(current)\n            \n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    if current % 2 == 0:\n                        marked_time[neighbor] = marked_time[current] + 2\n                    else:\n                        marked_time[neighbor] = marked_time[current] + 1\n                    queue.append(neighbor)\n        \n        return max(marked_time.values())\n    \n    n = len(graph)\n    results = []\n    for i in range(n):\n        results.append(bfs(i))\n    \n    return results", "def minTimeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    # Step 1: Build the graph\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Step 2: Find the root node (node with degree 1)\n    root = None\n    for node in range(len(graph)):\n        if len(graph[node]) == 1:\n            root = node\n            break\n    \n    # Step 3: Simulate the marking process using BFS\n    def bfs_mark(node):\n        queue = deque([node])\n        visited = set([node])\n        time = 0\n        \n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                current = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n                        if current % 2 == 0:\n                            time += 2\n                        else:\n                            time += 1\n            time += 1\n        \n        return time\n    \n    # Calculate the minimum time to mark all nodes starting from each node\n    result = []\n    for i in range(len(graph)):\n        result.append(bfs_mark(i))\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\ndef minTimeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    # Step 1: Build the graph\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def bfs(start):\n        queue = deque([start])\n        visited = set()\n        marked_time = {start: 0}\n        \n        while queue:\n            current = queue.popleft()\n            visited.add(current)\n            \n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    if current % 2 == 0:\n                        marked_time[neighbor] = marked_time[current] + 2\n                    else:\n                        marked_time[neighbor] = marked_time[current] + 1\n                    queue.append(neighbor)\n        \n        return max(marked_time.values())\n    \n    n = len(graph)\n    results = []\n    for i in range(n):\n        results.append(bfs(i))\n    \n    return results\n```", "```python\ndef minTimeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    # Step 1: Build the graph\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Step 2: Find the root node (node with degree 1)\n    root = None\n    for node in range(len(graph)):\n        if len(graph[node]) == 1:\n            root = node\n            break\n    \n    # Step 3: Simulate the marking process using BFS\n    def bfs_mark(node):\n        queue = deque([node])\n        visited = set([node])\n        time = 0\n        \n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                current = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n                        if current % 2 == 0:\n                            time += 2\n                        else:\n                            time += 1\n            time += 1\n        \n        return time\n    \n    # Calculate the minimum time to mark all nodes starting from each node\n    result = []\n    for i in range(len(graph)):\n        result.append(bfs_mark(i))\n    \n    return result\n```"]}
{"task_id": "3535", "codes": ["def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_non_decr = [[0] * 51 for _ in range(n)]\n    dp_non_incr = [[0] * 51 for _ in range(n)]\n    \n    # Base cases\n    for i in range(51):\n        dp_non_decr[0][i] = 1\n        dp_non_incr[0][i] = 1\n    \n    # Fill DP tables\n    for i in range(1, n):\n        for j in range(51):\n            dp_non_decr[i][j] = dp_non_decr[i-1][j]\n            if j > 0:\n                dp_non_decr[i][j] += dp_non_decr[i-1][j-1]\n            dp_non_incr[i][j] = dp_non_incr[i-1][j]\n            if j < 50:\n                dp_non_incr[i][j] += dp_non_incr[i-1][j+1]\n    \n    # Calculate the total number of valid pairs\n    count = 0\n    for i in range(n):\n        count += dp_non_decr[i][nums[i]] * dp_non_incr[i][nums[i]]\n        count %= MOD\n    \n    return count", "def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # dp[i][j] will store the number of valid pairs ending at index i with arr1[i] = j\n    dp = [[0] * 51 for _ in range(n)]\n    \n    # Initialize the first element\n    dp[0][nums[0]] = 1\n    \n    for i in range(1, n):\n        for j in range(nums[i] + 1):\n            dp[i][j] += dp[i-1][j]\n            dp[i][j] %= MOD\n        \n        for j in range(nums[i]):\n            dp[i][j] += dp[i-1][j+1]\n            dp[i][j] %= MOD\n    \n    total_pairs = sum(dp[-1]) % MOD\n    return total_pairs"], "passed": [false, false], "raw_code": ["```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_non_decr = [[0] * 51 for _ in range(n)]\n    dp_non_incr = [[0] * 51 for _ in range(n)]\n    \n    # Base cases\n    for i in range(51):\n        dp_non_decr[0][i] = 1\n        dp_non_incr[0][i] = 1\n    \n    # Fill DP tables\n    for i in range(1, n):\n        for j in range(51):\n            dp_non_decr[i][j] = dp_non_decr[i-1][j]\n            if j > 0:\n                dp_non_decr[i][j] += dp_non_decr[i-1][j-1]\n            dp_non_incr[i][j] = dp_non_incr[i-1][j]\n            if j < 50:\n                dp_non_incr[i][j] += dp_non_incr[i-1][j+1]\n    \n    # Calculate the total number of valid pairs\n    count = 0\n    for i in range(n):\n        count += dp_non_decr[i][nums[i]] * dp_non_incr[i][nums[i]]\n        count %= MOD\n    \n    return count\n```", "```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # dp[i][j] will store the number of valid pairs ending at index i with arr1[i] = j\n    dp = [[0] * 51 for _ in range(n)]\n    \n    # Initialize the first element\n    dp[0][nums[0]] = 1\n    \n    for i in range(1, n):\n        for j in range(nums[i] + 1):\n            dp[i][j] += dp[i-1][j]\n            dp[i][j] %= MOD\n        \n        for j in range(nums[i]):\n            dp[i][j] += dp[i-1][j+1]\n            dp[i][j] %= MOD\n    \n    total_pairs = sum(dp[-1]) % MOD\n    return total_pairs\n```"]}
{"task_id": "abc370_e", "codes": ["```python\ndef count_partitions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    MOD = 998244353\n    \n    # dp[i][j] will store the number of ways to partition the first i elements\n    # such that the last subsequence ends at position j\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    for i in range(1, N + 1):\n        for j in range(i):\n            if prefix_sum[i] - prefix_sum[j] != K:\n                dp[i][i] += dp[i - 1][j]\n                dp[i][i] %= MOD\n    \n    total_ways = sum(dp[N]) % MOD\n    print(total_ways)\n\ncount_partitions()", "def count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        prefix_sum = 0\n        for j in range(K + 1):\n            if j >= A[i - 1]:\n                dp[i][j] = (dp[i][j] + dp[i - 1][j - A[i - 1]]) % MOD\n            dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD\n    \n    # Sum up all valid partitions where the last subsequence does not sum to K\n    result = 0\n    for j in range(K + 1):\n        if j != K:\n            result = (result + dp[N][j]) % MOD\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(count_partitions(N, K, A))"], "passed": [false, false], "raw_code": ["```python\ndef count_partitions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    MOD = 998244353\n    \n    # dp[i][j] will store the number of ways to partition the first i elements\n    # such that the last subsequence ends at position j\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    for i in range(1, N + 1):\n        for j in range(i):\n            if prefix_sum[i] - prefix_sum[j] != K:\n                dp[i][i] += dp[i - 1][j]\n                dp[i][i] %= MOD\n    \n    total_ways = sum(dp[N]) % MOD\n    print(total_ways)\n\ncount_partitions()", "```python\ndef count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        prefix_sum = 0\n        for j in range(K + 1):\n            if j >= A[i - 1]:\n                dp[i][j] = (dp[i][j] + dp[i - 1][j - A[i - 1]]) % MOD\n            dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD\n    \n    # Sum up all valid partitions where the last subsequence does not sum to K\n    result = 0\n    for j in range(K + 1):\n        if j != K:\n            result = (result + dp[N][j]) % MOD\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(count_partitions(N, K, A))\n```"]}
{"task_id": "abc373_f", "codes": ["```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    items = []\n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        items.append((w, v))\n        index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for w, v in items:\n        for j in range(W, w - 1, -1):\n            k1 = v // 2\n            k2 = (v + 1) // 2\n            dp[j] = max(dp[j], dp[j - w] + k1 * v - k1 ** 2, dp[j - w] + k2 * v - k2 ** 2)\n    \n    print(dp[W])\n\nmax_happiness()", "```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    dp = [-float('inf')] * (W + 1)\n    dp[0] = 0\n    \n    for _ in range(N):\n        w_i = int(data[index])\n        v_i = int(data[index + 1])\n        index += 2\n        \n        for j in range(W, w_i - 1, -1):\n            for k_i in range(1, min(j // w_i + 1, 10**10 + 1)):\n                dp[j] = max(dp[j], dp[j - k_i * w_i] + k_i * (v_i - k_i))\n    \n    print(max(dp))\n\nmax_happiness()"], "passed": [false, false], "raw_code": ["```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    items = []\n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        items.append((w, v))\n        index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for w, v in items:\n        for j in range(W, w - 1, -1):\n            k1 = v // 2\n            k2 = (v + 1) // 2\n            dp[j] = max(dp[j], dp[j - w] + k1 * v - k1 ** 2, dp[j - w] + k2 * v - k2 ** 2)\n    \n    print(dp[W])\n\nmax_happiness()", "```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    dp = [-float('inf')] * (W + 1)\n    dp[0] = 0\n    \n    for _ in range(N):\n        w_i = int(data[index])\n        v_i = int(data[index + 1])\n        index += 2\n        \n        for j in range(W, w_i - 1, -1):\n            for k_i in range(1, min(j // w_i + 1, 10**10 + 1)):\n                dp[j] = max(dp[j], dp[j - k_i * w_i] + k_i * (v_i - k_i))\n    \n    print(max(dp))\n\nmax_happiness()"]}
{"task_id": "abc366_e", "codes": ["```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points.append((x, y))\n        index += 2\n    \n    # Sort points by x, then by y\n    points.sort(key=lambda p: (p[0], p[1]))\n    \n    # Function to calculate the sum of absolute differences\n    def sum_abs_diffs(x, y):\n        return sum(abs(p[0] - x) + abs(p[1] - y) for p in points)\n    \n    # Sliding window to find valid y ranges for each x\n    left = 0\n    right = 0\n    result = 0\n    \n    for x in range(-10**6, 10**6 + 1):\n        while right < N and points[right][0] <= x:\n            right += 1\n        \n        if right == 0:\n            continue\n        \n        target_sum = D - sum_abs_diffs(x, points[left][1])\n        \n        while left < right and sum_abs_diffs(x, points[left][1]) > target_sum:\n            left += 1\n        \n        if left < right:\n            result += right - left\n    \n    print(result)\n\ncount_valid_pairs()", "import sys\nfrom bisect import bisect_left, bisect_right\n\ndef count_valid_pairs(N, D, points):\n    def count_x(x):\n        left = [abs(points[i][0] - x) for i in range(N)]\n        left.sort()\n        right = [abs(points[i][0] - x) for i in range(N)]\n        right.sort(reverse=True)\n        \n        count = 0\n        i, j = 0, N - 1\n        while i < N and j >= 0:\n            if left[i] + right[j] <= D:\n                count += j - i + 1\n                i += 1\n            else:\n                j -= 1\n        \n        return count\n    \n    def count_y(y):\n        left = [abs(points[i][1] - y) for i in range(N)]\n        left.sort()\n        right = [abs(points[i][1] - y) for i in range(N)]\n        right.sort(reverse=True)\n        \n        count = 0\n        i, j = 0, N - 1\n        while i < N and j >= 0:\n            if left[i] + right[j] <= D:\n                count += j - i + 1\n                i += 1\n            else:\n                j -= 1\n        \n        return count\n    \n    min_x = min(point[0] for point in points)\n    max_x = max(point[0] for point in points)\n    min_y = min(point[1] for point in points)\n    max_y = max(point[1] for point in points)\n    \n    total_count = 0\n    for x in range(min_x, max_x + 1):\n        total_count += count_y(x)\n    \n    return total_count\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points.append((x, y))\n        index += 2\n    \n    result = count_valid_pairs(N, D, points)\n    print(result)"], "passed": [false, false], "raw_code": ["```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points.append((x, y))\n        index += 2\n    \n    # Sort points by x, then by y\n    points.sort(key=lambda p: (p[0], p[1]))\n    \n    # Function to calculate the sum of absolute differences\n    def sum_abs_diffs(x, y):\n        return sum(abs(p[0] - x) + abs(p[1] - y) for p in points)\n    \n    # Sliding window to find valid y ranges for each x\n    left = 0\n    right = 0\n    result = 0\n    \n    for x in range(-10**6, 10**6 + 1):\n        while right < N and points[right][0] <= x:\n            right += 1\n        \n        if right == 0:\n            continue\n        \n        target_sum = D - sum_abs_diffs(x, points[left][1])\n        \n        while left < right and sum_abs_diffs(x, points[left][1]) > target_sum:\n            left += 1\n        \n        if left < right:\n            result += right - left\n    \n    print(result)\n\ncount_valid_pairs()", "```python\nimport sys\nfrom bisect import bisect_left, bisect_right\n\ndef count_valid_pairs(N, D, points):\n    def count_x(x):\n        left = [abs(points[i][0] - x) for i in range(N)]\n        left.sort()\n        right = [abs(points[i][0] - x) for i in range(N)]\n        right.sort(reverse=True)\n        \n        count = 0\n        i, j = 0, N - 1\n        while i < N and j >= 0:\n            if left[i] + right[j] <= D:\n                count += j - i + 1\n                i += 1\n            else:\n                j -= 1\n        \n        return count\n    \n    def count_y(y):\n        left = [abs(points[i][1] - y) for i in range(N)]\n        left.sort()\n        right = [abs(points[i][1] - y) for i in range(N)]\n        right.sort(reverse=True)\n        \n        count = 0\n        i, j = 0, N - 1\n        while i < N and j >= 0:\n            if left[i] + right[j] <= D:\n                count += j - i + 1\n                i += 1\n            else:\n                j -= 1\n        \n        return count\n    \n    min_x = min(point[0] for point in points)\n    max_x = max(point[0] for point in points)\n    min_y = min(point[1] for point in points)\n    max_y = max(point[1] for point in points)\n    \n    total_count = 0\n    for x in range(min_x, max_x + 1):\n        total_count += count_y(x)\n    \n    return total_count\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points.append((x, y))\n        index += 2\n    \n    result = count_valid_pairs(N, D, points)\n    print(result)\n```"]}
{"task_id": "abc366_f", "codes": ["import itertools\n\ndef max_nested_function_value(N, K, A, B):\n    # Initialize the maximum value to a very small number\n    max_value = float('-inf')\n    \n    # Generate all possible sequences of length K\n    for seq in itertools.permutations(range(1, N+1), K):\n        x = 1\n        # Compute the nested function value\n        for i in seq:\n            x = A[i-1] * x + B[i-1]\n        # Update the maximum value if the current one is greater\n        if x > max_value:\n            max_value = x\n    \n    return int(max_value)\n\n# Read input\nN, K = map(int, input().split())\nA = []\nB = []\nfor _ in range(N):\n    a, b = map(int, input().split())\n    A.append(a)\n    B.append(b)\n\n# Calculate and print the result\nprint(max_nested_function_value(N, K, A, B))", "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Sort functions by slope A in descending order\n    functions.sort(key=lambda x: x[0], reverse=True)\n    \n    # Initialize the result with the first function applied to 1\n    result = functions[0][0] * 1 + functions[0][1]\n    \n    # Apply the remaining functions in sorted order\n    for i in range(1, K):\n        result = functions[i][0] * result + functions[i][1]\n    \n    print(result)\n\nmax_nested_function_value()"], "passed": [false, false], "raw_code": ["```python\nimport itertools\n\ndef max_nested_function_value(N, K, A, B):\n    # Initialize the maximum value to a very small number\n    max_value = float('-inf')\n    \n    # Generate all possible sequences of length K\n    for seq in itertools.permutations(range(1, N+1), K):\n        x = 1\n        # Compute the nested function value\n        for i in seq:\n            x = A[i-1] * x + B[i-1]\n        # Update the maximum value if the current one is greater\n        if x > max_value:\n            max_value = x\n    \n    return int(max_value)\n\n# Read input\nN, K = map(int, input().split())\nA = []\nB = []\nfor _ in range(N):\n    a, b = map(int, input().split())\n    A.append(a)\n    B.append(b)\n\n# Calculate and print the result\nprint(max_nested_function_value(N, K, A, B))\n```", "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Sort functions by slope A in descending order\n    functions.sort(key=lambda x: x[0], reverse=True)\n    \n    # Initialize the result with the first function applied to 1\n    result = functions[0][0] * 1 + functions[0][1]\n    \n    # Apply the remaining functions in sorted order\n    for i in range(1, K):\n        result = functions[i][0] * result + functions[i][1]\n    \n    print(result)\n\nmax_nested_function_value()"]}
{"task_id": "arc181_b", "codes": ["```python\ndef f(S, T, X):\n    result = \"\"\n    for char in X:\n        if char == '0':\n            result += S\n        else:\n            result += T\n    return result\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        index += 3\n        \n        count_X_0 = X.count('0')\n        count_X_1 = X.count('1')\n        count_Y_0 = Y.count('0')\n        count_Y_1 = Y.count('1')\n        \n        if count_X_0 == count_Y_0 and count_X_1 == count_Y_1:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nsolve()", "def f(S, T, X):\n    result = []\n    for char in X:\n        if char == '0':\n            result.append(S)\n        else:\n            result.append(T)\n    return ''.join(result)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        index += 3\n        \n        freq_X = {}\n        freq_Y = {}\n        \n        # Construct f(S, T, X) and count character frequencies\n        for char in X:\n            if char == '0':\n                freq_X[S] = freq_X.get(S, 0) + 1\n            else:\n                freq_X[T] = freq_X.get(T, 0) + 1\n        \n        # Construct f(S, T, Y) and count character frequencies\n        for char in Y:\n            if char == '0':\n                freq_Y[S] = freq_Y.get(S, 0) + 1\n            else:\n                freq_Y[T] = freq_Y.get(T, 0) + 1\n        \n        # Check if the character frequencies match\n        if freq_X == freq_Y:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef f(S, T, X):\n    result = \"\"\n    for char in X:\n        if char == '0':\n            result += S\n        else:\n            result += T\n    return result\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        index += 3\n        \n        count_X_0 = X.count('0')\n        count_X_1 = X.count('1')\n        count_Y_0 = Y.count('0')\n        count_Y_1 = Y.count('1')\n        \n        if count_X_0 == count_Y_0 and count_X_1 == count_Y_1:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nsolve()", "```python\ndef f(S, T, X):\n    result = []\n    for char in X:\n        if char == '0':\n            result.append(S)\n        else:\n            result.append(T)\n    return ''.join(result)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        index += 3\n        \n        freq_X = {}\n        freq_Y = {}\n        \n        # Construct f(S, T, X) and count character frequencies\n        for char in X:\n            if char == '0':\n                freq_X[S] = freq_X.get(S, 0) + 1\n            else:\n                freq_X[T] = freq_X.get(T, 0) + 1\n        \n        # Construct f(S, T, Y) and count character frequencies\n        for char in Y:\n            if char == '0':\n                freq_Y[S] = freq_Y.get(S, 0) + 1\n            else:\n                freq_Y[T] = freq_Y.get(T, 0) + 1\n        \n        # Check if the character frequencies match\n        if freq_X == freq_Y:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc366_g", "codes": ["```python\ndef solve_xor_graph():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    edges = []\n    for i in range(M):\n        u = int(data[2 + 2 * i]) - 1\n        v = int(data[3 + 2 * i]) - 1\n        edges.append((u, v))\n    \n    # Create adjacency matrix\n    A = [[0] * N for _ in range(N)]\n    for u, v in edges:\n        A[u][v] = 1\n        A[v][u] = 1\n    \n    # Create augmented matrix\n    augmented = [row + [0] for row in A]\n    \n    # Gaussian elimination\n    for i in range(N):\n        # Find pivot row\n        pivot = i\n        for j in range(i + 1, N):\n            if augmented[j][i] == 1:\n                pivot = j\n                break\n        \n        if augmented[pivot][i] == 0:\n            # No solution\n            print(\"No\")\n            return\n        \n        # Swap rows\n        augmented[i], augmented[pivot] = augmented[pivot], augmented[i]\n        \n        # Make pivot 1\n        for j in range(N + 1):\n            if j != i:\n                augmented[i][j] ^= augmented[j][i]\n        \n        # Make other rows 0\n        for j in range(N):\n            if j != i:\n                for k in range(N + 1):\n                    if k != i:\n                        augmented[j][k] ^= augmented[i][k]\n    \n    # Extract solution\n    solution = [0] * N\n    for i in range(N):\n        solution[i] = augmented[i][N]\n    \n    # Check if solution is valid\n    for u, v in edges:\n        if solution[u] ^ solution[v] != 0:\n            print(\"No\")\n            return\n    \n    # Print solution\n    print(\"Yes\")\n    print(\" \".join(map(str, solution)))\n\nsolve_xor_graph()", "```python\ndef solve_graph_xor():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Create adjacency list\n    adj_list = [[] for _ in range(N + 1)]\n    index = 2\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        index += 2\n    \n    # Create augmented matrix\n    A = [[0] * (N + 1) for _ in range(N + 1)]\n    for v in range(1, N + 1):\n        if len(adj_list[v]) > 0:\n            A[v][v] = 1\n            for u in adj_list[v]:\n                A[v][u] = 1\n    \n    # Perform Gaussian elimination over GF(2)\n    def add_row(i, j):\n        for k in range(N + 1):\n            A[i][k] ^= A[j][k]\n    \n    def find_pivot(col):\n        for row in range(col + 1, N + 1):\n            if A[row][col]:\n                return row\n        return None\n    \n    for col in range(1, N + 1):\n        pivot = find_pivot(col)\n        if pivot is None:\n            continue\n        add_row(col, pivot)\n        for row in range(1, N + 1):\n            if row != col and A[row][col]:\n                add_row(row, col)\n    \n    # Check if the system has a solution\n    for row in range(1, N + 1):\n        if A[row][row] == 0 and sum(A[row][i] for i in range(1, N + 1)) != 0:\n            print(\"No\")\n            return\n    \n    # Assign values\n    values = [0] * (N + 1)\n    for v in range(1, N + 1):\n        if A[v][v]:\n            values[v] = 1\n    \n    # Print the result\n    print(\"Yes\")\n    for v in range(1, N + 1):\n        print(values[v], end=\" \")\n    print()\n\nsolve_graph_xor()"], "passed": [false, false], "raw_code": ["```python\ndef solve_xor_graph():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    edges = []\n    for i in range(M):\n        u = int(data[2 + 2 * i]) - 1\n        v = int(data[3 + 2 * i]) - 1\n        edges.append((u, v))\n    \n    # Create adjacency matrix\n    A = [[0] * N for _ in range(N)]\n    for u, v in edges:\n        A[u][v] = 1\n        A[v][u] = 1\n    \n    # Create augmented matrix\n    augmented = [row + [0] for row in A]\n    \n    # Gaussian elimination\n    for i in range(N):\n        # Find pivot row\n        pivot = i\n        for j in range(i + 1, N):\n            if augmented[j][i] == 1:\n                pivot = j\n                break\n        \n        if augmented[pivot][i] == 0:\n            # No solution\n            print(\"No\")\n            return\n        \n        # Swap rows\n        augmented[i], augmented[pivot] = augmented[pivot], augmented[i]\n        \n        # Make pivot 1\n        for j in range(N + 1):\n            if j != i:\n                augmented[i][j] ^= augmented[j][i]\n        \n        # Make other rows 0\n        for j in range(N):\n            if j != i:\n                for k in range(N + 1):\n                    if k != i:\n                        augmented[j][k] ^= augmented[i][k]\n    \n    # Extract solution\n    solution = [0] * N\n    for i in range(N):\n        solution[i] = augmented[i][N]\n    \n    # Check if solution is valid\n    for u, v in edges:\n        if solution[u] ^ solution[v] != 0:\n            print(\"No\")\n            return\n    \n    # Print solution\n    print(\"Yes\")\n    print(\" \".join(map(str, solution)))\n\nsolve_xor_graph()", "```python\ndef solve_graph_xor():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Create adjacency list\n    adj_list = [[] for _ in range(N + 1)]\n    index = 2\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        index += 2\n    \n    # Create augmented matrix\n    A = [[0] * (N + 1) for _ in range(N + 1)]\n    for v in range(1, N + 1):\n        if len(adj_list[v]) > 0:\n            A[v][v] = 1\n            for u in adj_list[v]:\n                A[v][u] = 1\n    \n    # Perform Gaussian elimination over GF(2)\n    def add_row(i, j):\n        for k in range(N + 1):\n            A[i][k] ^= A[j][k]\n    \n    def find_pivot(col):\n        for row in range(col + 1, N + 1):\n            if A[row][col]:\n                return row\n        return None\n    \n    for col in range(1, N + 1):\n        pivot = find_pivot(col)\n        if pivot is None:\n            continue\n        add_row(col, pivot)\n        for row in range(1, N + 1):\n            if row != col and A[row][col]:\n                add_row(row, col)\n    \n    # Check if the system has a solution\n    for row in range(1, N + 1):\n        if A[row][row] == 0 and sum(A[row][i] for i in range(1, N + 1)) != 0:\n            print(\"No\")\n            return\n    \n    # Assign values\n    values = [0] * (N + 1)\n    for v in range(1, N + 1):\n        if A[v][v]:\n            values[v] = 1\n    \n    # Print the result\n    print(\"Yes\")\n    for v in range(1, N + 1):\n        print(values[v], end=\" \")\n    print()\n\nsolve_graph_xor()"]}
{"task_id": "abc367_e", "codes": ["def process_sequence(N, K, X, A):\n    # Step 1: Find the cycle\n    visited = {}\n    current_state = tuple(A)\n    steps = 0\n    \n    while current_state not in visited:\n        visited[current_state] = steps\n        next_state = [A[X[i] - 1] for i in range(N)]\n        current_state = tuple(next_state)\n        steps += 1\n    \n    # Step 2: Determine the cycle length\n    cycle_start = visited[current_state]\n    cycle_length = steps - cycle_start\n    \n    # Step 3: Compute the effective number of operations\n    effective_k = K % cycle_length\n    \n    # Step 4: Apply the reduced number of operations\n    for _ in range(effective_k):\n        A = [A[X[i] - 1] for i in range(N)]\n    \n    return ' '.join(map(str, A))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Process the sequence\nresult = process_sequence(N, K, X, A)\n\n# Print the result\nprint(result)", "def process_sequence(N, K, X, A):\n    # Determine the effective number of operations needed\n    effective_K = K % N\n    \n    # Perform the operations\n    for _ in range(effective_K):\n        A = [A[X[i] - 1] for i in range(N)]\n    \n    # Print the resulting sequence\n    print(' '.join(map(str, A)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\nprocess_sequence(N, K, X, A)"], "passed": [false, false], "raw_code": ["```python\ndef process_sequence(N, K, X, A):\n    # Step 1: Find the cycle\n    visited = {}\n    current_state = tuple(A)\n    steps = 0\n    \n    while current_state not in visited:\n        visited[current_state] = steps\n        next_state = [A[X[i] - 1] for i in range(N)]\n        current_state = tuple(next_state)\n        steps += 1\n    \n    # Step 2: Determine the cycle length\n    cycle_start = visited[current_state]\n    cycle_length = steps - cycle_start\n    \n    # Step 3: Compute the effective number of operations\n    effective_k = K % cycle_length\n    \n    # Step 4: Apply the reduced number of operations\n    for _ in range(effective_k):\n        A = [A[X[i] - 1] for i in range(N)]\n    \n    return ' '.join(map(str, A))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Process the sequence\nresult = process_sequence(N, K, X, A)\n\n# Print the result\nprint(result)\n```", "```python\ndef process_sequence(N, K, X, A):\n    # Determine the effective number of operations needed\n    effective_K = K % N\n    \n    # Perform the operations\n    for _ in range(effective_K):\n        A = [A[X[i] - 1] for i in range(N)]\n    \n    # Print the resulting sequence\n    print(' '.join(map(str, A)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\nprocess_sequence(N, K, X, A)\n```"]}
{"task_id": "abc370_g", "codes": ["def count_good_sequences(N, M):\n    MOD = 998244353\n    MAX_N = int(1e10)\n    MAX_M = int(1e5)\n\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        result = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                result += i\n                if i != n // i:\n                    result += n // i\n        return result\n\n    # Check if a number is good\n    def is_good(n):\n        return sum_of_divisors(n) % 3 == 0\n\n    # Dynamic programming table\ndp = [[0] * (MAX_N + 1) for _ in range(M + 1)]\ndp[0][1] = 1\n\n    # Fill the DP table\nfor m in range(1, M + 1):\n    for n in range(1, N + 1):\n        dp[m][n] = dp[m - 1][n]\n        if is_good(n):\n            dp[m][n] += dp[m - 1][n // n]\ndp[m][n] %= MOD\n\n    # Sum up all valid sequences of length M\nresult = sum(dp[M]) % MOD\nprint(result)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\ncount_good_sequences(N, M)", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        result = 1\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                power = 0\n                while n % i == 0:\n                    n //= i\n                    power += 1\n                result *= (i**(power + 1) - 1) // (i - 1)\n            i += 1\n        if n > 1:\n            result *= (n**2 - 1) // (n - 1)\n        return result\n\n    # Check if a number is a good integer\n    def is_good_integer(n):\n        return sum_of_divisors(n) % 3 == 0\n\n    # Dynamic programming table\ndp = [[0] * (M + 1) for _ in range(N + 1)]\ndp[1][0] = 1\n\n    # Fill the DP table\nfor i in range(1, N + 1):\n    for j in range(M, 0, -1):\n        dp[i][j] = dp[i - 1][j]\n        if is_good_integer(i):\n            dp[i][j] += dp[i // i][j - 1]\n            dp[i][j] %= MOD\n\n    # Print the result\nprint(dp[N][M])\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["def count_good_sequences(N, M):\n    MOD = 998244353\n    MAX_N = int(1e10)\n    MAX_M = int(1e5)\n\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        result = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                result += i\n                if i != n // i:\n                    result += n // i\n        return result\n\n    # Check if a number is good\n    def is_good(n):\n        return sum_of_divisors(n) % 3 == 0\n\n    # Dynamic programming table\ndp = [[0] * (MAX_N + 1) for _ in range(M + 1)]\ndp[0][1] = 1\n\n    # Fill the DP table\nfor m in range(1, M + 1):\n    for n in range(1, N + 1):\n        dp[m][n] = dp[m - 1][n]\n        if is_good(n):\n            dp[m][n] += dp[m - 1][n // n]\ndp[m][n] %= MOD\n\n    # Sum up all valid sequences of length M\nresult = sum(dp[M]) % MOD\nprint(result)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\ncount_good_sequences(N, M)", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        result = 1\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                power = 0\n                while n % i == 0:\n                    n //= i\n                    power += 1\n                result *= (i**(power + 1) - 1) // (i - 1)\n            i += 1\n        if n > 1:\n            result *= (n**2 - 1) // (n - 1)\n        return result\n\n    # Check if a number is a good integer\n    def is_good_integer(n):\n        return sum_of_divisors(n) % 3 == 0\n\n    # Dynamic programming table\ndp = [[0] * (M + 1) for _ in range(N + 1)]\ndp[1][0] = 1\n\n    # Fill the DP table\nfor i in range(1, N + 1):\n    for j in range(M, 0, -1):\n        dp[i][j] = dp[i - 1][j]\n        if is_good_integer(i):\n            dp[i][j] += dp[i // i][j - 1]\n            dp[i][j] %= MOD\n\n    # Print the result\nprint(dp[N][M])\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc373_g", "codes": ["```python\ndef find_non_crossing_permutation(N, points, queries):\n    from collections import defaultdict\n    \n    # Function to check if two segments intersect\n    def do_intersect(p1, q1, p2, q2):\n        def orientation(p, q, r):\n            val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n            if val == 0:\n                return 0\n            elif val > 0:\n                return 1\n            else:\n                return 2\n        \n        o1 = orientation(p1, q1, p2)\n        o2 = orientation(p1, q1, q2)\n        o3 = orientation(p2, q2, p1)\n        o4 = orientation(p2, q2, q1)\n        \n        if o1 != o2 and o3 != o4:\n            return True\n        return False\n    \n    # Dictionary to store the points and their indices\n    point_dict = {tuple(point): i for i, point in enumerate(points)}\n    \n    # List to store the permutation\n    permutation = [-1] * N\n    \n    # List to keep track of used points\n    used = [False] * N\n    \n    for i in range(N):\n        for j in range(N):\n            if not used[j]:\n                if all(not do_intersect(points[i], queries[j], points[k], queries[permutation[k]]) for k in range(i)):\n                    permutation[i] = j\n                    used[j] = True\n                    break\n    \n    if -1 in permutation:\n        return -1\n    else:\n        return ' '.join(map(str, [point_dict[queries[i]] + 1 for i in permutation]))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\npoints = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)]\nqueries = [(int(data[2*N+2*i+1]), int(data[2*N+2*i+2])) for i in range(N)]\n\n# Find the permutation\nresult = find_non_crossing_permutation(N, points, queries)\n\n# Print the result\nprint(result)", "```python\ndef can_form_non_intersecting_segments(N, points):\n    # Separate points into P and Q\n    P = points[:N]\n    Q = points[N:]\n    \n    # Sort points based on x-coordinate, and by y-coordinate if x-coordinates are the same\n    P.sort(key=lambda p: (p[0], p[1]))\n    Q.sort(key=lambda q: (q[0], q[1]))\n    \n    def is_intersecting(i, j, k, l):\n        return (P[i][1] - P[j][1]) * (Q[k][0] - Q[l][0]) == (Q[k][1] - Q[l][1]) * (P[i][0] - P[j][0])\n    \n    def dfs(index, path, used):\n        if index == N:\n            return True\n        \n        for i in range(N):\n            if not used[i]:\n                if not path or not is_intersecting(path[-1], i, index, i):\n                    used[i] = True\n                    path.append(i)\n                    if dfs(index + 1, path, used):\n                        return True\n                    path.pop()\n                    used[i] = False\n        \n        return False\n    \n    for perm in permutations(range(1, N+1)):\n        if dfs(0, [perm[0]], [False]*N):\n            return ' '.join(map(str, perm))\n    \n    return '-1'\n\nimport sys\nfrom itertools import permutations\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\npoints = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)]\npoints.extend([(int(data[2*N+2*i+1]), int(data[2*N+2*i+2])) for i in range(N)])\n\n# Get result\nresult = can_form_non_intersecting_segments(N, points)\n\n# Print result\nprint(result)"], "passed": [false, false], "raw_code": ["```python\ndef find_non_crossing_permutation(N, points, queries):\n    from collections import defaultdict\n    \n    # Function to check if two segments intersect\n    def do_intersect(p1, q1, p2, q2):\n        def orientation(p, q, r):\n            val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n            if val == 0:\n                return 0\n            elif val > 0:\n                return 1\n            else:\n                return 2\n        \n        o1 = orientation(p1, q1, p2)\n        o2 = orientation(p1, q1, q2)\n        o3 = orientation(p2, q2, p1)\n        o4 = orientation(p2, q2, q1)\n        \n        if o1 != o2 and o3 != o4:\n            return True\n        return False\n    \n    # Dictionary to store the points and their indices\n    point_dict = {tuple(point): i for i, point in enumerate(points)}\n    \n    # List to store the permutation\n    permutation = [-1] * N\n    \n    # List to keep track of used points\n    used = [False] * N\n    \n    for i in range(N):\n        for j in range(N):\n            if not used[j]:\n                if all(not do_intersect(points[i], queries[j], points[k], queries[permutation[k]]) for k in range(i)):\n                    permutation[i] = j\n                    used[j] = True\n                    break\n    \n    if -1 in permutation:\n        return -1\n    else:\n        return ' '.join(map(str, [point_dict[queries[i]] + 1 for i in permutation]))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\npoints = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)]\nqueries = [(int(data[2*N+2*i+1]), int(data[2*N+2*i+2])) for i in range(N)]\n\n# Find the permutation\nresult = find_non_crossing_permutation(N, points, queries)\n\n# Print the result\nprint(result)", "```python\ndef can_form_non_intersecting_segments(N, points):\n    # Separate points into P and Q\n    P = points[:N]\n    Q = points[N:]\n    \n    # Sort points based on x-coordinate, and by y-coordinate if x-coordinates are the same\n    P.sort(key=lambda p: (p[0], p[1]))\n    Q.sort(key=lambda q: (q[0], q[1]))\n    \n    def is_intersecting(i, j, k, l):\n        return (P[i][1] - P[j][1]) * (Q[k][0] - Q[l][0]) == (Q[k][1] - Q[l][1]) * (P[i][0] - P[j][0])\n    \n    def dfs(index, path, used):\n        if index == N:\n            return True\n        \n        for i in range(N):\n            if not used[i]:\n                if not path or not is_intersecting(path[-1], i, index, i):\n                    used[i] = True\n                    path.append(i)\n                    if dfs(index + 1, path, used):\n                        return True\n                    path.pop()\n                    used[i] = False\n        \n        return False\n    \n    for perm in permutations(range(1, N+1)):\n        if dfs(0, [perm[0]], [False]*N):\n            return ' '.join(map(str, perm))\n    \n    return '-1'\n\nimport sys\nfrom itertools import permutations\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\npoints = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)]\npoints.extend([(int(data[2*N+2*i+1]), int(data[2*N+2*i+2])) for i in range(N)])\n\n# Get result\nresult = can_form_non_intersecting_segments(N, points)\n\n# Print result\nprint(result)"]}
{"task_id": "abc367_f", "codes": ["def can_rearrange_subsequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        freq_A = [0] * (N + 1)\n        freq_B = [0] * (N + 1)\n        \n        for num in subseq_A:\n            freq_A[num] += 1\n        for num in subseq_B:\n            freq_B[num] += 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequences()", "```python\ndef can_rearrange_subsequence(A, B, queries):\n    results = []\n    \n    for l_i, r_i, L_i, R_i in queries:\n        # Extract subsequences\n        subseq_A = A[l_i - 1:r_i]\n        subseq_B = B[L_i - 1:R_i]\n        \n        # Count frequencies\n        freq_A = {}\n        freq_B = {}\n        \n        for num in subseq_A:\n            if num in freq_A:\n                freq_A[num] += 1\n            else:\n                freq_A[num] = 1\n        \n        for num in subseq_B:\n            if num in freq_B:\n                freq_B[num] += 1\n            else:\n                freq_B[num] = 1\n        \n        # Compare frequencies\n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nA = list(map(int, data[2:N + 2]))\nB = list(map(int, data[N + 2:2 * N + 2]))\n\nqueries = []\nfor i in range(Q):\n    l_i = int(data[2 * N + 2 + 4 * i])\n    r_i = int(data[2 * N + 2 + 4 * i + 1])\n    L_i = int(data[2 * N + 2 + 4 * i + 2])\n    R_i = int(data[2 * N + 2 + 4 * i + 3])\n    queries.append((l_i, r_i, L_i, R_i))\n\n# Process queries\nresults = can_rearrange_subsequence(A, B, queries)\n\n# Print results\nfor result in results:\n    print(result)"], "passed": [false, false], "raw_code": ["```python\ndef can_rearrange_subsequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        freq_A = [0] * (N + 1)\n        freq_B = [0] * (N + 1)\n        \n        for num in subseq_A:\n            freq_A[num] += 1\n        for num in subseq_B:\n            freq_B[num] += 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequences()\n```", "```python\ndef can_rearrange_subsequence(A, B, queries):\n    results = []\n    \n    for l_i, r_i, L_i, R_i in queries:\n        # Extract subsequences\n        subseq_A = A[l_i - 1:r_i]\n        subseq_B = B[L_i - 1:R_i]\n        \n        # Count frequencies\n        freq_A = {}\n        freq_B = {}\n        \n        for num in subseq_A:\n            if num in freq_A:\n                freq_A[num] += 1\n            else:\n                freq_A[num] = 1\n        \n        for num in subseq_B:\n            if num in freq_B:\n                freq_B[num] += 1\n            else:\n                freq_B[num] = 1\n        \n        # Compare frequencies\n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nA = list(map(int, data[2:N + 2]))\nB = list(map(int, data[N + 2:2 * N + 2]))\n\nqueries = []\nfor i in range(Q):\n    l_i = int(data[2 * N + 2 + 4 * i])\n    r_i = int(data[2 * N + 2 + 4 * i + 1])\n    L_i = int(data[2 * N + 2 + 4 * i + 2])\n    R_i = int(data[2 * N + 2 + 4 * i + 3])\n    queries.append((l_i, r_i, L_i, R_i))\n\n# Process queries\nresults = can_rearrange_subsequence(A, B, queries)\n\n# Print results\nfor result in results:\n    print(result)"]}
{"task_id": "abc371_g", "codes": ["```python\ndef find(parent, i):\n    if parent[i] != i:\n        parent[i] = find(parent, parent[i])\n    return parent[i]\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef get_lexicographically_smallest_array(N, P, A):\n    parent = list(range(N))\n    rank = [0] * N\n    \n    # Union elements based on the permutation P\n    for i in range(N):\n        union(parent, rank, i, P[i] - 1)\n    \n    # Create a dictionary to store elements in each cycle\n    cycle_dict = {}\n    for i in range(N):\n        root = find(parent, i)\n        if root not in cycle_dict:\n            cycle_dict[root] = []\n        cycle_dict[root].append(A[i])\n    \n    # Sort each cycle\n    for cycle in cycle_dict.values():\n        cycle.sort()\n    \n    # Reconstruct the array with sorted elements\n    result = [0] * N\n    for i in range(N):\n        root = find(parent, i)\n        index = cycle_dict[root].index(A[i])\n        result[i] = cycle_dict[root][index]\n        cycle_dict[root].pop(index)\n    \n    return ' '.join(map(str, result))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Get the lexicographically smallest array\nresult = get_lexicographically_smallest_array(N, P, A)\n\n# Print the result\nprint(result)", "def smallest_array(N, P, A):\n    # Create a list of indices\n    indices = list(range(N))\n    \n    # Function to find the cycle containing index i\n    def find_cycle(i):\n        cycle = []\n        while i not in cycle:\n            cycle.append(i)\n            i = P[i] - 1\n        return cycle\n    \n    # Find all cycles\n    visited = [False] * N\n    cycles = []\n    for i in range(N):\n        if not visited[i]:\n            cycle = find_cycle(i)\n            cycles.append(cycle)\n            for idx in cycle:\n                visited[idx] = True\n    \n    # Sort each cycle\n    for cycle in cycles:\n        cycle_indices = [indices[i] for i in cycle]\n        cycle_values = [A[i] for i in cycle]\n        sorted_indices = sorted(cycle_indices)\n        sorted_values = sorted(cycle_values)\n        \n        # Reconstruct the array with sorted values\n        for j, value in enumerate(sorted_values):\n            A[sorted_indices[j]] = value\n    \n    # Print the result\n    print(' '.join(map(str, A)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Call the function\nsmallest_array(N, P, A)"], "passed": [false, false], "raw_code": ["```python\ndef find(parent, i):\n    if parent[i] != i:\n        parent[i] = find(parent, parent[i])\n    return parent[i]\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef get_lexicographically_smallest_array(N, P, A):\n    parent = list(range(N))\n    rank = [0] * N\n    \n    # Union elements based on the permutation P\n    for i in range(N):\n        union(parent, rank, i, P[i] - 1)\n    \n    # Create a dictionary to store elements in each cycle\n    cycle_dict = {}\n    for i in range(N):\n        root = find(parent, i)\n        if root not in cycle_dict:\n            cycle_dict[root] = []\n        cycle_dict[root].append(A[i])\n    \n    # Sort each cycle\n    for cycle in cycle_dict.values():\n        cycle.sort()\n    \n    # Reconstruct the array with sorted elements\n    result = [0] * N\n    for i in range(N):\n        root = find(parent, i)\n        index = cycle_dict[root].index(A[i])\n        result[i] = cycle_dict[root][index]\n        cycle_dict[root].pop(index)\n    \n    return ' '.join(map(str, result))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Get the lexicographically smallest array\nresult = get_lexicographically_smallest_array(N, P, A)\n\n# Print the result\nprint(result)", "```python\ndef smallest_array(N, P, A):\n    # Create a list of indices\n    indices = list(range(N))\n    \n    # Function to find the cycle containing index i\n    def find_cycle(i):\n        cycle = []\n        while i not in cycle:\n            cycle.append(i)\n            i = P[i] - 1\n        return cycle\n    \n    # Find all cycles\n    visited = [False] * N\n    cycles = []\n    for i in range(N):\n        if not visited[i]:\n            cycle = find_cycle(i)\n            cycles.append(cycle)\n            for idx in cycle:\n                visited[idx] = True\n    \n    # Sort each cycle\n    for cycle in cycles:\n        cycle_indices = [indices[i] for i in cycle]\n        cycle_values = [A[i] for i in cycle]\n        sorted_indices = sorted(cycle_indices)\n        sorted_values = sorted(cycle_values)\n        \n        # Reconstruct the array with sorted values\n        for j, value in enumerate(sorted_values):\n            A[sorted_indices[j]] = value\n    \n    # Print the result\n    print(' '.join(map(str, A)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Call the function\nsmallest_array(N, P, A)\n```"]}
{"task_id": "abc365_e", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute prefix XOR array\n    prefix_xor = [0] * N\n    prefix_xor[0] = A[0]\n    for i in range(1, N):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i]\n    \n    total_sum = 0\n    \n    # Iterate over all subarrays\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            xor_value = prefix_xor[j - 1] ^ prefix_xor[i - 1] if i > 0 else prefix_xor[j - 1]\n            total_sum += xor_value\n    \n    print(total_sum)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute prefix XOR array\n    prefix_xor = [0] * N\n    prefix_xor[0] = A[0]\n    for i in range(1, N):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i]\n    \n    total_sum = 0\n    \n    # Iterate over all possible subarrays\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            xor_value = prefix_xor[j - 1] ^ prefix_xor[i - 1] if i > 0 else prefix_xor[j - 1]\n            total_sum += xor_value\n    \n    print(total_sum)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute prefix XOR array\n    prefix_xor = [0] * N\n    prefix_xor[0] = A[0]\n    for i in range(1, N):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i]\n    \n    total_sum = 0\n    \n    # Iterate over all subarrays\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            xor_value = prefix_xor[j - 1] ^ prefix_xor[i - 1] if i > 0 else prefix_xor[j - 1]\n            total_sum += xor_value\n    \n    print(total_sum)\n\nmain()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute prefix XOR array\n    prefix_xor = [0] * N\n    prefix_xor[0] = A[0]\n    for i in range(1, N):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i]\n    \n    total_sum = 0\n    \n    # Iterate over all possible subarrays\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            xor_value = prefix_xor[j - 1] ^ prefix_xor[i - 1] if i > 0 else prefix_xor[j - 1]\n            total_sum += xor_value\n    \n    print(total_sum)\n\nmain()\n```"]}
{"task_id": "3563", "codes": ["def maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(m-1, -1, -1):\n        for row in range(n):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score", "def maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(m):\n        for row in range(n):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score"], "passed": [false, false], "raw_code": ["```python\ndef maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(m-1, -1, -1):\n        for row in range(n):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score\n```", "```python\ndef maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(m):\n        for row in range(n):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score\n```"]}
{"task_id": "3552", "codes": ["def largest_k_palindrome(n, k):\n    if n == 1:\n        for i in range(9, 0, -1):\n            if i % k == 0:\n                return str(i)\n        return \"No valid number\"\n    \n    half_length = (n + 1) // 2\n    for i in range(10**(half_length) - 1, 10**(half_length - 1) - 1, -1):\n        half_str = str(i)\n        if n % 2 == 0:\n            palindrome = int(half_str + half_str[::-1])\n        else:\n            palindrome = int(half_str + half_str[-2::-1])\n        if palindrome % k == 0:\n            return str(palindrome)\n    \n    return \"No valid number\"", "def largest_k_palindrome(n, k):\n    def is_divisible_by_k(num_str):\n        return int(num_str) % k == 0\n    \n    if n == 1:\n        return str(max(0, k - 1))\n    \n    max_palindrome = \"\"\n    for i in range(10**(n//2), 0, -1):\n        half = str(i)\n        if n % 2 == 0:\n            palindrome = half + half[::-1]\n        else:\n            palindrome = half + half[-2::-1]\n        \n        if is_divisible_by_k(palindrome):\n            max_palindrome = palindrome\n            break\n    \n    return max_palindrome"], "passed": [false, false], "raw_code": ["```python\ndef largest_k_palindrome(n, k):\n    if n == 1:\n        for i in range(9, 0, -1):\n            if i % k == 0:\n                return str(i)\n        return \"No valid number\"\n    \n    half_length = (n + 1) // 2\n    for i in range(10**(half_length) - 1, 10**(half_length - 1) - 1, -1):\n        half_str = str(i)\n        if n % 2 == 0:\n            palindrome = int(half_str + half_str[::-1])\n        else:\n            palindrome = int(half_str + half_str[-2::-1])\n        if palindrome % k == 0:\n            return str(palindrome)\n    \n    return \"No valid number\"\n```", "```python\ndef largest_k_palindrome(n, k):\n    def is_divisible_by_k(num_str):\n        return int(num_str) % k == 0\n    \n    if n == 1:\n        return str(max(0, k - 1))\n    \n    max_palindrome = \"\"\n    for i in range(10**(n//2), 0, -1):\n        half = str(i)\n        if n % 2 == 0:\n            palindrome = half + half[::-1]\n        else:\n            palindrome = half + half[-2::-1]\n        \n        if is_divisible_by_k(palindrome):\n            max_palindrome = palindrome\n            break\n    \n    return max_palindrome\n```"]}
{"task_id": "arc182_e", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n\n    # Calculate the minimum value for one full cycle of M values of k\n    min_values = [float('inf')] * M\n    for i in range(N):\n        for k in range(M):\n            min_values[k] = min(min_values[k], (C * k + A[i]) % M)\n\n    # Sum up the minimum values for one full cycle\n    total_sum = sum(min_values)\n\n    # Number of complete cycles in K\n    num_complete_cycles = K // M\n\n    # Remaining values after complete cycles\n    remaining_values = K % M\n\n    # Add the sum of minimum values for the remaining values\n    for k in range(remaining_values):\n        total_sum += min_values[k]\n\n    print(total_sum)\n\nmain()", "def min_mod_sum(N, M, C, K, A):\n    # Precompute the remainders for one complete cycle\n    cycle = []\n    seen = set()\n    for i in range(M):\n        rem = (C * i + A[0]) % M\n        if rem not in seen:\n            cycle.append(rem)\n            seen.add(rem)\n    \n    # Sort the cycle to find the minimum values efficiently\n    cycle.sort()\n    \n    # Calculate the number of full cycles and remaining elements\n    full_cycles = K // len(cycle)\n    remaining_elements = K % len(cycle)\n    \n    # Sum the minimum values for full cycles\n    total_sum = full_cycles * sum(cycle[:len(cycle)])\n    \n    # Add the minimum values for the remaining elements\n    for i in range(remaining_elements):\n        total_sum += cycle[i]\n    \n    return total_sum\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nC = int(data[2])\nK = int(data[3])\nA = list(map(int, data[4:]))\n\n# Print the result\nprint(min_mod_sum(N, M, C, K, A))"], "passed": [false, false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n\n    # Calculate the minimum value for one full cycle of M values of k\n    min_values = [float('inf')] * M\n    for i in range(N):\n        for k in range(M):\n            min_values[k] = min(min_values[k], (C * k + A[i]) % M)\n\n    # Sum up the minimum values for one full cycle\n    total_sum = sum(min_values)\n\n    # Number of complete cycles in K\n    num_complete_cycles = K // M\n\n    # Remaining values after complete cycles\n    remaining_values = K % M\n\n    # Add the sum of minimum values for the remaining values\n    for k in range(remaining_values):\n        total_sum += min_values[k]\n\n    print(total_sum)\n\nmain()", "```python\ndef min_mod_sum(N, M, C, K, A):\n    # Precompute the remainders for one complete cycle\n    cycle = []\n    seen = set()\n    for i in range(M):\n        rem = (C * i + A[0]) % M\n        if rem not in seen:\n            cycle.append(rem)\n            seen.add(rem)\n    \n    # Sort the cycle to find the minimum values efficiently\n    cycle.sort()\n    \n    # Calculate the number of full cycles and remaining elements\n    full_cycles = K // len(cycle)\n    remaining_elements = K % len(cycle)\n    \n    # Sum the minimum values for full cycles\n    total_sum = full_cycles * sum(cycle[:len(cycle)])\n    \n    # Add the minimum values for the remaining elements\n    for i in range(remaining_elements):\n        total_sum += cycle[i]\n    \n    return total_sum\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nC = int(data[2])\nK = int(data[3])\nA = list(map(int, data[4:]))\n\n# Print the result\nprint(min_mod_sum(N, M, C, K, A))\n```"]}
{"task_id": "abc371_e", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    \n    for i in range(N):\n        distinct_count = set()\n        for j in range(i, N):\n            distinct_count.add(A[j])\n            total_sum += len(distinct_count)\n    \n    print(total_sum)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Initialize variables\n    total_sum = 0\n    \n    # Iterate over all possible starting points\n    for i in range(N):\n        distinct_count = {}\n        current_distinct = 0\n        \n        # Iterate over all possible ending points\n        for j in range(i, N):\n            if A[j] not in distinct_count:\n                distinct_count[A[j]] = 1\n                current_distinct += 1\n            else:\n                distinct_count[A[j]] += 1\n            \n            total_sum += current_distinct\n    \n    print(total_sum)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    \n    for i in range(N):\n        distinct_count = set()\n        for j in range(i, N):\n            distinct_count.add(A[j])\n            total_sum += len(distinct_count)\n    \n    print(total_sum)\n\nmain()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Initialize variables\n    total_sum = 0\n    \n    # Iterate over all possible starting points\n    for i in range(N):\n        distinct_count = {}\n        current_distinct = 0\n        \n        # Iterate over all possible ending points\n        for j in range(i, N):\n            if A[j] not in distinct_count:\n                distinct_count[A[j]] = 1\n                current_distinct += 1\n            else:\n                distinct_count[A[j]] += 1\n            \n            total_sum += current_distinct\n    \n    print(total_sum)\n\nmain()\n```"]}
{"task_id": "abc370_f", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate the prefix sums of the masses\n    prefix_sums = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + A[i - 1]\n\n    # Initialize variables to store the result\n    min_weight = float('inf')\n    unused_cuts = 0\n\n    # Iterate over possible starting points for the first person's share\n    for start in range(N):\n        current_weight = 0\n        cuts_used = set()\n        for end in range(start, N):\n            current_weight += A[end]\n            if current_weight >= min_weight:\n                break\n            cuts_used.add(end)\n        if current_weight < min_weight:\n            min_weight = current_weight\n            unused_cuts = N - len(cuts_used)\n\n    # Check the last person's share\n    if prefix_sums[N] - prefix_sums[start] >= min_weight:\n        unused_cuts -= 1\n\n    print(min_weight, unused_cuts)\n\nif __name__ == '__main__':\n    main()", "import sys\n\ndef can_divide(N, K, A, target):\n    dp = [False] * (N + 1)\n    dp[0] = True\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    for i in range(1, N + 1):\n        for j in range(i, 0, -1):\n            if dp[j - 1] and prefix_sum[i] - prefix_sum[j - 1] <= target:\n                dp[i] = True\n                break\n    return dp[N]\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    left, right = max(A), sum(A)\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_divide(N, K, A, mid):\n            left = mid\n        else:\n            right = mid - 1\n    min_weight = left\n    count_unused_cuts = 0\n    current_group = 0\n    group_sum = 0\n    for i in range(N):\n        group_sum += A[i]\n        if group_sum > min_weight:\n            current_group += 1\n            group_sum = A[i]\n        if group_sum == min_weight:\n            count_unused_cuts += 1\n    print(min_weight, count_unused_cuts)\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate the prefix sums of the masses\n    prefix_sums = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + A[i - 1]\n\n    # Initialize variables to store the result\n    min_weight = float('inf')\n    unused_cuts = 0\n\n    # Iterate over possible starting points for the first person's share\n    for start in range(N):\n        current_weight = 0\n        cuts_used = set()\n        for end in range(start, N):\n            current_weight += A[end]\n            if current_weight >= min_weight:\n                break\n            cuts_used.add(end)\n        if current_weight < min_weight:\n            min_weight = current_weight\n            unused_cuts = N - len(cuts_used)\n\n    # Check the last person's share\n    if prefix_sums[N] - prefix_sums[start] >= min_weight:\n        unused_cuts -= 1\n\n    print(min_weight, unused_cuts)\n\nif __name__ == '__main__':\n    main()", "import sys\n\ndef can_divide(N, K, A, target):\n    dp = [False] * (N + 1)\n    dp[0] = True\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    for i in range(1, N + 1):\n        for j in range(i, 0, -1):\n            if dp[j - 1] and prefix_sum[i] - prefix_sum[j - 1] <= target:\n                dp[i] = True\n                break\n    return dp[N]\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    left, right = max(A), sum(A)\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_divide(N, K, A, mid):\n            left = mid\n        else:\n            right = mid - 1\n    min_weight = left\n    count_unused_cuts = 0\n    current_group = 0\n    group_sum = 0\n    for i in range(N):\n        group_sum += A[i]\n        if group_sum > min_weight:\n            current_group += 1\n            group_sum = A[i]\n        if group_sum == min_weight:\n            count_unused_cuts += 1\n    print(min_weight, count_unused_cuts)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc372_g", "codes": ["def count_valid_pairs(N, A, B, C):\n    def max_y(x):\n        left, right = 0, C[0] // B[0]\n        while left <= right:\n            mid = (left + right) // 2\n            if all(C[i] - A[i] * x > B[i] * mid for i in range(N)):\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n    \n    count = 0\n    for x in range(1, max(C) // min(A) + 1):\n        if max_y(x) >= 1:\n            count += 1\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = [int(data[index + 3 * i]) for i in range(N)]\n        B = [int(data[index + 3 * i + 1]) for i in range(N)]\n        C = [int(data[index + 3 * i + 2]) for i in range(N)]\n        index += 3 * N\n        \n        result = count_valid_pairs(N, A, B, C)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef binary_search(A, B, C, y):\n    left, right = 0, C[0] // A[0]\n    while left < right:\n        mid = (left + right + 1) // 2\n        if all(A[i] * mid + B[i] * y < C[i] for i in range(N)):\n            left = mid\n        else:\n            right = mid - 1\n    return left\n\ndef solve_case(N, A, B, C):\n    max_y = max((C[i] - B[i]) // A[i] for i in range(N))\n    count = 0\n    for y in range(1, max_y + 1):\n        count += binary_search(A, B, C, y)\n    return count\n\ndef main():\n    T = int(data[0])\n    index = 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        A = list(map(int, data[index + 1:index + 1 + N]))\n        B = list(map(int, data[index + 1 + N:index + 1 + 2 * N]))\n        C = list(map(int, data[index + 1 + 2 * N:index + 1 + 3 * N]))\n        index += 3 * N\n        results.append(solve_case(N, A, B, C))\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef count_valid_pairs(N, A, B, C):\n    def max_y(x):\n        left, right = 0, C[0] // B[0]\n        while left <= right:\n            mid = (left + right) // 2\n            if all(C[i] - A[i] * x > B[i] * mid for i in range(N)):\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n    \n    count = 0\n    for x in range(1, max(C) // min(A) + 1):\n        if max_y(x) >= 1:\n            count += 1\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = [int(data[index + 3 * i]) for i in range(N)]\n        B = [int(data[index + 3 * i + 1]) for i in range(N)]\n        C = [int(data[index + 3 * i + 2]) for i in range(N)]\n        index += 3 * N\n        \n        result = count_valid_pairs(N, A, B, C)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef binary_search(A, B, C, y):\n    left, right = 0, C[0] // A[0]\n    while left < right:\n        mid = (left + right + 1) // 2\n        if all(A[i] * mid + B[i] * y < C[i] for i in range(N)):\n            left = mid\n        else:\n            right = mid - 1\n    return left\n\ndef solve_case(N, A, B, C):\n    max_y = max((C[i] - B[i]) // A[i] for i in range(N))\n    count = 0\n    for y in range(1, max_y + 1):\n        count += binary_search(A, B, C, y)\n    return count\n\ndef main():\n    T = int(data[0])\n    index = 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        A = list(map(int, data[index + 1:index + 1 + N]))\n        B = list(map(int, data[index + 1 + N:index + 1 + 2 * N]))\n        C = list(map(int, data[index + 1 + 2 * N:index + 1 + 3 * N]))\n        index += 3 * N\n        results.append(solve_case(N, A, B, C))\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "3531", "codes": ["def min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times_to_die = [(h / d) for h, d in zip(health, damage)]\n    \n    # Sort enemies by the time it takes for them to die\n    sorted_enemies = sorted(zip(times_to_die, damage))\n    \n    total_damage = 0\n    current_time = 0\n    \n    for time_to_die, d in sorted_enemies:\n        if current_time < time_to_die:\n            total_damage += power * (time_to_die - current_time)\n            current_time = time_to_die\n        else:\n            remaining_health = health[sorted_enemies.index((time_to_die, d))]\n            full_attacks = remaining_health // power\n            partial_attack = remaining_health % power\n            total_damage += full_attacks * power + partial_attack\n            break\n    \n    return int(total_damage)", "def min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times_to_die = [(h / d) for h, d in zip(health, damage)]\n    \n    # Sort enemies by the time it takes for them to die in descending order\n    sorted_enemies = sorted(zip(times_to_die, range(len(damage))), reverse=True)\n    \n    total_damage = 0\n    current_time = 0\n    \n    # Simulate the process of Bob attacking the enemies\n    for time_to_die, index in sorted_enemies:\n        if health[index] > 0:\n            attacks_needed = math.ceil(time_to_die)\n            total_damage += attacks_needed * power\n            current_time += attacks_needed\n            health[index] = 0\n    \n    return total_damage"], "passed": [false, false], "raw_code": ["```python\ndef min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times_to_die = [(h / d) for h, d in zip(health, damage)]\n    \n    # Sort enemies by the time it takes for them to die\n    sorted_enemies = sorted(zip(times_to_die, damage))\n    \n    total_damage = 0\n    current_time = 0\n    \n    for time_to_die, d in sorted_enemies:\n        if current_time < time_to_die:\n            total_damage += power * (time_to_die - current_time)\n            current_time = time_to_die\n        else:\n            remaining_health = health[sorted_enemies.index((time_to_die, d))]\n            full_attacks = remaining_health // power\n            partial_attack = remaining_health % power\n            total_damage += full_attacks * power + partial_attack\n            break\n    \n    return int(total_damage)\n```", "```python\ndef min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times_to_die = [(h / d) for h, d in zip(health, damage)]\n    \n    # Sort enemies by the time it takes for them to die in descending order\n    sorted_enemies = sorted(zip(times_to_die, range(len(damage))), reverse=True)\n    \n    total_damage = 0\n    current_time = 0\n    \n    # Simulate the process of Bob attacking the enemies\n    for time_to_die, index in sorted_enemies:\n        if health[index] > 0:\n            attacks_needed = math.ceil(time_to_die)\n            total_damage += attacks_needed * power\n            current_time += attacks_needed\n            health[index] = 0\n    \n    return total_damage\n```"]}
{"task_id": "arc181_d", "codes": ["import sys\n\ndef update(bit, idx, val):\n    while idx < len(bit):\n        bit[idx] += val\n        idx += idx & -idx\n\ndef query(bit, idx):\n    result = 0\n    while idx > 0:\n        result += bit[idx]\n        idx -= idx & -idx\n    return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n\n    bit = [0] * (N + 1)\n    inversion_count = 0\n\n    for a in A:\n        for i in range(a - 1, 0, -1):\n            inversion_count += query(bit, i)\n            update(bit, i, 1)\n        print(inversion_count)\n\nif __name__ == '__main__':\n    main()", "import sys\nfrom bisect import bisect_left\n\ndef fenwick_tree(n):\n    tree = [0] * (n + 1)\n\n    def update(i, delta):\n        while i <= n:\n            tree[i] += delta\n            i += i & -i\n\n    def query(i):\n        sum = 0\n        while i > 0:\n            sum += tree[i]\n            i -= i & -i\n        return sum\n\n    return update, query\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n\n    # Initialize Fenwick Tree\n    update, query = fenwick_tree(N)\n\n    # Calculate initial inversion number\n    inversions = 0\n    for i in range(1, N):\n        inversions += query(P[i]-1)\n        update(P[i], 1)\n\n    # Print initial inversion number\n    print(inversions)\n\n    # Process each operation A_i\n    for a in A:\n        index = bisect_left(P, a)\n        if index > 0:\n            inversions -= query(index)\n        update(a, 1)\n        if index < N:\n            inversions += query(N) - query(index+1)\n        print(inversions)\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["import sys\n\ndef update(bit, idx, val):\n    while idx < len(bit):\n        bit[idx] += val\n        idx += idx & -idx\n\ndef query(bit, idx):\n    result = 0\n    while idx > 0:\n        result += bit[idx]\n        idx -= idx & -idx\n    return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n\n    bit = [0] * (N + 1)\n    inversion_count = 0\n\n    for a in A:\n        for i in range(a - 1, 0, -1):\n            inversion_count += query(bit, i)\n            update(bit, i, 1)\n        print(inversion_count)\n\nif __name__ == '__main__':\n    main()", "import sys\nfrom bisect import bisect_left\n\ndef fenwick_tree(n):\n    tree = [0] * (n + 1)\n\n    def update(i, delta):\n        while i <= n:\n            tree[i] += delta\n            i += i & -i\n\n    def query(i):\n        sum = 0\n        while i > 0:\n            sum += tree[i]\n            i -= i & -i\n        return sum\n\n    return update, query\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n\n    # Initialize Fenwick Tree\n    update, query = fenwick_tree(N)\n\n    # Calculate initial inversion number\n    inversions = 0\n    for i in range(1, N):\n        inversions += query(P[i]-1)\n        update(P[i], 1)\n\n    # Print initial inversion number\n    print(inversions)\n\n    # Process each operation A_i\n    for a in A:\n        index = bisect_left(P, a)\n        if index > 0:\n            inversions -= query(index)\n        update(a, 1)\n        if index < N:\n            inversions += query(N) - query(index+1)\n        print(inversions)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc372_f", "codes": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    index = 3\n    for _ in range(M):\n        X = int(data[index])\n        Y = int(data[index + 1])\n        edges.append((X, Y))\n        index += 2\n    \n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    # Process each move\n    for k in range(K):\n        new_dp = [0] * (K + 1)\n        for v in range(1, N + 1):\n            if v == N:\n                next_v = 1\n            else:\n                next_v = v + 1\n            new_dp[next_v] = (new_dp[next_v] + dp[v][k]) % MOD\n            for X, Y in edges:\n                if X == v:\n                    new_dp[Y] = (new_dp[Y] + dp[v][k]) % MOD\n        dp = new_dp\n    \n    # Sum up the number of ways to reach any vertex in exactly K moves\n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    # Process cycle edges\n    for i in range(1, N + 1):\n        dp[(i % N) + 1][1] += dp[i][0]\n        dp[(i % N) + 1][1] %= MOD\n    \n    # Process additional edges\n    index = 3\n    for _ in range(M):\n        X = int(data[index]) - 1\n        Y = int(data[index + 1]) - 1\n        for k in range(K):\n            dp[Y][k + 1] += dp[X][k]\n            dp[Y][k + 1] %= MOD\n        index += 2\n    \n    # Sum up the number of ways to reach any vertex after K moves\n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    index = 3\n    for _ in range(M):\n        X = int(data[index])\n        Y = int(data[index + 1])\n        edges.append((X, Y))\n        index += 2\n    \n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    # Process each move\n    for k in range(K):\n        new_dp = [0] * (K + 1)\n        for v in range(1, N + 1):\n            if v == N:\n                next_v = 1\n            else:\n                next_v = v + 1\n            new_dp[next_v] = (new_dp[next_v] + dp[v][k]) % MOD\n            for X, Y in edges:\n                if X == v:\n                    new_dp[Y] = (new_dp[Y] + dp[v][k]) % MOD\n        dp = new_dp\n    \n    # Sum up the number of ways to reach any vertex in exactly K moves\n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\nmain()", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    # Process cycle edges\n    for i in range(1, N + 1):\n        dp[(i % N) + 1][1] += dp[i][0]\n        dp[(i % N) + 1][1] %= MOD\n    \n    # Process additional edges\n    index = 3\n    for _ in range(M):\n        X = int(data[index]) - 1\n        Y = int(data[index + 1]) - 1\n        for k in range(K):\n            dp[Y][k + 1] += dp[X][k]\n            dp[Y][k + 1] %= MOD\n        index += 2\n    \n    # Sum up the number of ways to reach any vertex after K moves\n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\nmain()\n```"]}
{"task_id": "3583", "codes": ["def solve_gcd_pairs(nums, queries):\n    from collections import defaultdict\n    \n    # Dictionary to store the frequency of each GCD value\n    gcd_freq = defaultdict(int)\n    \n    # Calculate the GCD for all pairs and update the frequency dictionary\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            gcd_val = gcd(nums[i], nums[j])\n            gcd_freq[gcd_val] += 1\n    \n    # Get the unique GCD values sorted in ascending order\n    gcd_values = sorted(gcd_freq.keys())\n    \n    # Prefix sum array to store the cumulative counts of GCD values\n    prefix_sum = [0]\n    for gcd_val in gcd_values:\n        prefix_sum.append(prefix_sum[-1] + gcd_freq[gcd_val])\n    \n    # Function to answer a single query\n    def answer_query(query):\n        idx = bisect.bisect_left(prefix_sum, query + 1)\n        if idx == len(prefix_sum):\n            return None\n        return gcd_values[idx - 1]\n    \n    # Answer all queries\n    result = [answer_query(q) for q in queries]\n    \n    return result", "from math import gcd\nfrom collections import defaultdict\n\ndef getGCDPairs(nums, queries):\n    n = len(nums)\n    gcd_count = defaultdict(int)\n    \n    # Calculate GCD for all pairs and count occurrences\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_count[g] += 1\n    \n    # Create a prefix sum array for GCD counts\n    prefix_sum = [0]\n    current_sum = 0\n    for g in sorted(gcd_count.keys()):\n        current_sum += gcd_count[g]\n        prefix_sum.append(current_sum)\n    \n    # Answer the queries\n    result = []\n    for q in queries:\n        idx = bisect.bisect_left(prefix_sum, q + 1)\n        if idx > 0:\n            result.append(sorted(gcd_count.keys())[idx - 1])\n        else:\n            result.append(0)\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\ndef solve_gcd_pairs(nums, queries):\n    from collections import defaultdict\n    \n    # Dictionary to store the frequency of each GCD value\n    gcd_freq = defaultdict(int)\n    \n    # Calculate the GCD for all pairs and update the frequency dictionary\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            gcd_val = gcd(nums[i], nums[j])\n            gcd_freq[gcd_val] += 1\n    \n    # Get the unique GCD values sorted in ascending order\n    gcd_values = sorted(gcd_freq.keys())\n    \n    # Prefix sum array to store the cumulative counts of GCD values\n    prefix_sum = [0]\n    for gcd_val in gcd_values:\n        prefix_sum.append(prefix_sum[-1] + gcd_freq[gcd_val])\n    \n    # Function to answer a single query\n    def answer_query(query):\n        idx = bisect.bisect_left(prefix_sum, query + 1)\n        if idx == len(prefix_sum):\n            return None\n        return gcd_values[idx - 1]\n    \n    # Answer all queries\n    result = [answer_query(q) for q in queries]\n    \n    return result\n```", "```python\nfrom math import gcd\nfrom collections import defaultdict\n\ndef getGCDPairs(nums, queries):\n    n = len(nums)\n    gcd_count = defaultdict(int)\n    \n    # Calculate GCD for all pairs and count occurrences\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_count[g] += 1\n    \n    # Create a prefix sum array for GCD counts\n    prefix_sum = [0]\n    current_sum = 0\n    for g in sorted(gcd_count.keys()):\n        current_sum += gcd_count[g]\n        prefix_sum.append(current_sum)\n    \n    # Answer the queries\n    result = []\n    for q in queries:\n        idx = bisect.bisect_left(prefix_sum, q + 1)\n        if idx > 0:\n            result.append(sorted(gcd_count.keys())[idx - 1])\n        else:\n            result.append(0)\n    \n    return result\n```"]}
{"task_id": "3550", "codes": ["def max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(row) for row in board]\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Find rows and columns with exactly one non-zero cell\n    valid_rows = [i for i, s in enumerate(row_sums) if s != 0 and row_sums.count(s) == 1]\n    valid_cols = [j for j, s in enumerate(col_sums) if s != 0 and col_sums.count(s) == 1]\n    \n    # If there are fewer than 3 valid positions, return 0\n    if len(valid_rows) < 3 or len(valid_cols) < 3:\n        return 0\n    \n    # Calculate the maximum sum by selecting 3 valid positions\n    max_sum = 0\n    for r in valid_rows:\n        for c in valid_cols:\n            max_sum += board[r][c]\n    \n    return max_sum", "def max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    \n    # Find rows and columns with exactly one non-zero value\n    candidate_rows = []\n    candidate_cols = []\n    \n    for i in range(m):\n        count = 0\n        col_index = -1\n        for j in range(n):\n            if board[i][j] != 0:\n                count += 1\n                col_index = j\n            if count > 1:\n                break\n        if count == 1:\n            candidate_rows.append((i, board[i][col_index]))\n    \n    for j in range(n):\n        count = 0\n        row_index = -1\n        for i in range(m):\n            if board[i][j] != 0:\n                count += 1\n                row_index = i\n            if count > 1:\n                break\n        if count == 1:\n            candidate_cols.append((j, board[row_index][j]))\n    \n    # Sort candidates by their values in descending order\n    candidate_rows.sort(key=lambda x: x[1], reverse=True)\n    candidate_cols.sort(key=lambda x: x[1], reverse=True)\n    \n    # Select the top 3 candidates from rows and columns\n    selected_rows = candidate_rows[:3]\n    selected_cols = candidate_cols[:3]\n    \n    # Ensure no two selected positions are in the same row or column\n    while True:\n        valid = True\n        for r1, c1 in selected_rows:\n            for r2, c2 in selected_cols:\n                if r1 == r2 or c1 == c2:\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            break\n        \n        # If not valid, try removing the smallest value from either rows or columns\n        if selected_rows[-1][1] < selected_cols[-1][1]:\n            selected_rows.pop()\n        else:\n            selected_cols.pop()\n    \n    # Calculate the total sum of the selected positions\n    total_sum = sum(row_val for _, row_val in selected_rows) + sum(col_val for _, col_val in selected_cols)\n    \n    return total_sum"], "passed": [false, false], "raw_code": ["```python\ndef max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(row) for row in board]\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Find rows and columns with exactly one non-zero cell\n    valid_rows = [i for i, s in enumerate(row_sums) if s != 0 and row_sums.count(s) == 1]\n    valid_cols = [j for j, s in enumerate(col_sums) if s != 0 and col_sums.count(s) == 1]\n    \n    # If there are fewer than 3 valid positions, return 0\n    if len(valid_rows) < 3 or len(valid_cols) < 3:\n        return 0\n    \n    # Calculate the maximum sum by selecting 3 valid positions\n    max_sum = 0\n    for r in valid_rows:\n        for c in valid_cols:\n            max_sum += board[r][c]\n    \n    return max_sum\n```", "```python\ndef max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    \n    # Find rows and columns with exactly one non-zero value\n    candidate_rows = []\n    candidate_cols = []\n    \n    for i in range(m):\n        count = 0\n        col_index = -1\n        for j in range(n):\n            if board[i][j] != 0:\n                count += 1\n                col_index = j\n            if count > 1:\n                break\n        if count == 1:\n            candidate_rows.append((i, board[i][col_index]))\n    \n    for j in range(n):\n        count = 0\n        row_index = -1\n        for i in range(m):\n            if board[i][j] != 0:\n                count += 1\n                row_index = i\n            if count > 1:\n                break\n        if count == 1:\n            candidate_cols.append((j, board[row_index][j]))\n    \n    # Sort candidates by their values in descending order\n    candidate_rows.sort(key=lambda x: x[1], reverse=True)\n    candidate_cols.sort(key=lambda x: x[1], reverse=True)\n    \n    # Select the top 3 candidates from rows and columns\n    selected_rows = candidate_rows[:3]\n    selected_cols = candidate_cols[:3]\n    \n    # Ensure no two selected positions are in the same row or column\n    while True:\n        valid = True\n        for r1, c1 in selected_rows:\n            for r2, c2 in selected_cols:\n                if r1 == r2 or c1 == c2:\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            break\n        \n        # If not valid, try removing the smallest value from either rows or columns\n        if selected_rows[-1][1] < selected_cols[-1][1]:\n            selected_rows.pop()\n        else:\n            selected_cols.pop()\n    \n    # Calculate the total sum of the selected positions\n    total_sum = sum(row_val for _, row_val in selected_rows) + sum(col_val for _, col_val in selected_cols)\n    \n    return total_sum\n```"]}
{"task_id": "abc368_g", "codes": ["import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self, n: int):\n        self.n = n\n        self.tree_sum = [0] * (2 * n)\n        self.tree_prod = [1] * (2 * n)\n\n    def update(self, pos: int, val: int, arr: List[int], tree: List[int]) -> None:\n        pos += self.n\n        tree[pos] = val\n        while pos > 1:\n            pos //= 2\n            if arr[pos * 2 - 1] == arr[pos * 2]:\n                tree[pos] = max(tree[pos * 2 - 1], tree[pos * 2])\n            elif arr[pos * 2 - 1] < arr[pos * 2]:\n                tree[pos] = tree[pos * 2]\n            else:\n                tree[pos] = tree[pos * 2 - 1]\n\n    def query(self, left: int, right: int, tree: List[int]) -> int:\n        result = 0\n        left += self.n\n        right += self.n\n        while left < right:\n            if left % 2 == 1:\n                result = max(result, tree[left])\n                left += 1\n            if right % 2 == 1:\n                right -= 1\n                result = max(result, tree[right])\n            left //= 2\n            right //= 2\n        return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    A = list(map(int, data[1:n+1]))\n    B = list(map(int, data[n+1:2*n+1]))\n    Q = int(data[2*n+1])\n    queries = data[2*n+2:]\n\n    seg_tree_sum = SegmentTree(n)\n    seg_tree_prod = SegmentTree(n)\n\n    for i in range(n):\n        seg_tree_sum.update(i, A[i], A, seg_tree_sum.tree_sum)\n        seg_tree_prod.update(i, B[i], B, seg_tree_prod.tree_prod)\n\n    results = []\n\n    for i in range(Q):\n        query_type = int(queries[i*3])\n        if query_type == 1:\n            idx = int(queries[i*3+1]) - 1\n            new_val = int(queries[i*3+2])\n            seg_tree_sum.update(idx, new_val, A, seg_tree_sum.tree_sum)\n            seg_tree_prod.update(idx, new_val, B, seg_tree_prod.tree_prod)\n        elif query_type == 2:\n            idx = int(queries[i*3+1]) - 1\n            new_val = int(queries[i*3+2])\n            seg_tree_sum.update(idx, new_val, B, seg_tree_sum.tree_sum)\n            seg_tree_prod.update(idx, new_val, A, seg_tree_prod.tree_prod)\n        elif query_type == 3:\n            l = int(queries[i*3+1]) - 1\n            r = int(queries[i*3+2]) - 1\n            v = 0\n            for j in range(l, r + 1):\n                v = max(v + seg_tree_sum.query(j, j + 1, seg_tree_sum.tree_sum), v * seg_tree_prod.query(j, j + 1, seg_tree_prod.tree_prod))\n            results.append(str(v))\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self"], "passed": [false, false], "raw_code": ["import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self, n: int):\n        self.n = n\n        self.tree_sum = [0] * (2 * n)\n        self.tree_prod = [1] * (2 * n)\n\n    def update(self, pos: int, val: int, arr: List[int], tree: List[int]) -> None:\n        pos += self.n\n        tree[pos] = val\n        while pos > 1:\n            pos //= 2\n            if arr[pos * 2 - 1] == arr[pos * 2]:\n                tree[pos] = max(tree[pos * 2 - 1], tree[pos * 2])\n            elif arr[pos * 2 - 1] < arr[pos * 2]:\n                tree[pos] = tree[pos * 2]\n            else:\n                tree[pos] = tree[pos * 2 - 1]\n\n    def query(self, left: int, right: int, tree: List[int]) -> int:\n        result = 0\n        left += self.n\n        right += self.n\n        while left < right:\n            if left % 2 == 1:\n                result = max(result, tree[left])\n                left += 1\n            if right % 2 == 1:\n                right -= 1\n                result = max(result, tree[right])\n            left //= 2\n            right //= 2\n        return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    A = list(map(int, data[1:n+1]))\n    B = list(map(int, data[n+1:2*n+1]))\n    Q = int(data[2*n+1])\n    queries = data[2*n+2:]\n\n    seg_tree_sum = SegmentTree(n)\n    seg_tree_prod = SegmentTree(n)\n\n    for i in range(n):\n        seg_tree_sum.update(i, A[i], A, seg_tree_sum.tree_sum)\n        seg_tree_prod.update(i, B[i], B, seg_tree_prod.tree_prod)\n\n    results = []\n\n    for i in range(Q):\n        query_type = int(queries[i*3])\n        if query_type == 1:\n            idx = int(queries[i*3+1]) - 1\n            new_val = int(queries[i*3+2])\n            seg_tree_sum.update(idx, new_val, A, seg_tree_sum.tree_sum)\n            seg_tree_prod.update(idx, new_val, B, seg_tree_prod.tree_prod)\n        elif query_type == 2:\n            idx = int(queries[i*3+1]) - 1\n            new_val = int(queries[i*3+2])\n            seg_tree_sum.update(idx, new_val, B, seg_tree_sum.tree_sum)\n            seg_tree_prod.update(idx, new_val, A, seg_tree_prod.tree_prod)\n        elif query_type == 3:\n            l = int(queries[i*3+1]) - 1\n            r = int(queries[i*3+2]) - 1\n            v = 0\n            for j in range(l, r + 1):\n                v = max(v + seg_tree_sum.query(j, j + 1, seg_tree_sum.tree_sum), v * seg_tree_prod.query(j, j + 1, seg_tree_prod.tree_prod))\n            results.append(str(v))\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self"]}
{"task_id": "arc183_b", "codes": ["```python\ndef can_transform_to_B():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        \n        A = list(map(int, data[index:index + N]))\n        B = list(map(int, data[index + N:index + 2 * N]))\n        index += 2 * N\n        \n        # Find connected components\n        components_A = []\n        components_B = []\n        \n        def find_components(seq, components):\n            visited = [False] * N\n            stack = []\n            \n            for i in range(N):\n                if not visited[i]:\n                    stack.append(i)\n                    while stack:\n                        current = stack.pop()\n                        if not visited[current]:\n                            visited[current] = True\n                            components[-1].append(current)\n                            for j in range(max(0, current - K), min(N, current + K + 1)):\n                                if seq[j] == seq[current] and not visited[j]:\n                                    stack.append(j)\n                    \n                    components.append([])\n        \n        find_components(A, components_A)\n        find_components(B, components_B)\n        \n        # Sort elements within each component\n        sorted_components_A = [sorted(A[component]) for component in components_A]\n        sorted_components_B = [sorted(B[component]) for component in components_B]\n        \n        # Check if sorted components match\n        if sorted_components_A == sorted_components_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_transform_to_B()", "def find(parent, i):\n    if parent[i] != i:\n        parent[i] = find(parent, parent[i])\n    return parent[i]\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        \n        A = list(map(int, data[index:index + N]))\n        B = list(map(int, data[index + N:index + 2 * N]))\n        index += 2 * N\n        \n        parent = list(range(N))\n        rank = [0] * N\n        \n        # Create graph and union connected components\n        for i in range(N):\n            for j in range(max(0, i - K), min(N, i + K + 1)):\n                if A[i] == A[j]:\n                    union(parent, rank, i, j)\n        \n        # Check if elements in each connected component match B\n        component_map = {}\n        for i in range(N):\n            root = find(parent, i)\n            if root not in component_map:\n                component_map[root] = []\n            component_map[root].append(i)\n        \n        for component in component_map.values():\n            component_values = sorted(A[i] for i in component)\n            target_values = sorted(B[i] for i in component)\n            if component_values != target_values:\n                results.append(\"No\")\n                break\n        else:\n            results.append(\"Yes\")\n    \n    for result in results:\n        print(result)\n\nsolve()"], "passed": [false, false], "raw_code": ["```python\ndef can_transform_to_B():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        \n        A = list(map(int, data[index:index + N]))\n        B = list(map(int, data[index + N:index + 2 * N]))\n        index += 2 * N\n        \n        # Find connected components\n        components_A = []\n        components_B = []\n        \n        def find_components(seq, components):\n            visited = [False] * N\n            stack = []\n            \n            for i in range(N):\n                if not visited[i]:\n                    stack.append(i)\n                    while stack:\n                        current = stack.pop()\n                        if not visited[current]:\n                            visited[current] = True\n                            components[-1].append(current)\n                            for j in range(max(0, current - K), min(N, current + K + 1)):\n                                if seq[j] == seq[current] and not visited[j]:\n                                    stack.append(j)\n                    \n                    components.append([])\n        \n        find_components(A, components_A)\n        find_components(B, components_B)\n        \n        # Sort elements within each component\n        sorted_components_A = [sorted(A[component]) for component in components_A]\n        sorted_components_B = [sorted(B[component]) for component in components_B]\n        \n        # Check if sorted components match\n        if sorted_components_A == sorted_components_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_transform_to_B()", "```python\ndef find(parent, i):\n    if parent[i] != i:\n        parent[i] = find(parent, parent[i])\n    return parent[i]\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        \n        A = list(map(int, data[index:index + N]))\n        B = list(map(int, data[index + N:index + 2 * N]))\n        index += 2 * N\n        \n        parent = list(range(N))\n        rank = [0] * N\n        \n        # Create graph and union connected components\n        for i in range(N):\n            for j in range(max(0, i - K), min(N, i + K + 1)):\n                if A[i] == A[j]:\n                    union(parent, rank, i, j)\n        \n        # Check if elements in each connected component match B\n        component_map = {}\n        for i in range(N):\n            root = find(parent, i)\n            if root not in component_map:\n                component_map[root] = []\n            component_map[root].append(i)\n        \n        for component in component_map.values():\n            component_values = sorted(A[i] for i in component)\n            target_values = sorted(B[i] for i in component)\n            if component_values != target_values:\n                results.append(\"No\")\n                break\n        else:\n            results.append(\"Yes\")\n    \n    for result in results:\n        print(result)\n\nsolve()\n```"]}
{"task_id": "abc369_g", "codes": ["import sys\nfrom itertools import combinations\n\ndef dfs(graph, start, visited, distances, current, parent):\n    visited[start] = True\n    for neighbor, weight in graph[start]:\n        if not visited[neighbor]:\n            distances[neighbor] = distances[start] + weight\n            dfs(graph, neighbor, visited, distances, current, start)\n\ndef min_path_length(graph, vertices, start):\n    n = len(graph)\n    visited = [False] * (n + 1)\n    distances = [float('inf')] * (n + 1)\n    distances[start] = 0\n    dfs(graph, start, visited, distances, start, -1)\n    \n    min_length = float('inf')\n    for subset in combinations(vertices, len(vertices)):\n        current_length = 0\n        current_vertex = start\n        for vertex in subset:\n            current_length += distances[vertex]\n            current_vertex = vertex\n        current_length += distances[current_vertex]\n        min_length = min(min_length, current_length)\n    \n    return min_length\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    graph = [[] for _ in range(N + 1)]\n    for _ in range(N - 1):\n        U = int(data[index])\n        V = int(data[index + 1])\n        L = int(data[index + 2])\n        index += 3\n        graph[U].append((V, L))\n        graph[V].append((U, L))\n    \n    results = []\n    for K in range(1, N + 1):\n        vertices = list(range(1, N + 1))\n        min_score = min_path_length(graph, vertices, 1)\n        results.append(min_score)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import sys\nfrom collections import defaultdict, deque\n\ndef dfs(graph, start, dist):\n    stack = [(start, 0)]\n    visited = set()\n    while stack:\n        node, d = stack.pop()\n        if node in visited:\n            continue\n        visited.add(node)\n        dist[node] = d\n        for neighbor, weight in graph[node]:\n            stack.append((neighbor, d + weight))\n\ndef min_path_cost(n, edges):\n    graph = defaultdict(list)\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    # Step 1: Calculate distances between all pairs of vertices\n    dist = [defaultdict(int) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dfs(graph, i, dist[i])\n    \n    # Step 2: Dynamic Programming to find the minimum path cost\n    dp = [[float('inf')] * (1 << n) for _ in range(n + 1)]\n    dp[1][0] = 0\n    \n    for mask in range(1 << n):\n        for i in range(1, n + 1):\n            if mask & (1 << (i - 1)):\n                prev_mask = mask ^ (1 << (i - 1))\n                for j in range(1, n + 1):\n                    if j != i and prev_mask & (1 << (j - 1)):\n                        dp[i][mask] = min(dp[i][mask], dp[j][prev_mask] + dist[j][i])\n    \n    # Step 3: Extract the result for each K\n    result = []\n    for K in range(1, n + 1):\n        min_cost = float('inf')\n        for mask in range(1 << K):\n            if bin(mask).count('1') == K:\n                min_cost = min(min_cost, dp[1][mask])\n        result.append(min_cost)\n    \n    return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    edges = []\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        w = int(data[index + 2])\n        edges.append((u, v, w))\n        index += 3\n    \n    result = min_path_cost(n, edges)\n    for r in result:\n        print(r)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\nimport sys\nfrom itertools import combinations\n\ndef dfs(graph, start, visited, distances, current, parent):\n    visited[start] = True\n    for neighbor, weight in graph[start]:\n        if not visited[neighbor]:\n            distances[neighbor] = distances[start] + weight\n            dfs(graph, neighbor, visited, distances, current, start)\n\ndef min_path_length(graph, vertices, start):\n    n = len(graph)\n    visited = [False] * (n + 1)\n    distances = [float('inf')] * (n + 1)\n    distances[start] = 0\n    dfs(graph, start, visited, distances, start, -1)\n    \n    min_length = float('inf')\n    for subset in combinations(vertices, len(vertices)):\n        current_length = 0\n        current_vertex = start\n        for vertex in subset:\n            current_length += distances[vertex]\n            current_vertex = vertex\n        current_length += distances[current_vertex]\n        min_length = min(min_length, current_length)\n    \n    return min_length\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    graph = [[] for _ in range(N + 1)]\n    for _ in range(N - 1):\n        U = int(data[index])\n        V = int(data[index + 1])\n        L = int(data[index + 2])\n        index += 3\n        graph[U].append((V, L))\n        graph[V].append((U, L))\n    \n    results = []\n    for K in range(1, N + 1):\n        vertices = list(range(1, N + 1))\n        min_score = min_path_length(graph, vertices, 1)\n        results.append(min_score)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef dfs(graph, start, dist):\n    stack = [(start, 0)]\n    visited = set()\n    while stack:\n        node, d = stack.pop()\n        if node in visited:\n            continue\n        visited.add(node)\n        dist[node] = d\n        for neighbor, weight in graph[node]:\n            stack.append((neighbor, d + weight))\n\ndef min_path_cost(n, edges):\n    graph = defaultdict(list)\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    # Step 1: Calculate distances between all pairs of vertices\n    dist = [defaultdict(int) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dfs(graph, i, dist[i])\n    \n    # Step 2: Dynamic Programming to find the minimum path cost\n    dp = [[float('inf')] * (1 << n) for _ in range(n + 1)]\n    dp[1][0] = 0\n    \n    for mask in range(1 << n):\n        for i in range(1, n + 1):\n            if mask & (1 << (i - 1)):\n                prev_mask = mask ^ (1 << (i - 1))\n                for j in range(1, n + 1):\n                    if j != i and prev_mask & (1 << (j - 1)):\n                        dp[i][mask] = min(dp[i][mask], dp[j][prev_mask] + dist[j][i])\n    \n    # Step 3: Extract the result for each K\n    result = []\n    for K in range(1, n + 1):\n        min_cost = float('inf')\n        for mask in range(1 << K):\n            if bin(mask).count('1') == K:\n                min_cost = min(min_cost, dp[1][mask])\n        result.append(min_cost)\n    \n    return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    edges = []\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        w = int(data[index + 2])\n        edges.append((u, v, w))\n        index += 3\n    \n    result = min_path_cost(n, edges)\n    for r in result:\n        print(r)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "arc183_c", "codes": ["import sys\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef count_permutations(N, M, conditions):\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n\n    for l, r, x in conditions:\n        new_dp = [[0] * (N + 1) for _ in range(N + 1)]\n        for i in range(N + 1):\n            for j in range(N + 1):\n                if i == 0 or j == 0:\n                    continue\n                if j >= l and j <= r and j != x:\n                    new_dp[i][j] = (new_dp[i][j] + dp[i - 1][j - 1]) % MOD\n                else:\n                    new_dp[i][j] = (new_dp[i][j] + dp[i - 1][j]) % MOD\n        dp = new_dp\n\n    return sum(dp[N]) % MOD\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    conditions = [(int(data[2 + 3 * i]), int(data[3 + 3 * i]), int(data[4 + 3 * i])) for i in range(M)]\n    print(count_permutations(N, M, conditions))", "```python\ndef count_valid_permutations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    conditions = []\n    index = 2\n    for _ in range(M):\n        L = int(data[index])\n        R = int(data[index + 1])\n        X = int(data[index + 2])\n        conditions.append((L, R, X))\n        index += 3\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = dp[i - 1][j - 1]  # Place j at the end of the permutation\n            for L, R, X in conditions:\n                if L <= i <= R and X == j:\n                    dp[i][j] = (dp[i][j] - dp[R - 1][j - 1] + MOD) % MOD\n    \n    # Sum up all valid permutations\n    result = sum(dp[N]) % MOD\n    print(result)\n\ncount_valid_permutations()"], "passed": [false, false], "raw_code": ["import sys\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef count_permutations(N, M, conditions):\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n\n    for l, r, x in conditions:\n        new_dp = [[0] * (N + 1) for _ in range(N + 1)]\n        for i in range(N + 1):\n            for j in range(N + 1):\n                if i == 0 or j == 0:\n                    continue\n                if j >= l and j <= r and j != x:\n                    new_dp[i][j] = (new_dp[i][j] + dp[i - 1][j - 1]) % MOD\n                else:\n                    new_dp[i][j] = (new_dp[i][j] + dp[i - 1][j]) % MOD\n        dp = new_dp\n\n    return sum(dp[N]) % MOD\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    conditions = [(int(data[2 + 3 * i]), int(data[3 + 3 * i]), int(data[4 + 3 * i])) for i in range(M)]\n    print(count_permutations(N, M, conditions))", "```python\ndef count_valid_permutations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    conditions = []\n    index = 2\n    for _ in range(M):\n        L = int(data[index])\n        R = int(data[index + 1])\n        X = int(data[index + 2])\n        conditions.append((L, R, X))\n        index += 3\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = dp[i - 1][j - 1]  # Place j at the end of the permutation\n            for L, R, X in conditions:\n                if L <= i <= R and X == j:\n                    dp[i][j] = (dp[i][j] - dp[R - 1][j - 1] + MOD) % MOD\n    \n    # Sum up all valid permutations\n    result = sum(dp[N]) % MOD\n    print(result)\n\ncount_valid_permutations()"]}
{"task_id": "arc182_c", "codes": ["def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count\n\ndef sum_of_divisors(N, M):\n    MOD = 998244353\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    \n    for k in range(2, M + 1):\n        dp[k] = dp[k - 1] * k % MOD\n    \n    result = 0\n    for k in range(1, N + 1):\n        result = (result + dp[k] * dp[M] ** (N - k)) % MOD\n    \n    return result\n\n# Read input\nN, M = map(int, input().split())\n\n# Print the result\nprint(sum_of_divisors(N, M))", "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count\n\ndef good_sequences(N, M):\n    MOD = 998244353\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    \n    for _ in range(N):\n        new_dp = [0] * (M + 1)\n        for i in range(1, M + 1):\n            for j in range(1, M + 1):\n                new_dp[j] = (new_dp[j] + dp[i] * count_divisors(i * j)) % MOD\n        dp = new_dp\n    \n    return sum(dp) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\n\n# Output the result\nprint(good_sequences(N, M))"], "passed": [false, false], "raw_code": ["```python\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count\n\ndef sum_of_divisors(N, M):\n    MOD = 998244353\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    \n    for k in range(2, M + 1):\n        dp[k] = dp[k - 1] * k % MOD\n    \n    result = 0\n    for k in range(1, N + 1):\n        result = (result + dp[k] * dp[M] ** (N - k)) % MOD\n    \n    return result\n\n# Read input\nN, M = map(int, input().split())\n\n# Print the result\nprint(sum_of_divisors(N, M))\n```", "```python\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count\n\ndef good_sequences(N, M):\n    MOD = 998244353\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    \n    for _ in range(N):\n        new_dp = [0] * (M + 1)\n        for i in range(1, M + 1):\n            for j in range(1, M + 1):\n                new_dp[j] = (new_dp[j] + dp[i] * count_divisors(i * j)) % MOD\n        dp = new_dp\n    \n    return sum(dp) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\n\n# Output the result\nprint(good_sequences(N, M))\n```"]}
{"task_id": "3548", "codes": ["def countGoodIntegers(n, k):\n    from collections import Counter\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def count_combinations(digits, target_sum, k):\n        dp = [[0] * (target_sum + 1) for _ in range(len(digits) + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, len(digits) + 1):\n            for j in range(target_sum + 1):\n                dp[i][j] = dp[i - 1][j]\n                if j >= digits[i - 1]:\n                    dp[i][j] += dp[i - 1][j - digits[i - 1]]\n        \n        return dp[len(digits)][target_sum]\n    \n    def count_good_integers(n, k):\n        if n == 1:\n            return 2 if k % 2 == 0 else 1\n        \n        digits = [i for i in range(1, 10)]\n        target_sum = 0\n        \n        for i in range(1, n // 2 + 1):\n            target_sum += i * (k // i)\n        \n        count = 0\n        for comb in itertools.combinations_with_replacement(digits, n):\n            if sum(comb) % k == 0:\n                comb_str = ''.join(map(str, comb))\n                if is_palindrome(comb_str):\n                    count += 1\n        \n        return count\n    \n    return count_good_integers(n, k)", "def count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def count_combinations(digits, target_sum, k):\n        dp = [[0] * (target_sum + 1) for _ in range(len(digits) + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, len(digits) + 1):\n            for j in range(target_sum + 1):\n                dp[i][j] = dp[i - 1][j]\n                if j >= digits[i - 1]:\n                    dp[i][j] += dp[i - 1][j - digits[i - 1]]\n        \n        return dp[len(digits)][target_sum] % k\n    \n    def count_valid_numbers(n, k):\n        if n == 1:\n            return len([i for i in range(1, 10) if i % k == 0])\n        \n        digits = [i for i in range(1, 10)]\n        target_sum = n * (n + 1) // 2\n        \n        count = 0\n        for i in range(1, 10):\n            if i % k == 0:\n                remaining_sum = target_sum - i\n                if remaining_sum % 2 == 0:\n                    count += count_combinations(digits, remaining_sum // 2, k)\n        \n        return count\n    \n    return count_valid_numbers(n, k)"], "passed": [false, false], "raw_code": ["```python\ndef countGoodIntegers(n, k):\n    from collections import Counter\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def count_combinations(digits, target_sum, k):\n        dp = [[0] * (target_sum + 1) for _ in range(len(digits) + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, len(digits) + 1):\n            for j in range(target_sum + 1):\n                dp[i][j] = dp[i - 1][j]\n                if j >= digits[i - 1]:\n                    dp[i][j] += dp[i - 1][j - digits[i - 1]]\n        \n        return dp[len(digits)][target_sum]\n    \n    def count_good_integers(n, k):\n        if n == 1:\n            return 2 if k % 2 == 0 else 1\n        \n        digits = [i for i in range(1, 10)]\n        target_sum = 0\n        \n        for i in range(1, n // 2 + 1):\n            target_sum += i * (k // i)\n        \n        count = 0\n        for comb in itertools.combinations_with_replacement(digits, n):\n            if sum(comb) % k == 0:\n                comb_str = ''.join(map(str, comb))\n                if is_palindrome(comb_str):\n                    count += 1\n        \n        return count\n    \n    return count_good_integers(n, k)\n```", "```python\ndef count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def count_combinations(digits, target_sum, k):\n        dp = [[0] * (target_sum + 1) for _ in range(len(digits) + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, len(digits) + 1):\n            for j in range(target_sum + 1):\n                dp[i][j] = dp[i - 1][j]\n                if j >= digits[i - 1]:\n                    dp[i][j] += dp[i - 1][j - digits[i - 1]]\n        \n        return dp[len(digits)][target_sum] % k\n    \n    def count_valid_numbers(n, k):\n        if n == 1:\n            return len([i for i in range(1, 10) if i % k == 0])\n        \n        digits = [i for i in range(1, 10)]\n        target_sum = n * (n + 1) // 2\n        \n        count = 0\n        for i in range(1, 10):\n            if i % k == 0:\n                remaining_sum = target_sum - i\n                if remaining_sum % 2 == 0:\n                    count += count_combinations(digits, remaining_sum // 2, k)\n        \n        return count\n    \n    return count_valid_numbers(n, k)\n```"]}
{"task_id": "3551", "codes": ["class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.max_xor = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node.children:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n            node.max_xor = max(node.max_xor, num ^ (node.children[1-bit].max_xor if 1-bit in node.children else 0))\n    \n    def search_max_xor(self, num):\n        node = self.root\n        xor_val = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if 1-bit in node.children:\n                xor_val |= (1 << i)\n                node = node.children[1-bit]\n            elif bit in node.children:\n                node = node.children[bit]\n            else:\n                break\n        return xor_val\n\ndef maximizeXor(nums, queries):\n    n, q = len(nums), len(queries)\n    result = [0] * q\n    trie = Trie()\n    query_indices = sorted(range(q), key=lambda x: queries[x][1])\n    j = 0\n    \n    for i in query_indices:\n        l, r = queries[i]\n        while j <= r:\n            trie.insert(nums[j])\n            j += 1\n        while j > l + 1:\n            trie.insert(nums[j-1])\n            j -= 1\n        result[i] = trie.search_max_xor(nums[l])\n    \n    return result", "def max_xor_subarray(nums, queries):\n    n = len(nums)\n    # Step 1: Compute cumulative XOR\n    cumulative_xor = [0] * (n + 1)\n    for i in range(n):\n        cumulative_xor[i + 1] = cumulative_xor[i] ^ nums[i]\n    \n    # Step 2: Answer each query\n    result = []\n    for l, r in queries:\n        xor_score = cumulative_xor[r] ^ cumulative_xor[l]\n        result.append(xor_score)\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.max_xor = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node.children:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n            node.max_xor = max(node.max_xor, num ^ (node.children[1-bit].max_xor if 1-bit in node.children else 0))\n    \n    def search_max_xor(self, num):\n        node = self.root\n        xor_val = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if 1-bit in node.children:\n                xor_val |= (1 << i)\n                node = node.children[1-bit]\n            elif bit in node.children:\n                node = node.children[bit]\n            else:\n                break\n        return xor_val\n\ndef maximizeXor(nums, queries):\n    n, q = len(nums), len(queries)\n    result = [0] * q\n    trie = Trie()\n    query_indices = sorted(range(q), key=lambda x: queries[x][1])\n    j = 0\n    \n    for i in query_indices:\n        l, r = queries[i]\n        while j <= r:\n            trie.insert(nums[j])\n            j += 1\n        while j > l + 1:\n            trie.insert(nums[j-1])\n            j -= 1\n        result[i] = trie.search_max_xor(nums[l])\n    \n    return result\n```", "```python\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    # Step 1: Compute cumulative XOR\n    cumulative_xor = [0] * (n + 1)\n    for i in range(n):\n        cumulative_xor[i + 1] = cumulative_xor[i] ^ nums[i]\n    \n    # Step 2: Answer each query\n    result = []\n    for l, r in queries:\n        xor_score = cumulative_xor[r] ^ cumulative_xor[l]\n        result.append(xor_score)\n    \n    return result\n```"]}
{"task_id": "3560", "codes": ["def min_moves(kx, ky, px, py):\n    directions = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    queue = deque([(kx, ky, 0)])\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.popleft()\n        if cx == px and cy == py:\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    return float('inf')\n\n@lru_cache(None)\ndef max_moves(kx, ky, positions):\n    if not positions:\n        return 0\n    \n    max_moves = 0\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves(kx, ky, px, py)\n        new_positions = tuple(pos for j, pos in enumerate(positions) if j != i)\n        max_moves = max(max_moves, moves + max_moves(px,", "def min_moves_to_capture(kx, ky, px, py):\n    return abs(px - kx) + abs(py - ky)\n\ndef max_minimax(kx, ky, positions, dp, memo):\n    if not positions:\n        return 0\n    if (kx, ky, tuple(sorted(positions))) in memo:\n        return memo[(kx, ky, tuple(sorted(positions)))]\n    min_moves = float('inf')\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        new_positions = positions[:i] + positions[i+1:]\n        min_moves = min(min_moves, max(moves + max_minimax(px, py, new_positions, dp, memo), dp[(px, py, tuple(sorted(new_positions)))]))\n    memo[(kx, ky, tuple(sorted(positions)))] = min_moves\n    return min_moves\n\ndef knight_pawn_game(kx, ky, positions):\n    n = len(positions)\n    dp = {(px, py, ()) for px, py in positions}\n    for i in range(n-1, -1, -1):\n        for j in range(i-1, -1, -1):\n            dp[(positions[i][0], positions[i][1], tuple(sorted([positions[j]])))) = min_moves_to_capture(positions[i][0], positions[i][1], positions[j][0], positions[j][1])\n    memo = {}\n    return max_minimax(kx, ky, positions, dp, memo)"], "passed": [false, false], "raw_code": ["def min_moves(kx, ky, px, py):\n    directions = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    queue = deque([(kx, ky, 0)])\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.popleft()\n        if cx == px and cy == py:\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    return float('inf')\n\n@lru_cache(None)\ndef max_moves(kx, ky, positions):\n    if not positions:\n        return 0\n    \n    max_moves = 0\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves(kx, ky, px, py)\n        new_positions = tuple(pos for j, pos in enumerate(positions) if j != i)\n        max_moves = max(max_moves, moves + max_moves(px,", "def min_moves_to_capture(kx, ky, px, py):\n    return abs(px - kx) + abs(py - ky)\n\ndef max_minimax(kx, ky, positions, dp, memo):\n    if not positions:\n        return 0\n    if (kx, ky, tuple(sorted(positions))) in memo:\n        return memo[(kx, ky, tuple(sorted(positions)))]\n    min_moves = float('inf')\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        new_positions = positions[:i] + positions[i+1:]\n        min_moves = min(min_moves, max(moves + max_minimax(px, py, new_positions, dp, memo), dp[(px, py, tuple(sorted(new_positions)))]))\n    memo[(kx, ky, tuple(sorted(positions)))] = min_moves\n    return min_moves\n\ndef knight_pawn_game(kx, ky, positions):\n    n = len(positions)\n    dp = {(px, py, ()) for px, py in positions}\n    for i in range(n-1, -1, -1):\n        for j in range(i-1, -1, -1):\n            dp[(positions[i][0], positions[i][1], tuple(sorted([positions[j]])))) = min_moves_to_capture(positions[i][0], positions[i][1], positions[j][0], positions[j][1])\n    memo = {}\n    return max_minimax(kx, ky, positions, dp, memo)"]}
{"task_id": "3575", "codes": ["def max_value_of_subsequence(nums, k):\n    n = len(nums)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j > i:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] | nums[i-1])\n    \n    return dp[n][2*k]", "def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    prefix_or = [0] * (n + 1)\n    \n    # Compute prefix OR array\n    for i in range(n):\n        prefix_or[i + 1] = prefix_or[i] | nums[i]\n    \n    max_value = 0\n    \n    # Iterate through all possible pairs of indices\n    for i in range(k):\n        j = i + k\n        left_part = prefix_or[j] ^ prefix_or[i]\n        right_part = prefix_or[n] ^ prefix_or[j]\n        max_value = max(max_value, left_part ^ right_part)\n    \n    return max_value"], "passed": [false, false], "raw_code": ["```python\ndef max_value_of_subsequence(nums, k):\n    n = len(nums)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j > i:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] | nums[i-1])\n    \n    return dp[n][2*k]\n```", "```python\ndef maxSubsequenceValue(nums, k):\n    n = len(nums)\n    prefix_or = [0] * (n + 1)\n    \n    # Compute prefix OR array\n    for i in range(n):\n        prefix_or[i + 1] = prefix_or[i] | nums[i]\n    \n    max_value = 0\n    \n    # Iterate through all possible pairs of indices\n    for i in range(k):\n        j = i + k\n        left_part = prefix_or[j] ^ prefix_or[i]\n        right_part = prefix_or[n] ^ prefix_or[j]\n        max_value = max(max_value, left_part ^ right_part)\n    \n    return max_value\n```"]}
{"task_id": "abc369_e", "codes": ["import sys\nfrom collections import defaultdict, deque\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    # Create adjacency list for the graph\n    adj_list = defaultdict(list)\n    for u, v, t in bridges:\n        adj_list[u].append((v, t))\n        adj_list[v].append((u, t))\n\n    # Initialize DP table\n    dp = [[float('inf')] * (1 << M) for _ in range(N + 1)]\n    dp[1][0] = 0\n\n    # Perform BFS to fill the DP table\n    queue = deque([(1, 0)])\n    while queue:\n        node, mask = queue.popleft()\n        for neighbor, time in adj_list[node]:\n            new_mask = mask | (1 << (neighbor - 1))\n            if dp[neighbor][new_mask] > dp[node][mask] + time:\n                dp[neighbor][new_mask] = dp[node][mask] + time\n                queue.append((neighbor, new_mask))\n\n    # Answer each query\n    results = []\n    for K, query in zip(queries, queries):\n        result = float('inf')\n        for mask in range(1 << M):\n            if all((1 << (b - 1)) & mask != 0 for b in query):\n                result = min(result, dp[N][mask])\n        results.append(result)\n\n    return results\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input data\nindex = 0\nN = int(data[index])\nindex += 1\nM = int(data[index])\nindex += 1\nbridges = []\nfor _ in range(M):\n    u = int(data[index])\n    index += 1\n    v = int(data[index])\n    index += 1\nt = int(data[index])\nindex += 1\nbridges.append((u, v, t))\nQ = int(data[index])\nindex += 1\nqueries = []\nfor _ in range(Q):\n    K = int(data[index])\n    index += 1\n    query = [int(data[index]) for _ in range(K)]\n    index += K\n    queries.append(query)\n\n# Calculate and print results\nresults = min_time_to_travel(N, M, bridges, Q, queries)\nfor result in results:\n    print(result)\n", "import sys\nfrom collections import defaultdict, deque\n\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nt = 0\nN = int(data[t])\nt += 1\nM = int(data[t])\nt += 1\nbridges = []\nfor _ in range(M):\n    u = int(data[t]) - 1\nt += 1\nv = int(data[t]) - 1\nt += 1\ntime = int(data[t])\nt += 1\nbridges.append((u, v, time))\n\nQ = int(data[t])\nt += 1\nqueries = []\nfor _ in range(Q):\n    K = int(data[t])\nt += 1\nquery = list(map(int, data[t:t+K]))\nt += K\nqueries.append(query)\n\n# Build adjacency list\nadj_list = defaultdict(list)\nfor u, v, time in bridges:\n    adj_list[u].append((v, time))\n    adj_list[v].append((u, time))\n\n# Function to solve a single query\ndef solve_query(bridge_indices):\n    # Create a bitmask representing the required bridges\n    mask = 0\n    for index in bridge_indices:\n        mask |= (1 << (index - 1))\n\n    # Initialize DP table\n    dp = [[float('inf')] * N for _ in range(1 << len(bridge_indices))]\n    dp[0][0] = 0\n\n    # Perform BFS to fill the DP table\n    queue = deque([(0, 0)])\n    while queue:\n        current_mask, current_node = queue.popleft()\n        for next_node, time in adj_list[current_node]:\n            new_mask = current_mask\n            for index, (u, v, _) in enumerate(bridges):\n                if (current_node == u and next_node == v) or (current_node == v and next_node == u):\n                    new_mask |= (1 << index)\n            if dp[new_mask][next_node] > dp[current_mask][current_node] + time:\n                dp[new_mask][next_node] = dp[current_mask][current_node] + time\n                queue.append((new_mask, next_node))\n\n    # Find the minimum time to reach island N using the required bridges\n    min_time = float('inf')\n    for mask in range(1 << len(bridge_indices)):\n        if mask & ((1 << len(bridge_indices)) - 1) == (1 << len(bridge_indices)) - 1:\n            min_time = min(min_time, dp[mask][N-1])\n\n    return min_time\n\n# Solve each query and print the results\nresults = [solve_query(query) for query in queries]\nfor result in results:\n    print(result)"], "passed": [false, false], "raw_code": ["import sys\nfrom collections import defaultdict, deque\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    # Create adjacency list for the graph\n    adj_list = defaultdict(list)\n    for u, v, t in bridges:\n        adj_list[u].append((v, t))\n        adj_list[v].append((u, t))\n\n    # Initialize DP table\n    dp = [[float('inf')] * (1 << M) for _ in range(N + 1)]\n    dp[1][0] = 0\n\n    # Perform BFS to fill the DP table\n    queue = deque([(1, 0)])\n    while queue:\n        node, mask = queue.popleft()\n        for neighbor, time in adj_list[node]:\n            new_mask = mask | (1 << (neighbor - 1))\n            if dp[neighbor][new_mask] > dp[node][mask] + time:\n                dp[neighbor][new_mask] = dp[node][mask] + time\n                queue.append((neighbor, new_mask))\n\n    # Answer each query\n    results = []\n    for K, query in zip(queries, queries):\n        result = float('inf')\n        for mask in range(1 << M):\n            if all((1 << (b - 1)) & mask != 0 for b in query):\n                result = min(result, dp[N][mask])\n        results.append(result)\n\n    return results\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input data\nindex = 0\nN = int(data[index])\nindex += 1\nM = int(data[index])\nindex += 1\nbridges = []\nfor _ in range(M):\n    u = int(data[index])\n    index += 1\n    v = int(data[index])\n    index += 1\nt = int(data[index])\nindex += 1\nbridges.append((u, v, t))\nQ = int(data[index])\nindex += 1\nqueries = []\nfor _ in range(Q):\n    K = int(data[index])\n    index += 1\n    query = [int(data[index]) for _ in range(K)]\n    index += K\n    queries.append(query)\n\n# Calculate and print results\nresults = min_time_to_travel(N, M, bridges, Q, queries)\nfor result in results:\n    print(result)\n", "import sys\nfrom collections import defaultdict, deque\n\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nt = 0\nN = int(data[t])\nt += 1\nM = int(data[t])\nt += 1\nbridges = []\nfor _ in range(M):\n    u = int(data[t]) - 1\nt += 1\nv = int(data[t]) - 1\nt += 1\ntime = int(data[t])\nt += 1\nbridges.append((u, v, time))\n\nQ = int(data[t])\nt += 1\nqueries = []\nfor _ in range(Q):\n    K = int(data[t])\nt += 1\nquery = list(map(int, data[t:t+K]))\nt += K\nqueries.append(query)\n\n# Build adjacency list\nadj_list = defaultdict(list)\nfor u, v, time in bridges:\n    adj_list[u].append((v, time))\n    adj_list[v].append((u, time))\n\n# Function to solve a single query\ndef solve_query(bridge_indices):\n    # Create a bitmask representing the required bridges\n    mask = 0\n    for index in bridge_indices:\n        mask |= (1 << (index - 1))\n\n    # Initialize DP table\n    dp = [[float('inf')] * N for _ in range(1 << len(bridge_indices))]\n    dp[0][0] = 0\n\n    # Perform BFS to fill the DP table\n    queue = deque([(0, 0)])\n    while queue:\n        current_mask, current_node = queue.popleft()\n        for next_node, time in adj_list[current_node]:\n            new_mask = current_mask\n            for index, (u, v, _) in enumerate(bridges):\n                if (current_node == u and next_node == v) or (current_node == v and next_node == u):\n                    new_mask |= (1 << index)\n            if dp[new_mask][next_node] > dp[current_mask][current_node] + time:\n                dp[new_mask][next_node] = dp[current_mask][current_node] + time\n                queue.append((new_mask, next_node))\n\n    # Find the minimum time to reach island N using the required bridges\n    min_time = float('inf')\n    for mask in range(1 << len(bridge_indices)):\n        if mask & ((1 << len(bridge_indices)) - 1) == (1 << len(bridge_indices)) - 1:\n            min_time = min(min_time, dp[mask][N-1])\n\n    return min_time\n\n# Solve each query and print the results\nresults = [solve_query(query) for query in queries]\nfor result in results:\n    print(result)"]}
{"task_id": "abc367_g", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (1 << 20) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1 << 20):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] += dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] %= MOD\n    \n    total_score = 0\n    for i in range(1, N + 1):\n        if i % M == 0:\n            for j in range(1 << 20):\n                total_score += pow(dp[i][j], K, MOD)\n                total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * 2**20 for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Iterate over each element in the sequence\n    for i in range(1, N + 1):\n        for j in range(2**20):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] += dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] %= MOD\n    \n    # Calculate the total score\n    total_score = 0\n    for i in range(1, N + 1):\n        if i % M == 0:\n            for j in range(2**20):\n                total_score += pow(dp[i][j], K, MOD)\n                total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (1 << 20) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1 << 20):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] += dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] %= MOD\n    \n    total_score = 0\n    for i in range(1, N + 1):\n        if i % M == 0:\n            for j in range(1 << 20):\n                total_score += pow(dp[i][j], K, MOD)\n                total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * 2**20 for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Iterate over each element in the sequence\n    for i in range(1, N + 1):\n        for j in range(2**20):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] += dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] %= MOD\n    \n    # Calculate the total score\n    total_score = 0\n    for i in range(1, N + 1):\n        if i % M == 0:\n            for j in range(2**20):\n                total_score += pow(dp[i][j], K, MOD)\n                total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc368_d", "codes": ["import sys\nfrom collections import defaultdict, deque\n\ndef min_vertices_to_include_all_k(N, K, edges, V):\n    # Build the adjacency list for the tree\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # Function to perform DFS and return the distance from root to all other nodes\n    def dfs(root, parent):\n        dist[root] = 0\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            for neighbor in adj_list[node]:\n                if neighbor != parent:\n                    dist[neighbor] = dist[node] + 1\n                    queue.append(neighbor)\n\n    # Calculate the maximum distance from any vertex to all other vertices\n    max_dist = 0\n    for i in range(1, N+1):\n        dist = [-1] * (N+1)\n        dfs(i, -1)\n        max_dist = max(max_dist, max(dist))\n\n    # Return the maximum distance as the result\n    return max_dist\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nedges = []\nfor i in range(N-1):\n    u = int(data[2+2*i])\n    v = int(data[3+2*i])\n    edges.append((u, v))\nV = [int(data[2+N-1+i]) for i in range(K)]\n\n# Call the function and print the result\nprint(min_vertices_to_include_all_k(N, K, edges, V))", "import sys\nfrom collections import defaultdict, deque\n\ndef min_vertices_in_tree(N, K, edges, vertices):\n    # Build the adjacency list for the tree\n    adj = defaultdict(list)\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # Function to perform DFS and calculate distances from a given node\n    def dfs(node, parent, dists):\n        dists[node] = 0\n        queue = deque([node])\n        while queue:\n            current = queue.popleft()\n            for neighbor in adj[current]:\n                if neighbor != parent:\n                    dists[neighbor] = dists[current] + 1\n                    queue.append(neighbor)\n\n    # Calculate distances from each vertex to all other vertices\n    max_dist = 0\n    for start in range(1, N+1):\n        dists = [float('inf')] * (N+1)\n        dfs(start, -1, dists)\n        max_dist = max(max_dist, max(dists))\n\n    return max_dist\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nedges = []\nfor i in range(N-1):\n    u = int(data[2 + 2*i])\n    v = int(data[3 + 2*i])\n    edges.append((u, v))\nvertices = list(map(int, data[2*N+2:]))\n\n# Calculate the result\nresult = min_vertices_in_tree(N, K, edges, vertices)\n\n# Print the result\nprint(result)\n"], "passed": [false, false], "raw_code": ["import sys\nfrom collections import defaultdict, deque\n\ndef min_vertices_to_include_all_k(N, K, edges, V):\n    # Build the adjacency list for the tree\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # Function to perform DFS and return the distance from root to all other nodes\n    def dfs(root, parent):\n        dist[root] = 0\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            for neighbor in adj_list[node]:\n                if neighbor != parent:\n                    dist[neighbor] = dist[node] + 1\n                    queue.append(neighbor)\n\n    # Calculate the maximum distance from any vertex to all other vertices\n    max_dist = 0\n    for i in range(1, N+1):\n        dist = [-1] * (N+1)\n        dfs(i, -1)\n        max_dist = max(max_dist, max(dist))\n\n    # Return the maximum distance as the result\n    return max_dist\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nedges = []\nfor i in range(N-1):\n    u = int(data[2+2*i])\n    v = int(data[3+2*i])\n    edges.append((u, v))\nV = [int(data[2+N-1+i]) for i in range(K)]\n\n# Call the function and print the result\nprint(min_vertices_to_include_all_k(N, K, edges, V))", "import sys\nfrom collections import defaultdict, deque\n\ndef min_vertices_in_tree(N, K, edges, vertices):\n    # Build the adjacency list for the tree\n    adj = defaultdict(list)\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # Function to perform DFS and calculate distances from a given node\n    def dfs(node, parent, dists):\n        dists[node] = 0\n        queue = deque([node])\n        while queue:\n            current = queue.popleft()\n            for neighbor in adj[current]:\n                if neighbor != parent:\n                    dists[neighbor] = dists[current] + 1\n                    queue.append(neighbor)\n\n    # Calculate distances from each vertex to all other vertices\n    max_dist = 0\n    for start in range(1, N+1):\n        dists = [float('inf')] * (N+1)\n        dfs(start, -1, dists)\n        max_dist = max(max_dist, max(dists))\n\n    return max_dist\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nedges = []\nfor i in range(N-1):\n    u = int(data[2 + 2*i])\n    v = int(data[3 + 2*i])\n    edges.append((u, v))\nvertices = list(map(int, data[2*N+2:]))\n\n# Calculate the result\nresult = min_vertices_in_tree(N, K, edges, vertices)\n\n# Print the result\nprint(result)\n"]}
{"task_id": "arc182_a", "codes": ["def count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (max(V) + 1) for _ in range(N + 1)]\n    \n    # Base case: There's one way to have an empty sequence\n    dp[0][0] = 1\n    \n    for i in range(Q):\n        p, v = P[i], V[i]\n        \n        # Create a new DP table for the current operation\n        new_dp = [0] * (max(V) + 1)\n        \n        for j in range(1, N + 1):\n            if j >= p:\n                # Case 1: Replace S_1, S_2, ..., S_p with V_i\n                if all(dp[j - k][v] == 0 for k in range(p)):\n                    new_dp[v] += dp[j - p][v]\n                    new_dp[v] %= MOD\n                \n                # Case 2: Replace S_p, S_(p+1), ..., S_n with V_i\n                if all(dp[j - k][v] == 0 for k in range(j - p + 1, N + 1)):\n                    new_dp[v] += dp[j - p][v]\n                    new_dp[v] %= MOD\n        \n        dp = new_dp\n    \n    # Sum up the valid sequences at the end\n    result = sum(dp[N]) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nP = []\nV = []\n\nfor i in range(Q):\n    p = int(data[2 + 2 * i])\n    v = int(data[3 + 2 * i])\n    P.append(p)\n    V.append(v)\n\n# Print the result\nprint(count_valid_sequences(N, Q, P, V))", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    \n    dp = [[0] * (10**9 + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    MOD = 998244353\n    \n    index = 2\n    for q in range(Q):\n        P = int(data[index])\n        V = int(data[index + 1])\n        index += 2\n        \n        new_dp = [[0] * (10**9 + 1) for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            for j in range(10**9 + 1):\n                if dp[i][j] == 0:\n                    continue\n                \n                # Option 1: Replace S_1, S_2, ..., S_P with V\n                if j <= V:\n                    new_dp[P][max(j, V)] += dp[i][j]\n                    new_dp[P][max(j, V)] %= MOD\n                \n                # Option 2: Replace S_P, S_P+1, ..., S_N with V\n                if j <= V:\n                    new_dp[N][max(j, V)] += dp[i][j]\n                    new_dp[N][max(j, V)] %= MOD\n        \n        dp = new_dp\n    \n    result = sum(dp[N]) % MOD\n    print(result)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (max(V) + 1) for _ in range(N + 1)]\n    \n    # Base case: There's one way to have an empty sequence\n    dp[0][0] = 1\n    \n    for i in range(Q):\n        p, v = P[i], V[i]\n        \n        # Create a new DP table for the current operation\n        new_dp = [0] * (max(V) + 1)\n        \n        for j in range(1, N + 1):\n            if j >= p:\n                # Case 1: Replace S_1, S_2, ..., S_p with V_i\n                if all(dp[j - k][v] == 0 for k in range(p)):\n                    new_dp[v] += dp[j - p][v]\n                    new_dp[v] %= MOD\n                \n                # Case 2: Replace S_p, S_(p+1), ..., S_n with V_i\n                if all(dp[j - k][v] == 0 for k in range(j - p + 1, N + 1)):\n                    new_dp[v] += dp[j - p][v]\n                    new_dp[v] %= MOD\n        \n        dp = new_dp\n    \n    # Sum up the valid sequences at the end\n    result = sum(dp[N]) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nP = []\nV = []\n\nfor i in range(Q):\n    p = int(data[2 + 2 * i])\n    v = int(data[3 + 2 * i])\n    P.append(p)\n    V.append(v)\n\n# Print the result\nprint(count_valid_sequences(N, Q, P, V))\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    \n    dp = [[0] * (10**9 + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    MOD = 998244353\n    \n    index = 2\n    for q in range(Q):\n        P = int(data[index])\n        V = int(data[index + 1])\n        index += 2\n        \n        new_dp = [[0] * (10**9 + 1) for _ in range(N + 1)]\n        \n        for i in range(N + 1):\n            for j in range(10**9 + 1):\n                if dp[i][j] == 0:\n                    continue\n                \n                # Option 1: Replace S_1, S_2, ..., S_P with V\n                if j <= V:\n                    new_dp[P][max(j, V)] += dp[i][j]\n                    new_dp[P][max(j, V)] %= MOD\n                \n                # Option 2: Replace S_P, S_P+1, ..., S_N with V\n                if j <= V:\n                    new_dp[N][max(j, V)] += dp[i][j]\n                    new_dp[N][max(j, V)] %= MOD\n        \n        dp = new_dp\n    \n    result = sum(dp[N]) % MOD\n    print(result)\n\nmain()\n```"]}
{"task_id": "3527", "codes": ["def alternatingGroups(colors, queries):\n    n = len(colors)\n    groups = []\n    group_count = {}\n    \n    def add_group(start, end):\n        if start < end:\n            groups.append((start, end))\n            group_count[(start, end)] = 1\n    \n    # Initial preprocessing\n    for i in range(n):\n        if (i == 0 and colors[i] != colors[n-1]) or (i > 0 and colors[i] != colors[i-1]):\n            j = i + 1\n            while j < n and colors[j] != colors[j-1]:\n                j += 1\n            add_group(i, j)\n            i = j - 1\n    \n    def count_alternating_groups(size):\n        count = 0\n        for start, end in groups:\n            if end - start == size or (end == n and start == 0 and size == n):\n                count += 1\n        return count\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            result.append(count_alternating_groups(query[1]))\n        elif query[0] == 2:\n            prev_color = colors[query[1]]\n            colors[query[1]] = query[2]\n            \n            # Remove old group if it exists\n            for start, end in groups[:]:\n                if start <= query[1] <= end:\n                    groups.remove((start, end))\n                    del group_count[(start, end)]\n            \n            # Add new groups if they exist\n            if query[1] == 0 and colors[0] != colors[-1]:\n                j = 1\n                while j < n and colors[j] != colors[j-1]:\n                    j += 1\n                add_group(0, j)\n                if j == n:\n                    add_group(0, 0)  # Full circle group\n            \n            if query[1] > 0 and colors[query[1]] != colors[query[1]-1]:\n                j = query[1] + 1\n                while j < n and colors[j] != colors[j-1]:\n                    j += 1\n                add_group(query[1], j)\n                if j == n:\n                    add_group(query[1], 0)  # Full circle group\n    \n    return result", "from collections import deque\n\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    colors += colors[:2]  # Extend colors to handle circular nature\n    dq = deque()\n    \n    def add_to_deque(i):\n        if i > 0 and colors[i] != colors[i - 1]:\n            dq.append(i)\n    \n    def remove_from_deque(i):\n        if dq and dq[0] == i:\n            dq.popleft()\n    \n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            if i + size < 2 * n and colors[i:i+size] == [colors[i]] * size:\n                count += 1\n        return count\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            result.append(count_alternating_groups(query[1]))\n        elif query[0] == 2:\n            old_color = colors[query[1]]\n            new_color = query[2]\n            colors[query[1]] = new_color\n            remove_from_deque(query[1])\n            remove_from_deque((query[1] + 1) % n)\n            if old_color != new_color:\n                add_to_deque(query[1])\n                add_to_deque((query[1] + 1) % n)\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    groups = []\n    group_count = {}\n    \n    def add_group(start, end):\n        if start < end:\n            groups.append((start, end))\n            group_count[(start, end)] = 1\n    \n    # Initial preprocessing\n    for i in range(n):\n        if (i == 0 and colors[i] != colors[n-1]) or (i > 0 and colors[i] != colors[i-1]):\n            j = i + 1\n            while j < n and colors[j] != colors[j-1]:\n                j += 1\n            add_group(i, j)\n            i = j - 1\n    \n    def count_alternating_groups(size):\n        count = 0\n        for start, end in groups:\n            if end - start == size or (end == n and start == 0 and size == n):\n                count += 1\n        return count\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            result.append(count_alternating_groups(query[1]))\n        elif query[0] == 2:\n            prev_color = colors[query[1]]\n            colors[query[1]] = query[2]\n            \n            # Remove old group if it exists\n            for start, end in groups[:]:\n                if start <= query[1] <= end:\n                    groups.remove((start, end))\n                    del group_count[(start, end)]\n            \n            # Add new groups if they exist\n            if query[1] == 0 and colors[0] != colors[-1]:\n                j = 1\n                while j < n and colors[j] != colors[j-1]:\n                    j += 1\n                add_group(0, j)\n                if j == n:\n                    add_group(0, 0)  # Full circle group\n            \n            if query[1] > 0 and colors[query[1]] != colors[query[1]-1]:\n                j = query[1] + 1\n                while j < n and colors[j] != colors[j-1]:\n                    j += 1\n                add_group(query[1], j)\n                if j == n:\n                    add_group(query[1], 0)  # Full circle group\n    \n    return result\n```", "```python\nfrom collections import deque\n\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    colors += colors[:2]  # Extend colors to handle circular nature\n    dq = deque()\n    \n    def add_to_deque(i):\n        if i > 0 and colors[i] != colors[i - 1]:\n            dq.append(i)\n    \n    def remove_from_deque(i):\n        if dq and dq[0] == i:\n            dq.popleft()\n    \n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            if i + size < 2 * n and colors[i:i+size] == [colors[i]] * size:\n                count += 1\n        return count\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            result.append(count_alternating_groups(query[1]))\n        elif query[0] == 2:\n            old_color = colors[query[1]]\n            new_color = query[2]\n            colors[query[1]] = new_color\n            remove_from_deque(query[1])\n            remove_from_deque((query[1] + 1) % n)\n            if old_color != new_color:\n                add_to_deque(query[1])\n                add_to_deque((query[1] + 1) % n)\n    \n    return result\n```"]}
{"task_id": "abc371_f", "codes": ["def min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        index += 2\n        tasks.append((T, G))\n    \n    total_moves = 0\n    for T, G in tasks:\n        total_moves += abs(X[T] - G)\n    \n    print(total_moves)\n\nmin_movements()", "```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        index += 2\n        tasks.append((T, G))\n    \n    # Sort the initial positions of the people\n    X.sort()\n    \n    def binary_search(T, G):\n        left, right = 0, N - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if X[mid] == G:\n                return 0\n            elif X[mid] < G:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        # Calculate the minimum movements required\n        if left < N:\n            return abs(X[left] - G)\n        if right >= 0:\n            return abs(X[right] - G)\n        \n        # If both sides are out of bounds, calculate the distance to the nearest boundary\n        return min(abs(G), abs(X[-1] - G), abs(X[0] - G))\n    \n    total_moves = 0\n    for T, G in tasks:\n        total_moves += binary_search(T, G)\n    \n    print(total_moves)\n\nmin_movements()"], "passed": [false, false], "raw_code": ["```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        index += 2\n        tasks.append((T, G))\n    \n    total_moves = 0\n    for T, G in tasks:\n        total_moves += abs(X[T] - G)\n    \n    print(total_moves)\n\nmin_movements()\n```", "```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        index += 2\n        tasks.append((T, G))\n    \n    # Sort the initial positions of the people\n    X.sort()\n    \n    def binary_search(T, G):\n        left, right = 0, N - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if X[mid] == G:\n                return 0\n            elif X[mid] < G:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        # Calculate the minimum movements required\n        if left < N:\n            return abs(X[left] - G)\n        if right >= 0:\n            return abs(X[right] - G)\n        \n        # If both sides are out of bounds, calculate the distance to the nearest boundary\n        return min(abs(G), abs(X[-1] - G), abs(X[0] - G))\n    \n    total_moves = 0\n    for T, G in tasks:\n        total_moves += binary_search(T, G)\n    \n    print(total_moves)\n\nmin_movements()"]}
{"task_id": "abc372_e", "codes": ["import sys\nfrom collections import defaultdict\nimport heapq\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = defaultdict(list)\n    heap_dict = defaultdict(list)\n    \n    def add_edge(u, v):\n        heapq.heappush(adj_list[u], v)\n        heapq.heappush(adj_list[v], u)\n        \n        if len(heap_dict[u]) > 10:\n            heapq.heappop(heap_dict[u])\n        if len(heap_dict[v]) > 10:\n            heapq.heappop(heap_dict[v])\n        \n        heapq.heappush(heap_dict[u], v)\n        heapq.heappush(heap_dict[v], u)\n    \n    def get_kth_largest(v, k):\n        if len(heap_dict[v]) < k:\n            return -1\n        return heap_dict[v][k-1]\n    \n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            u = int(data[index]) - 1\n            v = int(data[index + 1]) - 1\n            index += 2\n            add_edge(u, v)\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            k = int(data[index + 1])\n            index += 2\n            result = get_kth_largest(v, k)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import sys\nfrom heapq import heappush, heappop\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n\n    adj_list = [[] for _ in range(N + 1)]\n    pq = [[] for _ in range(N + 1)]\n\n    results = []\n\n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1])\n            v = int(data[index + 2])\n            index += 3\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n            heappush(pq[u], -v)\n            heappush(pq[v], -u)\n        elif query_type == 2:\n            v = int(data[index + 1])\n            k = int(data[index + 2])\n            index += 3\n            if len(pq[v]) < k:\n                results.append(-1)\n            else:\n                result = -heappop(pq[v])\n                while len(pq[v]) > k - 1:\n                    heappush(pq[v], -heappop(pq[v]))\n                heappush(pq[v], -result)\n                results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["```python\nimport sys\nfrom collections import defaultdict\nimport heapq\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = defaultdict(list)\n    heap_dict = defaultdict(list)\n    \n    def add_edge(u, v):\n        heapq.heappush(adj_list[u], v)\n        heapq.heappush(adj_list[v], u)\n        \n        if len(heap_dict[u]) > 10:\n            heapq.heappop(heap_dict[u])\n        if len(heap_dict[v]) > 10:\n            heapq.heappop(heap_dict[v])\n        \n        heapq.heappush(heap_dict[u], v)\n        heapq.heappush(heap_dict[v], u)\n    \n    def get_kth_largest(v, k):\n        if len(heap_dict[v]) < k:\n            return -1\n        return heap_dict[v][k-1]\n    \n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            u = int(data[index]) - 1\n            v = int(data[index + 1]) - 1\n            index += 2\n            add_edge(u, v)\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            k = int(data[index + 1])\n            index += 2\n            result = get_kth_largest(v, k)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```", "import sys\nfrom heapq import heappush, heappop\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n\n    adj_list = [[] for _ in range(N + 1)]\n    pq = [[] for _ in range(N + 1)]\n\n    results = []\n\n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1])\n            v = int(data[index + 2])\n            index += 3\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n            heappush(pq[u], -v)\n            heappush(pq[v], -u)\n        elif query_type == 2:\n            v = int(data[index + 1])\n            k = int(data[index + 2])\n            index += 3\n            if len(pq[v]) < k:\n                results.append(-1)\n            else:\n                result = -heappop(pq[v])\n                while len(pq[v]) > k - 1:\n                    heappush(pq[v], -heappop(pq[v]))\n                heappush(pq[v], -result)\n                results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "arc181_c", "codes": ["def generate_grid(N, P, Q):\n    # Initialize the grid with zeros\n    grid = [['0'] * N for _ in range(N)]\n    \n    # Fill the grid row-wise based on permutation P\n    for i in range(N):\n        grid[i][P[i] - 1] = '1'\n    \n    # Adjust the grid to ensure column-wise lexicographical order based on permutation Q\n    for j in range(N):\n        col = [grid[i][j] for i in range(N)]\n        sorted_col = sorted(col)\n        for i in range(N):\n            if col[i] != sorted_col[i]:\n                grid[i][j], grid[sorted_col.index('1')][j] = grid[sorted_col.index('1')][j], grid[i][j]\n                break\n    \n    # Print the grid\n    for row in grid:\n        print(''.join(row))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:]))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)", "def solve(N, P, Q):\n    def is_valid(grid):\n        # Check rows\n        for i in range(N):\n            if not is_lexicographically_sorted(grid[i]):\n                return False\n        # Check columns\n        for j in range(N):\n            col = ''.join(grid[k][j] for k in range(N))\n            if not is_lexicographically_sorted(col):\n                return False\n        return True\n    \n    def is_lexicographically_sorted(s):\n        return s == ''.join(sorted(s))\n    \n    def backtrack(row, col):\n        if row == N:\n            return True\n        if col == N:\n            return backtrack(row + 1, 0)\n        \n        for val in ['0', '1']:\n            grid[row][col] = val\n            if is_valid(grid):\n                if backtrack(row, col + 1):\n                    return True\n            grid[row][col] = ''\n        \n        return False\n    \n    grid = [['' for _ in range(N)] for _ in range(N)]\n    backtrack(0, 0)\n    \n    for row in grid:\n        print(''.join(row))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:]))\n\n# Solve and print the result\nsolve(N, P, Q)"], "passed": [false, false], "raw_code": ["```python\ndef generate_grid(N, P, Q):\n    # Initialize the grid with zeros\n    grid = [['0'] * N for _ in range(N)]\n    \n    # Fill the grid row-wise based on permutation P\n    for i in range(N):\n        grid[i][P[i] - 1] = '1'\n    \n    # Adjust the grid to ensure column-wise lexicographical order based on permutation Q\n    for j in range(N):\n        col = [grid[i][j] for i in range(N)]\n        sorted_col = sorted(col)\n        for i in range(N):\n            if col[i] != sorted_col[i]:\n                grid[i][j], grid[sorted_col.index('1')][j] = grid[sorted_col.index('1')][j], grid[i][j]\n                break\n    \n    # Print the grid\n    for row in grid:\n        print(''.join(row))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:]))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)\n```", "```python\ndef solve(N, P, Q):\n    def is_valid(grid):\n        # Check rows\n        for i in range(N):\n            if not is_lexicographically_sorted(grid[i]):\n                return False\n        # Check columns\n        for j in range(N):\n            col = ''.join(grid[k][j] for k in range(N))\n            if not is_lexicographically_sorted(col):\n                return False\n        return True\n    \n    def is_lexicographically_sorted(s):\n        return s == ''.join(sorted(s))\n    \n    def backtrack(row, col):\n        if row == N:\n            return True\n        if col == N:\n            return backtrack(row + 1, 0)\n        \n        for val in ['0', '1']:\n            grid[row][col] = val\n            if is_valid(grid):\n                if backtrack(row, col + 1):\n                    return True\n            grid[row][col] = ''\n        \n        return False\n    \n    grid = [['' for _ in range(N)] for _ in range(N)]\n    backtrack(0, 0)\n    \n    for row in grid:\n        print(''.join(row))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:]))\n\n# Solve and print the result\nsolve(N, P, Q)\n```"]}
{"task_id": "arc182_d", "codes": ["def min_operations_to_equalize_sequences(N, M, A, B):\n    if A == B:\n        return 0\n    operations = 0\n    for i in range(N):\n        operations += abs(A[i] - B[i]) % M\n    return operations\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = min_operations_to_equalize_sequences(N, M, A, B)\nprint(result)\n", "def min_operations_to_equalize_sequences(N, M, A, B):\n    if A == B:\n        return 0\n\n    operations = 0\n    for i in range(N):\n        if A[i] != B[i]:\n            diff = abs(A[i] - B[i])\n            if diff > M - diff:\n                diff = M - diff\n            operations += diff\n\n    return operations\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Print the result\nprint(min_operations_to_equalize_sequences(N, M, A, B))"], "passed": [false, false], "raw_code": ["def min_operations_to_equalize_sequences(N, M, A, B):\n    if A == B:\n        return 0\n    operations = 0\n    for i in range(N):\n        operations += abs(A[i] - B[i]) % M\n    return operations\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = min_operations_to_equalize_sequences(N, M, A, B)\nprint(result)\n", "def min_operations_to_equalize_sequences(N, M, A, B):\n    if A == B:\n        return 0\n\n    operations = 0\n    for i in range(N):\n        if A[i] != B[i]:\n            diff = abs(A[i] - B[i])\n            if diff > M - diff:\n                diff = M - diff\n            operations += diff\n\n    return operations\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Print the result\nprint(min_operations_to_equalize_sequences(N, M, A, B))"]}
{"task_id": "abc373_e", "codes": ["def min_additional_votes(N, M, K, A):\n    # Calculate the total votes needed to elect a candidate\n    total_votes_needed = K - sum(A)\n    # Sort the vote counts in descending order\n    sorted_votes = sorted(A, reverse=True)\n    # Initialize the result list\n    result = []\n    # Iterate through each candidate's vote count\n    for i in range(N):\n        # If the candidate has already won or cannot win, append 0 or -1 respectively\n        if i < M - 1:\n            result.append(0)\n        elif i == M - 1:\n            result.append(-1)\n        else:\n            # Calculate the minimum additional votes needed\n            additional_votes_needed = sorted_votes[1] - A[i] + 1\n            # Ensure the additional votes do not exceed the remaining votes\n            additional_votes_needed = min(additional_votes_needed, total_votes_needed)\n            result.append(additional_votes_needed)\n    return ' '.join(map(str, result))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Call the function and print the result\nprint(min_additional_votes(N, M, K, A))", "import sys\n\ndef min_additional_votes(N, M, K, A):\n    total_votes = sum(A)\n    remaining_votes = K - total_votes\n    sorted_votes = sorted(A, reverse=True)\n    results = []\n\n    for i in range(N):\n        current_votes = A[i]\n        needed_votes = float('inf')\n\n        # Calculate the maximum votes other candidates could get\n        max_other_votes = sum(sorted_votes[j] for j in range(M))\n\n        # Calculate the minimum votes needed for candidate i to win\n        if current_votes > max_other_votes:\n            needed_votes = 0\n        elif remaining_votes >= max_other_votes + 1:\n            needed_votes = max_other_votes + 1 - current_votes\n\n        results.append(needed_votes if needed_votes != float('inf') else -1)\n\n    return ' '.join(map(str, results))\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    print(min_additional_votes(N, M, K, A))"], "passed": [false, false], "raw_code": ["def min_additional_votes(N, M, K, A):\n    # Calculate the total votes needed to elect a candidate\n    total_votes_needed = K - sum(A)\n    # Sort the vote counts in descending order\n    sorted_votes = sorted(A, reverse=True)\n    # Initialize the result list\n    result = []\n    # Iterate through each candidate's vote count\n    for i in range(N):\n        # If the candidate has already won or cannot win, append 0 or -1 respectively\n        if i < M - 1:\n            result.append(0)\n        elif i == M - 1:\n            result.append(-1)\n        else:\n            # Calculate the minimum additional votes needed\n            additional_votes_needed = sorted_votes[1] - A[i] + 1\n            # Ensure the additional votes do not exceed the remaining votes\n            additional_votes_needed = min(additional_votes_needed, total_votes_needed)\n            result.append(additional_votes_needed)\n    return ' '.join(map(str, result))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Call the function and print the result\nprint(min_additional_votes(N, M, K, A))", "import sys\n\ndef min_additional_votes(N, M, K, A):\n    total_votes = sum(A)\n    remaining_votes = K - total_votes\n    sorted_votes = sorted(A, reverse=True)\n    results = []\n\n    for i in range(N):\n        current_votes = A[i]\n        needed_votes = float('inf')\n\n        # Calculate the maximum votes other candidates could get\n        max_other_votes = sum(sorted_votes[j] for j in range(M))\n\n        # Calculate the minimum votes needed for candidate i to win\n        if current_votes > max_other_votes:\n            needed_votes = 0\n        elif remaining_votes >= max_other_votes + 1:\n            needed_votes = max_other_votes + 1 - current_votes\n\n        results.append(needed_votes if needed_votes != float('inf') else -1)\n\n    return ' '.join(map(str, results))\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    print(min_additional_votes(N, M, K, A))"]}
{"task_id": "arc183_d", "codes": ["```python\ndef max_score_operations(N, edges):\n    import heapq\n    \n    # Build the adjacency list\n    adj_list = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Function to get all leaves\n    def get_leaves():\n        leaves = []\n        for i in range(1, N + 1):\n            if len(adj_list[i]) == 1:\n                leaves.append(i)\n        return leaves\n    \n    # Main loop to perform operations\n    result = []\n    while len(get_leaves()) >= 2:\n        leaves = get_leaves()\n        farthest1, farthest2 = None, None\n        max_distance = 0\n        \n        # Find the two farthest leaves\n        for i in range(len(leaves)):\n            for j in range(i + 1, len(leaves)):\n                visited = [False] * (N + 1)\n                queue = [(leaves[i], 0)]\n                while queue:\n                    node, dist = queue.pop(0)\n                    if node == leaves[j]:\n                        if dist > max_distance:\n                            max_distance = dist\n                            farthest1, farthest2 = leaves[i], leaves[j]\n                        break\n                    if not visited[node]:\n                        visited[node] = True\n                        for neighbor in adj_list[node]:\n                            if not visited[neighbor]:\n                                queue.append((neighbor, dist + 1))\n        \n        # Add the chosen leaves to the result\n        result.append((farthest1, farthest2))\n        \n        # Remove the chosen leaves from the adjacency list\n        for u in [farthest1, farthest2]:\n            for v in adj_list[u]:\n                adj_list[v].remove(u)\n            adj_list[u] = []\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N-1)]\n\n# Get the result\nresult = max_score_operations(N, edges)\n\n# Print the result\nfor x, y in result:\n    print(x, y)", "def max_score_operations(N):\n    # Initialize the list of leaves\n    leaves = list(range(1, N+1))\n    \n    # Perform N/2 operations\n    for _ in range(N // 2):\n        # Select the first and last leaf\n        x = leaves.pop(0)\n        y = leaves.pop()\n        \n        # Print the selected leaves\n        print(x, y)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = data[1:]\n\n# Call the function\nmax_score_operations(N)"], "passed": [false, false], "raw_code": ["```python\ndef max_score_operations(N, edges):\n    import heapq\n    \n    # Build the adjacency list\n    adj_list = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Function to get all leaves\n    def get_leaves():\n        leaves = []\n        for i in range(1, N + 1):\n            if len(adj_list[i]) == 1:\n                leaves.append(i)\n        return leaves\n    \n    # Main loop to perform operations\n    result = []\n    while len(get_leaves()) >= 2:\n        leaves = get_leaves()\n        farthest1, farthest2 = None, None\n        max_distance = 0\n        \n        # Find the two farthest leaves\n        for i in range(len(leaves)):\n            for j in range(i + 1, len(leaves)):\n                visited = [False] * (N + 1)\n                queue = [(leaves[i], 0)]\n                while queue:\n                    node, dist = queue.pop(0)\n                    if node == leaves[j]:\n                        if dist > max_distance:\n                            max_distance = dist\n                            farthest1, farthest2 = leaves[i], leaves[j]\n                        break\n                    if not visited[node]:\n                        visited[node] = True\n                        for neighbor in adj_list[node]:\n                            if not visited[neighbor]:\n                                queue.append((neighbor, dist + 1))\n        \n        # Add the chosen leaves to the result\n        result.append((farthest1, farthest2))\n        \n        # Remove the chosen leaves from the adjacency list\n        for u in [farthest1, farthest2]:\n            for v in adj_list[u]:\n                adj_list[v].remove(u)\n            adj_list[u] = []\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N-1)]\n\n# Get the result\nresult = max_score_operations(N, edges)\n\n# Print the result\nfor x, y in result:\n    print(x, y)", "```python\ndef max_score_operations(N):\n    # Initialize the list of leaves\n    leaves = list(range(1, N+1))\n    \n    # Perform N/2 operations\n    for _ in range(N // 2):\n        # Select the first and last leaf\n        x = leaves.pop(0)\n        y = leaves.pop()\n        \n        # Print the selected leaves\n        print(x, y)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = data[1:]\n\n# Call the function\nmax_score_operations(N)\n```"]}
{"task_id": "3580", "codes": ["def find_almost_equal_substring(s: str, pattern: str) -> int:\n    n = len(s)\n    m = len(pattern)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    return -1", "def find_almost_equal_substring(s: str, pattern: str) -> int:\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count == 1:\n            return i\n    \n    return -1"], "passed": [false, false], "raw_code": ["```python\ndef find_almost_equal_substring(s: str, pattern: str) -> int:\n    n = len(s)\n    m = len(pattern)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    return -1\n```", "```python\ndef find_almost_equal_substring(s: str, pattern: str) -> int:\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count == 1:\n            return i\n    \n    return -1\n```"]}
{"task_id": "3571", "codes": ["def longestIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Sort coordinates based on x, then y\n    coordinates.sort()\n    \n    n = len(coordinates)\n    graph = defaultdict(list)\n    in_degree = [0] * n\n    \n    # Build the graph and in-degree array\n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                graph[i].append(j)\n                in_degree[j] += 1\n    \n    # Initialize the queue with nodes having zero in-degree\n    queue = deque([i for i in range(n) if in_degree[i] == 0])\n    dp = [1] * n\n    \n    # Perform topological sort\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    return dp[k]", "from collections import defaultdict, deque\n\ndef maxIncreasingPath(coordinates, k):\n    n = len(coordinates)\n    \n    # Step 1: Sort coordinates\n    coordinates.sort()\n    \n    # Step 2: Build graph and indegree count\n    graph = defaultdict(list)\n    indegree = defaultdict(int)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                graph[coordinates[i]].append(coordinates[j])\n                indegree[coordinates[j]] += 1\n    \n    # Step 3: Topological sort\n    queue = deque([node for node in coordinates if indegree[node] == 0])\n    topo_order = []\n    while queue:\n        node = queue.popleft()\n        topo_order.append(node)\n        for neighbor in graph[node]:\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Step 4: Calculate longest path using DP\n    dp = {node: 1 for node in coordinates}\n    for node in topo_order:\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n    \n    return dp[coordinates[k]]"], "passed": [false, false], "raw_code": ["```python\ndef longestIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Sort coordinates based on x, then y\n    coordinates.sort()\n    \n    n = len(coordinates)\n    graph = defaultdict(list)\n    in_degree = [0] * n\n    \n    # Build the graph and in-degree array\n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                graph[i].append(j)\n                in_degree[j] += 1\n    \n    # Initialize the queue with nodes having zero in-degree\n    queue = deque([i for i in range(n) if in_degree[i] == 0])\n    dp = [1] * n\n    \n    # Perform topological sort\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    return dp[k]\n```", "```python\nfrom collections import defaultdict, deque\n\ndef maxIncreasingPath(coordinates, k):\n    n = len(coordinates)\n    \n    # Step 1: Sort coordinates\n    coordinates.sort()\n    \n    # Step 2: Build graph and indegree count\n    graph = defaultdict(list)\n    indegree = defaultdict(int)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                graph[coordinates[i]].append(coordinates[j])\n                indegree[coordinates[j]] += 1\n    \n    # Step 3: Topological sort\n    queue = deque([node for node in coordinates if indegree[node] == 0])\n    topo_order = []\n    while queue:\n        node = queue.popleft()\n        topo_order.append(node)\n        for neighbor in graph[node]:\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Step 4: Calculate longest path using DP\n    dp = {node: 1 for node in coordinates}\n    for node in topo_order:\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n    \n    return dp[coordinates[k]]\n```"]}
{"task_id": "abc368_e", "codes": ["def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    X1 = int(data[2])\n    trains = []\n    for i in range(M):\n        A = int(data[3 + 4 * i])\n        B = int(data[4 + 4 * i])\n        S = int(data[5 + 4 * i])\n        T = int(data[6 + 4 * i])\n        trains.append((A, B, S, T))\n    trains.sort(key=lambda x: x[2])\n    delays = [0] * M\n    delays[0] = X1 - trains[0][3]\n    for i in range(1, M):\n        A, B, S, T = trains[i]\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        if B == prev_B and T <= prev_S:\n            delays[i] = max(delays[i], delays[i - 1] + prev_S - T)\n    print(' '.join(map(str, delays[1:])))\nsolve()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    X1 = int(data[2])\n    trains = []\n    index = 3\n    for _ in range(M):\n        A = int(data[index])\n        B = int(data[index + 1])\n        S = int(data[index + 2])\n        T = int(data[index + 3])\n        trains.append((A, B, S, T))\n        index += 4\n    trains.sort(key=lambda x: x[2])\n    delays = [0] * M\n    delays[0] = X1\n    for i in range(1, M):\n        A, B, S, T = trains[i]\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        if B == prev_B and T <= prev_S:\n            delays[i] = max(delays[i], prev_T + delays[i - 1] - S)\n    print(' '.join(map(str, delays[1:])))\nsolve()"], "passed": [false, false], "raw_code": ["def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    X1 = int(data[2])\n    trains = []\n    for i in range(M):\n        A = int(data[3 + 4 * i])\n        B = int(data[4 + 4 * i])\n        S = int(data[5 + 4 * i])\n        T = int(data[6 + 4 * i])\n        trains.append((A, B, S, T))\n    trains.sort(key=lambda x: x[2])\n    delays = [0] * M\n    delays[0] = X1 - trains[0][3]\n    for i in range(1, M):\n        A, B, S, T = trains[i]\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        if B == prev_B and T <= prev_S:\n            delays[i] = max(delays[i], delays[i - 1] + prev_S - T)\n    print(' '.join(map(str, delays[1:])))\nsolve()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    X1 = int(data[2])\n    trains = []\n    index = 3\n    for _ in range(M):\n        A = int(data[index])\n        B = int(data[index + 1])\n        S = int(data[index + 2])\n        T = int(data[index + 3])\n        trains.append((A, B, S, T))\n        index += 4\n    trains.sort(key=lambda x: x[2])\n    delays = [0] * M\n    delays[0] = X1\n    for i in range(1, M):\n        A, B, S, T = trains[i]\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        if B == prev_B and T <= prev_S:\n            delays[i] = max(delays[i], prev_T + delays[i - 1] - S)\n    print(' '.join(map(str, delays[1:])))\nsolve()"]}
{"final_accuracy": "0.00%"}
