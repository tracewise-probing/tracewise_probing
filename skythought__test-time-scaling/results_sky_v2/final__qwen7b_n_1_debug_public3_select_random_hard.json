"{\"difficulty\": \"hard\", \"num_threads\": 16, \"temperature\": 0.7, \"n\": 1, \"context\": \"all\", \"selection\": \"random\", \"num_round\": 3, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"hosted_vllm/Qwen/Qwen2.5-Coder-7B-Instruct\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/final__qwen7b_n_1_debug_public3_select_random_hard.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"openai/gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"hosted_vllm/Qwen/Qwen2.5-Coder-7B-Instruct\", \"api_base\": \"http://127.0.0.1:8001/8001/v1\", \"no_refine\": false, \"no_dspy_gen\": false, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42, \"resume\": true}"
{"task_id": "abc368_d", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc367_e", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc370_e", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc366_e", "code": "import bisect\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    x_points = []\n    y_points = []\n    \n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        x_points.append(x)\n        y_points.append(y)\n        index += 2\n    \n    x_points.sort()\n    y_points.sort()\n    \n    def count_valid_pairs(D, points):\n        n = len(points)\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + 1\n        \n        count = 0\n        for i in range(n):\n            left = max(0, points[i] - D)\n            right = min(points[-1], points[i] + D)\n            left_index = bisect.bisect_left(points, left)\n            right_index = bisect.bisect_right(points, right)\n            count += right_index - left_index\n        \n        return count\n    \n    result_x = count_valid_pairs(D, x_points)\n    result_y = count_valid_pairs(D, y_points)\n    \n    print(result_x * result_y)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport bisect\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    x_points = []\n    y_points = []\n    \n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        x_points.append(x)\n        y_points.append(y)\n        index += 2\n    \n    x_points.sort()\n    y_points.sort()\n    \n    def count_valid_pairs(D, points):\n        n = len(points)\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + 1\n        \n        count = 0\n        for i in range(n):\n            left = max(0, points[i] - D)\n            right = min(points[-1], points[i] + D)\n            left_index = bisect.bisect_left(points, left)\n            right_index = bisect.bisect_right(points, right)\n            count += right_index - left_index\n        \n        return count\n    \n    result_x = count_valid_pairs(D, x_points)\n    result_y = count_valid_pairs(D, y_points)\n    \n    print(result_x * result_y)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3535", "code": "def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    max_val = max(nums)\n    \n    result = 0\n    \n    for i in range(n):\n        arr1_i = nums[i]\n        arr2_i = nums[i]\n        \n        count = 0\n        \n        for j in range(arr2_i, -1, -1):\n            if j <= max_val:\n                count += 1\n        \n        result = (result + count) % MOD\n    \n    return result", "passed": false, "raw_code": "```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    max_val = max(nums)\n    \n    result = 0\n    \n    for i in range(n):\n        arr1_i = nums[i]\n        arr2_i = nums[i]\n        \n        count = 0\n        \n        for j in range(arr2_i, -1, -1):\n            if j <= max_val:\n                count += 1\n        \n        result = (result + count) % MOD\n    \n    return result\n```"}
{"task_id": "3527", "code": "def alternatingGroups(colors, queries):\n    n = len(colors)\n    groups = {}\n    count = 0\n    \n    def add_group(start, end):\n        size = end - start + 1\n        if size >= 3:\n            key = (size, colors[start])\n            if key in groups:\n                groups[key] += 1\n            else:\n                groups[key] = 1\n            nonlocal count\n            count += 1\n    \n    def remove_group(start, end):\n        size = end - start + 1\n        if size >= 3:\n            key = (size, colors[start])\n            if key in groups:\n                groups[key] -= 1\n                if groups[key] == 0:\n                    del groups[key]\n                    nonlocal count\n                    count -= 1\n    \n    def check_group(i):\n        if i + 1 < n and colors[i] != colors[i + 1]:\n            add_group(i, i + 1)\n        if i - 1 >= 0 and colors[i] != colors[i - 1]:\n            add_group(i - 1, i)\n        if i + n - 1 < 2 * n and colors[i] != colors[i + n - 1]:\n            add_group(i, i + n - 1)\n        if i - n + 1 >= 0 and colors[i] != colors[i - n + 1]:\n            add_group(i - n + 1, i)\n    \n    def uncheck_group(i):\n        if i + 1 < n and colors[i] != colors[i + 1]:\n            remove_group(i, i + 1)\n        if i - 1 >= 0 and colors[i] != colors[i - 1]:\n            remove_group(i - 1, i)\n        if i + n - 1 < 2 * n and colors[i] != colors[i + n - 1]:\n            remove_group(i, i + n - 1)\n        if i - n + 1 >= 0 and colors[i] != colors[i - n + 1]:\n            remove_group(i - n + 1, i)\n    \n    for i in range(n):\n        check_group(i)\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            size = query[1]\n            result.append(groups.get((size, colors[0]), 0))\n        elif query[0] == 2:\n            index, color = query[1], query[2]\n            old_color = colors[index]\n            colors[index] = color\n            uncheck_group(index)\n            check_group(index)\n            if index > 0:\n                uncheck_group(index - 1)\n                check_group(index - 1)\n            if index < n - 1:\n                uncheck_group(index + 1)\n                check_group(index + 1)\n            if index + n - 1 < 2 * n:\n                uncheck_group(index + n - 1)\n                check_group(index + n - 1)\n            if index - n + 1 >= 0:\n                uncheck_group(index - n + 1)\n                check_group(index - n + 1)\n    \n    return result", "passed": false, "raw_code": "```python\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    groups = {}\n    count = 0\n    \n    def add_group(start, end):\n        size = end - start + 1\n        if size >= 3:\n            key = (size, colors[start])\n            if key in groups:\n                groups[key] += 1\n            else:\n                groups[key] = 1\n            nonlocal count\n            count += 1\n    \n    def remove_group(start, end):\n        size = end - start + 1\n        if size >= 3:\n            key = (size, colors[start])\n            if key in groups:\n                groups[key] -= 1\n                if groups[key] == 0:\n                    del groups[key]\n                    nonlocal count\n                    count -= 1\n    \n    def check_group(i):\n        if i + 1 < n and colors[i] != colors[i + 1]:\n            add_group(i, i + 1)\n        if i - 1 >= 0 and colors[i] != colors[i - 1]:\n            add_group(i - 1, i)\n        if i + n - 1 < 2 * n and colors[i] != colors[i + n - 1]:\n            add_group(i, i + n - 1)\n        if i - n + 1 >= 0 and colors[i] != colors[i - n + 1]:\n            add_group(i - n + 1, i)\n    \n    def uncheck_group(i):\n        if i + 1 < n and colors[i] != colors[i + 1]:\n            remove_group(i, i + 1)\n        if i - 1 >= 0 and colors[i] != colors[i - 1]:\n            remove_group(i - 1, i)\n        if i + n - 1 < 2 * n and colors[i] != colors[i + n - 1]:\n            remove_group(i, i + n - 1)\n        if i - n + 1 >= 0 and colors[i] != colors[i - n + 1]:\n            remove_group(i - n + 1, i)\n    \n    for i in range(n):\n        check_group(i)\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            size = query[1]\n            result.append(groups.get((size, colors[0]), 0))\n        elif query[0] == 2:\n            index, color = query[1], query[2]\n            old_color = colors[index]\n            colors[index] = color\n            uncheck_group(index)\n            check_group(index)\n            if index > 0:\n                uncheck_group(index - 1)\n                check_group(index - 1)\n            if index < n - 1:\n                uncheck_group(index + 1)\n                check_group(index + 1)\n            if index + n - 1 < 2 * n:\n                uncheck_group(index + n - 1)\n                check_group(index + n - 1)\n            if index - n + 1 >= 0:\n                uncheck_group(index - n + 1)\n                check_group(index - n + 1)\n    \n    return result\n```"}
{"task_id": "abc368_e", "code": "def min_delays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    X1 = int(data[index + 2])\n    \n    trains = []\n    for _ in range(M):\n        A = int(data[index + 3 + 4 * _])\n        B = int(data[index + 4 + 4 * _])\n        S = int(data[index + 5 + 4 * _])\n        T = int(data[index + 6 + 4 * _])\n        trains.append((A, B, S, T))\n    \n    # Sort trains based on departure time\n    trains.sort(key=lambda x: x[2])\n    \n    # Initialize delays array\n    delays = [0] * M\n    \n    # Handle the first train's delay\n    delays[0] = X1\n    \n    # Calculate minimum delays\n    for i in range(1, M):\n        A, B, S, T = trains[i]\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        \n        if B == prev_A and T <= prev_S:\n            required_delay = prev_S - T + delays[i - 1]\n            delays[i] = required_delay\n    \n    # Print the delays for trains 2 to M\n    for delay in delays[1:]:\n        print(delay, end=' ')\n    print()\n\nmin_delays()", "passed": false, "raw_code": "```python\ndef min_delays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    X1 = int(data[index + 2])\n    \n    trains = []\n    for _ in range(M):\n        A = int(data[index + 3 + 4 * _])\n        B = int(data[index + 4 + 4 * _])\n        S = int(data[index + 5 + 4 * _])\n        T = int(data[index + 6 + 4 * _])\n        trains.append((A, B, S, T))\n    \n    # Sort trains based on departure time\n    trains.sort(key=lambda x: x[2])\n    \n    # Initialize delays array\n    delays = [0] * M\n    \n    # Handle the first train's delay\n    delays[0] = X1\n    \n    # Calculate minimum delays\n    for i in range(1, M):\n        A, B, S, T = trains[i]\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        \n        if B == prev_A and T <= prev_S:\n            required_delay = prev_S - T + delays[i - 1]\n            delays[i] = required_delay\n    \n    # Print the delays for trains 2 to M\n    for delay in delays[1:]:\n        print(delay, end=' ')\n    print()\n\nmin_delays()\n```"}
{"task_id": "abc367_g", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n\n    MOD = 998244353\n    \n    # Initialize prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(N):\n        prefix_xor[i + 1] = prefix_xor[i] ^ A[i]\n    \n    # Function to calculate the number of subsequences with a specific length\n    def count_subsequences(length):\n        return 1 << (N - length)\n    \n    # Function to calculate the number of subsequences with a specific length where the XOR is zero\n    def count_zero_xor_subsequences(length):\n        if length == 0:\n            return 1\n        return (count_subsequences(length) + 1) // 2\n    \n    # Calculate the total score\n    total_score = 0\n    for length in range(1, N + 1):\n        if length % M == 0:\n            total_score += pow(prefix_xor[length], K, MOD) * count_subsequences(length)\n        else:\n            total_score += count_zero_xor_subsequences(length)\n    \n    print(total_score % MOD)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n\n    MOD = 998244353\n    \n    # Initialize prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(N):\n        prefix_xor[i + 1] = prefix_xor[i] ^ A[i]\n    \n    # Function to calculate the number of subsequences with a specific length\n    def count_subsequences(length):\n        return 1 << (N - length)\n    \n    # Function to calculate the number of subsequences with a specific length where the XOR is zero\n    def count_zero_xor_subsequences(length):\n        if length == 0:\n            return 1\n        return (count_subsequences(length) + 1) // 2\n    \n    # Calculate the total score\n    total_score = 0\n    for length in range(1, N + 1):\n        if length % M == 0:\n            total_score += pow(prefix_xor[length], K, MOD) * count_subsequences(length)\n        else:\n            total_score += count_zero_xor_subsequences(length)\n    \n    print(total_score % MOD)\n\nmain()\n```"}
{"task_id": "3532", "code": "from collections import defaultdict, deque\n\ndef minTimeToMarkNodes(edges):\n    n = len(edges) + 1\n    graph = defaultdict(list)\n    \n    # Build the graph\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Initialize the marking times and visited set\n    times = [-1] * n\n    visited = [False] * n\n    \n    # Queues for nodes to be marked at the next and subsequent time steps\n    queue_next = deque([0])\n    queue_subsequent = deque()\n    times[0] = 0\n    visited[0] = True\n    \n    while queue_next or queue_subsequent:\n        if queue_next:\n            current = queue_next.popleft()\n            \n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    if current % 2 == 0:\n                        times[neighbor] = times[current] + 2\n                        queue_subsequent.append(neighbor)\n                    else:\n                        times[neighbor] = times[current] + 1\n                        queue_next.append(neighbor)\n        elif queue_subsequent:\n            current = queue_subsequent.popleft()\n            \n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    if current % 2 == 0:\n                        times[neighbor] = times[current] + 2\n                        queue_subsequent.append(neighbor)\n                    else:\n                        times[neighbor] = times[current] + 1\n                        queue_next.append(neighbor)\n    \n    return times", "passed": false, "raw_code": "```python\nfrom collections import defaultdict, deque\n\ndef minTimeToMarkNodes(edges):\n    n = len(edges) + 1\n    graph = defaultdict(list)\n    \n    # Build the graph\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Initialize the marking times and visited set\n    times = [-1] * n\n    visited = [False] * n\n    \n    # Queues for nodes to be marked at the next and subsequent time steps\n    queue_next = deque([0])\n    queue_subsequent = deque()\n    times[0] = 0\n    visited[0] = True\n    \n    while queue_next or queue_subsequent:\n        if queue_next:\n            current = queue_next.popleft()\n            \n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    if current % 2 == 0:\n                        times[neighbor] = times[current] + 2\n                        queue_subsequent.append(neighbor)\n                    else:\n                        times[neighbor] = times[current] + 1\n                        queue_next.append(neighbor)\n        elif queue_subsequent:\n            current = queue_subsequent.popleft()\n            \n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    if current % 2 == 0:\n                        times[neighbor] = times[current] + 2\n                        queue_subsequent.append(neighbor)\n                    else:\n                        times[neighbor] = times[current] + 1\n                        queue_next.append(neighbor)\n    \n    return times\n```"}
{"task_id": "abc365_e", "code": "def xor_subarray_sum(N, A):\n    # Initialize prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    \n    # Compute prefix XOR\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Initialize total sum\n    total_sum = 0\n    \n    # Calculate contributions of each element\n    for i in range(N):\n        total_sum += (prefix_xor[i] * (N - i) - prefix_xor[N] + prefix_xor[i + 1])\n    \n    return total_sum\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Print the result\nprint(xor_subarray_sum(N, A))", "passed": false, "raw_code": "```python\ndef xor_subarray_sum(N, A):\n    # Initialize prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    \n    # Compute prefix XOR\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Initialize total sum\n    total_sum = 0\n    \n    # Calculate contributions of each element\n    for i in range(N):\n        total_sum += (prefix_xor[i] * (N - i) - prefix_xor[N] + prefix_xor[i + 1])\n    \n    return total_sum\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Print the result\nprint(xor_subarray_sum(N, A))\n```"}
{"task_id": "abc369_g", "code": "import sys\nfrom collections import defaultdict, deque\nfrom itertools import combinations\n\ndef min_max_walk(N, edges):\n    # Build the adjacency list representation of the tree\n    adj_list = defaultdict(list)\n    for u, v, l in edges:\n        adj_list[u].append((v, l))\n        adj_list[v].append((u, l))\n\n    # Compute the shortest path distances using Floyd-Warshall\n    dist = [[float('inf')] * (N + 1) for _ in range(N + 1)]\n    for u in range(1, N + 1):\n        dist[u][u] = 0\n    for u, v, l in edges:\n        dist[u][v] = l\n        dist[v][u] = l\n    for k in range(1, N + 1):\n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    # Use dynamic programming to find the minimum maximum distance\n    dp = [[float('inf')] * (1 << N) for _ in range(N + 1)]\n    for mask in range(1 << N):\n        dp[1][mask] = dist[1][(mask.bit_length()) + 1]\n\n    for node in range(2, N + 1):\n        for mask in range(1 << N):\n            if mask & (1 << (node - 1)):\n                submask = mask ^ (1 << (node - 1))\n                for s in range(submask, 0, -1):\n                    if submask & s == s:\n                        dp[node][mask] = min(dp[node][mask], max(dp[node][submask], dp[1][s]))\n\n    results = []\n    for K in range(1, N + 1):\n        max_distance = float('-inf')\n        for combination in combinations(range(1, N + 1), K):\n            mask = 0\n            for vertex in combination:\n                mask |= (1 << (vertex - 1))\n            max_distance = max(max_distance, dp[1][mask])\n        results.append(max_distance)\n\n    return results\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    edges = [(int(data[3*i+1]), int(data[3*i+2]), int(data[3*i+3])) for i in range(N-1)]\n    result = min_max_walk(N, edges)\n    for r in result:\n        print(r)", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict, deque\nfrom itertools import combinations\n\ndef min_max_walk(N, edges):\n    # Build the adjacency list representation of the tree\n    adj_list = defaultdict(list)\n    for u, v, l in edges:\n        adj_list[u].append((v, l))\n        adj_list[v].append((u, l))\n\n    # Compute the shortest path distances using Floyd-Warshall\n    dist = [[float('inf')] * (N + 1) for _ in range(N + 1)]\n    for u in range(1, N + 1):\n        dist[u][u] = 0\n    for u, v, l in edges:\n        dist[u][v] = l\n        dist[v][u] = l\n    for k in range(1, N + 1):\n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    # Use dynamic programming to find the minimum maximum distance\n    dp = [[float('inf')] * (1 << N) for _ in range(N + 1)]\n    for mask in range(1 << N):\n        dp[1][mask] = dist[1][(mask.bit_length()) + 1]\n\n    for node in range(2, N + 1):\n        for mask in range(1 << N):\n            if mask & (1 << (node - 1)):\n                submask = mask ^ (1 << (node - 1))\n                for s in range(submask, 0, -1):\n                    if submask & s == s:\n                        dp[node][mask] = min(dp[node][mask], max(dp[node][submask], dp[1][s]))\n\n    results = []\n    for K in range(1, N + 1):\n        max_distance = float('-inf')\n        for combination in combinations(range(1, N + 1), K):\n            mask = 0\n            for vertex in combination:\n                mask |= (1 << (vertex - 1))\n            max_distance = max(max_distance, dp[1][mask])\n        results.append(max_distance)\n\n    return results\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    edges = [(int(data[3*i+1]), int(data[3*i+2]), int(data[3*i+3])) for i in range(N-1)]\n    result = min_max_walk(N, edges)\n    for r in result:\n        print(r)\n```"}
{"task_id": "abc367_f", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n\n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n\n    queries = []\n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        queries.append((l_i, r_i, L_i, R_i))\n        index += 4\n\n    for query in queries:\n        l_i, r_i, L_i, R_i = query\n        subseq_A = sorted(A[l_i:r_i + 1])\n        subseq_B = sorted(B[L_i:R_i + 1])\n        if subseq_A == subseq_B:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n\n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n\n    queries = []\n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        queries.append((l_i, r_i, L_i, R_i))\n        index += 4\n\n    for query in queries:\n        l_i, r_i, L_i, R_i = query\n        subseq_A = sorted(A[l_i:r_i + 1])\n        subseq_B = sorted(B[L_i:R_i + 1])\n        if subseq_A == subseq_B:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nmain()\n```"}
{"task_id": "abc368_f", "code": "def determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    anna_moves = 0\n    bruno_moves = 0\n    \n    while True:\n        # Check if there are any odd numbers left\n        if not any(x % 2 != 0 for x in A):\n            break\n        \n        # Anna's turn\n        anna_moves += 1\n        for i in range(N):\n            if A[i] % 2 != 0:\n                A[i] = A[i] // 2\n                break\n        \n        # Bruno's turn\n        bruno_moves += 1\n        for i in range(N):\n            if A[i] % 2 != 0:\n                A[i] = A[i] // 2\n                break\n    \n    # Determine the winner based on the number of moves\n    if anna_moves % 2 == 0:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\ndetermine_winner()", "passed": false, "raw_code": "```python\ndef determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    anna_moves = 0\n    bruno_moves = 0\n    \n    while True:\n        # Check if there are any odd numbers left\n        if not any(x % 2 != 0 for x in A):\n            break\n        \n        # Anna's turn\n        anna_moves += 1\n        for i in range(N):\n            if A[i] % 2 != 0:\n                A[i] = A[i] // 2\n                break\n        \n        # Bruno's turn\n        bruno_moves += 1\n        for i in range(N):\n            if A[i] % 2 != 0:\n                A[i] = A[i] // 2\n                break\n    \n    # Determine the winner based on the number of moves\n    if anna_moves % 2 == 0:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\ndetermine_winner()\n```"}
{"task_id": "abc371_g", "code": "def smallest_array(N, P, A):\n    # Function to find cycles in the permutation\n    def find_cycles(P):\n        visited = [False] * N\n        cycles = []\n        \n        for i in range(N):\n            if not visited[i]:\n                cycle = []\n                x = i\n                while not visited[x]:\n                    visited[x] = True\n                    cycle.append(x)\n                    x = P[x] - 1\n                cycles.append(cycle)\n        \n        return cycles\n    \n    # Find all cycles in the permutation\n    cycles = find_cycles(P)\n    \n    # Sort elements within each cycle\n    for cycle in cycles:\n        cycle_values = [A[i] for i in cycle]\n        cycle_values.sort()\n        \n        for i, idx in enumerate(cycle):\n            A[idx] = cycle_values[i]\n    \n    # Print the result array\n    print(' '.join(map(str, A)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Call the function with the input data\nsmallest_array(N, P, A)", "passed": false, "raw_code": "```python\ndef smallest_array(N, P, A):\n    # Function to find cycles in the permutation\n    def find_cycles(P):\n        visited = [False] * N\n        cycles = []\n        \n        for i in range(N):\n            if not visited[i]:\n                cycle = []\n                x = i\n                while not visited[x]:\n                    visited[x] = True\n                    cycle.append(x)\n                    x = P[x] - 1\n                cycles.append(cycle)\n        \n        return cycles\n    \n    # Find all cycles in the permutation\n    cycles = find_cycles(P)\n    \n    # Sort elements within each cycle\n    for cycle in cycles:\n        cycle_values = [A[i] for i in cycle]\n        cycle_values.sort()\n        \n        for i, idx in enumerate(cycle):\n            A[idx] = cycle_values[i]\n    \n    # Print the result array\n    print(' '.join(map(str, A)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Call the function with the input data\nsmallest_array(N, P, A)\n```"}
{"task_id": "abc366_g", "code": "import sys\nfrom collections import defaultdict\n\ndef backtrack(node, parent, colors, graph):\n    if node in colors:\n        return True\n    \n    for i in range(1, 61):\n        valid = True\n        for neighbor in graph[node]:\n            if neighbor != parent and (node in colors and neighbor in colors):\n                if (colors[node] ^ colors[neighbor]) != (i ^ colors[neighbor]):\n                    valid = False\n                    break\n        \n        if valid:\n            colors[node] = i\n            if all(backtrack(neighbor, node, colors, graph) for neighbor in graph[node] if neighbor != parent):\n                return True\n            del colors[node]\n    \n    return False\n\ndef assign_colors(graph, n):\n    colors = {}\n    if not backtrack(1, -1, colors, graph):\n        return None\n    return colors\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    graph = defaultdict(list)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        graph[u].append(v)\n        graph[v].append(u)\n        index += 2\n    \n    colors = assign_colors(graph, N)\n    \n    if colors is None:\n        print('No')\n    else:\n        print('Yes')\n        for i in range(1, N + 1):\n            print(colors[i], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict\n\ndef backtrack(node, parent, colors, graph):\n    if node in colors:\n        return True\n    \n    for i in range(1, 61):\n        valid = True\n        for neighbor in graph[node]:\n            if neighbor != parent and (node in colors and neighbor in colors):\n                if (colors[node] ^ colors[neighbor]) != (i ^ colors[neighbor]):\n                    valid = False\n                    break\n        \n        if valid:\n            colors[node] = i\n            if all(backtrack(neighbor, node, colors, graph) for neighbor in graph[node] if neighbor != parent):\n                return True\n            del colors[node]\n    \n    return False\n\ndef assign_colors(graph, n):\n    colors = {}\n    if not backtrack(1, -1, colors, graph):\n        return None\n    return colors\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    graph = defaultdict(list)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        graph[u].append(v)\n        graph[v].append(u)\n        index += 2\n    \n    colors = assign_colors(graph, N)\n    \n    if colors is None:\n        print('No')\n    else:\n        print('Yes')\n        for i in range(1, N + 1):\n            print(colors[i], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n```"}
{"task_id": "abc366_f", "code": "def max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Initialize the list with the first function applied to 1\n    max_values = [functions[0][0] * 1 + functions[0][1]]\n    \n    # Apply each function in turn\n    for k in range(1, K):\n        new_max_values = []\n        for val in max_values:\n            for i in range(N):\n                new_val = functions[i][0] * val + functions[i][1]\n                new_max_values.append(new_val)\n        max_values = new_max_values\n    \n    # Print the maximum value\n    print(max(max_values))\n\nmax_nested_function_value()", "passed": false, "raw_code": "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Initialize the list with the first function applied to 1\n    max_values = [functions[0][0] * 1 + functions[0][1]]\n    \n    # Apply each function in turn\n    for k in range(1, K):\n        new_max_values = []\n        for val in max_values:\n            for i in range(N):\n                new_val = functions[i][0] * val + functions[i][1]\n                new_max_values.append(new_val)\n        max_values = new_max_values\n    \n    # Print the maximum value\n    print(max(max_values))\n\nmax_nested_function_value()\n```"}
{"task_id": "abc370_f", "code": "import sys\n\ndef min_cut_lines(N, K, A):\n    # Helper function to check if it's possible to divide the cake into K groups with minimum weight at least 'min_weight'\n    def can_divide(min_weight):\n        current_group_weight = 0\n        group_count = 1\n        for mass in A:\n            if current_group_weight + mass > min_weight:\n                group_count += 1\n                current_group_weight = mass\n            else:\n                current_group_weight += mass\n        return group_count <= K\n\n    left, right = max(A), sum(A)\n    while left < right:\n        mid = (left + right) // 2\n        if can_divide(mid):\n            right = mid\n        else:\n            left = mid + 1\n\n    min_weight = left\n    cut_lines = 0\n    current_group_weight = 0\n    for i in range(N):\n        current_group_weight += A[i]\n        if current_group_weight == min_weight:\n            cut_lines += 1\n            current_group_weight = 0\n    if current_group_weight > 0:\n        cut_lines += 1\n\n    # Count the number of cut lines that are never cut\n    never_cut_cut_lines = 0\n    current_group_weight = 0\n    for i in range(N):\n        current_group_weight += A[i]\n        if current_group_weight == min_weight:\n            never_cut_cut_lines += 1\n            current_group_weight = 0\n    if current_group_weight > 0:\n        never_cut_cut_lines += 1\n\n    return min_weight, never_cut_cut_lines\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    result = min_cut_lines(N, K, A)\n    print(result[0], result[1])", "passed": false, "raw_code": "```python\nimport sys\n\ndef min_cut_lines(N, K, A):\n    # Helper function to check if it's possible to divide the cake into K groups with minimum weight at least 'min_weight'\n    def can_divide(min_weight):\n        current_group_weight = 0\n        group_count = 1\n        for mass in A:\n            if current_group_weight + mass > min_weight:\n                group_count += 1\n                current_group_weight = mass\n            else:\n                current_group_weight += mass\n        return group_count <= K\n\n    left, right = max(A), sum(A)\n    while left < right:\n        mid = (left + right) // 2\n        if can_divide(mid):\n            right = mid\n        else:\n            left = mid + 1\n\n    min_weight = left\n    cut_lines = 0\n    current_group_weight = 0\n    for i in range(N):\n        current_group_weight += A[i]\n        if current_group_weight == min_weight:\n            cut_lines += 1\n            current_group_weight = 0\n    if current_group_weight > 0:\n        cut_lines += 1\n\n    # Count the number of cut lines that are never cut\n    never_cut_cut_lines = 0\n    current_group_weight = 0\n    for i in range(N):\n        current_group_weight += A[i]\n        if current_group_weight == min_weight:\n            never_cut_cut_lines += 1\n            current_group_weight = 0\n    if current_group_weight > 0:\n        never_cut_cut_lines += 1\n\n    return min_weight, never_cut_cut_lines\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    result = min_cut_lines(N, K, A)\n    print(result[0], result[1])\n```"}
{"task_id": "abc371_f", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nX = list(map(int, data[1:n+1]))\nq = int(data[n+1])\ntasks = [(int(data[n+2+i*2])-1, int(data[n+3+i*2])) for i in range(q)]\nresult = 0\nfor t, g in tasks:\n    result += abs(X[t] - g)\nprint(result)", "passed": false, "raw_code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nX = list(map(int, data[1:n+1]))\nq = int(data[n+1])\ntasks = [(int(data[n+2+i*2])-1, int(data[n+3+i*2])) for i in range(q)]\nresult = 0\nfor t, g in tasks:\n    result += abs(X[t] - g)\nprint(result)"}
{"task_id": "abc370_g", "code": "# Define the modulo constant\nMOD = 998244353\n\n# Function to calculate the sum of divisors modulo 3\ndef sum_of_divisors_mod_3(n):\n    result = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            result += i % 3 + (n // i) % 3\n            if i != n // i:\n                result -= 2 * i % 3\n    return result % 3\n\n# Function to count good integers up to N\n@cache\ndef count_good_integers(N):\n    if N == 1:\n        return 1\n    count = 0\n    for i in range(1, N + 1):\n        if sum_of_divisors_mod_3(i) == 0:\n            count += count_good_integers(N // i)\n            count %= MOD\n    return count\n\n# Read input\nN, M = map(int, input().split())\n\n# Calculate the number of good integers up to N\nnum_good_integers = count_good_integers(N)\n\n# Calculate the number of valid sequences\nresult = pow(num_good_integers, M, MOD)\n\n# Print the result\nprint(result)", "passed": false, "raw_code": "# Define the modulo constant\nMOD = 998244353\n\n# Function to calculate the sum of divisors modulo 3\ndef sum_of_divisors_mod_3(n):\n    result = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            result += i % 3 + (n // i) % 3\n            if i != n // i:\n                result -= 2 * i % 3\n    return result % 3\n\n# Function to count good integers up to N\n@cache\ndef count_good_integers(N):\n    if N == 1:\n        return 1\n    count = 0\n    for i in range(1, N + 1):\n        if sum_of_divisors_mod_3(i) == 0:\n            count += count_good_integers(N // i)\n            count %= MOD\n    return count\n\n# Read input\nN, M = map(int, input().split())\n\n# Calculate the number of good integers up to N\nnum_good_integers = count_good_integers(N)\n\n# Calculate the number of valid sequences\nresult = pow(num_good_integers, M, MOD)\n\n# Print the result\nprint(result)"}
{"task_id": "abc373_f", "code": "def max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        index += 2\n        \n        # Update DP table from back to front to avoid overwriting\n        for j in range(W, w - 1, -1):\n            for k in range(1, 11):\n                if j >= k * w:\n                    dp[j] = max(dp[j], dp[j - k * w] + k * v - k * k)\n    \n    print(max(dp))\n\n# Call the function\nmax_happiness()", "passed": false, "raw_code": "```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        index += 2\n        \n        # Update DP table from back to front to avoid overwriting\n        for j in range(W, w - 1, -1):\n            for k in range(1, 11):\n                if j >= k * w:\n                    dp[j] = max(dp[j], dp[j - k * w] + k * v - k * k)\n    \n    print(max(dp))\n\n# Call the function\nmax_happiness()\n```"}
{"task_id": "arc181_d", "code": "def update(bit, idx, n):\n    while idx <= n:\n        bit[idx] += 1\n        idx += idx & -idx\n\ndef query(bit, idx):\n    count = 0\n    while idx > 0:\n        count += bit[idx]\n        idx -= idx & -idx\n    return count\n\ndef inversion_number(P, N):\n    bit = [0] * (N + 1)\n    inversions = 0\n    rank = {x: i + 1 for i, x in enumerate(sorted(P))}\n    \n    for i, x in enumerate(P):\n        inversions += i - query(bit, rank[x])\n        update(bit, rank[x], N)\n    \n    return inversions\n\ndef process_operations(N, P, M, A):\n    inversions = inversion_number(P, N)\n    print(inversions)\n    \n    bit = [0] * (N + 1)\n    for a in A:\n        for i in range(1, a + 1):\n            if P[i-1] > P[i]:\n                P[i-1], P[i] = P[i], P[i-1]\n                rank_i = rank[P[i-1]]\n                rank_ip1 = rank[P[i]]\n                inversions += (query(bit, rank_ip1) - query(bit, rank_i))\n                update(bit, rank_i, N)\n                update(bit, rank_ip1, N)\n        rank = {x: i + 1 for i, x in enumerate(P)}\n        inversions = inversion_number(P, N)\n        print(inversions)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nM = int(data[N+1])\nA = list(map(int, data[N+2:N+2+M]))\n\nprocess_operations(N, P, M, A)", "passed": false, "raw_code": "```python\ndef update(bit, idx, n):\n    while idx <= n:\n        bit[idx] += 1\n        idx += idx & -idx\n\ndef query(bit, idx):\n    count = 0\n    while idx > 0:\n        count += bit[idx]\n        idx -= idx & -idx\n    return count\n\ndef inversion_number(P, N):\n    bit = [0] * (N + 1)\n    inversions = 0\n    rank = {x: i + 1 for i, x in enumerate(sorted(P))}\n    \n    for i, x in enumerate(P):\n        inversions += i - query(bit, rank[x])\n        update(bit, rank[x], N)\n    \n    return inversions\n\ndef process_operations(N, P, M, A):\n    inversions = inversion_number(P, N)\n    print(inversions)\n    \n    bit = [0] * (N + 1)\n    for a in A:\n        for i in range(1, a + 1):\n            if P[i-1] > P[i]:\n                P[i-1], P[i] = P[i], P[i-1]\n                rank_i = rank[P[i-1]]\n                rank_ip1 = rank[P[i]]\n                inversions += (query(bit, rank_ip1) - query(bit, rank_i))\n                update(bit, rank_i, N)\n                update(bit, rank_ip1, N)\n        rank = {x: i + 1 for i, x in enumerate(P)}\n        inversions = inversion_number(P, N)\n        print(inversions)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nM = int(data[N+1])\nA = list(map(int, data[N+2:N+2+M]))\n\nprocess_operations(N, P, M, A)\n```"}
{"task_id": "abc369_e", "code": "import sys\nfrom collections import defaultdict\n\ndef find_min_time(N, M, bridges, Q, queries):\n    # Create adjacency list\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n    \n    # Initialize DP table with infinity\n    max_mask = 1 << M\n    dp = [[float('inf')] * (N + 1) for _ in range(max_mask)]\n    dp[0][1] = 0\n    \n    # Precompute the minimum time to reach each island using all bridges\n    for mask in range(max_mask):\n        for u in range(1, N + 1):\n            for v, t in graph[u]:\n                new_mask = mask | (1 << (u - 1)) | (1 << (v - 1))\n                dp[new_mask][v] = min(dp[new_mask][v], dp[mask][u] + t)\n    \n    # Process each query\n    results = []\n    for K, query in queries:\n        required_bridges = set(query)\n        min_time = float('inf')\n        for mask in range(max_mask):\n            if all((mask & (1 << (b - 1))) != 0 for b in required_bridges):\n                min_time = min(min_time, dp[mask][N])\n        results.append(min_time)\n    \n    return results\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    bridges = []\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        bridges.append((u, v, t))\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        K = int(data[index])\n        index += 1\n        query = list(map(int, data[index:index + K]))\n        index += K\n        queries.append(query)\n    \n    results = find_min_time(N, M, bridges, Q, queries)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict\n\ndef find_min_time(N, M, bridges, Q, queries):\n    # Create adjacency list\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n    \n    # Initialize DP table with infinity\n    max_mask = 1 << M\n    dp = [[float('inf')] * (N + 1) for _ in range(max_mask)]\n    dp[0][1] = 0\n    \n    # Precompute the minimum time to reach each island using all bridges\n    for mask in range(max_mask):\n        for u in range(1, N + 1):\n            for v, t in graph[u]:\n                new_mask = mask | (1 << (u - 1)) | (1 << (v - 1))\n                dp[new_mask][v] = min(dp[new_mask][v], dp[mask][u] + t)\n    \n    # Process each query\n    results = []\n    for K, query in queries:\n        required_bridges = set(query)\n        min_time = float('inf')\n        for mask in range(max_mask):\n            if all((mask & (1 << (b - 1))) != 0 for b in required_bridges):\n                min_time = min(min_time, dp[mask][N])\n        results.append(min_time)\n    \n    return results\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    bridges = []\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        bridges.append((u, v, t))\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        K = int(data[index])\n        index += 1\n        query = list(map(int, data[index:index + K]))\n        index += K\n        queries.append(query)\n    \n    results = find_min_time(N, M, bridges, Q, queries)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc368_g", "code": "import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:N+1])) B = list(map(int, data[N+1:2*N+1])) Q = int(data[2*N+1]) class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (4 * self.n) self.build(1, 0, self.n-1, arr) def build(self, node, start, end, arr): if start == end: self.tree[node] = arr[start] else: mid = (start + end) // 2 self.build(2*node, start, mid, arr) self.build(2*node+1, mid+1, end, arr) self.tree[node] = max(self.tree[2*node], self.tree[2*node+1]) def update(self, node, start, end, idx, val): if start == end: self.tree[node] = val else: mid = (start + end) // 2 if start <= idx <= mid: self.update(2*node, start, mid, idx, val) else: self.update(2*node+1, mid+1, end, idx, val) self.tree[node] = max(self.tree[2*node], self.tree[2*node+1]) def query(self, node, start, end, left, right): if right < start or end < left: return 0 if left <= start and end <= right: return self.tree[node] mid = (start + end) // 2 left_max = self.query(2*node, start, mid, left, right) right_max = self.query(2*node+1, mid+1, end, left, right) return max(left_max, right_max) def process_queries(N, A, B, Q, queries): seg_A = SegmentTree(A) seg_B = SegmentTree(B) results = [] for query in queries: if query[0] == 1: _, i, x = query seg_A.update(1, 0, N-1, i-1, x) elif query[0] == 2: _, i, x = query seg_B.update(1, 0, N-1, i-1, x) elif query[0] == 3: _, l, r = query v = 0 for i in range(l-1, r): v += seg_A.query(1, 0, N-1, i, i) v *= seg_B.query(1, 0, N-1, i, i) results.append(v) return results # Read input and process queries queries = [] for i in range(Q): parts = data[3*i+3:3*i+6] query_type = int(parts[0]) index = int(parts[1]) value = int(parts[2]) queries.append((query_type, index, value)) result = process_queries(N, A, B, Q, queries) for res in result: print(res)", "passed": false, "raw_code": "import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:N+1])) B = list(map(int, data[N+1:2*N+1])) Q = int(data[2*N+1]) class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (4 * self.n) self.build(1, 0, self.n-1, arr) def build(self, node, start, end, arr): if start == end: self.tree[node] = arr[start] else: mid = (start + end) // 2 self.build(2*node, start, mid, arr) self.build(2*node+1, mid+1, end, arr) self.tree[node] = max(self.tree[2*node], self.tree[2*node+1]) def update(self, node, start, end, idx, val): if start == end: self.tree[node] = val else: mid = (start + end) // 2 if start <= idx <= mid: self.update(2*node, start, mid, idx, val) else: self.update(2*node+1, mid+1, end, idx, val) self.tree[node] = max(self.tree[2*node], self.tree[2*node+1]) def query(self, node, start, end, left, right): if right < start or end < left: return 0 if left <= start and end <= right: return self.tree[node] mid = (start + end) // 2 left_max = self.query(2*node, start, mid, left, right) right_max = self.query(2*node+1, mid+1, end, left, right) return max(left_max, right_max) def process_queries(N, A, B, Q, queries): seg_A = SegmentTree(A) seg_B = SegmentTree(B) results = [] for query in queries: if query[0] == 1: _, i, x = query seg_A.update(1, 0, N-1, i-1, x) elif query[0] == 2: _, i, x = query seg_B.update(1, 0, N-1, i-1, x) elif query[0] == 3: _, l, r = query v = 0 for i in range(l-1, r): v += seg_A.query(1, 0, N-1, i, i) v *= seg_B.query(1, 0, N-1, i, i) results.append(v) return results # Read input and process queries queries = [] for i in range(Q): parts = data[3*i+3:3*i+6] query_type = int(parts[0]) index = int(parts[1]) value = int(parts[2]) queries.append((query_type, index, value)) result = process_queries(N, A, B, Q, queries) for res in result: print(res)"}
{"task_id": "arc182_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n\n    # Array to store the minimum value for each k\n    min_values = [float('inf')] * M\n\n    # Iterate through all possible k values within one period\n    for k in range(M):\n        for ai in A:\n            rem = (C * k + ai) % M\n            min_values[k] = min(min_values[k], rem)\n\n    # Calculate the sum of the minimum values for K iterations\n    total_sum = 0\n    for k in range(K):\n        total_sum += min_values[k]\n\n    print(total_sum)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n\n    # Array to store the minimum value for each k\n    min_values = [float('inf')] * M\n\n    # Iterate through all possible k values within one period\n    for k in range(M):\n        for ai in A:\n            rem = (C * k + ai) % M\n            min_values[k] = min(min_values[k], rem)\n\n    # Calculate the sum of the minimum values for K iterations\n    total_sum = 0\n    for k in range(K):\n        total_sum += min_values[k]\n\n    print(total_sum)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "abc372_g", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef solve_case(N, A, B, C):\n    count = 0\n    for y in range(1, min(max(C), 10**9) + 1):\n        valid_x = True\n        for i in range(N):\n            if (C[i] - B[i] * y) <= 0:\n                valid_x = False\n                break\n            max_x = (C[i] - B[i] * y - 1) // A[i]\n            if max_x < 1:\n                valid_x = False\n                break\n        if valid_x:\n            count += max_x\n    return count\n\ndef main():\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = [int(data[index]) for _ in range(N)]\n        index += N\n        B = [int(data[index]) for _ in range(N)]\n        index += N\n        C = [int(data[index]) for _ in range(N)]\n        index += N\n        results.append(solve_case(N, A, B, C))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef solve_case(N, A, B, C):\n    count = 0\n    for y in range(1, min(max(C), 10**9) + 1):\n        valid_x = True\n        for i in range(N):\n            if (C[i] - B[i] * y) <= 0:\n                valid_x = False\n                break\n            max_x = (C[i] - B[i] * y - 1) // A[i]\n            if max_x < 1:\n                valid_x = False\n                break\n        if valid_x:\n            count += max_x\n    return count\n\ndef main():\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = [int(data[index]) for _ in range(N)]\n        index += N\n        B = [int(data[index]) for _ in range(N)]\n        index += N\n        C = [int(data[index]) for _ in range(N)]\n        index += N\n        results.append(solve_case(N, A, B, C))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "arc183_d", "code": "import sys\nfrom collections import defaultdict, deque\nimport heapq\n\ndef farthest_leaves(graph, root):\n    def bfs(start):\n        queue = deque([start])\n        visited = {start}\n        dist = {start: 0}\n        while queue:\n            current = queue.popleft()\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    dist[neighbor] = dist[current] + 1\n                    queue.append(neighbor)\n        return dist\n    \n    dist = bfs(root)\n    farthest = [(dist[node], node) for node in graph if len(graph[node]) == 1]\n    heapq.heapify(farthest)\n    return heapq.heappop(farthest), heapq.heappop(farthest)\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    edges = data[1:]\n    \n    graph = defaultdict(list)\n    for i in range(0, 2 * (N - 1), 2):\n        u = int(edges[i])\n        v = int(edges[i + 1])\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    result = []\n    for _ in range(N // 2):\n        farthest1, farthest2 = farthest_leaves(graph, 1)\n        result.append((farthest1[1], farthest2[1]))\n        graph[farthest1[1]] = []\n        graph[farthest2[1]] = []\n        for node in graph:\n            if farthest1[1] in graph[node]:\n                graph[node].remove(farthest1[1])\n            if farthest2[1] in graph[node]:\n                graph[node].remove(farthest2[1])\n    \n    for x, y in result:\n        print(f\"{x} {y}\")\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict, deque\nimport heapq\n\ndef farthest_leaves(graph, root):\n    def bfs(start):\n        queue = deque([start])\n        visited = {start}\n        dist = {start: 0}\n        while queue:\n            current = queue.popleft()\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    dist[neighbor] = dist[current] + 1\n                    queue.append(neighbor)\n        return dist\n    \n    dist = bfs(root)\n    farthest = [(dist[node], node) for node in graph if len(graph[node]) == 1]\n    heapq.heapify(farthest)\n    return heapq.heappop(farthest), heapq.heappop(farthest)\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    edges = data[1:]\n    \n    graph = defaultdict(list)\n    for i in range(0, 2 * (N - 1), 2):\n        u = int(edges[i])\n        v = int(edges[i + 1])\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    result = []\n    for _ in range(N // 2):\n        farthest1, farthest2 = farthest_leaves(graph, 1)\n        result.append((farthest1[1], farthest2[1]))\n        graph[farthest1[1]] = []\n        graph[farthest2[1]] = []\n        for node in graph:\n            if farthest1[1] in graph[node]:\n                graph[node].remove(farthest1[1])\n            if farthest2[1] in graph[node]:\n                graph[node].remove(farthest2[1])\n    \n    for x, y in result:\n        print(f\"{x} {y}\")\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc371_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    distinct_elements = set()\n    \n    for i in range(N):\n        distinct_count = 0\n        for j in range(i, N):\n            if A[j] not in distinct_elements:\n                distinct_elements.add(A[j])\n                distinct_count += 1\n            total_sum += distinct_count\n    \n    print(total_sum)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    distinct_elements = set()\n    \n    for i in range(N):\n        distinct_count = 0\n        for j in range(i, N):\n            if A[j] not in distinct_elements:\n                distinct_elements.add(A[j])\n                distinct_count += 1\n            total_sum += distinct_count\n    \n    print(total_sum)\n\nmain()\n```"}
{"task_id": "abc372_e", "code": "import heapq\nfrom typing import List\n\ndef process_queries(N: int, Q: int, queries: List[List[int]]) -> List[int]:\n    # Adjacency list to store the graph\n    adj_list = {i: set() for i in range(1, N + 1)}\n    \n    # Min-heap to store the connected vertices for each vertex\n    heap_dict = {i: [] for i in range(1, N + 1)}\n    \n    results = []\n    \n    for query in queries:\n        if query[0] == 1:\n            u, v = query[1], query[2]\n            adj_list[u].add(v)\n            adj_list[v].add(u)\n            \n            # Update the heap for both vertices\n            if len(heap_dict[u]) < 10:\n                heapq.heappush(heap_dict[u], v)\n            else:\n                heapq.heappushpop(heap_dict[u], v)\n            \n            if len(heap_dict[v]) < 10:\n                heapq.heappush(heap_dict[v], u)\n            else:\n                heapq.heappushpop(heap_dict[v], u)\n        \n        elif query[0] == 2:\n            v, k = query[1], query[2]\n            connected_vertices = list(heap_dict[v])\n            if len(connected_vertices) < k:\n                results.append(-1)\n            else:\n                # Sort the connected vertices to find the k-th largest\n                connected_vertices.sort(reverse=True)\n                results.append(connected_vertices[k-1])\n    \n    return results\n\n# Read input from standard input\nN, Q = map(int, input().split())\nqueries = [list(map(int, input().split())) for _ in range(Q)]\n\n# Process the queries and print the results\nresults = process_queries(N, Q, queries)\nfor result in results:\n    print(result)", "passed": false, "raw_code": "```python\nimport heapq\nfrom typing import List\n\ndef process_queries(N: int, Q: int, queries: List[List[int]]) -> List[int]:\n    # Adjacency list to store the graph\n    adj_list = {i: set() for i in range(1, N + 1)}\n    \n    # Min-heap to store the connected vertices for each vertex\n    heap_dict = {i: [] for i in range(1, N + 1)}\n    \n    results = []\n    \n    for query in queries:\n        if query[0] == 1:\n            u, v = query[1], query[2]\n            adj_list[u].add(v)\n            adj_list[v].add(u)\n            \n            # Update the heap for both vertices\n            if len(heap_dict[u]) < 10:\n                heapq.heappush(heap_dict[u], v)\n            else:\n                heapq.heappushpop(heap_dict[u], v)\n            \n            if len(heap_dict[v]) < 10:\n                heapq.heappush(heap_dict[v], u)\n            else:\n                heapq.heappushpop(heap_dict[v], u)\n        \n        elif query[0] == 2:\n            v, k = query[1], query[2]\n            connected_vertices = list(heap_dict[v])\n            if len(connected_vertices) < k:\n                results.append(-1)\n            else:\n                # Sort the connected vertices to find the k-th largest\n                connected_vertices.sort(reverse=True)\n                results.append(connected_vertices[k-1])\n    \n    return results\n\n# Read input from standard input\nN, Q = map(int, input().split())\nqueries = [list(map(int, input().split())) for _ in range(Q)]\n\n# Process the queries and print the results\nresults = process_queries(N, Q, queries)\nfor result in results:\n    print(result)\n```"}
{"task_id": "arc183_c", "code": "import sys\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_permutations(N: int, M: int, conditions: List[List[int]]) -> int:\n    def power(a: int, b: int) -> int:\n        result = 1\n        while b > 0:\n            if b % 2 == 1:\n                result = result * a % MOD\n            a = a * a % MOD\n            b //= 2\n        return result\n\n    def inverse(a: int) -> int:\n        return power(a, MOD - 2)\n\n    def choose(n: int, k: int) -> int:\n        if k > n:\n            return 0\n        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\n    fact = [1] * (N + 1)\n    inv_fact = [1] * (N + 1)\n    for i in range(1, N + 1):\n        fact[i] = fact[i - 1] * i % MOD\n        inv_fact[i] = inverse(fact[i])\n\n    def count_invalid_permutations() -> int:\n        invalid = 0\n        for i in range(1 << M):\n            sign = (-1) ** bin(i).count('1')\n            contribution = choose(N, M)\n            for j in range(M):\n                if i & (1 << j):\n                    l, r, x = conditions[j]\n                    contribution *= choose(r - l + 1, x - l + 1)\n                    contribution %= MOD\n            invalid += sign * contribution\n            invalid %= MOD\n        return invalid\n\n    total_permutations = power(N, N)\n    invalid_permutations = count_invalid_permutations()\n    valid_permutations = (total_permutations - invalid_permutations + MOD) % MOD\n    return valid_permutations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    conditions = []\n    for i in range(M):\n        l = int(data[2 + i * 3]) - 1\n        r = int(data[3 + i * 3]) - 1\n        x = int(data[4 + i * 3]) - 1\n        conditions.append([l, r, x])\n    result = count_valid_permutations(N, M, conditions)\n    print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_permutations(N: int, M: int, conditions: List[List[int]]) -> int:\n    def power(a: int, b: int) -> int:\n        result = 1\n        while b > 0:\n            if b % 2 == 1:\n                result = result * a % MOD\n            a = a * a % MOD\n            b //= 2\n        return result\n\n    def inverse(a: int) -> int:\n        return power(a, MOD - 2)\n\n    def choose(n: int, k: int) -> int:\n        if k > n:\n            return 0\n        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n\n    fact = [1] * (N + 1)\n    inv_fact = [1] * (N + 1)\n    for i in range(1, N + 1):\n        fact[i] = fact[i - 1] * i % MOD\n        inv_fact[i] = inverse(fact[i])\n\n    def count_invalid_permutations() -> int:\n        invalid = 0\n        for i in range(1 << M):\n            sign = (-1) ** bin(i).count('1')\n            contribution = choose(N, M)\n            for j in range(M):\n                if i & (1 << j):\n                    l, r, x = conditions[j]\n                    contribution *= choose(r - l + 1, x - l + 1)\n                    contribution %= MOD\n            invalid += sign * contribution\n            invalid %= MOD\n        return invalid\n\n    total_permutations = power(N, N)\n    invalid_permutations = count_invalid_permutations()\n    valid_permutations = (total_permutations - invalid_permutations + MOD) % MOD\n    return valid_permutations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    conditions = []\n    for i in range(M):\n        l = int(data[2 + i * 3]) - 1\n        r = int(data[3 + i * 3]) - 1\n        x = int(data[4 + i * 3]) - 1\n        conditions.append([l, r, x])\n    result = count_valid_permutations(N, M, conditions)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n```"}
{"task_id": "3552", "code": "def largest_k_palindrome(n, k):\n    def is_divisible_by_k(num_str):\n        return int(num_str) % k == 0\n    \n    def construct_largest_palindrome(digits):\n        half = '9' * (digits // 2)\n        if digits % 2 == 0:\n            return half + half[::-1]\n        else:\n            return half[:-1] + str(int(half[-1]) - 1) + half[::-1]\n    \n    max_num = 10**n - 1\n    while True:\n        num_str = str(max_num)\n        if num_str == num_str[::-1] and is_divisible_by_k(num_str):\n            return num_str\n        max_num -= 1\n\n# Example usage:\nprint(largest_k_palindrome(3, 5))  # Output: \"595\"\nprint(largest_k_palindrome(1, 4))  # Output: \"8\"\nprint(largest_k_palindrome(5, 6))  # Output: \"89898\"", "passed": false, "raw_code": "```python\ndef largest_k_palindrome(n, k):\n    def is_divisible_by_k(num_str):\n        return int(num_str) % k == 0\n    \n    def construct_largest_palindrome(digits):\n        half = '9' * (digits // 2)\n        if digits % 2 == 0:\n            return half + half[::-1]\n        else:\n            return half[:-1] + str(int(half[-1]) - 1) + half[::-1]\n    \n    max_num = 10**n - 1\n    while True:\n        num_str = str(max_num)\n        if num_str == num_str[::-1] and is_divisible_by_k(num_str):\n            return num_str\n        max_num -= 1\n\n# Example usage:\nprint(largest_k_palindrome(3, 5))  # Output: \"595\"\nprint(largest_k_palindrome(1, 4))  # Output: \"8\"\nprint(largest_k_palindrome(5, 6))  # Output: \"89898\"\n```"}
{"task_id": "abc373_e", "code": "def min_additional_votes(N, M, K, A):\n    total_votes = sum(A)\n    remaining_votes = K - total_votes\n    candidates = sorted((A[i], i) for i in range(N))\n    results = [-1] * N\n    \n    for i in range(N):\n        if A[i] >= remaining_votes:\n            results[i] = 0\n            continue\n        \n        max_winning_votes = float('-inf')\n        for j in range(i + 1, N):\n            if A[j] + remaining_votes - A[i] > max_winning_votes:\n                max_winning_votes = A[j] + remaining_votes - A[i]\n        \n        if A[i] + remaining_votes > max_winning_votes:\n            results[i] = 0\n        else:\n            for x in range(remaining_votes + 1):\n                if A[i] + x > max_winning_votes:\n                    results[i] = x\n                    break\n    \n    return ' '.join(map(str, results))\n\n# Example usage\nprint(min_additional_votes(5, 2, 16, [3, 1, 4, 1, 5]))  # Output: 2 -1 1 -1 0\nprint(min_additional_votes(12, 1, 570, [81, 62, 17, 5, 5, 86, 15, 7, 79, 26, 6, 28]))  # Output: 79 89 111 117 117 74 112 116 80 107 117 106", "passed": false, "raw_code": "```python\ndef min_additional_votes(N, M, K, A):\n    total_votes = sum(A)\n    remaining_votes = K - total_votes\n    candidates = sorted((A[i], i) for i in range(N))\n    results = [-1] * N\n    \n    for i in range(N):\n        if A[i] >= remaining_votes:\n            results[i] = 0\n            continue\n        \n        max_winning_votes = float('-inf')\n        for j in range(i + 1, N):\n            if A[j] + remaining_votes - A[i] > max_winning_votes:\n                max_winning_votes = A[j] + remaining_votes - A[i]\n        \n        if A[i] + remaining_votes > max_winning_votes:\n            results[i] = 0\n        else:\n            for x in range(remaining_votes + 1):\n                if A[i] + x > max_winning_votes:\n                    results[i] = x\n                    break\n    \n    return ' '.join(map(str, results))\n\n# Example usage\nprint(min_additional_votes(5, 2, 16, [3, 1, 4, 1, 5]))  # Output: 2 -1 1 -1 0\nprint(min_additional_votes(12, 1, 570, [81, 62, 17, 5, 5, 86, 15, 7, 79, 26, 6, 28]))  # Output: 79 89 111 117 117 74 112 116 80 107 117 106\n```"}
{"task_id": "arc182_a", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    operations = []\n    idx = 2\n    for _ in range(Q):\n        P = int(data[idx])\n        V = int(data[idx + 1])\n        operations.append((P, V))\n        idx += 2\n    \n    MOD = 998244353\n    \n    # DP table: dp[i][j] -> number of ways to reach state (i, j)\n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, Q + 1):\n        P, V = operations[i - 1]\n        for j in range(N + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n                dp[i][j] %= MOD\n            if j < N:\n                dp[i][j + 1] += dp[i - 1][j]\n                dp[i][j + 1] %= MOD\n    \n    result = sum(dp[Q][j] for j in range(N + 1)) % MOD\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    operations = []\n    idx = 2\n    for _ in range(Q):\n        P = int(data[idx])\n        V = int(data[idx + 1])\n        operations.append((P, V))\n        idx += 2\n    \n    MOD = 998244353\n    \n    # DP table: dp[i][j] -> number of ways to reach state (i, j)\n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, Q + 1):\n        P, V = operations[i - 1]\n        for j in range(N + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n                dp[i][j] %= MOD\n            if j < N:\n                dp[i][j + 1] += dp[i - 1][j]\n                dp[i][j + 1] %= MOD\n    \n    result = sum(dp[Q][j] for j in range(N + 1)) % MOD\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3563", "code": "def maxScore(grid):\n    def backtrack(row, cols_used):\n        if row == len(grid):\n            return 0\n        \n        max_score = 0\n        for col in range(len(grid[row])):\n            if col not in cols_used and grid[row][col] not in values_in_rows[row]:\n                cols_used.add(col)\n                values_in_rows[row].add(grid[row][col])\n                max_score = max(max_score, grid[row][col] + backtrack(row + 1, cols_used))\n                values_in_rows[row].remove(grid[row][col])\n                cols_used.remove(col)\n        \n        return max_score\n    \n    values_in_rows = [set() for _ in range(len(grid))]\n    return backtrack(0, set())", "passed": false, "raw_code": "```python\ndef maxScore(grid):\n    def backtrack(row, cols_used):\n        if row == len(grid):\n            return 0\n        \n        max_score = 0\n        for col in range(len(grid[row])):\n            if col not in cols_used and grid[row][col] not in values_in_rows[row]:\n                cols_used.add(col)\n                values_in_rows[row].add(grid[row][col])\n                max_score = max(max_score, grid[row][col] + backtrack(row + 1, cols_used))\n                values_in_rows[row].remove(grid[row][col])\n                cols_used.remove(col)\n        \n        return max_score\n    \n    values_in_rows = [set() for _ in range(len(grid))]\n    return backtrack(0, set())\n\n```"}
{"task_id": "3550", "code": "def max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    \n    # List to store the (value, row, col) of non-zero cells\n    non_zero_cells = [(board[i][j], i, j) for i in range(m) for j in range(n) if board[i][j] != 0]\n    \n    # Sort non-zero cells by value in descending order\n    non_zero_cells.sort(reverse=True)\n    \n    # Set to keep track of selected rows and columns\n    selected_rows = set()\n    selected_cols = set()\n    \n    # List to store the selected cells\n    selected_cells = []\n    \n    # Select the top three non-zero cells that do not share the same row or column\n    for value, row, col in non_zero_cells:\n        if row not in selected_rows and col not in selected_cols:\n            selected_rows.add(row)\n            selected_cols.add(col)\n            selected_cells.append((value, row, col))\n        if len(selected_cells) == 3:\n            break\n    \n    # Calculate the maximum sum of the cell values where the rooks are placed\n    max_sum = sum(value for value, row, col in selected_cells)\n    \n    return max_sum", "passed": false, "raw_code": "```python\ndef max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    \n    # List to store the (value, row, col) of non-zero cells\n    non_zero_cells = [(board[i][j], i, j) for i in range(m) for j in range(n) if board[i][j] != 0]\n    \n    # Sort non-zero cells by value in descending order\n    non_zero_cells.sort(reverse=True)\n    \n    # Set to keep track of selected rows and columns\n    selected_rows = set()\n    selected_cols = set()\n    \n    # List to store the selected cells\n    selected_cells = []\n    \n    # Select the top three non-zero cells that do not share the same row or column\n    for value, row, col in non_zero_cells:\n        if row not in selected_rows and col not in selected_cols:\n            selected_rows.add(row)\n            selected_cols.add(col)\n            selected_cells.append((value, row, col))\n        if len(selected_cells) == 3:\n            break\n    \n    # Calculate the maximum sum of the cell values where the rooks are placed\n    max_sum = sum(value for value, row, col in selected_cells)\n    \n    return max_sum\n```"}
{"task_id": "3531", "code": "def min_damage(power, damage, health):\n    # Sort enemies by health in descending order\n    enemies = sorted(zip(damage, health), key=lambda x: -x[1])\n    total_damage = 0\n    \n    while enemies:\n        d, h = enemies.pop(0)\n        # Calculate the number of seconds needed to defeat the enemy\n        seconds_to_defeat = (h - 1) // power + 1\n        # Add the damage taken during these seconds to the total\n        total_damage += d * seconds_to_defeat\n        \n        # Update the health of the enemy after the attack\n        h -= power * seconds_to_defeat\n        if h > 0:\n            enemies.append((d, h))\n    \n    return total_damage", "passed": false, "raw_code": "```python\ndef min_damage(power, damage, health):\n    # Sort enemies by health in descending order\n    enemies = sorted(zip(damage, health), key=lambda x: -x[1])\n    total_damage = 0\n    \n    while enemies:\n        d, h = enemies.pop(0)\n        # Calculate the number of seconds needed to defeat the enemy\n        seconds_to_defeat = (h - 1) // power + 1\n        # Add the damage taken during these seconds to the total\n        total_damage += d * seconds_to_defeat\n        \n        # Update the health of the enemy after the attack\n        h -= power * seconds_to_defeat\n        if h > 0:\n            enemies.append((d, h))\n    \n    return total_damage\n```"}
{"task_id": "abc372_f", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    K = int(data[index + 2])\n    index += 3\n    \n    edges = []\n    for _ in range(M):\n        X = int(data[index]) - 1\n        Y = int(data[index + 1]) - 1\n        edges.append((X, Y))\n        index += 2\n    \n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * N for _ in range(K + 1)]\n    dp[0][0] = 1  # Starting point\n    \n    # Fill dp array\n    for k in range(1, K + 1):\n        new_dp = [0] * N\n        for j in range(N):\n            if j == 0:\n                new_dp[j] = dp[k-1][N-1]\n            else:\n                new_dp[j] = dp[k-1][j-1]\n            for x, y in edges:\n                if y == j:\n                    new_dp[j] = (new_dp[j] + dp[k-1][x]) % MOD\n        dp[k] = new_dp\n    \n    # Sum up the number of ways to end at any vertex after K moves\n    result = sum(dp[K]) % MOD\n    print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    K = int(data[index + 2])\n    index += 3\n    \n    edges = []\n    for _ in range(M):\n        X = int(data[index]) - 1\n        Y = int(data[index + 1]) - 1\n        edges.append((X, Y))\n        index += 2\n    \n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * N for _ in range(K + 1)]\n    dp[0][0] = 1  # Starting point\n    \n    # Fill dp array\n    for k in range(1, K + 1):\n        new_dp = [0] * N\n        for j in range(N):\n            if j == 0:\n                new_dp[j] = dp[k-1][N-1]\n            else:\n                new_dp[j] = dp[k-1][j-1]\n            for x, y in edges:\n                if y == j:\n                    new_dp[j] = (new_dp[j] + dp[k-1][x]) % MOD\n        dp[k] = new_dp\n    \n    # Sum up the number of ways to end at any vertex after K moves\n    result = sum(dp[K]) % MOD\n    print(result)\n\nmain()\n```"}
{"task_id": "arc183_b", "code": "from collections import defaultdict, deque\n\ndef can_transform(A, B, K):\n    n = len(A)\n    count_A = defaultdict(int)\n    count_B = defaultdict(int)\n    \n    for i in range(n):\n        count_A[A[i]] += 1\n        count_B[B[i]] += 1\n    \n    if count_A != count_B:\n        return \"No\"\n    \n    queue = deque()\n    for i in range(n):\n        if A[i] != B[i]:\n            queue.append(i)\n    \n    while queue:\n        if len(queue) > 2 * K + 1:\n            return \"No\"\n        \n        i = queue.popleft()\n        j = i + 1\n        while j <= min(n - 1, i + 2 * K) and A[j] != B[i]:\n            j += 1\n        \n        if j > n - 1:\n            return \"No\"\n        \n        A[i], A[j] = A[j], A[i]\n        queue.remove(j)\n    \n    return \"Yes\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        \n        A = list(map(int, data[index:index + N]))\n        B = list(map(int, data[index + N:index + 2 * N]))\n        index += 2 * N\n        \n        result = can_transform(A, B, K)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nfrom collections import defaultdict, deque\n\ndef can_transform(A, B, K):\n    n = len(A)\n    count_A = defaultdict(int)\n    count_B = defaultdict(int)\n    \n    for i in range(n):\n        count_A[A[i]] += 1\n        count_B[B[i]] += 1\n    \n    if count_A != count_B:\n        return \"No\"\n    \n    queue = deque()\n    for i in range(n):\n        if A[i] != B[i]:\n            queue.append(i)\n    \n    while queue:\n        if len(queue) > 2 * K + 1:\n            return \"No\"\n        \n        i = queue.popleft()\n        j = i + 1\n        while j <= min(n - 1, i + 2 * K) and A[j] != B[i]:\n            j += 1\n        \n        if j > n - 1:\n            return \"No\"\n        \n        A[i], A[j] = A[j], A[i]\n        queue.remove(j)\n    \n    return \"Yes\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        \n        A = list(map(int, data[index:index + N]))\n        B = list(map(int, data[index + N:index + 2 * N]))\n        index += 2 * N\n        \n        result = can_transform(A, B, K)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "arc182_d", "code": "def min_operations_to_equalize_sequences(N, M, A, B):\n    total_operations = 0\n    for i in range(N):\n        diff = abs(A[i] - B[i])\n        # Calculate the minimum operations needed to change A[i] to B[i]\n        # Considering both directions (clockwise and counterclockwise)\n        clockwise_ops = min(diff, M - diff)\n        counterclockwise_ops = M - clockwise_ops\n        \n        # Determine the direction to move\n        if diff <= M - diff:\n            direction = clockwise_ops\n        else:\n            direction = counterclockwise_ops\n        \n        # Check if the operation is valid\n        if direction == 1:\n            if (i + 1 < N and (A[(i + 1) % N] == A[i] - 1 or A[(i + 1) % N] == A[i] + 1)):\n                return -1\n            if (i - 1 >= 0 and (A[(i - 1) % N] == A[i] - 1 or A[(i - 1) % N] == A[i] + 1)):\n                return -1\n        elif direction == M - 1:\n            if (i + 1 < N and (A[(i + 1) % N] == A[i] - 2 or A[(i + 1) % N] == A[i] + 2)):\n                return -1\n            if (i - 1 >= 0 and (A[(i - 1) % N] == A[i] - 2 or A[(i - 1) % N] == A[i] + 2)):\n                return -1\n        \n        total_operations += direction\n    \n    return total_operations\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:]))\n\n# Print the result\nprint(min_operations_to_equalize_sequences(N, M, A, B))", "passed": false, "raw_code": "```python\ndef min_operations_to_equalize_sequences(N, M, A, B):\n    total_operations = 0\n    for i in range(N):\n        diff = abs(A[i] - B[i])\n        # Calculate the minimum operations needed to change A[i] to B[i]\n        # Considering both directions (clockwise and counterclockwise)\n        clockwise_ops = min(diff, M - diff)\n        counterclockwise_ops = M - clockwise_ops\n        \n        # Determine the direction to move\n        if diff <= M - diff:\n            direction = clockwise_ops\n        else:\n            direction = counterclockwise_ops\n        \n        # Check if the operation is valid\n        if direction == 1:\n            if (i + 1 < N and (A[(i + 1) % N] == A[i] - 1 or A[(i + 1) % N] == A[i] + 1)):\n                return -1\n            if (i - 1 >= 0 and (A[(i - 1) % N] == A[i] - 1 or A[(i - 1) % N] == A[i] + 1)):\n                return -1\n        elif direction == M - 1:\n            if (i + 1 < N and (A[(i + 1) % N] == A[i] - 2 or A[(i + 1) % N] == A[i] + 2)):\n                return -1\n            if (i - 1 >= 0 and (A[(i - 1) % N] == A[i] - 2 or A[(i - 1) % N] == A[i] + 2)):\n                return -1\n        \n        total_operations += direction\n    \n    return total_operations\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:]))\n\n# Print the result\nprint(min_operations_to_equalize_sequences(N, M, A, B))\n```"}
{"task_id": "abc373_g", "code": "def read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    points_P = []\n    points_Q = []\n    \n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        points_P.append((A, B))\n        index += 2\n    \n    for _ in range(N):\n        C = int(data[index])\n        D = int(data[index + 1])\n        points_Q.append((C, D))\n        index += 2\n    \n    return N, points_P, points_Q\n\ndef orientation(p, q, r):\n    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n    if val == 0:\n        return 0\n    elif val > 0:\n        return 1\n    else:\n        return 2\n\ndef is_intersect(p1, q1, p2, q2):\n    o1 = orientation(p1, q1, p2)\n    o2 = orientation(p1, q1, q2)\n    o3 = orientation(p2, q2, p1)\n    o4 = orientation(p2, q2, q1)\n    \n    if o1 != o2 and o3 != o4:\n        return True\n    return False\n\ndef find_permutation(N, points_P, points_Q):\n    points_P.sort(key=lambda x: x[0])\n    points_Q.sort(key=lambda x: x[0])\n    \n    visited = [False] * N\n    R = [-1] * N\n    \n    def dfs(i, path):\n        if i == N:\n            for j in range(N):\n                R[path[j]] = j + 1\n            return True\n        \n        for j in range(N):\n            if not visited[j]:\n                q_index = path[-1] if path else 0\n                if not is_intersect(points_P[q_index], points_Q[path[-1]], points_P[i], points_Q[j]):\n                    visited[j] = True\n                    path.append(j)\n                    if dfs(i + 1, path):\n                        return True\n                    path.pop()\n                    visited[j] = False\n        \n        return False\n    \n    if dfs(0, []):\n        return ' '.join(map(str, R))\n    else:\n        return '-1'\n\ndef main():\n    N, points_P, points_Q = read_input()\n    result = find_permutation(N, points_P, points_Q)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    points_P = []\n    points_Q = []\n    \n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        points_P.append((A, B))\n        index += 2\n    \n    for _ in range(N):\n        C = int(data[index])\n        D = int(data[index + 1])\n        points_Q.append((C, D))\n        index += 2\n    \n    return N, points_P, points_Q\n\ndef orientation(p, q, r):\n    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n    if val == 0:\n        return 0\n    elif val > 0:\n        return 1\n    else:\n        return 2\n\ndef is_intersect(p1, q1, p2, q2):\n    o1 = orientation(p1, q1, p2)\n    o2 = orientation(p1, q1, q2)\n    o3 = orientation(p2, q2, p1)\n    o4 = orientation(p2, q2, q1)\n    \n    if o1 != o2 and o3 != o4:\n        return True\n    return False\n\ndef find_permutation(N, points_P, points_Q):\n    points_P.sort(key=lambda x: x[0])\n    points_Q.sort(key=lambda x: x[0])\n    \n    visited = [False] * N\n    R = [-1] * N\n    \n    def dfs(i, path):\n        if i == N:\n            for j in range(N):\n                R[path[j]] = j + 1\n            return True\n        \n        for j in range(N):\n            if not visited[j]:\n                q_index = path[-1] if path else 0\n                if not is_intersect(points_P[q_index], points_Q[path[-1]], points_P[i], points_Q[j]):\n                    visited[j] = True\n                    path.append(j)\n                    if dfs(i + 1, path):\n                        return True\n                    path.pop()\n                    visited[j] = False\n        \n        return False\n    \n    if dfs(0, []):\n        return ' '.join(map(str, R))\n    else:\n        return '-1'\n\ndef main():\n    N, points_P, points_Q = read_input()\n    result = find_permutation(N, points_P, points_Q)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3548", "code": "def count_good_integers(n, k):\n    from functools import lru_cache\n\n    @lru_cache(None)\n    def dp(length, sum_mod_k, is_odd):\n        if length == 0:\n            return 1 if sum_mod_k == 0 else 0\n        \n        count = 0\n        for digit in range(1, 10):\n            if is_odd:\n                count += dp(length - 1, (sum_mod_k - digit) % k, False)\n            else:\n                count += dp(length - 1, (sum_mod_k - digit) % k, True)\n                count += dp(length - 1, (sum_mod_k + digit) % k, False)\n        \n        return count\n    \n    return dp(n, 0, False)", "passed": false, "raw_code": "```python\ndef count_good_integers(n, k):\n    from functools import lru_cache\n\n    @lru_cache(None)\n    def dp(length, sum_mod_k, is_odd):\n        if length == 0:\n            return 1 if sum_mod_k == 0 else 0\n        \n        count = 0\n        for digit in range(1, 10):\n            if is_odd:\n                count += dp(length - 1, (sum_mod_k - digit) % k, False)\n            else:\n                count += dp(length - 1, (sum_mod_k - digit) % k, True)\n                count += dp(length - 1, (sum_mod_k + digit) % k, False)\n        \n        return count\n    \n    return dp(n, 0, False)\n```"}
{"task_id": "arc182_c", "code": "def sum_of_divisors(n, MOD=998244353):\n    if n == 1:\n        return 1\n    result = 1\n    factor = 2\n    while factor * factor <= n:\n        count = 0\n        while n % factor == 0:\n            n //= factor\n            count += 1\n        result = (result * (count + 1)) % MOD\n        factor += 1\n    if n > 1:\n        result = (result * 2) % MOD\n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n    \n    # Prime factorization of numbers from 1 to M\n    prime_factors = [[] for _ in range(M + 1)]\n    for i in range(2, M + 1):\n        current = i\n        factor = 2\n        while factor * factor <= i:\n            count = 0\n            while current % factor == 0:\n                current //= factor\n                count += 1\n            prime_factors[i].append((factor, count))\n            factor += 1\n        if current > 1:\n            prime_factors[i].append((current, 1))\n    \n    # DP table to store the count of sequences with specific prime factors\n    dp = [[0] * 20 for _ in range(M + 1)]\n    dp[1][0] = 1\n    \n    for _ in range(N):\n        new_dp = [[0] * 20 for _ in range(M + 1)]\n        for num in range(1, M + 1):\n            for prime, exp in prime_factors[num]:\n                for p in range(20):\n                    if p + exp < 20:\n                        new_dp[min(num * prime, M)][p + exp] += dp[num][p]\n                        new_dp[min(num * prime, M)][p + exp] %= MOD\n        dp = new_dp\n    \n    total_score = sum(sum(row) for row in dp) % MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef sum_of_divisors(n, MOD=998244353):\n    if n == 1:\n        return 1\n    result = 1\n    factor = 2\n    while factor * factor <= n:\n        count = 0\n        while n % factor == 0:\n            n //= factor\n            count += 1\n        result = (result * (count + 1)) % MOD\n        factor += 1\n    if n > 1:\n        result = (result * 2) % MOD\n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n    \n    # Prime factorization of numbers from 1 to M\n    prime_factors = [[] for _ in range(M + 1)]\n    for i in range(2, M + 1):\n        current = i\n        factor = 2\n        while factor * factor <= i:\n            count = 0\n            while current % factor == 0:\n                current //= factor\n                count += 1\n            prime_factors[i].append((factor, count))\n            factor += 1\n        if current > 1:\n            prime_factors[i].append((current, 1))\n    \n    # DP table to store the count of sequences with specific prime factors\n    dp = [[0] * 20 for _ in range(M + 1)]\n    dp[1][0] = 1\n    \n    for _ in range(N):\n        new_dp = [[0] * 20 for _ in range(M + 1)]\n        for num in range(1, M + 1):\n            for prime, exp in prime_factors[num]:\n                for p in range(20):\n                    if p + exp < 20:\n                        new_dp[min(num * prime, M)][p + exp] += dp[num][p]\n                        new_dp[min(num * prime, M)][p + exp] %= MOD\n        dp = new_dp\n    \n    total_score = sum(sum(row) for row in dp) % MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "arc181_b", "code": "def f(S, T, X):\n    result = []\n    for bit in X:\n        if bit == '0':\n            result.append(S)\n        else:\n            result.append(T)\n    return ''.join(result)\n\ndef check_frequencies(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    freq1 = {}\n    freq2 = {}\n    for char in s1:\n        if char in freq1:\n            freq1[char] += 1\n        else:\n            freq1[char] = 1\n    for char in s2:\n        if char in freq2:\n            freq2[char] += 1\n        else:\n            freq2[char] = 1\n    return freq1 == freq2\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        len_X = len(X)\n        len_Y = len(Y)\n        \n        count_S_X = X.count('0')\n        count_T_X = len_X - count_S_X\n        \n        count_S_Y = Y.count('0')\n        count_T_Y = len_Y - count_S_Y\n        \n        if count_S_X + count_T_X != count_S_Y + count_T_Y:\n            results.append(\"No\")\n            continue\n        \n        # Construct the substrings for comparison\n        sub_X = S * count_S_X + T * count_T_X\n        sub_Y = S * count_S_Y + T * count_T_Y\n        \n        if sub_X == sub_Y:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n        \n        index += 3\n    \n    for result in results:\n        print(result)\n\nsolve()", "passed": false, "raw_code": "```python\ndef f(S, T, X):\n    result = []\n    for bit in X:\n        if bit == '0':\n            result.append(S)\n        else:\n            result.append(T)\n    return ''.join(result)\n\ndef check_frequencies(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    freq1 = {}\n    freq2 = {}\n    for char in s1:\n        if char in freq1:\n            freq1[char] += 1\n        else:\n            freq1[char] = 1\n    for char in s2:\n        if char in freq2:\n            freq2[char] += 1\n        else:\n            freq2[char] = 1\n    return freq1 == freq2\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        len_X = len(X)\n        len_Y = len(Y)\n        \n        count_S_X = X.count('0')\n        count_T_X = len_X - count_S_X\n        \n        count_S_Y = Y.count('0')\n        count_T_Y = len_Y - count_S_Y\n        \n        if count_S_X + count_T_X != count_S_Y + count_T_Y:\n            results.append(\"No\")\n            continue\n        \n        # Construct the substrings for comparison\n        sub_X = S * count_S_X + T * count_T_X\n        sub_Y = S * count_S_Y + T * count_T_Y\n        \n        if sub_X == sub_Y:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n        \n        index += 3\n    \n    for result in results:\n        print(result)\n\nsolve()\n```"}
{"task_id": "3575", "code": "def max_value(nums, k):\n    n = len(nums)\n    if n == 0 or k == 0:\n        return 0\n    \n    # Prefix OR array\n    prefix_or = [0] * (n + 1)\n    for i in range(n):\n        prefix_or[i + 1] = prefix_or[i] | nums[i]\n    \n    max_val = 0\n    for i in range(k, n - k + 1):\n        left_or = prefix_or[i] ^ prefix_or[k]\n        right_or = prefix_or[n] ^ prefix_or[i + k]\n        max_val = max(max_val, left_or ^ right_or)\n    \n    return max_val", "passed": false, "raw_code": "```python\ndef max_value(nums, k):\n    n = len(nums)\n    if n == 0 or k == 0:\n        return 0\n    \n    # Prefix OR array\n    prefix_or = [0] * (n + 1)\n    for i in range(n):\n        prefix_or[i + 1] = prefix_or[i] | nums[i]\n    \n    max_val = 0\n    for i in range(k, n - k + 1):\n        left_or = prefix_or[i] ^ prefix_or[k]\n        right_or = prefix_or[n] ^ prefix_or[i + k]\n        max_val = max(max_val, left_or ^ right_or)\n    \n    return max_val\n```"}
{"task_id": "arc181_c", "code": "def generate_grid(N, P, Q):\n    # Generate all binary strings of length N\n    binaries = [''.join(format(i, f'0{N}b')) for i in range(2**N)]\n    \n    # Create an empty grid\n    grid = [['0'] * N for _ in range(N)]\n    \n    # Fill the grid row by row\n    for i in range(N):\n        row = binaries[P[i]-1]\n        for j in range(N):\n            grid[i][j] = row[j]\n    \n    # Ensure each column is sorted according to Q\n    for j in range(N):\n        col = [grid[i][j] for i in range(N)]\n        sorted_col = sorted(col)\n        for i in range(N):\n            grid[i][j] = sorted_col[Q.index(j+1)]\n    \n    # Print the final grid\n    for row in grid:\n        print(''.join(row))\n\n# Example usage\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\ngenerate_grid(N, P, Q)", "passed": false, "raw_code": "```python\ndef generate_grid(N, P, Q):\n    # Generate all binary strings of length N\n    binaries = [''.join(format(i, f'0{N}b')) for i in range(2**N)]\n    \n    # Create an empty grid\n    grid = [['0'] * N for _ in range(N)]\n    \n    # Fill the grid row by row\n    for i in range(N):\n        row = binaries[P[i]-1]\n        for j in range(N):\n            grid[i][j] = row[j]\n    \n    # Ensure each column is sorted according to Q\n    for j in range(N):\n        col = [grid[i][j] for i in range(N)]\n        sorted_col = sorted(col)\n        for i in range(N):\n            grid[i][j] = sorted_col[Q.index(j+1)]\n    \n    # Print the final grid\n    for row in grid:\n        print(''.join(row))\n\n# Example usage\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\ngenerate_grid(N, P, Q)\n```"}
{"task_id": "3560", "code": "def min_moves(kx, ky, px, py):\n    moves = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    while queue:\n        cx, cy, d = queue.pop(0)\n        if (cx, cy) == (px, py):\n            return d\n        for dx, dy in moves:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, d + 1))\n    return float('inf')\n\ndef max_moves(kx, ky, positions, memo):\n    if not positions:\n        return 0\n    \n    pos_tuple = tuple(sorted(positions))\n    if (kx, ky, pos_tuple) in memo:\n        return memo[(kx, ky, pos_tuple)]\n    \n    max_moves_alice = 0\n    for i, (px, py) in enumerate(positions):\n        moves_to_capture = min_moves(kx, ky, px, py)\n        remaining_positions = positions[:i] + positions[i+1:]\n        max_moves_bob = max_moves(px, py, remaining_positions, memo)\n        total_moves = moves_to_capture + max_moves_bob\n        max_moves_alice = max(max_moves_alice, total_moves)\n    \n    memo[(kx, ky, pos_tuple)] = max_moves_alice\n    return max_moves_alice\n\ndef knight_pawn_game(kx, ky, positions):\n    memo = {}\n    return max_moves(kx, ky, positions, memo)", "passed": false, "raw_code": "```python\ndef min_moves(kx, ky, px, py):\n    moves = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    while queue:\n        cx, cy, d = queue.pop(0)\n        if (cx, cy) == (px, py):\n            return d\n        for dx, dy in moves:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, d + 1))\n    return float('inf')\n\ndef max_moves(kx, ky, positions, memo):\n    if not positions:\n        return 0\n    \n    pos_tuple = tuple(sorted(positions))\n    if (kx, ky, pos_tuple) in memo:\n        return memo[(kx, ky, pos_tuple)]\n    \n    max_moves_alice = 0\n    for i, (px, py) in enumerate(positions):\n        moves_to_capture = min_moves(kx, ky, px, py)\n        remaining_positions = positions[:i] + positions[i+1:]\n        max_moves_bob = max_moves(px, py, remaining_positions, memo)\n        total_moves = moves_to_capture + max_moves_bob\n        max_moves_alice = max(max_moves_alice, total_moves)\n    \n    memo[(kx, ky, pos_tuple)] = max_moves_alice\n    return max_moves_alice\n\ndef knight_pawn_game(kx, ky, positions):\n    memo = {}\n    return max_moves(kx, ky, positions, memo)\n```"}
{"task_id": "3580", "code": "def findAlmostEqualSubstring(s, pattern):\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    \n    return -1", "passed": true, "raw_code": "```python\ndef findAlmostEqualSubstring(s, pattern):\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    \n    return -1\n```"}
{"task_id": "3551", "code": "class TrieNode:\n    def __init__(self):\n        self.children = [None, None]\n\ndef xor(a, b):\n    return a ^ b\n\ndef insert(trie, num):\n    node = trie\n    for i in range(31, -1, -1):\n        bit = (num >> i) & 1\n        if not node.children[bit]:\n            node.children[bit] = TrieNode()\n        node = node.children[bit]\n\ndef query(trie, num):\n    max_xor = 0\n    node = trie\n    for i in range(31, -1, -1):\n        bit = (num >> i) & 1\n        opposite_bit = 1 - bit\n        if node.children[opposite_bit]:\n            max_xor |= (1 << i)\n            node = node.children[opposite_bit]\n        else:\n            node = node.children[bit]\n    return max_xor\n\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    trie = TrieNode()\n    prefix_xor = [0] * (n + 1)\n    \n    # Calculate prefix XORs\n    for i in range(n):\n        prefix_xor[i + 1] = xor(prefix_xor[i], nums[i])\n        insert(trie, prefix_xor[i + 1])\n    \n    result = []\n    for l, r in queries:\n        max_xor_val = query(trie, xor(prefix_xor[r + 1], prefix_xor[l]))\n        result.append(max_xor_val)\n    \n    return result", "passed": false, "raw_code": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = [None, None]\n\ndef xor(a, b):\n    return a ^ b\n\ndef insert(trie, num):\n    node = trie\n    for i in range(31, -1, -1):\n        bit = (num >> i) & 1\n        if not node.children[bit]:\n            node.children[bit] = TrieNode()\n        node = node.children[bit]\n\ndef query(trie, num):\n    max_xor = 0\n    node = trie\n    for i in range(31, -1, -1):\n        bit = (num >> i) & 1\n        opposite_bit = 1 - bit\n        if node.children[opposite_bit]:\n            max_xor |= (1 << i)\n            node = node.children[opposite_bit]\n        else:\n            node = node.children[bit]\n    return max_xor\n\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    trie = TrieNode()\n    prefix_xor = [0] * (n + 1)\n    \n    # Calculate prefix XORs\n    for i in range(n):\n        prefix_xor[i + 1] = xor(prefix_xor[i], nums[i])\n        insert(trie, prefix_xor[i + 1])\n    \n    result = []\n    for l, r in queries:\n        max_xor_val = query(trie, xor(prefix_xor[r + 1], prefix_xor[l]))\n        result.append(max_xor_val)\n    \n    return result\n```"}
{"task_id": "3583", "code": "from math import gcd\nfrom collections import defaultdict\nimport bisect\n\ndef getGCDPairs(nums, queries):\n    max_val = max(nums)\n    freq_map = defaultdict(int)\n    \n    # Calculate GCD of all pairs\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            gcd_val = gcd(nums[i], nums[j])\n            freq_map[gcd_val] += 1\n    \n    # Convert frequency map to sorted list of unique GCD values\n    gcd_values = sorted(freq_map.keys())\n    \n    # Compute prefix sum of frequencies\n    prefix_sum = [0]\n    for val in gcd_values:\n        prefix_sum.append(prefix_sum[-1] + freq_map[val])\n    \n    # Answer each query using binary search\n    def query_to_gcd(idx):\n        target = idx + 1\n        pos = bisect.bisect_left(prefix_sum, target)\n        if pos > 0:\n            return gcd_values[pos - 1]\n        return None\n    \n    return [query_to_gcd(q) for q in queries]", "passed": false, "raw_code": "```python\nfrom math import gcd\nfrom collections import defaultdict\nimport bisect\n\ndef getGCDPairs(nums, queries):\n    max_val = max(nums)\n    freq_map = defaultdict(int)\n    \n    # Calculate GCD of all pairs\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            gcd_val = gcd(nums[i], nums[j])\n            freq_map[gcd_val] += 1\n    \n    # Convert frequency map to sorted list of unique GCD values\n    gcd_values = sorted(freq_map.keys())\n    \n    # Compute prefix sum of frequencies\n    prefix_sum = [0]\n    for val in gcd_values:\n        prefix_sum.append(prefix_sum[-1] + freq_map[val])\n    \n    # Answer each query using binary search\n    def query_to_gcd(idx):\n        target = idx + 1\n        pos = bisect.bisect_left(prefix_sum, target)\n        if pos > 0:\n            return gcd_values[pos - 1]\n        return None\n    \n    return [query_to_gcd(q) for q in queries]\n```"}
{"task_id": "3571", "code": "from collections import defaultdict, deque\n\ndef longestIncreasingPath(coordinates, k):\n    # Sort coordinates based on x and then y\n    coordinates.sort()\n    \n    n = len(coordinates)\n    dp = [1] * n\n    \n    # Build the graph\n    graph = defaultdict(list)\n    indegree = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                graph[i].append(j)\n                indegree[j] += 1\n                \n    # Initialize the queue with the coordinate at index k\n    queue = deque([k])\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n                \n    return dp[k]", "passed": false, "raw_code": "```python\nfrom collections import defaultdict, deque\n\ndef longestIncreasingPath(coordinates, k):\n    # Sort coordinates based on x and then y\n    coordinates.sort()\n    \n    n = len(coordinates)\n    dp = [1] * n\n    \n    # Build the graph\n    graph = defaultdict(list)\n    indegree = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                graph[i].append(j)\n                indegree[j] += 1\n                \n    # Initialize the queue with the coordinate at index k\n    queue = deque([k])\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n                \n    return dp[k]\n```"}
{"final_accuracy": "2.04%"}
"{\"difficulty\": \"hard\", \"num_threads\": 16, \"temperature\": 0.7, \"n\": 1, \"context\": \"all\", \"selection\": \"random\", \"num_round\": 3, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"hosted_vllm/Qwen/Qwen2.5-Coder-7B-Instruct\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/final__qwen7b_n_1_debug_public3_select_random_hard.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"openai/gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"hosted_vllm/Qwen/Qwen2.5-Coder-7B-Instruct\", \"api_base\": \"http://127.0.0.1:8001/8001/v1\", \"no_refine\": false, \"no_dspy_gen\": false, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42, \"resume\": true}"
{"task_id": "abc367_e", "code": "def process_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    X = list(map(int, data[2:N+2]))\n    A = list(map(int, data[N+2:]))\n    \n    return N, K, X, A\n\ndef find_cycles(X):\n    visited = [False] * len(X)\n    cycles = []\n    \n    for i in range(len(X)):\n        if not visited[i]:\n            cycle = []\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                cycle.append(x)\n                x = X[x] - 1\n            cycles.append(cycle)\n    \n    return cycles\n\ndef process_cycles(cycles, A, K):\n    for cycle in cycles:\n        cycle_length = len(cycle)\n        effective_operations = K % cycle_length\n        for j in range(cycle_length):\n            A[cycle[j]] = A[cycle[(j + effective_operations) % cycle_length]]\n    \n    return A\n\ndef main():\n    N, K, X, A = process_input()\n    if K == 0:\n        print(' '.join(map(str, A)))\n        return\n    \n    cycles = find_cycles(X)\n    A = process_cycles(cycles, A, K)\n    \n    print(' '.join(map(str, A)))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef process_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    X = list(map(int, data[2:N+2]))\n    A = list(map(int, data[N+2:]))\n    \n    return N, K, X, A\n\ndef find_cycles(X):\n    visited = [False] * len(X)\n    cycles = []\n    \n    for i in range(len(X)):\n        if not visited[i]:\n            cycle = []\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                cycle.append(x)\n                x = X[x] - 1\n            cycles.append(cycle)\n    \n    return cycles\n\ndef process_cycles(cycles, A, K):\n    for cycle in cycles:\n        cycle_length = len(cycle)\n        effective_operations = K % cycle_length\n        for j in range(cycle_length):\n            A[cycle[j]] = A[cycle[(j + effective_operations) % cycle_length]]\n    \n    return A\n\ndef main():\n    N, K, X, A = process_input()\n    if K == 0:\n        print(' '.join(map(str, A)))\n        return\n    \n    cycles = find_cycles(X)\n    A = process_cycles(cycles, A, K)\n    \n    print(' '.join(map(str, A)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc370_e", "code": "def count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP array\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Iterate over each element in the sequence\n    for i in range(1, N + 1):\n        for s in range(K + 1):\n            if s + A[i - 1] <= K:\n                dp[i][s + A[i - 1]] = (dp[i][s + A[i - 1]] + dp[i - 1][s]) % MOD\n            dp[i][s] = (dp[i][s] + dp[i - 1][s]) % MOD\n    \n    # Sum up all valid partitions\n    result = sum(dp[N][s] for s in range(K + 1)) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(count_partitions(N, K, A))", "passed": false, "raw_code": "```python\ndef count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP array\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Iterate over each element in the sequence\n    for i in range(1, N + 1):\n        for s in range(K + 1):\n            if s + A[i - 1] <= K:\n                dp[i][s + A[i - 1]] = (dp[i][s + A[i - 1]] + dp[i - 1][s]) % MOD\n            dp[i][s] = (dp[i][s] + dp[i - 1][s]) % MOD\n    \n    # Sum up all valid partitions\n    result = sum(dp[N][s] for s in range(K + 1)) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(count_partitions(N, K, A))\n```"}
{"task_id": "abc368_d", "code": "def dfs(node, parent, target):\n    if node == target:\n        return [node]\n    path = []\n    for neighbor in adj_list[node]:\n        if neighbor != parent:\n            result = dfs(neighbor, node, target)\n            if result:\n                path.append(node)\n                path.extend(result)\n                break\n    return path\n\ndef lca(node1, node2):\n    path1 = dfs(root, -1, node1)\n    path2 = dfs(root, -1, node2)\n    while len(path1) > len(path2):\n        path1.pop()\n    while len(path2) > len(path1):\n        path2.pop()\n    while path1[-1] != path2[-1]:\n        path1.pop()\n        path2.pop()\n    return path1[-1]\n\ndef count_nodes_in_subtree(node, parent):\n    count = 1\n    for neighbor in adj_list[node]:\n        if neighbor != parent:\n            count += count_nodes_in_subtree(neighbor, node)\n    return count\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\n\nedges = data[2:2*N]\nadj_list = [[] for _ in range(N + 1)]\nfor i in range(N - 1):\n    u = int(edges[i * 2]) - 1\n    v = int(edges[i * 2 + 1]) - 1\n    adj_list[u].append(v)\n    adj_list[v].append(u)\n\nvertices = list(map(int, data[2*N:]))\n\n# Assuming vertex 1 is the root\nroot = 0\n\n# Find the LCA of the K vertices\nlca_node = lca(vertices[0], vertices[1])\nfor i in range(2, K):\n    lca_node = lca(lca_node, vertices[i])\n\n# Count the number of nodes in the subtree rooted at the LCA\nresult = count_nodes_in_subtree(lca_node, -1)\n\nprint(result)", "passed": false, "raw_code": "```python\ndef dfs(node, parent, target):\n    if node == target:\n        return [node]\n    path = []\n    for neighbor in adj_list[node]:\n        if neighbor != parent:\n            result = dfs(neighbor, node, target)\n            if result:\n                path.append(node)\n                path.extend(result)\n                break\n    return path\n\ndef lca(node1, node2):\n    path1 = dfs(root, -1, node1)\n    path2 = dfs(root, -1, node2)\n    while len(path1) > len(path2):\n        path1.pop()\n    while len(path2) > len(path1):\n        path2.pop()\n    while path1[-1] != path2[-1]:\n        path1.pop()\n        path2.pop()\n    return path1[-1]\n\ndef count_nodes_in_subtree(node, parent):\n    count = 1\n    for neighbor in adj_list[node]:\n        if neighbor != parent:\n            count += count_nodes_in_subtree(neighbor, node)\n    return count\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\n\nedges = data[2:2*N]\nadj_list = [[] for _ in range(N + 1)]\nfor i in range(N - 1):\n    u = int(edges[i * 2]) - 1\n    v = int(edges[i * 2 + 1]) - 1\n    adj_list[u].append(v)\n    adj_list[v].append(u)\n\nvertices = list(map(int, data[2*N:]))\n\n# Assuming vertex 1 is the root\nroot = 0\n\n# Find the LCA of the K vertices\nlca_node = lca(vertices[0], vertices[1])\nfor i in range(2, K):\n    lca_node = lca(lca_node, vertices[i])\n\n# Count the number of nodes in the subtree rooted at the LCA\nresult = count_nodes_in_subtree(lca_node, -1)\n\nprint(result)\n```"}
{"final_accuracy": "2.04%"}
