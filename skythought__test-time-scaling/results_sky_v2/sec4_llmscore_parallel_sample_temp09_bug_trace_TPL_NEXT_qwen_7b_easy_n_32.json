{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 32, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_NEXT_qwen_7b_easy_n_32.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result_string = input_string.replace('.', '')\n    print(result_string)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result_string = input_string.replace('.', '')\n    print(result_string)\n\nremove_dots()\n```"}
{"task_id": "abc373_a", "code": "def main():\n    count = 0\n    for i in range(12):\n        s = input().strip()\n        if len(s) == i + 1:\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    count = 0\n    for i in range(12):\n        s = input().strip()\n        if len(s) == i + 1:\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3555", "code": "def modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        nums[nums.index(min(nums))] *= multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        nums[nums.index(min(nums))] *= multiplier\n    return nums\n```"}
{"task_id": "3606", "code": "def min_digit_sum(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    transformed_nums = [sum_of_digits(num) for num in nums]\n    return min(transformed_nums)", "passed": true, "raw_code": "```python\ndef min_digit_sum(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    transformed_nums = [sum_of_digits(num) for num in nums]\n    return min(transformed_nums)\n```"}
{"task_id": "abc367_b", "code": "def process_number():\n    import sys\n    # Read the input from standard input\n    x = float(sys.stdin.read().strip())\n    \n    # Convert the number to a string and remove trailing zeros\n    x_str = f\"{x:.3f}\".rstrip('0').rstrip('.')\n    \n    # Print the processed number\n    print(x_str)\n\n# Call the function to execute\nprocess_number()", "passed": true, "raw_code": "```python\ndef process_number():\n    import sys\n    # Read the input from standard input\n    x = float(sys.stdin.read().strip())\n    \n    # Convert the number to a string and remove trailing zeros\n    x_str = f\"{x:.3f}\".rstrip('0').rstrip('.')\n    \n    # Print the processed number\n    print(x_str)\n\n# Call the function to execute\nprocess_number()\n```"}
{"task_id": "abc368_b", "code": "def perform_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nperform_operations()", "passed": true, "raw_code": "```python\ndef perform_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nperform_operations()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki(A, B, C):\n    if B < C:\n        return \"Yes\" if not (B <= A <= C) else \"No\"\n    else:\n        return \"Yes\" if not (B <= A or A <= C) else \"No\"\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA, B, C = int(data[0]), int(data[1]), int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))", "passed": true, "raw_code": "```python\ndef can_shout_takoyaki(A, B, C):\n    if B < C:\n        return \"Yes\" if not (B <= A <= C) else \"No\"\n    else:\n        return \"Yes\" if not (B <= A or A <= C) else \"No\"\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA, B, C = int(data[0]), int(data[1]), int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))\n```"}
{"task_id": "3567", "code": "def binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"", "passed": true, "raw_code": "```python\ndef binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n```"}
{"task_id": "abc366_a", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    remaining_votes = N - (T + A)\n    lead = abs(T - A)\n    \n    if lead >= remaining_votes:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    remaining_votes = N - (T + A)\n    lead = abs(T - A)\n    \n    if lead >= remaining_votes:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nmain()\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_position():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for num in A:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif num > second_max:\n            second_max = num\n    \n    # Find the position of the second largest element\n    for i, num in enumerate(A):\n        if num == second_max:\n            print(i + 1)\n            break\n\nfind_second_largest_position()", "passed": true, "raw_code": "```python\ndef find_second_largest_position():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for num in A:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif num > second_max:\n            second_max = num\n    \n    # Find the position of the second largest element\n    for i, num in enumerate(A):\n        if num == second_max:\n            print(i + 1)\n            break\n\nfind_second_largest_position()\n```"}
{"task_id": "abc368_a", "code": "def rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n\n    # Rotate the cards\n    rotated_cards = cards[-K:] + cards[:-K]\n    \n    # Print the result\n    print(' '.join(map(str, rotated_cards)))\n\nrotate_cards()", "passed": true, "raw_code": "```python\ndef rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n\n    # Rotate the cards\n    rotated_cards = cards[-K:] + cards[:-K]\n    \n    # Print the result\n    print(' '.join(map(str, rotated_cards)))\n\nrotate_cards()\n```"}
{"task_id": "abc370_a", "code": "def check_hand_raising():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    L = int(data[0])\n    R = int(data[1])\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\ncheck_hand_raising()", "passed": true, "raw_code": "```python\ndef check_hand_raising():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    L = int(data[0])\n    R = int(data[1])\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\ncheck_hand_raising()\n```"}
{"task_id": "abc365_a", "code": "def number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        days = 366\n    elif Y % 100 == 0:\n        days = 365\n    elif Y % 4 == 0:\n        days = 366\n    else:\n        days = 365\n    \n    print(days)\n\nnumber_of_days_in_year()", "passed": true, "raw_code": "```python\ndef number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        days = 366\n    elif Y % 100 == 0:\n        days = 365\n    elif Y % 4 == 0:\n        days = 366\n    else:\n        days = 365\n    \n    print(days)\n\nnumber_of_days_in_year()\n```"}
{"task_id": "3553", "code": "def same_color(coordinate1, coordinate2):\n    def get_index(char):\n        return ord(char) - ord('a') + 1\n    \n    col1, row1 = get_index(coordinate1[0]), int(coordinate1[1])\n    col2, row2 = get_index(coordinate2[0]), int(coordinate2[1])\n    \n    return (col1 + row1) % 2 == (col2 + row2) % 2", "passed": true, "raw_code": "```python\ndef same_color(coordinate1, coordinate2):\n    def get_index(char):\n        return ord(char) - ord('a') + 1\n    \n    col1, row1 = get_index(coordinate1[0]), int(coordinate1[1])\n    col2, row2 = get_index(coordinate2[0]), int(coordinate2[1])\n    \n    return (col1 + row1) % 2 == (col2 + row2) % 2\n```"}
{"task_id": "3519", "code": "def countWinningPlayers(n, pick):\n    # Dictionary to store the counts of balls picked by each player for each color\n    player_counts = {player: {} for player in range(n)}\n    \n    # Update the counts based on the pick list\n    for player, color in pick:\n        if color not in player_counts[player]:\n            player_counts[player][color] = 0\n        player_counts[player][color] += 1\n    \n    # Function to check if a player has won\n    def hasWon(player):\n        for color, count in player_counts[player].items():\n            if count > player:\n                return True\n        return False\n    \n    # Count the number of players who have won\n    winning_players = sum(1 for player in range(n) if hasWon(player))\n    \n    return winning_players", "passed": true, "raw_code": "```python\ndef countWinningPlayers(n, pick):\n    # Dictionary to store the counts of balls picked by each player for each color\n    player_counts = {player: {} for player in range(n)}\n    \n    # Update the counts based on the pick list\n    for player, color in pick:\n        if color not in player_counts[player]:\n            player_counts[player][color] = 0\n        player_counts[player][color] += 1\n    \n    # Function to check if a player has won\n    def hasWon(player):\n        for color, count in player_counts[player].items():\n            if count > player:\n                return True\n        return False\n    \n    # Count the number of players who have won\n    winning_players = sum(1 for player in range(n) if hasWon(player))\n    \n    return winning_players\n```"}
{"task_id": "abc370_b", "code": "def final_element():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = [[0] * (i + 1) for i in range(N)]\n    for i in range(N):\n        for j in range(i + 1):\n            A[i][j] = int(data[index])\n            index += 1\n    \n    current_element = 1\n    for i in range(1, N):\n        if current_element >= i + 1:\n            current_element = A[current_element - 1][i]\n        else:\n            current_element = A[i][current_element - 1]\n    \n    print(current_element)\n\nfinal_element()", "passed": false, "raw_code": "```python\ndef final_element():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = [[0] * (i + 1) for i in range(N)]\n    for i in range(N):\n        for j in range(i + 1):\n            A[i][j] = int(data[index])\n            index += 1\n    \n    current_element = 1\n    for i in range(1, N):\n        if current_element >= i + 1:\n            current_element = A[current_element - 1][i]\n        else:\n            current_element = A[i][current_element - 1]\n    \n    print(current_element)\n\nfinal_element()\n```"}
{"task_id": "abc371_b", "code": "def determine_taro_names():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    earliest_male = [-1] * (N + 1)\n    result = []\n    \n    index = 2\n    for _ in range(M):\n        family = int(data[index])\n        gender = data[index + 1]\n        \n        if gender == 'M':\n            if earliest_male[family] == -1:\n                result.append(\"Yes\")\n                earliest_male[family] = index\n            else:\n                result.append(\"No\")\n        elif gender == 'F':\n            result.append(\"No\")\n        \n        index += 2\n    \n    for r in result:\n        print(r)\n\ndetermine_taro_names()", "passed": true, "raw_code": "```python\ndef determine_taro_names():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    earliest_male = [-1] * (N + 1)\n    result = []\n    \n    index = 2\n    for _ in range(M):\n        family = int(data[index])\n        gender = data[index + 1]\n        \n        if gender == 'M':\n            if earliest_male[family] == -1:\n                result.append(\"Yes\")\n                earliest_male[family] = index\n            else:\n                result.append(\"No\")\n        elif gender == 'F':\n            result.append(\"No\")\n        \n        index += 2\n    \n    for r in result:\n        print(r)\n\ndetermine_taro_names()\n```"}
{"task_id": "3568", "code": "def getKey(num1, num2, num3):\n    # Convert numbers to four-digit strings\n    str_num1 = str(num1).zfill(4)\n    str_num2 = str(num2).zfill(4)\n    str_num3 = str(num3).zfill(4)\n    \n    # Initialize the key as an empty list\n    key_digits = []\n    \n    # Iterate over each digit position (0 to 3)\n    for i in range(4):\n        # Get the i-th digit from each number\n        digit1 = int(str_num1[i])\n        digit2 = int(str_num2[i])\n        digit3 = int(str_num3[i])\n        \n        # Append the minimum digit to the key_digits list\n        key_digits.append(min(digit1, digit2, digit3))\n    \n    # Join the digits to form the key\n    key_str = ''.join(map(str, key_digits))\n    \n    # Convert the key to an integer and return\n    return int(key_str) if key_str != '0' * 4 else 0", "passed": true, "raw_code": "```python\ndef getKey(num1, num2, num3):\n    # Convert numbers to four-digit strings\n    str_num1 = str(num1).zfill(4)\n    str_num2 = str(num2).zfill(4)\n    str_num3 = str(num3).zfill(4)\n    \n    # Initialize the key as an empty list\n    key_digits = []\n    \n    # Iterate over each digit position (0 to 3)\n    for i in range(4):\n        # Get the i-th digit from each number\n        digit1 = int(str_num1[i])\n        digit2 = int(str_num2[i])\n        digit3 = int(str_num3[i])\n        \n        # Append the minimum digit to the key_digits list\n        key_digits.append(min(digit1, digit2, digit3))\n    \n    # Join the digits to form the key\n    key_str = ''.join(map(str, key_digits))\n    \n    # Convert the key to an integer and return\n    return int(key_str) if key_str != '0' * 4 else 0\n```"}
{"task_id": "abc366_b", "code": "def vertical_writing():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    strings = data[1:N+1]\n    \n    max_len = max(len(s) for s in strings)\n    result = [''] * max_len\n    \n    for i in range(max_len):\n        for j in range(N):\n            if i < len(strings[N-1-j]):\n                result[i] += strings[N-1-j][i]\n            else:\n                result[i] += '*'\n        if result[i][-1] == '*':\n            result[i] = result[i][:-1]\n    \n    for line in result:\n        print(line)\n\n# Call the function to execute\nvertical_writing()", "passed": false, "raw_code": "```python\ndef vertical_writing():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    strings = data[1:N+1]\n    \n    max_len = max(len(s) for s in strings)\n    result = [''] * max_len\n    \n    for i in range(max_len):\n        for j in range(N):\n            if i < len(strings[N-1-j]):\n                result[i] += strings[N-1-j][i]\n            else:\n                result[i] += '*'\n        if result[i][-1] == '*':\n            result[i] = result[i][:-1]\n    \n    for line in result:\n        print(line)\n\n# Call the function to execute\nvertical_writing()\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    # Create a dictionary to map each character to its position in S\n    char_to_pos = {char: idx for idx, char in enumerate(S)}\n    \n    # Initial position of the finger is at the position of 'A'\n    initial_pos = char_to_pos['A']\n    total_distance = 0\n    \n    # Iterate through the characters from 'A' to 'Z'\n    for char in range(ord('A'), ord('Z') + 1):\n        current_char = chr(char)\n        current_pos = char_to_pos[current_char]\n        # Add the distance traveled to the total distance\n        total_distance += abs(current_pos - initial_pos)\n        # Update the initial position to the current position\n        initial_pos = current_pos\n    \n    # Print the total distance\n    print(total_distance)\n\n# Call the function with standard input\nmin_traveled_distance(input())", "passed": true, "raw_code": "```python\ndef min_traveled_distance(S):\n    # Create a dictionary to map each character to its position in S\n    char_to_pos = {char: idx for idx, char in enumerate(S)}\n    \n    # Initial position of the finger is at the position of 'A'\n    initial_pos = char_to_pos['A']\n    total_distance = 0\n    \n    # Iterate through the characters from 'A' to 'Z'\n    for char in range(ord('A'), ord('Z') + 1):\n        current_char = chr(char)\n        current_pos = char_to_pos[current_char]\n        # Add the distance traveled to the total distance\n        total_distance += abs(current_pos - initial_pos)\n        # Update the initial position to the current position\n        initial_pos = current_pos\n    \n    # Print the total distance\n    print(total_distance)\n\n# Call the function with standard input\nmin_traveled_distance(input())\n```"}
{"task_id": "3600", "code": "def find_kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        new_word = \"\"\n        for char in word:\n            if char == 'z':\n                new_word += 'a'\n            else:\n                new_word += chr(ord(char) + 1)\n        word += new_word\n    return word[k-1]", "passed": true, "raw_code": "```python\ndef find_kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        new_word = \"\"\n        for char in word:\n            if char == 'z':\n                new_word += 'a'\n            else:\n                new_word += chr(ord(char) + 1)\n        word += new_word\n    return word[k-1]\n```"}
{"task_id": "3533", "code": "def finalPosition(n, commands):\n    # Initial position of the snake (top-left corner)\n    current_position = 0\n    \n    # Iterate through each command\n    for command in commands:\n        if command == \"UP\":\n            # Move up if possible\n            if current_position >= n:\n                current_position -= n\n        elif command == \"DOWN\":\n            # Move down if possible\n            if current_position < n * (n - 1):\n                current_position += n\n        elif command == \"LEFT\":\n            # Move left if possible\n            if current_position % n > 0:\n                current_position -= 1\n        elif command == \"RIGHT\":\n            # Move right if possible\n            if current_position % n < n - 1:\n                current_position += 1\n    \n    return current_position", "passed": true, "raw_code": "```python\ndef finalPosition(n, commands):\n    # Initial position of the snake (top-left corner)\n    current_position = 0\n    \n    # Iterate through each command\n    for command in commands:\n        if command == \"UP\":\n            # Move up if possible\n            if current_position >= n:\n                current_position -= n\n        elif command == \"DOWN\":\n            # Move down if possible\n            if current_position < n * (n - 1):\n                current_position += n\n        elif command == \"LEFT\":\n            # Move left if possible\n            if current_position % n > 0:\n                current_position -= 1\n        elif command == \"RIGHT\":\n            # Move right if possible\n            if current_position % n < n - 1:\n                current_position += 1\n    \n    return current_position\n```"}
{"task_id": "abc369_a", "code": "def count_valid_x(A, B):\n    valid_x = set()\n    \n    # Check for the first condition: 2B = A + x\n    if (2 * B - A) not in valid_x:\n        valid_x.add(2 * B - A)\n    \n    # Check for the second condition: 2A = B + x\n    if (2 * A - B) not in valid_x:\n        valid_x.add(2 * A - B)\n    \n    # Check for the third condition: 2x = A + B\n    if (A + B) % 2 == 0:\n        x = (A + B) // 2\n        if x not in valid_x:\n            valid_x.add(x)\n    \n    return len(valid_x)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read().strip()\nA, B = map(int, input.split())\n\n# Print the result\nprint(count_valid_x(A, B))", "passed": true, "raw_code": "```python\ndef count_valid_x(A, B):\n    valid_x = set()\n    \n    # Check for the first condition: 2B = A + x\n    if (2 * B - A) not in valid_x:\n        valid_x.add(2 * B - A)\n    \n    # Check for the second condition: 2A = B + x\n    if (2 * A - B) not in valid_x:\n        valid_x.add(2 * A - B)\n    \n    # Check for the third condition: 2x = A + B\n    if (A + B) % 2 == 0:\n        x = (A + B) // 2\n        if x not in valid_x:\n            valid_x.add(x)\n    \n    return len(valid_x)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read().strip()\nA, B = map(int, input.split())\n\n# Print the result\nprint(count_valid_x(A, B))\n```"}
{"task_id": "3543", "code": "def countValidSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zeros = ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if zeros <= k or ones <= k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef countValidSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zeros = ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if zeros <= k or ones <= k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc369_b", "code": "def min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    key_presses = [(int(data[2*i + 1]), data[2*i + 2]) for i in range(N)]\n    \n    def calculate_fatigue(left, right):\n        fatigue = 0\n        for key, side in key_presses:\n            if side == 'L':\n                if key < left:\n                    fatigue += left - key\n                    left = key\n                elif key > left:\n                    fatigue += key - left\n                    left = key\n            else:\n                if key < right:\n                    fatigue += right - key\n                    right = key\n                elif key > right:\n                    fatigue += key - right\n                    right = key\n        return fatigue\n    \n    min_fatigue = float('inf')\n    for left in range(1, 101):\n        for right in range(1, 101):\n            fatigue = calculate_fatigue(left, right)\n            if fatigue < min_fatigue:\n                min_fatigue = fatigue\n                \n    print(min_fatigue)\n\nmin_fatigue_level()", "passed": true, "raw_code": "```python\ndef min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    key_presses = [(int(data[2*i + 1]), data[2*i + 2]) for i in range(N)]\n    \n    def calculate_fatigue(left, right):\n        fatigue = 0\n        for key, side in key_presses:\n            if side == 'L':\n                if key < left:\n                    fatigue += left - key\n                    left = key\n                elif key > left:\n                    fatigue += key - left\n                    left = key\n            else:\n                if key < right:\n                    fatigue += right - key\n                    right = key\n                elif key > right:\n                    fatigue += key - right\n                    right = key\n        return fatigue\n    \n    min_fatigue = float('inf')\n    for left in range(1, 101):\n        for right in range(1, 101):\n            fatigue = calculate_fatigue(left, right)\n            if fatigue < min_fatigue:\n                min_fatigue = fatigue\n                \n    print(min_fatigue)\n\nmin_fatigue_level()\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB, S_AC, S_BC = data\n    \n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        print(\"B\")\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        print(\"C\")\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        print(\"A\")\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        print(\"B\")\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        print(\"A\")\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        print(\"C\")\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        print(\"B\")\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        print(\"A\")\n\nfind_middle_brother()", "passed": false, "raw_code": "```python\ndef find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB, S_AC, S_BC = data\n    \n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        print(\"B\")\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        print(\"C\")\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        print(\"A\")\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        print(\"B\")\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        print(\"A\")\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        print(\"C\")\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        print(\"B\")\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        print(\"A\")\n\nfind_middle_brother()\n```"}
{"final_accuracy": "88.46%"}
