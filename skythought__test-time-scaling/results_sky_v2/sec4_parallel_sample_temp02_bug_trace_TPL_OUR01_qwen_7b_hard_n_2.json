"{\"difficulty\": \"hard\", \"num_threads\": 32, \"temperature\": 0.2, \"n\": 2, \"context\": \"all\", \"selection\": \"oracle\", \"num_round\": 1, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/sec4_parallel_sample_temp02_bug_trace_TPL_OUR01_qwen_7b_hard_n_2.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"openai/gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"api_base\": \"http://127.0.0.1:8001/8001/v1\", \"no_refine\": true, \"no_dspy_gen\": false, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42, \"resume\": true}"
{"task_id": "abc368_f", "codes": ["", "def determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Since Anna can always reduce one number to 1, she will always win\n    print(\"Anna\")\n\ndetermine_winner()"], "passed": [false, false], "raw_code": ["", "```python\ndef determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Since Anna can always reduce one number to 1, she will always win\n    print(\"Anna\")\n\ndetermine_winner()\n```"]}
{"task_id": "abc366_e", "codes": ["", "def count_valid_points(N, D, points):\n    def count_points(dim):\n        points.sort(key=lambda p: p[dim])\n        left = 0\n        total = 0\n        current_sum = 0\n        for right in range(N):\n            current_sum += points[right][dim] - points[left][dim]\n            while current_sum > D:\n                current_sum -= points[right][dim] - points[left][dim]\n                left += 1\n            total += right - left + 1\n        return total\n\n    x_count = count_points(0)\n    y_count = count_points(1)\n    return x_count * y_count\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nD = int(data[1])\npoints = []\n\nfor i in range(N):\n    x = int(data[2 + 2 * i])\n    y = int(data[3 + 2 * i])\n    points.append((x, y))\n\nprint(count_valid_points(N, D, points))"], "passed": [false, false], "raw_code": ["", "```python\ndef count_valid_points(N, D, points):\n    def count_points(dim):\n        points.sort(key=lambda p: p[dim])\n        left = 0\n        total = 0\n        current_sum = 0\n        for right in range(N):\n            current_sum += points[right][dim] - points[left][dim]\n            while current_sum > D:\n                current_sum -= points[right][dim] - points[left][dim]\n                left += 1\n            total += right - left + 1\n        return total\n\n    x_count = count_points(0)\n    y_count = count_points(1)\n    return x_count * y_count\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nD = int(data[1])\npoints = []\n\nfor i in range(N):\n    x = int(data[2 + 2 * i])\n    y = int(data[3 + 2 * i])\n    points.append((x, y))\n\nprint(count_valid_points(N, D, points))\n```"]}
{"task_id": "3532", "codes": ["def minTimeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    def bfs_mark(node):\n        n = len(graph)\n        visited = [False] * n\n        visited[node] = True\n        queue = deque([(node, 0)])\n        times = [-1] * n\n        \n        while queue:\n            current, time = queue.popleft()\n            times[current] = time\n            \n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    if current % 2 == 0:\n                        queue.append((neighbor, time + 2))\n                    else:\n                        queue.append((neighbor, time + 1))\n        \n        return times\n    \n    n = len(edges) + 1\n    graph = defaultdict(list)\n    \n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    result = []\n    for i in range(n):\n        result.append(bfs_mark(i))\n    \n    return result", "def minTimeToMarkAllNodes(edges, start):\n    from collections import defaultdict, deque\n    \n    # Step 1: Build the adjacency list\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Step 2: Initialize marking times and queue for BFS\n    marking_times = {node: float('inf') for node in range(len(edges) + 1)}\n    marking_times[start] = 0\n    queue = deque([start])\n    \n    # Step 3: Perform BFS to determine marking times\n    while queue:\n        current = queue.popleft()\n        for neighbor in adj_list[current]:\n            if marking_times[neighbor] == float('inf'):\n                if current % 2 == 0:\n                    marking_times[neighbor] = marking_times[current] + 2\n                else:\n                    marking_times[neighbor] = marking_times[current] + 1\n                queue.append(neighbor)\n    \n    # Step 4: Collect and return the marking times\n    return [marking_times[i] for i in range(len(edges) + 1)]"], "passed": [false, false], "raw_code": ["```python\ndef minTimeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    def bfs_mark(node):\n        n = len(graph)\n        visited = [False] * n\n        visited[node] = True\n        queue = deque([(node, 0)])\n        times = [-1] * n\n        \n        while queue:\n            current, time = queue.popleft()\n            times[current] = time\n            \n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    if current % 2 == 0:\n                        queue.append((neighbor, time + 2))\n                    else:\n                        queue.append((neighbor, time + 1))\n        \n        return times\n    \n    n = len(edges) + 1\n    graph = defaultdict(list)\n    \n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    result = []\n    for i in range(n):\n        result.append(bfs_mark(i))\n    \n    return result\n```", "```python\ndef minTimeToMarkAllNodes(edges, start):\n    from collections import defaultdict, deque\n    \n    # Step 1: Build the adjacency list\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Step 2: Initialize marking times and queue for BFS\n    marking_times = {node: float('inf') for node in range(len(edges) + 1)}\n    marking_times[start] = 0\n    queue = deque([start])\n    \n    # Step 3: Perform BFS to determine marking times\n    while queue:\n        current = queue.popleft()\n        for neighbor in adj_list[current]:\n            if marking_times[neighbor] == float('inf'):\n                if current % 2 == 0:\n                    marking_times[neighbor] = marking_times[current] + 2\n                else:\n                    marking_times[neighbor] = marking_times[current] + 1\n                queue.append(neighbor)\n    \n    # Step 4: Collect and return the marking times\n    return [marking_times[i] for i in range(len(edges) + 1)]\n```"]}
{"task_id": "abc371_f", "codes": ["```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        index += 2\n        tasks.append((T, G))\n    \n    total_moves = 0\n    for T, G in tasks:\n        total_moves += abs(X[T] - G)\n    \n    print(total_moves)\n\nmin_movements()", "```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        index += 2\n        tasks.append((T, G))\n    \n    # Sort tasks based on the goal position\n    tasks.sort(key=lambda x: x[1])\n    \n    total_moves = 0\n    current_positions = X[:]\n    \n    for T, G in tasks:\n        while current_positions[T] != G:\n            if current_positions[T] < G:\n                current_positions[T] += 1\n            else:\n                current_positions[T] -= 1\n            total_moves += 1\n    \n    print(total_moves)\n\nmin_movements()"], "passed": [false, false], "raw_code": ["```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        index += 2\n        tasks.append((T, G))\n    \n    total_moves = 0\n    for T, G in tasks:\n        total_moves += abs(X[T] - G)\n    \n    print(total_moves)\n\nmin_movements()", "```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        index += 2\n        tasks.append((T, G))\n    \n    # Sort tasks based on the goal position\n    tasks.sort(key=lambda x: x[1])\n    \n    total_moves = 0\n    current_positions = X[:]\n    \n    for T, G in tasks:\n        while current_positions[T] != G:\n            if current_positions[T] < G:\n                current_positions[T] += 1\n            else:\n                current_positions[T] -= 1\n            total_moves += 1\n    \n    print(total_moves)\n\nmin_movements()"]}
{"task_id": "abc366_f", "codes": ["```python\nimport heapq\n\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Initialize the heap with the initial values of applying each function to 1\n    heap = [-B for A, B in functions]\n    heapq.heapify(heap)\n    \n    # Apply the next function K times\n    for _ in range(K - 1):\n        current_max = -heapq.heappop(heap)\n        for A, B in functions:\n            if A * current_max + B > current_max:\n                heapq.heappush(heap, -(A * current_max + B))\n    \n    # The final value in the heap is the maximum possible value\n    result = -heap[0]\n    print(result)\n\n# Call the function\nmax_nested_function_value()", "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Sort functions by slope A in descending order\n    functions.sort(key=lambda x: x[0], reverse=True)\n    \n    # Initialize the result with the first function applied to 1\n    result = functions[0][0] * 1 + functions[0][1]\n    \n    # Apply the remaining functions in sorted order\n    for i in range(1, K):\n        result = functions[i][0] * result + functions[i][1]\n    \n    print(result)\n\nmax_nested_function_value()"], "passed": [false, false], "raw_code": ["```python\nimport heapq\n\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Initialize the heap with the initial values of applying each function to 1\n    heap = [-B for A, B in functions]\n    heapq.heapify(heap)\n    \n    # Apply the next function K times\n    for _ in range(K - 1):\n        current_max = -heapq.heappop(heap)\n        for A, B in functions:\n            if A * current_max + B > current_max:\n                heapq.heappush(heap, -(A * current_max + B))\n    \n    # The final value in the heap is the maximum possible value\n    result = -heap[0]\n    print(result)\n\n# Call the function\nmax_nested_function_value()", "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Sort functions by slope A in descending order\n    functions.sort(key=lambda x: x[0], reverse=True)\n    \n    # Initialize the result with the first function applied to 1\n    result = functions[0][0] * 1 + functions[0][1]\n    \n    # Apply the remaining functions in sorted order\n    for i in range(1, K):\n        result = functions[i][0] * result + functions[i][1]\n    \n    print(result)\n\nmax_nested_function_value()"]}
{"task_id": "abc373_g", "codes": ["```python\ndef find_non_crossing_permutation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = [int(data[i]) for i in range(1, 2*N+1, 2)]\n    B = [int(data[i]) for i in range(2, 2*N+1, 2)]\n    C = [int(data[i]) for i in range(2*N+2, 4*N+2, 2)]\n    D = [int(data[i]) for i in range(2*N+3, 4*N+2, 2)]\n    \n    # Create a list of tuples (x, y, index) for both sets of points\n    points_P = [(A[i], B[i], i) for i in range(N)]\n    points_Q = [(C[i], D[i], i) for i in range(N)]\n    \n    # Sort points_P based on x-coordinate\n    points_P.sort()\n    \n    # Stack to keep track of the indices of the points Q_R_i that have been paired\n    stack = []\n    \n    # Dictionary to store the permutation R\n    R = [-1] * N\n    \n    # Iterate through the sorted points P_i\n    for i in range(N):\n        x_p, y_p, idx_p = points_P[i]\n        \n        # Find the closest available point Q_R_i that does not create an intersection\n        while stack and stack[-1][0] > x_p:\n            _, idx_q = stack.pop()\n            R[idx_q] = idx_p\n        \n        if stack:\n            _, idx_q = stack[-1]\n            if (y_p - B[idx_q]) * (C[idx_q] - C[idx_p]) != (B[idx_q] - D[idx_p]) * (x_p - C[idx_q]):\n                R[idx_q] = idx_p\n                stack.append((x_p, idx_p))\n        else:\n            stack.append((x_p, idx_p))\n    \n    # Check if all points have been paired\n    if -1 in R:\n        print(-1)\n    else:\n        print(' '.join(map(str, R + 1)))\n\nfind_non_crossing_permutation()", "def read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = []\n    B = []\n    C = []\n    D = []\n    \n    index = 1\n    for _ in range(N):\n        A.append(int(data[index]))\n        B.append(int(data[index + 1]))\n        index += 2\n    \n    for _ in range(N):\n        C.append(int(data[index]))\n        D.append(int(data[index + 1]))\n        index += 2\n    \n    return N, A, B, C, D\n\ndef cross_product(x1, y1, x2, y2, x3, y3):\n    return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)\n\ndef find_permutation(N, A, B, C, D):\n    points = sorted([(A[i], B[i], 'P', i) for i in range(N)] + [(C[i], D[i], 'Q', i)])\n    stack = []\n    perm = [-1] * N\n    \n    for _, _, type_, idx in points:\n        if type_ == 'P':\n            while stack and stack[-1][1] > idx:\n                stack.pop()\n            if stack:\n                perm[idx] = stack[-1][1]\n            stack.append((idx, idx))\n        elif type_ == 'Q':\n            if stack and stack[-1][1] != idx:\n                perm[stack[-1][1]] = idx\n                stack.pop()\n    \n    if len(stack) != 1:\n        return -1\n    else:\n        return perm\n\ndef main():\n    N, A, B, C, D = read_input()\n    result = find_permutation(N, A, B, C, D)\n    \n    if result == -1:\n        print(-1)\n    else:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef find_non_crossing_permutation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = [int(data[i]) for i in range(1, 2*N+1, 2)]\n    B = [int(data[i]) for i in range(2, 2*N+1, 2)]\n    C = [int(data[i]) for i in range(2*N+2, 4*N+2, 2)]\n    D = [int(data[i]) for i in range(2*N+3, 4*N+2, 2)]\n    \n    # Create a list of tuples (x, y, index) for both sets of points\n    points_P = [(A[i], B[i], i) for i in range(N)]\n    points_Q = [(C[i], D[i], i) for i in range(N)]\n    \n    # Sort points_P based on x-coordinate\n    points_P.sort()\n    \n    # Stack to keep track of the indices of the points Q_R_i that have been paired\n    stack = []\n    \n    # Dictionary to store the permutation R\n    R = [-1] * N\n    \n    # Iterate through the sorted points P_i\n    for i in range(N):\n        x_p, y_p, idx_p = points_P[i]\n        \n        # Find the closest available point Q_R_i that does not create an intersection\n        while stack and stack[-1][0] > x_p:\n            _, idx_q = stack.pop()\n            R[idx_q] = idx_p\n        \n        if stack:\n            _, idx_q = stack[-1]\n            if (y_p - B[idx_q]) * (C[idx_q] - C[idx_p]) != (B[idx_q] - D[idx_p]) * (x_p - C[idx_q]):\n                R[idx_q] = idx_p\n                stack.append((x_p, idx_p))\n        else:\n            stack.append((x_p, idx_p))\n    \n    # Check if all points have been paired\n    if -1 in R:\n        print(-1)\n    else:\n        print(' '.join(map(str, R + 1)))\n\nfind_non_crossing_permutation()", "```python\ndef read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = []\n    B = []\n    C = []\n    D = []\n    \n    index = 1\n    for _ in range(N):\n        A.append(int(data[index]))\n        B.append(int(data[index + 1]))\n        index += 2\n    \n    for _ in range(N):\n        C.append(int(data[index]))\n        D.append(int(data[index + 1]))\n        index += 2\n    \n    return N, A, B, C, D\n\ndef cross_product(x1, y1, x2, y2, x3, y3):\n    return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)\n\ndef find_permutation(N, A, B, C, D):\n    points = sorted([(A[i], B[i], 'P', i) for i in range(N)] + [(C[i], D[i], 'Q', i)])\n    stack = []\n    perm = [-1] * N\n    \n    for _, _, type_, idx in points:\n        if type_ == 'P':\n            while stack and stack[-1][1] > idx:\n                stack.pop()\n            if stack:\n                perm[idx] = stack[-1][1]\n            stack.append((idx, idx))\n        elif type_ == 'Q':\n            if stack and stack[-1][1] != idx:\n                perm[stack[-1][1]] = idx\n                stack.pop()\n    \n    if len(stack) != 1:\n        return -1\n    else:\n        return perm\n\ndef main():\n    N, A, B, C, D = read_input()\n    result = find_permutation(N, A, B, C, D)\n    \n    if result == -1:\n        print(-1)\n    else:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "3535", "codes": ["def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # DP table for arr1 (non-decreasing)\n    dp1 = [[0] * 51 for _ in range(n)]\n    dp1[0][nums[0]] = 1\n    \n    # DP table for arr2 (non-increasing)\n    dp2 = [[0] * 51 for _ in range(n)]\n    dp2[n-1][nums[-1]] = 1\n    \n    # Fill dp1 table\n    for i in range(1, n):\n        for j in range(nums[i] + 1):\n            dp1[i][j] = dp1[i-1][j]\n            if j > 0:\n                dp1[i][j] += dp1[i-1][j-1]\n            dp1[i][j] %= MOD\n    \n    # Fill dp2 table\n    for i in range(n-2, -1, -1):\n        for j in range(nums[i] + 1):\n            dp2[i][j] = dp2[i+1][j]\n            if j < 50:\n                dp2[i][j] += dp2[i+1][j+1]\n            dp2[i][j] %= MOD\n    \n    # Count valid pairs\n    count = 0\n    for i in range(n):\n        count += dp1[i][nums[i]] * dp2[i][nums[i]]\n        count %= MOD\n    \n    return count", "def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_inc = [[0] * (sum(nums) + 1) for _ in range(n)]\n    dp_dec = [[0] * (sum(nums) + 1) for _ in range(n)]\n    \n    # Base cases\n    dp_inc[0][nums[0]] = 1\n    dp_dec[0][nums[0]] = 1\n    \n    # Fill DP tables\n    for i in range(1, n):\n        for j in range(sum(nums) + 1):\n            if j >= nums[i]:\n                dp_inc[i][j] = (dp_inc[i-1][j] + dp_inc[i-1][j-nums[i]]) % MOD\n            else:\n                dp_inc[i][j] = dp_inc[i-1][j]\n            \n            if j <= nums[i]:\n                dp_dec[i][j] = (dp_dec[i-1][j] + dp_dec[i-1][j+nums[i]]) % MOD\n            else:\n                dp_dec[i][j] = dp_dec[i-1][j]\n    \n    # Count valid pairs\n    result = 0\n    for j in range(sum(nums) + 1):\n        result = (result + dp_inc[-1][j] * dp_dec[-1][j]) % MOD\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # DP table for arr1 (non-decreasing)\n    dp1 = [[0] * 51 for _ in range(n)]\n    dp1[0][nums[0]] = 1\n    \n    # DP table for arr2 (non-increasing)\n    dp2 = [[0] * 51 for _ in range(n)]\n    dp2[n-1][nums[-1]] = 1\n    \n    # Fill dp1 table\n    for i in range(1, n):\n        for j in range(nums[i] + 1):\n            dp1[i][j] = dp1[i-1][j]\n            if j > 0:\n                dp1[i][j] += dp1[i-1][j-1]\n            dp1[i][j] %= MOD\n    \n    # Fill dp2 table\n    for i in range(n-2, -1, -1):\n        for j in range(nums[i] + 1):\n            dp2[i][j] = dp2[i+1][j]\n            if j < 50:\n                dp2[i][j] += dp2[i+1][j+1]\n            dp2[i][j] %= MOD\n    \n    # Count valid pairs\n    count = 0\n    for i in range(n):\n        count += dp1[i][nums[i]] * dp2[i][nums[i]]\n        count %= MOD\n    \n    return count\n```", "```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_inc = [[0] * (sum(nums) + 1) for _ in range(n)]\n    dp_dec = [[0] * (sum(nums) + 1) for _ in range(n)]\n    \n    # Base cases\n    dp_inc[0][nums[0]] = 1\n    dp_dec[0][nums[0]] = 1\n    \n    # Fill DP tables\n    for i in range(1, n):\n        for j in range(sum(nums) + 1):\n            if j >= nums[i]:\n                dp_inc[i][j] = (dp_inc[i-1][j] + dp_inc[i-1][j-nums[i]]) % MOD\n            else:\n                dp_inc[i][j] = dp_inc[i-1][j]\n            \n            if j <= nums[i]:\n                dp_dec[i][j] = (dp_dec[i-1][j] + dp_dec[i-1][j+nums[i]]) % MOD\n            else:\n                dp_dec[i][j] = dp_dec[i-1][j]\n    \n    # Count valid pairs\n    result = 0\n    for j in range(sum(nums) + 1):\n        result = (result + dp_inc[-1][j] * dp_dec[-1][j]) % MOD\n    \n    return result\n```"]}
{"task_id": "abc372_f", "codes": ["```python\ndef count_ways():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    for i in range(M):\n        X = int(data[3 + 2 * i])\n        Y = int(data[4 + 2 * i])\n        edges.append((X, Y))\n    \n    MOD = 998244353\n    \n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    for k in range(K):\n        new_dp = [[0] * (K + 1) for _ in range(N + 1)]\n        for v in range(1, N + 1):\n            for next_v in range(1, N + 1):\n                if v == next_v:\n                    new_dp[v][k + 1] = (new_dp[v][k + 1] + dp[v][k]) % MOD\n                for X, Y in edges:\n                    if X == v and Y == next_v:\n                        new_dp[v][k + 1] = (new_dp[v][k + 1] + dp[v][k]) % MOD\n        dp = new_dp\n    \n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\ncount_ways()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    index = 3\n    for _ in range(M):\n        X = int(data[index])\n        Y = int(data[index + 1])\n        edges.append((X, Y))\n        index += 2\n    \n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    # Fill dp array\n    for k in range(K):\n        new_dp = [0] * (K + 1)\n        for v in range(1, N + 1):\n            if v == 1:\n                new_dp[(v + 1) % (N + 1)] += dp[v][k]\n            else:\n                new_dp[v - 1] += dp[v][k]\n            new_dp[v - 1] %= MOD\n            for X, Y in edges:\n                if X == v:\n                    new_dp[Y] += dp[v][k]\n                    new_dp[Y] %= MOD\n        dp = new_dp\n    \n    # Sum up the results\n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef count_ways():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    for i in range(M):\n        X = int(data[3 + 2 * i])\n        Y = int(data[4 + 2 * i])\n        edges.append((X, Y))\n    \n    MOD = 998244353\n    \n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    for k in range(K):\n        new_dp = [[0] * (K + 1) for _ in range(N + 1)]\n        for v in range(1, N + 1):\n            for next_v in range(1, N + 1):\n                if v == next_v:\n                    new_dp[v][k + 1] = (new_dp[v][k + 1] + dp[v][k]) % MOD\n                for X, Y in edges:\n                    if X == v and Y == next_v:\n                        new_dp[v][k + 1] = (new_dp[v][k + 1] + dp[v][k]) % MOD\n        dp = new_dp\n    \n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\ncount_ways()", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    index = 3\n    for _ in range(M):\n        X = int(data[index])\n        Y = int(data[index + 1])\n        edges.append((X, Y))\n        index += 2\n    \n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    # Fill dp array\n    for k in range(K):\n        new_dp = [0] * (K + 1)\n        for v in range(1, N + 1):\n            if v == 1:\n                new_dp[(v + 1) % (N + 1)] += dp[v][k]\n            else:\n                new_dp[v - 1] += dp[v][k]\n            new_dp[v - 1] %= MOD\n            for X, Y in edges:\n                if X == v:\n                    new_dp[Y] += dp[v][k]\n                    new_dp[Y] %= MOD\n        dp = new_dp\n    \n    # Sum up the results\n    result = sum(dp[v][K] for v in range(1, N + 1)) % MOD\n    print(result)\n\nmain()\n```"]}
{"task_id": "abc367_f", "codes": ["def can_rearrange_subsequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        if sorted(subseq_A) == sorted(subseq_B):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequences()", "def can_rearrange_subsequence():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        freq_A = [0] * (N + 1)\n        freq_B = [0] * (N + 1)\n        \n        for num in subseq_A:\n            freq_A[num] += 1\n        for num in subseq_B:\n            freq_B[num] += 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequence()"], "passed": [false, false], "raw_code": ["```python\ndef can_rearrange_subsequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        if sorted(subseq_A) == sorted(subseq_B):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequences()\n```", "```python\ndef can_rearrange_subsequence():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        freq_A = [0] * (N + 1)\n        freq_B = [0] * (N + 1)\n        \n        for num in subseq_A:\n            freq_A[num] += 1\n        for num in subseq_B:\n            freq_B[num] += 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequence()\n```"]}
{"task_id": "abc368_e", "codes": ["def find_min_delays(N, M, X1, trains):\n    # Sort trains based on departure time\n    trains.sort(key=lambda x: x[2])\n    \n    # Initialize delays\n    X = [0] * M\n    X[0] = X1\n    \n    # Iterate through trains\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        for j in range(i):\n            A_j, B_j, S_j, T_j = trains[j]\n            if B_j == A_i and T_j <= S_i:\n                X[i] = max(X[i], S_i - T_j + X[j] - X[i])\n    \n    # Print the delays for trains 2 to M\n    print(' '.join(map(str, X[1:])))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nX1 = int(data[2])\ntrains = []\n\nfor i in range(M):\n    A_i = int(data[3 + 4 * i])\n    B_i = int(data[4 + 4 * i])\n    S_i = int(data[5 + 4 * i])\n    T_i = int(data[6 + 4 * i])\n    trains.append((A_i, B_i, S_i, T_i))\n\n# Find and print the minimum delays\nfind_min_delays(N, M, X1, trains)", "def min_delays(N, M, X1, trains):\n    # Sort trains based on departure time\n    trains.sort(key=lambda x: x[2])\n    \n    # Initialize delays array with X1 for the first train\n    X = [X1] + [0] * (M - 1)\n    \n    # Process each train\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        \n        # Find the latest train that can transfer to train i\n        j = i - 1\n        while j >= 0 and trains[j][1] == A_i and trains[j][3] <= S_i:\n            break\n        \n        if j >= 0:\n            # Calculate the required delay for train i\n            X[i] = max(0, S_i - trains[j][3] - X[j])\n    \n    # Print the delays for trains 2 to M\n    print(' '.join(map(str, X[1:])))"], "passed": [false, false], "raw_code": ["```python\ndef find_min_delays(N, M, X1, trains):\n    # Sort trains based on departure time\n    trains.sort(key=lambda x: x[2])\n    \n    # Initialize delays\n    X = [0] * M\n    X[0] = X1\n    \n    # Iterate through trains\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        for j in range(i):\n            A_j, B_j, S_j, T_j = trains[j]\n            if B_j == A_i and T_j <= S_i:\n                X[i] = max(X[i], S_i - T_j + X[j] - X[i])\n    \n    # Print the delays for trains 2 to M\n    print(' '.join(map(str, X[1:])))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nX1 = int(data[2])\ntrains = []\n\nfor i in range(M):\n    A_i = int(data[3 + 4 * i])\n    B_i = int(data[4 + 4 * i])\n    S_i = int(data[5 + 4 * i])\n    T_i = int(data[6 + 4 * i])\n    trains.append((A_i, B_i, S_i, T_i))\n\n# Find and print the minimum delays\nfind_min_delays(N, M, X1, trains)\n```", "```python\ndef min_delays(N, M, X1, trains):\n    # Sort trains based on departure time\n    trains.sort(key=lambda x: x[2])\n    \n    # Initialize delays array with X1 for the first train\n    X = [X1] + [0] * (M - 1)\n    \n    # Process each train\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        \n        # Find the latest train that can transfer to train i\n        j = i - 1\n        while j >= 0 and trains[j][1] == A_i and trains[j][3] <= S_i:\n            break\n        \n        if j >= 0:\n            # Calculate the required delay for train i\n            X[i] = max(0, S_i - trains[j][3] - X[j])\n    \n    # Print the delays for trains 2 to M\n    print(' '.join(map(str, X[1:])))\n```"]}
{"task_id": "abc366_g", "codes": ["def can_assign_numbers(N, M, edges):\n    # Create adjacency list\n    adj_list = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # DFS function to try assigning numbers\n    def dfs(node, parent, assigned):\n        # Try assigning numbers from 1 to 2^60 - 1\n        for num in range(1, 2**60):\n            valid = True\n            for neighbor in adj_list[node]:\n                if neighbor != parent and assigned[neighbor] == -1:\n                    assigned[neighbor] = num ^ assigned[node]\n                    if not dfs(neighbor, node, assigned):\n                        valid = False\n                        break\n                    assigned[neighbor] = -1\n            if valid:\n                return True\n        return False\n\n    # Initialize assignment array with -1 (unassigned)\n    assigned = [-1] * (N + 1)\n    assigned[1] = 0  # Start with vertex 1 assigned 0\n\n    # Perform DFS starting from vertex 1\n    if dfs(1, -1, assigned):\n        # If successful, print the result\n        print('Yes')\n        for i in range(1, N + 1):\n            print(assigned[i], end=' ')\n    else:\n        print('No')\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nedges = [(int(data[2 + 2*i]), int(data[3 + 2*i])) for i in range(M)]\ncan_assign_numbers(N, M, edges)", "```python\nimport numpy as np\n\ndef solve_xor_graph():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    # Construct adjacency matrix\n    adj_matrix = np.zeros((N, N), dtype=int)\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        adj_matrix[u][v] = 1\n        adj_matrix[v][u] = 1\n        index += 2\n    \n    # Construct the system of equations\n    A = np.zeros((N, N), dtype=int)\n    b = np.zeros(N, dtype=int)\n    \n    for v in range(N):\n        if np.sum(adj_matrix[v]) > 0:\n            A[v, adj_matrix[v] == 1] = 1\n            b[v] = 0\n    \n    # Solve the system of equations\n    try:\n        solution = np.linalg.solve(A, b)\n        if not np.allclose(solution, np.round(solution)):\n            print(\"No\")\n            return\n        solution = np.round(solution).astype(int)\n        print(\"Yes\")\n        print(' '.join(map(str, solution)))\n    except np.linalg.LinAlgError:\n        print(\"No\")\n\n# Call the function\nsolve_xor_graph()"], "passed": [false, false], "raw_code": ["def can_assign_numbers(N, M, edges):\n    # Create adjacency list\n    adj_list = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # DFS function to try assigning numbers\n    def dfs(node, parent, assigned):\n        # Try assigning numbers from 1 to 2^60 - 1\n        for num in range(1, 2**60):\n            valid = True\n            for neighbor in adj_list[node]:\n                if neighbor != parent and assigned[neighbor] == -1:\n                    assigned[neighbor] = num ^ assigned[node]\n                    if not dfs(neighbor, node, assigned):\n                        valid = False\n                        break\n                    assigned[neighbor] = -1\n            if valid:\n                return True\n        return False\n\n    # Initialize assignment array with -1 (unassigned)\n    assigned = [-1] * (N + 1)\n    assigned[1] = 0  # Start with vertex 1 assigned 0\n\n    # Perform DFS starting from vertex 1\n    if dfs(1, -1, assigned):\n        # If successful, print the result\n        print('Yes')\n        for i in range(1, N + 1):\n            print(assigned[i], end=' ')\n    else:\n        print('No')\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nedges = [(int(data[2 + 2*i]), int(data[3 + 2*i])) for i in range(M)]\ncan_assign_numbers(N, M, edges)", "```python\nimport numpy as np\n\ndef solve_xor_graph():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    # Construct adjacency matrix\n    adj_matrix = np.zeros((N, N), dtype=int)\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        adj_matrix[u][v] = 1\n        adj_matrix[v][u] = 1\n        index += 2\n    \n    # Construct the system of equations\n    A = np.zeros((N, N), dtype=int)\n    b = np.zeros(N, dtype=int)\n    \n    for v in range(N):\n        if np.sum(adj_matrix[v]) > 0:\n            A[v, adj_matrix[v] == 1] = 1\n            b[v] = 0\n    \n    # Solve the system of equations\n    try:\n        solution = np.linalg.solve(A, b)\n        if not np.allclose(solution, np.round(solution)):\n            print(\"No\")\n            return\n        solution = np.round(solution).astype(int)\n        print(\"Yes\")\n        print(' '.join(map(str, solution)))\n    except np.linalg.LinAlgError:\n        print(\"No\")\n\n# Call the function\nsolve_xor_graph()"]}
{"task_id": "abc371_e", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    \n    for i in range(N):\n        distinct_count = 0\n        seen = set()\n        \n        for j in range(i, N):\n            if A[j] not in seen:\n                distinct_count += 1\n                seen.add(A[j])\n            \n            total_sum += distinct_count\n    \n    print(total_sum)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Initialize variables\n    total_sum = 0\n    \n    # Iterate over each starting point i\n    for i in range(N):\n        distinct_count = 0\n        seen = set()\n        \n        # Iterate over each ending point j starting from i\n        for j in range(i, N):\n            if A[j] not in seen:\n                distinct_count += 1\n                seen.add(A[j])\n            total_sum += distinct_count\n    \n    print(total_sum)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    \n    for i in range(N):\n        distinct_count = 0\n        seen = set()\n        \n        for j in range(i, N):\n            if A[j] not in seen:\n                distinct_count += 1\n                seen.add(A[j])\n            \n            total_sum += distinct_count\n    \n    print(total_sum)\n\nmain()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Initialize variables\n    total_sum = 0\n    \n    # Iterate over each starting point i\n    for i in range(N):\n        distinct_count = 0\n        seen = set()\n        \n        # Iterate over each ending point j starting from i\n        for j in range(i, N):\n            if A[j] not in seen:\n                distinct_count += 1\n                seen.add(A[j])\n            total_sum += distinct_count\n    \n    print(total_sum)\n\nmain()\n```"]}
{"task_id": "arc182_e", "codes": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    # Step 1: Find the minimum value of (Ck + A_i) % M for k = 0 to M-1\n    min_values = []\n    for k in range(M):\n        min_val = float('inf')\n        for a in A:\n            val = (C * k + a) % M\n            if val < min_val:\n                min_val = val\n        min_values.append(min_val)\n    \n    # Step 2: Sum up the minimum values for complete periods\n    full_periods = K // M\n    total_sum = full_periods * sum(min_values)\n    \n    # Step 3: Add the contribution of the remaining part of K\n    remaining_k = K % M\n    for k in range(remaining_k):\n        min_val = float('inf')\n        for a in A:\n            val = (C * k + a) % M\n            if val < min_val:\n                min_val = val\n        total_sum += min_val\n    \n    print(total_sum)\n\nmain()", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    # Find the minimum value for one complete cycle of M\n    min_val = float('inf')\n    for a in A:\n        for k in range(M):\n            val = (C * k + a) % M\n            if val < min_val:\n                min_val = val\n    \n    # Number of full cycles\n    full_cycles = K // M\n    # Remaining terms\n    remaining_terms = K % M\n    \n    # Total sum\n    total_sum = full_cycles * min_val\n    \n    # Add the minimum values for the remaining terms\n    for k in range(remaining_terms):\n        val = (C * k + A[0]) % M\n        if val < min_val:\n            min_val = val\n        total_sum += min_val\n    \n    print(total_sum)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    # Step 1: Find the minimum value of (Ck + A_i) % M for k = 0 to M-1\n    min_values = []\n    for k in range(M):\n        min_val = float('inf')\n        for a in A:\n            val = (C * k + a) % M\n            if val < min_val:\n                min_val = val\n        min_values.append(min_val)\n    \n    # Step 2: Sum up the minimum values for complete periods\n    full_periods = K // M\n    total_sum = full_periods * sum(min_values)\n    \n    # Step 3: Add the contribution of the remaining part of K\n    remaining_k = K % M\n    for k in range(remaining_k):\n        min_val = float('inf')\n        for a in A:\n            val = (C * k + a) % M\n            if val < min_val:\n                min_val = val\n        total_sum += min_val\n    \n    print(total_sum)\n\nmain()", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    # Find the minimum value for one complete cycle of M\n    min_val = float('inf')\n    for a in A:\n        for k in range(M):\n            val = (C * k + a) % M\n            if val < min_val:\n                min_val = val\n    \n    # Number of full cycles\n    full_cycles = K // M\n    # Remaining terms\n    remaining_terms = K % M\n    \n    # Total sum\n    total_sum = full_cycles * min_val\n    \n    # Add the minimum values for the remaining terms\n    for k in range(remaining_terms):\n        val = (C * k + A[0]) % M\n        if val < min_val:\n            min_val = val\n        total_sum += min_val\n    \n    print(total_sum)\n\nmain()"]}
{"task_id": "abc372_g", "codes": ["```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        \n        max_x = 0\n        max_y = 0\n        \n        for _ in range(N):\n            A_i = int(data[index])\n            B_i = int(data[index + 1])\n            C_i = int(data[index + 2])\n            index += 3\n            \n            if A_i != 0:\n                max_x = min(max_x, (C_i - 1) // A_i)\n            if B_i != 0:\n                max_y = min(max_y, (C_i - 1) // B_i)\n        \n        results.append(max_x * max_y)\n    \n    for result in results:\n        print(result)\n\ncount_valid_pairs()", "def count_valid_pairs(A, B, C):\n    N = len(A)\n    max_x = min(C[i] // A[i] for i in range(N))\n    max_y = min(C[i] // B[i] for i in range(N))\n    \n    def is_valid(x, y):\n        return all(A[i] * x + B[i] * y < C[i] for i in range(N))\n    \n    count = 0\n    for x in range(1, max_x + 1):\n        for y in range(1, max_y + 1):\n            if is_valid(x, y):\n                count += 1\n                \n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        \n        A = []\n        B = []\n        C = []\n        for i in range(N):\n            A.append(int(data[index]))\n            B.append(int(data[index + 1]))\n            C.append(int(data[index + 2]))\n            index += 3\n            \n        results.append(count_valid_pairs(A, B, C))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        \n        max_x = 0\n        max_y = 0\n        \n        for _ in range(N):\n            A_i = int(data[index])\n            B_i = int(data[index + 1])\n            C_i = int(data[index + 2])\n            index += 3\n            \n            if A_i != 0:\n                max_x = min(max_x, (C_i - 1) // A_i)\n            if B_i != 0:\n                max_y = min(max_y, (C_i - 1) // B_i)\n        \n        results.append(max_x * max_y)\n    \n    for result in results:\n        print(result)\n\ncount_valid_pairs()", "```python\ndef count_valid_pairs(A, B, C):\n    N = len(A)\n    max_x = min(C[i] // A[i] for i in range(N))\n    max_y = min(C[i] // B[i] for i in range(N))\n    \n    def is_valid(x, y):\n        return all(A[i] * x + B[i] * y < C[i] for i in range(N))\n    \n    count = 0\n    for x in range(1, max_x + 1):\n        for y in range(1, max_y + 1):\n            if is_valid(x, y):\n                count += 1\n                \n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        \n        A = []\n        B = []\n        C = []\n        for i in range(N):\n            A.append(int(data[index]))\n            B.append(int(data[index + 1]))\n            C.append(int(data[index + 2]))\n            index += 3\n            \n        results.append(count_valid_pairs(A, B, C))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "arc181_b", "codes": ["def check_transitions(X, Y):\n    count_X_0_to_1 = 0\n    count_X_1_to_0 = 0\n    count_Y_0_to_1 = 0\n    count_Y_1_to_0 = 0\n    \n    for i in range(1, len(X)):\n        if X[i] == '1' and X[i-1] == '0':\n            count_X_0_to_1 += 1\n        elif X[i] == '0' and X[i-1] == '1':\n            count_X_1_to_0 += 1\n    \n    for i in range(1, len(Y)):\n        if Y[i] == '1' and Y[i-1] == '0':\n            count_Y_0_to_1 += 1\n        elif Y[i] == '0' and Y[i-1] == '1':\n            count_Y_1_to_0 += 1\n    \n    return count_X_0_to_1 == count_X_1_to_0 and count_Y_0_to_1 == count_Y_1_to_0\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        if check_transitions(X, Y):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n        \n        index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "def f(S, T, X):\n    result = \"\"\n    for char in X:\n        if char == '0':\n            result += S\n        else:\n            result += T\n    return result\n\ndef check_t_exists(S, X, Y):\n    count_X_0 = X.count('0')\n    count_X_1 = X.count('1')\n    count_Y_0 = Y.count('0')\n    count_Y_1 = Y.count('1')\n    \n    if count_X_0 != count_Y_0 or count_X_1 != count_Y_1:\n        return \"No\"\n    \n    # Construct T based on the first occurrence of X and Y\n    T = \"\"\n    i = 0\n    while i < len(X):\n        if X[i] == '0':\n            T += S\n        else:\n            T += S\n        i += 1\n    \n    return \"Yes\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        result = check_t_exists(S, X, Y)\n        results.append(result)\n        \n        index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef check_transitions(X, Y):\n    count_X_0_to_1 = 0\n    count_X_1_to_0 = 0\n    count_Y_0_to_1 = 0\n    count_Y_1_to_0 = 0\n    \n    for i in range(1, len(X)):\n        if X[i] == '1' and X[i-1] == '0':\n            count_X_0_to_1 += 1\n        elif X[i] == '0' and X[i-1] == '1':\n            count_X_1_to_0 += 1\n    \n    for i in range(1, len(Y)):\n        if Y[i] == '1' and Y[i-1] == '0':\n            count_Y_0_to_1 += 1\n        elif Y[i] == '0' and Y[i-1] == '1':\n            count_Y_1_to_0 += 1\n    \n    return count_X_0_to_1 == count_X_1_to_0 and count_Y_0_to_1 == count_Y_1_to_0\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        if check_transitions(X, Y):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n        \n        index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\ndef f(S, T, X):\n    result = \"\"\n    for char in X:\n        if char == '0':\n            result += S\n        else:\n            result += T\n    return result\n\ndef check_t_exists(S, X, Y):\n    count_X_0 = X.count('0')\n    count_X_1 = X.count('1')\n    count_Y_0 = Y.count('0')\n    count_Y_1 = Y.count('1')\n    \n    if count_X_0 != count_Y_0 or count_X_1 != count_Y_1:\n        return \"No\"\n    \n    # Construct T based on the first occurrence of X and Y\n    T = \"\"\n    i = 0\n    while i < len(X):\n        if X[i] == '0':\n            T += S\n        else:\n            T += S\n        i += 1\n    \n    return \"Yes\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        result = check_t_exists(S, X, Y)\n        results.append(result)\n        \n        index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc370_e", "codes": ["def count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    \n    # Base case: one way to partition zero elements with sum zero\n    dp[0][0] = 1\n    \n    # Fill the DP table\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= A[i - 1]:\n                dp[i][j] += dp[i - 1][j - A[i - 1]]\n            dp[i][j] %= MOD\n    \n    # Sum up all valid partitions of the entire sequence\n    result = sum(dp[N]) % MOD\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Get the result\nresult = count_partitions(N, K, A)\n\n# Print the result\nprint(result)", "```python\ndef count_partitions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    MOD = 998244353\n    \n    # dp[i][j] will store the number of ways to partition the first i elements\n    # such that the last subsequence ends at position j\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            dp[i][j] = dp[i - 1][j - 1]\n            if prefix_sum[j] - prefix_sum[i - 1] != K:\n                dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= MOD\n    \n    result = 0\n    for j in range(1, N + 1):\n        result += dp[N][j]\n        result %= MOD\n    \n    print(result)\n\ncount_partitions()"], "passed": [false, false], "raw_code": ["```python\ndef count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    \n    # Base case: one way to partition zero elements with sum zero\n    dp[0][0] = 1\n    \n    # Fill the DP table\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= A[i - 1]:\n                dp[i][j] += dp[i - 1][j - A[i - 1]]\n            dp[i][j] %= MOD\n    \n    # Sum up all valid partitions of the entire sequence\n    result = sum(dp[N]) % MOD\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Get the result\nresult = count_partitions(N, K, A)\n\n# Print the result\nprint(result)\n```", "```python\ndef count_partitions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    MOD = 998244353\n    \n    # dp[i][j] will store the number of ways to partition the first i elements\n    # such that the last subsequence ends at position j\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            dp[i][j] = dp[i - 1][j - 1]\n            if prefix_sum[j] - prefix_sum[i - 1] != K:\n                dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= MOD\n    \n    result = 0\n    for j in range(1, N + 1):\n        result += dp[N][j]\n        result %= MOD\n    \n    print(result)\n\ncount_partitions()"]}
{"task_id": "arc181_c", "codes": ["def generate_grid(N, P, Q):\n    # Initialize the grid with zeros\n    grid = [[0] * N for _ in range(N)]\n    \n    # Fill the first row and first column based on P and Q\n    for i in range(N):\n        grid[0][i] = i + 1\n        grid[i][0] = i + 1\n    \n    # Function to check if placing num in grid[row][col] is valid\n    def is_valid(row, col, num):\n        for i in range(col):\n            if grid[row][i] == num:\n                return False\n        for i in range(row):\n            if grid[i][col] == num:\n                return False\n        return True\n    \n    # Backtracking function to fill the grid\n    def backtrack(row, col):\n        if row == N:\n            return True\n        if col == N:\n            return backtrack(row + 1, 0)\n        \n        for num in range(1, N + 1):\n            if is_valid(row, col, num):\n                grid[row][col] = num\n                if backtrack(row, col + 1):\n                    return True\n                grid[row][col] = 0\n        \n        return False\n    \n    # Start backtracking from the second row and second column\n    backtrack(1, 1)\n    \n    # Print the grid\n    for row in grid:\n        print(''.join(str(x) for x in row))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)", "def generate_grid(N, P, Q):\n    grid = [['0'] * N for _ in range(N)]\n    \n    # Fill the grid with '0's and '1's\n    for i in range(N):\n        for j in range(N):\n            if j < N // 2:\n                grid[i][j] = '0'\n            else:\n                grid[i][j] = '1'\n    \n    # Sort the columns according to Q\n    for col in range(N):\n        indices = sorted(range(N), key=lambda x: ''.join(grid[x][col]))\n        for new_idx, old_idx in enumerate(indices):\n            grid[new_idx][:] = grid[old_idx]\n    \n    return grid\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    Q = list(map(int, data[N+1:2*N+1]))\n    \n    grid = generate_grid(N, P, Q)\n    \n    for row in grid:\n        print(''.join(row))\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef generate_grid(N, P, Q):\n    # Initialize the grid with zeros\n    grid = [[0] * N for _ in range(N)]\n    \n    # Fill the first row and first column based on P and Q\n    for i in range(N):\n        grid[0][i] = i + 1\n        grid[i][0] = i + 1\n    \n    # Function to check if placing num in grid[row][col] is valid\n    def is_valid(row, col, num):\n        for i in range(col):\n            if grid[row][i] == num:\n                return False\n        for i in range(row):\n            if grid[i][col] == num:\n                return False\n        return True\n    \n    # Backtracking function to fill the grid\n    def backtrack(row, col):\n        if row == N:\n            return True\n        if col == N:\n            return backtrack(row + 1, 0)\n        \n        for num in range(1, N + 1):\n            if is_valid(row, col, num):\n                grid[row][col] = num\n                if backtrack(row, col + 1):\n                    return True\n                grid[row][col] = 0\n        \n        return False\n    \n    # Start backtracking from the second row and second column\n    backtrack(1, 1)\n    \n    # Print the grid\n    for row in grid:\n        print(''.join(str(x) for x in row))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)\n```", "```python\ndef generate_grid(N, P, Q):\n    grid = [['0'] * N for _ in range(N)]\n    \n    # Fill the grid with '0's and '1's\n    for i in range(N):\n        for j in range(N):\n            if j < N // 2:\n                grid[i][j] = '0'\n            else:\n                grid[i][j] = '1'\n    \n    # Sort the columns according to Q\n    for col in range(N):\n        indices = sorted(range(N), key=lambda x: ''.join(grid[x][col]))\n        for new_idx, old_idx in enumerate(indices):\n            grid[new_idx][:] = grid[old_idx]\n    \n    return grid\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    Q = list(map(int, data[N+1:2*N+1]))\n    \n    grid = generate_grid(N, P, Q)\n    \n    for row in grid:\n        print(''.join(row))\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc373_f", "codes": ["```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    items = []\n    \n    index = 2\n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        items.append((w, v))\n        index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for w, v in items:\n        for wj in range(W, w - 1, -1):\n            for k in range(1, 10**10 + 1):\n                if w * k > wj:\n                    break\n                dp[wj] = max(dp[wj], dp[wj - w * k] + k * v - k**2)\n    \n    print(dp[W])\n\nmax_happiness()", "def max_happiness(N, W, weights, values):\n    dp = [0] * (W + 1)\n    for i in range(N):\n        for w in range(W, weights[i] - 1, -1):\n            for k in range(1, min(w // weights[i], 10**10) + 1):\n                dp[w] = max(dp[w], dp[w - k * weights[i]] + k * values[i] - k ** 2)\n    return dp[W]\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nw = int(data[1])\nweights = []\nvalues = []\nfor i in range(n):\n    weights.append(int(data[2 + 2 * i]))\n    values.append(int(data[3 + 2 * i]))\nprint(max_happiness(n, w, weights, values))"], "passed": [false, false], "raw_code": ["```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    items = []\n    \n    index = 2\n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        items.append((w, v))\n        index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for w, v in items:\n        for wj in range(W, w - 1, -1):\n            for k in range(1, 10**10 + 1):\n                if w * k > wj:\n                    break\n                dp[wj] = max(dp[wj], dp[wj - w * k] + k * v - k**2)\n    \n    print(dp[W])\n\nmax_happiness()", "def max_happiness(N, W, weights, values):\n    dp = [0] * (W + 1)\n    for i in range(N):\n        for w in range(W, weights[i] - 1, -1):\n            for k in range(1, min(w // weights[i], 10**10) + 1):\n                dp[w] = max(dp[w], dp[w - k * weights[i]] + k * values[i] - k ** 2)\n    return dp[W]\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nw = int(data[1])\nweights = []\nvalues = []\nfor i in range(n):\n    weights.append(int(data[2 + 2 * i]))\n    values.append(int(data[3 + 2 * i]))\nprint(max_happiness(n, w, weights, values))"]}
{"task_id": "3563", "codes": ["def maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(m - 1, -1, -1):\n        for row in range(n):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score", "def maxScore(grid):\n    rows, cols = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(cols - 1, -1, -1):\n        for row in range(rows):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score"], "passed": [false, false], "raw_code": ["```python\ndef maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(m - 1, -1, -1):\n        for row in range(n):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score\n```", "```python\ndef maxScore(grid):\n    rows, cols = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(cols - 1, -1, -1):\n        for row in range(rows):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score\n```"]}
{"task_id": "arc183_c", "codes": ["```python\ndef count_permutations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    conditions = []\n    for _ in range(M):\n        L = int(data[index]) - 1\n        R = int(data[index + 1]) - 1\n        X = int(data[index + 2]) - 1\n        conditions.append((L, R, X))\n        index += 3\n    \n    MOD = 998244353\n    \n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[1][1] = 1\n    \n    for i in range(2, N + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = sum(dp[i - 1][k] for k in range(1, i)) % MOD\n            if j > 1:\n                dp[i][j] -= dp[i - 1][j - 1]\n                dp[i][j] %= MOD\n    \n    for L, R, X in conditions:\n        for j in range(X + 1, R + 1):\n            dp[R + 1][j] -= dp[L][j - 1]\n            dp[R + 1][j] %= MOD\n    \n    result = sum(dp[N][j] for j in range(1, N + 1)) % MOD\n    print(result)\n\ncount_permutations()", "```python\ndef count_valid_permutations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    conditions = []\n    for _ in range(M):\n        L = int(data[index]) - 1\n        R = int(data[index + 1]) - 1\n        X = int(data[index + 2]) - 1\n        conditions.append((L, R, X))\n        index += 3\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * N for _ in range(N)]\n    for j in range(N):\n        dp[0][j] = 1\n    \n    # Process each condition\n    for L, R, X in conditions:\n        new_dp = [[0] * N for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                if j == X:\n                    continue\n                if i < L or i > R:\n                    new_dp[i][j] = dp[i][j]\n                else:\n                    if j > X:\n                        new_dp[i][j] = (new_dp[i][j] + dp[i-1][j-1]) % MOD\n                    else:\n                        new_dp[i][j] = (new_dp[i][j] + dp[i-1][j]) % MOD\n        dp = new_dp\n    \n    # Sum up the valid permutations for all possible last elements\n    result = sum(dp[N-1]) % MOD\n    print(result)\n\ncount_valid_permutations()"], "passed": [false, false], "raw_code": ["```python\ndef count_permutations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    conditions = []\n    for _ in range(M):\n        L = int(data[index]) - 1\n        R = int(data[index + 1]) - 1\n        X = int(data[index + 2]) - 1\n        conditions.append((L, R, X))\n        index += 3\n    \n    MOD = 998244353\n    \n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[1][1] = 1\n    \n    for i in range(2, N + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = sum(dp[i - 1][k] for k in range(1, i)) % MOD\n            if j > 1:\n                dp[i][j] -= dp[i - 1][j - 1]\n                dp[i][j] %= MOD\n    \n    for L, R, X in conditions:\n        for j in range(X + 1, R + 1):\n            dp[R + 1][j] -= dp[L][j - 1]\n            dp[R + 1][j] %= MOD\n    \n    result = sum(dp[N][j] for j in range(1, N + 1)) % MOD\n    print(result)\n\ncount_permutations()", "```python\ndef count_valid_permutations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    conditions = []\n    for _ in range(M):\n        L = int(data[index]) - 1\n        R = int(data[index + 1]) - 1\n        X = int(data[index + 2]) - 1\n        conditions.append((L, R, X))\n        index += 3\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * N for _ in range(N)]\n    for j in range(N):\n        dp[0][j] = 1\n    \n    # Process each condition\n    for L, R, X in conditions:\n        new_dp = [[0] * N for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                if j == X:\n                    continue\n                if i < L or i > R:\n                    new_dp[i][j] = dp[i][j]\n                else:\n                    if j > X:\n                        new_dp[i][j] = (new_dp[i][j] + dp[i-1][j-1]) % MOD\n                    else:\n                        new_dp[i][j] = (new_dp[i][j] + dp[i-1][j]) % MOD\n        dp = new_dp\n    \n    # Sum up the valid permutations for all possible last elements\n    result = sum(dp[N-1]) % MOD\n    print(result)\n\ncount_valid_permutations()"]}
{"task_id": "abc370_f", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    A.sort(reverse=True)\n    min_weight = float('inf')\n    groups = [0] * K\n    for i in range(N):\n        min_group_index = groups.index(min(groups))\n        groups[min_group_index] += A[i]\n        min_weight = min(min_weight, groups[min_group_index])\n    cuts_never_cut = 0\n    for i in range(1, N):\n        if A[i] == A[i - 1]:\n            cuts_never_cut += 1\n    print(min_weight, cuts_never_cut)\n\nmain()", "```python\ndef can_partition(masses, K, min_weight):\n    n = len(masses)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + masses[i - 1]\n    \n    current_sum = 0\n    cut_lines_cut = 0\n    segments = 0\n    \n    for i in range(n):\n        current_sum += masses[i]\n        if current_sum >= min_weight:\n            segments += 1\n            current_sum = 0\n            if i < n - 1:\n                cut_lines_cut += 1\n    \n    return segments >= K, cut_lines_cut\n\ndef find_min_weight_and_cut_lines(masses, K):\n    total_sum = sum(masses)\n    low, high = 1, total_sum\n    best_min_weight = 0\n    best_cut_lines_cut = float('inf')\n    \n    while low <= high:\n        mid = (low + high) // 2"], "passed": [false, false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    A.sort(reverse=True)\n    min_weight = float('inf')\n    groups = [0] * K\n    for i in range(N):\n        min_group_index = groups.index(min(groups))\n        groups[min_group_index] += A[i]\n        min_weight = min(min_weight, groups[min_group_index])\n    cuts_never_cut = 0\n    for i in range(1, N):\n        if A[i] == A[i - 1]:\n            cuts_never_cut += 1\n    print(min_weight, cuts_never_cut)\n\nmain()", "```python\ndef can_partition(masses, K, min_weight):\n    n = len(masses)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + masses[i - 1]\n    \n    current_sum = 0\n    cut_lines_cut = 0\n    segments = 0\n    \n    for i in range(n):\n        current_sum += masses[i]\n        if current_sum >= min_weight:\n            segments += 1\n            current_sum = 0\n            if i < n - 1:\n                cut_lines_cut += 1\n    \n    return segments >= K, cut_lines_cut\n\ndef find_min_weight_and_cut_lines(masses, K):\n    total_sum = sum(masses)\n    low, high = 1, total_sum\n    best_min_weight = 0\n    best_cut_lines_cut = float('inf')\n    \n    while low <= high:\n        mid = (low + high) // 2"]}
{"task_id": "3552", "codes": ["def largest_k_palindrome(n, k):\n    def is_divisible_by_k(num_str):\n        return int(num_str) % k == 0\n    \n    def generate_half(length):\n        if length == 1:\n            return [str(i) for i in range(1, 10)]\n        else:\n            half = []\n            for i in range(10**(length//2 - 1), 10**(length//2)):\n                half.append(str(i))\n            return half\n    \n    def form_palindrome(half, is_odd):\n        if is_odd:\n            return half + half[:-1][::-1]\n        else:\n            return half + half[::-1]\n    \n    max_palindrome = \"\"\n    for length in range(n, 0, -1):\n        half_length = (length + 1) // 2\n        half_digits = generate_half(half_length)\n        \n        for digit in half_digits:\n            palindrome = form_palindrome(digit, length % 2 != 0)\n            if is_divisible_by_k(palindrome):\n                max_palindrome = palindrome\n                break\n        \n        if max_palindrome:\n            break\n    \n    return max_palindrome", "def largest_k_palindrome(n, k):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    half_length = (n + 1) // 2\n    for i in range(10**(half_length) - 1, 10**(half_length - 1) - 1, -1):\n        first_half = str(i)\n        if n % 2 == 0:\n            candidate = int(first_half + first_half[::-1])\n        else:\n            candidate = int(first_half + first_half[-2::-1])\n        if candidate % k == 0:\n            return str(candidate)\n    return \"0\"\n\n# Example usage:\nprint(largest_k_palindrome(3, 5))  # Output: \"595\"\nprint(largest_k_palindrome(1, 4))  # Output: \"8\"\nprint(largest_k_palindrome(5, 6))  # Output: \"89898\""], "passed": [false, false], "raw_code": ["```python\ndef largest_k_palindrome(n, k):\n    def is_divisible_by_k(num_str):\n        return int(num_str) % k == 0\n    \n    def generate_half(length):\n        if length == 1:\n            return [str(i) for i in range(1, 10)]\n        else:\n            half = []\n            for i in range(10**(length//2 - 1), 10**(length//2)):\n                half.append(str(i))\n            return half\n    \n    def form_palindrome(half, is_odd):\n        if is_odd:\n            return half + half[:-1][::-1]\n        else:\n            return half + half[::-1]\n    \n    max_palindrome = \"\"\n    for length in range(n, 0, -1):\n        half_length = (length + 1) // 2\n        half_digits = generate_half(half_length)\n        \n        for digit in half_digits:\n            palindrome = form_palindrome(digit, length % 2 != 0)\n            if is_divisible_by_k(palindrome):\n                max_palindrome = palindrome\n                break\n        \n        if max_palindrome:\n            break\n    \n    return max_palindrome\n```", "```python\ndef largest_k_palindrome(n, k):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    half_length = (n + 1) // 2\n    for i in range(10**(half_length) - 1, 10**(half_length - 1) - 1, -1):\n        first_half = str(i)\n        if n % 2 == 0:\n            candidate = int(first_half + first_half[::-1])\n        else:\n            candidate = int(first_half + first_half[-2::-1])\n        if candidate % k == 0:\n            return str(candidate)\n    return \"0\"\n\n# Example usage:\nprint(largest_k_palindrome(3, 5))  # Output: \"595\"\nprint(largest_k_palindrome(1, 4))  # Output: \"8\"\nprint(largest_k_palindrome(5, 6))  # Output: \"89898\"\n```"]}
{"task_id": "3531", "codes": ["def min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times_to_die = [(h / d) for h, d in zip(health, damage)]\n    \n    # Sort enemies by the time it takes for them to die in descending order\n    sorted_enemies = sorted(zip(times_to_die, damage, health), reverse=True)\n    \n    total_damage = 0\n    current_time = 0\n    \n    # Simulate the process of Bob attacking the enemies\n    for _, d, h in sorted_enemies:\n        if h > 0:\n            # Calculate the number of attacks needed to kill the enemy\n            attacks_needed = -(-h // power)  # Ceiling division\n            total_damage += attacks_needed * d\n            current_time += attacks_needed\n    \n    return int(total_damage)", "def min_damage(power, damage, health):\n    n = len(damage)\n    time_to_defeat = [(health[i] - 1) // power + 1 for i in range(n)]\n    enemies = sorted(range(n), key=lambda i: time_to_defeat[i])\n    \n    total_damage = 0\n    for i in enemies:\n        total_damage += time_to_defeat[i] * damage[i]\n    \n    return total_damage"], "passed": [false, false], "raw_code": ["```python\ndef min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times_to_die = [(h / d) for h, d in zip(health, damage)]\n    \n    # Sort enemies by the time it takes for them to die in descending order\n    sorted_enemies = sorted(zip(times_to_die, damage, health), reverse=True)\n    \n    total_damage = 0\n    current_time = 0\n    \n    # Simulate the process of Bob attacking the enemies\n    for _, d, h in sorted_enemies:\n        if h > 0:\n            # Calculate the number of attacks needed to kill the enemy\n            attacks_needed = -(-h // power)  # Ceiling division\n            total_damage += attacks_needed * d\n            current_time += attacks_needed\n    \n    return int(total_damage)\n```", "```python\ndef min_damage(power, damage, health):\n    n = len(damage)\n    time_to_defeat = [(health[i] - 1) // power + 1 for i in range(n)]\n    enemies = sorted(range(n), key=lambda i: time_to_defeat[i])\n    \n    total_damage = 0\n    for i in enemies:\n        total_damage += time_to_defeat[i] * damage[i]\n    \n    return total_damage\n```"]}
{"task_id": "abc371_g", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    A = list(map(int, data[N+1:]))\n\n    # Create a mapping from each element to its position in A\n    pos = {a: i for i, a in enumerate(A)}\n\n    # Find cycles in the permutation P\n    visited = [False] * N\n    cycles = []\n    for i in range(N):\n        if not visited[i]:\n            cycle = []\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                cycle.append(x)\n                x = P[x] - 1\n            cycles.append(cycle)\n\n    # Sort each cycle independently\n    sorted_A = A[:]\n    for cycle in cycles:\n        cycle_values = [sorted_A[pos[A[cycle[j]]]] for j in range(len(cycle))]\n        cycle_values.sort()\n        for j in range(len(cycle)):\n            sorted_A[pos[A[cycle[j]]]] = cycle_values[j]\n\n    # Print the resulting array\n    print(' '.join(map(str, sorted_A)))\n\nif __name__ == '__main__':\n    main()", "```python\ndef find(parent, i):\n    if parent[i] == i:\n        return i\n    return find(parent, parent[i])\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef get_cycles(N, P):\n    parent = list(range(N))\n    rank = [0] * N\n    \n    for i in range(N):\n        union(parent, rank, i, P[i] - 1)\n    \n    cycles = {}\n    for i in range(N):\n        root = find(parent, i)\n        if root not in cycles:\n            cycles[root] = []\n        cycles[root].append(i)\n    \n    return cycles\n\ndef sort_cycles(A, cycles):\n    for cycle in cycles.values():\n        cycle_indices = [i for i in cycle]\n        cycle_values = [A[i] for i in cycle_indices]\n        cycle_values.sort()\n        \n        for i, value in zip(cycle_indices, cycle_values):\n            A[i] = value\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))"], "passed": [false, false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    A = list(map(int, data[N+1:]))\n\n    # Create a mapping from each element to its position in A\n    pos = {a: i for i, a in enumerate(A)}\n\n    # Find cycles in the permutation P\n    visited = [False] * N\n    cycles = []\n    for i in range(N):\n        if not visited[i]:\n            cycle = []\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                cycle.append(x)\n                x = P[x] - 1\n            cycles.append(cycle)\n\n    # Sort each cycle independently\n    sorted_A = A[:]\n    for cycle in cycles:\n        cycle_values = [sorted_A[pos[A[cycle[j]]]] for j in range(len(cycle))]\n        cycle_values.sort()\n        for j in range(len(cycle)):\n            sorted_A[pos[A[cycle[j]]]] = cycle_values[j]\n\n    # Print the resulting array\n    print(' '.join(map(str, sorted_A)))\n\nif __name__ == '__main__':\n    main()", "```python\ndef find(parent, i):\n    if parent[i] == i:\n        return i\n    return find(parent, parent[i])\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef get_cycles(N, P):\n    parent = list(range(N))\n    rank = [0] * N\n    \n    for i in range(N):\n        union(parent, rank, i, P[i] - 1)\n    \n    cycles = {}\n    for i in range(N):\n        root = find(parent, i)\n        if root not in cycles:\n            cycles[root] = []\n        cycles[root].append(i)\n    \n    return cycles\n\ndef sort_cycles(A, cycles):\n    for cycle in cycles.values():\n        cycle_indices = [i for i in cycle]\n        cycle_values = [A[i] for i in cycle_indices]\n        cycle_values.sort()\n        \n        for i, value in zip(cycle_indices, cycle_values):\n            A[i] = value\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))"]}
{"task_id": "arc181_d", "codes": ["import sys\nfrom bisect import bisect_left\n\ndef fenwick_tree(n):\n    tree = [0] * (n + 1)\n\n    def update(i, val):\n        while i <= n:\n            tree[i] += val\n            i += i & -i\n\n    def query(i):\n        sum_val = 0\n        while i > 0:\n            sum_val += tree[i]\n            i -= i & -i\n        return sum_val\n\n    return update, query\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n\n    # Initialize Fenwick Tree\n    update, query = fenwick_tree(N)\n\n    # Calculate initial inversion number\n    inversions = 0\n    for i in range(1, N):\n        inversions += query(P[i]-1)\n        update(P[i], 1)\n\n    # Print initial inversion number\n    print(inversions)\n\n    # Process each operation A_i\n    for a in A:\n        idx = bisect_left(P, a)\n        if idx > 0:\n            inversions -= query(idx-1)\n        update(a, 1)\n        if idx < N:\n            inversions -= query(N) - query(idx)\n        print(inversions)\n\nif __name__ == '__main__':\n    main()", "def fenwick_tree(n):\n    tree = [0] * (n + 1)\n    \n    def update(i, delta):\n        while i <= n:\n            tree[i] += delta\n            i += i & -i\n    \n    def query(i):\n        result = 0\n        while i > 0:\n            result += tree[i]\n            i -= i & -i\n        return result\n    \n    return update, query\n\ndef apply_operations(N, P, A):\n    update, query = fenwick_tree(N)\n    inversions = 0\n    \n    for a in A:\n        # Find the position of a in the current permutation\n        pos = P.index(a)\n        \n        # Calculate the number of inversions involving a\n        inversions += pos - query(pos)\n        \n        # Sort the subarray up to a\n        for i in range(1, pos):\n            if P[i] > P[i + 1]:\n                P[i], P[i + 1] = P[i + 1], P[i]\n                update(P[i], 1)\n                update(P[i + 1], -1)\n        \n        # Print the current inversion number\n        print(inversions)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N + 1]))\nM = int(data[N + 1])\nA = list(map(int, data[N + 2:]))\n\napply_operations(N, P, A)"], "passed": [false, false], "raw_code": ["import sys\nfrom bisect import bisect_left\n\ndef fenwick_tree(n):\n    tree = [0] * (n + 1)\n\n    def update(i, val):\n        while i <= n:\n            tree[i] += val\n            i += i & -i\n\n    def query(i):\n        sum_val = 0\n        while i > 0:\n            sum_val += tree[i]\n            i -= i & -i\n        return sum_val\n\n    return update, query\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n\n    # Initialize Fenwick Tree\n    update, query = fenwick_tree(N)\n\n    # Calculate initial inversion number\n    inversions = 0\n    for i in range(1, N):\n        inversions += query(P[i]-1)\n        update(P[i], 1)\n\n    # Print initial inversion number\n    print(inversions)\n\n    # Process each operation A_i\n    for a in A:\n        idx = bisect_left(P, a)\n        if idx > 0:\n            inversions -= query(idx-1)\n        update(a, 1)\n        if idx < N:\n            inversions -= query(N) - query(idx)\n        print(inversions)\n\nif __name__ == '__main__':\n    main()", "```python\ndef fenwick_tree(n):\n    tree = [0] * (n + 1)\n    \n    def update(i, delta):\n        while i <= n:\n            tree[i] += delta\n            i += i & -i\n    \n    def query(i):\n        result = 0\n        while i > 0:\n            result += tree[i]\n            i -= i & -i\n        return result\n    \n    return update, query\n\ndef apply_operations(N, P, A):\n    update, query = fenwick_tree(N)\n    inversions = 0\n    \n    for a in A:\n        # Find the position of a in the current permutation\n        pos = P.index(a)\n        \n        # Calculate the number of inversions involving a\n        inversions += pos - query(pos)\n        \n        # Sort the subarray up to a\n        for i in range(1, pos):\n            if P[i] > P[i + 1]:\n                P[i], P[i + 1] = P[i + 1], P[i]\n                update(P[i], 1)\n                update(P[i + 1], -1)\n        \n        # Print the current inversion number\n        print(inversions)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N + 1]))\nM = int(data[N + 1])\nA = list(map(int, data[N + 2:]))\n\napply_operations(N, P, A)\n```"]}
{"task_id": "arc182_c", "codes": ["```python\ndef count_divisors(n, mod):\n    divisors = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(i, n + 1, i):\n            divisors[j] = (divisors[j] * (i + 1)) % mod\n    return divisors\n\ndef good_sequences(N, M, mod):\n    divisors = count_divisors(M, mod)\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    \n    for _ in range(1, N + 1):\n        new_dp = [0] * (M + 1)\n        for i in range(1, M + 1):\n            new_dp[i] = (new_dp[i] + dp[i]) % mod\n            for j in range(i, M + 1, i):\n                new_dp[j] = (new_dp[j] + dp[i] * divisors[j // i]) % mod\n        dp = new_dp\n    \n    return sum(dp) % mod\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\n\n# Calculate and print the result\nresult = good_sequences(N, M, 998244353)\nprint(result)", "def count_divisors(n):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    MOD = 998244353\n    \n    # Precompute divisor counts for numbers up to M\n    divisors = [count_divisors(i) for i in range(M + 1)]\n    \n    # Initialize DP table\n    dp = [[0] * (M + 1) for _ in range(N + 1)]\n    dp[0][1] = 1\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            dp[i][j] = dp[i - 1][j]\n            for k in range(1, j):\n                if j % k == 0:\n                    dp[i][j] += dp[i - 1][k] * divisors[j // k]\n                    dp[i][j] %= MOD\n    \n    # Sum up the scores of all sequences\n    total_score = sum(dp[N]) % MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef count_divisors(n, mod):\n    divisors = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(i, n + 1, i):\n            divisors[j] = (divisors[j] * (i + 1)) % mod\n    return divisors\n\ndef good_sequences(N, M, mod):\n    divisors = count_divisors(M, mod)\n    dp = [0] * (M + 1)\n    dp[1] = 1\n    \n    for _ in range(1, N + 1):\n        new_dp = [0] * (M + 1)\n        for i in range(1, M + 1):\n            new_dp[i] = (new_dp[i] + dp[i]) % mod\n            for j in range(i, M + 1, i):\n                new_dp[j] = (new_dp[j] + dp[i] * divisors[j // i]) % mod\n        dp = new_dp\n    \n    return sum(dp) % mod\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\n\n# Calculate and print the result\nresult = good_sequences(N, M, 998244353)\nprint(result)", "```python\ndef count_divisors(n):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    MOD = 998244353\n    \n    # Precompute divisor counts for numbers up to M\n    divisors = [count_divisors(i) for i in range(M + 1)]\n    \n    # Initialize DP table\n    dp = [[0] * (M + 1) for _ in range(N + 1)]\n    dp[0][1] = 1\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            dp[i][j] = dp[i - 1][j]\n            for k in range(1, j):\n                if j % k == 0:\n                    dp[i][j] += dp[i - 1][k] * divisors[j // k]\n                    dp[i][j] %= MOD\n    \n    # Sum up the scores of all sequences\n    total_score = sum(dp[N]) % MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "3550", "codes": ["def maxSumOfRooks(board):\n    m, n = len(board), len(board[0])\n    \n    # Calculate row sums\n    row_sums = [sum(row) for row in board]\n    \n    # Calculate column sums\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Sort row sums and column sums in descending order\n    row_sums.sort(reverse=True)\n    col_sums.sort(reverse=True)\n    \n    # Select the top three values from row sums and column sums\n    selected_row_values = row_sums[:3]\n    selected_col_values = col_sums[:3]\n    \n    # Calculate the maximum sum\n    max_sum = sum(selected_row_values) + sum(selected_col_values)\n    \n    return max_sum", "def max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(row) for row in board]\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Find rows and columns with exactly one non-zero value\n    valid_rows = [i for i, s in enumerate(row_sums) if s != 0]\n    valid_cols = [j for j, s in enumerate(col_sums) if s != 0]\n    \n    # Ensure we have at least three valid positions\n    if len(valid_rows) < 3 or len(valid_cols) < 3:\n        return 0\n    \n    # Select the top three largest sums from valid rows and columns\n    selected_rows = sorted(valid_rows, key=lambda r: row_sums[r], reverse=True)[:3]\n    selected_cols = sorted(valid_cols, key=lambda c: col_sums[c], reverse=True)[:3]\n    \n    # Calculate the maximum sum\n    max_sum = 0\n    for r in selected_rows:\n        for c in selected_cols:\n            if r in selected_rows and c in selected_cols:\n                max_sum += board[r][c]\n                break\n    \n    return max_sum"], "passed": [false, false], "raw_code": ["```python\ndef maxSumOfRooks(board):\n    m, n = len(board), len(board[0])\n    \n    # Calculate row sums\n    row_sums = [sum(row) for row in board]\n    \n    # Calculate column sums\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Sort row sums and column sums in descending order\n    row_sums.sort(reverse=True)\n    col_sums.sort(reverse=True)\n    \n    # Select the top three values from row sums and column sums\n    selected_row_values = row_sums[:3]\n    selected_col_values = col_sums[:3]\n    \n    # Calculate the maximum sum\n    max_sum = sum(selected_row_values) + sum(selected_col_values)\n    \n    return max_sum\n```", "```python\ndef max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(row) for row in board]\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Find rows and columns with exactly one non-zero value\n    valid_rows = [i for i, s in enumerate(row_sums) if s != 0]\n    valid_cols = [j for j, s in enumerate(col_sums) if s != 0]\n    \n    # Ensure we have at least three valid positions\n    if len(valid_rows) < 3 or len(valid_cols) < 3:\n        return 0\n    \n    # Select the top three largest sums from valid rows and columns\n    selected_rows = sorted(valid_rows, key=lambda r: row_sums[r], reverse=True)[:3]\n    selected_cols = sorted(valid_cols, key=lambda c: col_sums[c], reverse=True)[:3]\n    \n    # Calculate the maximum sum\n    max_sum = 0\n    for r in selected_rows:\n        for c in selected_cols:\n            if r in selected_rows and c in selected_cols:\n                max_sum += board[r][c]\n                break\n    \n    return max_sum\n```"]}
{"task_id": "arc183_b", "codes": ["```python\ndef can_transform_to_B(T, cases):\n    results = []\n    \n    for case in cases:\n        N, K = map(int, case[0].split())\n        A = list(map(int, case[1].split()))\n        B = list(map(int, case[2].split()))\n        \n        # Create adjacency list for the graph\n        graph = [[] for _ in range(N + 1)]\n        for i in range(1, N + 1):\n            for j in range(max(1, i - K), min(N, i + K) + 1):\n                graph[i].append(j)\n        \n        # Function to perform DFS and find connected components\n        def dfs(node, visited, component):\n            stack = [node]\n            while stack:\n                current = stack.pop()\n                if not visited[current]:\n                    visited[current] = True\n                    component.append(current)\n                    for neighbor in graph[current]:\n                        stack.append(neighbor)\n        \n        # Find all connected components\n        visited = [False] * (N + 1)\n        components = []\n        for i in range(1, N + 1):\n            if not visited[i]:\n                component = []\n                dfs(i, visited, component)\n                components.append(component)\n        \n        # Check each component\n        for component in components:\n            count_A = sum(A[i - 1] for i in component)\n            count_B = sum(B[i - 1] for i in component)\n            if count_A != count_B:\n                results.append(\"No\")\n                break\n        else:\n            results.append(\"Yes\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nT = int(data[0])\ncases = []\nindex = 1\nfor _ in range(T):\n    N = int(data[index])\n    K = int(data[index + 1])\n    A = data[index + 2:index + 2 + N]\n    B = data[index + 2 + N:index + 2 + 2 * N]\n    cases.append((f\"{N} {K}\", A, B))\n    index += 2 * N\n\n# Get results\nresults = can_transform_to_B(T, cases)\n\n# Print results\nfor result in results:\n    print(result)", "def can_transform(A, B, K):\n    N = len(A)\n    used = [False] * N\n    \n    for b in B:\n        found = False\n        for i in range(max(0, B.index(b) - K), min(N, B.index(b) + K + 1)):\n            if not used[i] and A[i] == b:\n                used[i] = True\n                found = True\n                break\n        if not found:\n            return \"No\"\n    \n    return \"Yes\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = list(map(int, data[index + 2:index + 2 + N]))\n        B = list(map(int, data[index + 2 + N:index + 2 + 2 * N]))\n        \n        result = can_transform(A, B, K)\n        results.append(result)\n        \n        index += 2 * N\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\ndef can_transform_to_B(T, cases):\n    results = []\n    \n    for case in cases:\n        N, K = map(int, case[0].split())\n        A = list(map(int, case[1].split()))\n        B = list(map(int, case[2].split()))\n        \n        # Create adjacency list for the graph\n        graph = [[] for _ in range(N + 1)]\n        for i in range(1, N + 1):\n            for j in range(max(1, i - K), min(N, i + K) + 1):\n                graph[i].append(j)\n        \n        # Function to perform DFS and find connected components\n        def dfs(node, visited, component):\n            stack = [node]\n            while stack:\n                current = stack.pop()\n                if not visited[current]:\n                    visited[current] = True\n                    component.append(current)\n                    for neighbor in graph[current]:\n                        stack.append(neighbor)\n        \n        # Find all connected components\n        visited = [False] * (N + 1)\n        components = []\n        for i in range(1, N + 1):\n            if not visited[i]:\n                component = []\n                dfs(i, visited, component)\n                components.append(component)\n        \n        # Check each component\n        for component in components:\n            count_A = sum(A[i - 1] for i in component)\n            count_B = sum(B[i - 1] for i in component)\n            if count_A != count_B:\n                results.append(\"No\")\n                break\n        else:\n            results.append(\"Yes\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nT = int(data[0])\ncases = []\nindex = 1\nfor _ in range(T):\n    N = int(data[index])\n    K = int(data[index + 1])\n    A = data[index + 2:index + 2 + N]\n    B = data[index + 2 + N:index + 2 + 2 * N]\n    cases.append((f\"{N} {K}\", A, B))\n    index += 2 * N\n\n# Get results\nresults = can_transform_to_B(T, cases)\n\n# Print results\nfor result in results:\n    print(result)", "```python\ndef can_transform(A, B, K):\n    N = len(A)\n    used = [False] * N\n    \n    for b in B:\n        found = False\n        for i in range(max(0, B.index(b) - K), min(N, B.index(b) + K + 1)):\n            if not used[i] and A[i] == b:\n                used[i] = True\n                found = True\n                break\n        if not found:\n            return \"No\"\n    \n    return \"Yes\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = list(map(int, data[index + 2:index + 2 + N]))\n        B = list(map(int, data[index + 2 + N:index + 2 + 2 * N]))\n        \n        result = can_transform(A, B, K)\n        results.append(result)\n        \n        index += 2 * N\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc370_g", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        result = 1\n        p = 2\n        while p * p <= n:\n            if n % p == 0:\n                exp = 0\n                while n % p == 0:\n                    n //= p\n                    exp += 1\n                result *= (p**(exp + 1) - 1) // (p - 1)\n            p += 1\n        if n > 1:\n            result *= (n**2 - 1) // (n - 1)\n        return result\n\n    # Check if a number is a good integer\n    def is_good_integer(n):\n        return sum_of_divisors(n) % 3 == 0\n\n    # Dynamic programming table\ndp = [[0] * (M + 1) for _ in range(N + 1)]\ndp[1][0] = 1\n\n# Fill the DP table\nfor i in range(1, N + 1):\n    for j in range(1, M + 1):\n        dp[i][j] = dp[i - 1][j]\n        if i % 2 == 0 and is_good_integer(i):\n            dp[i][j] += dp[i // 2][j - 1]\n        dp[i][j] %= MOD\n\nprint(dp[N][M])\n\nif __name__ == '__main__':\n    main()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        total = 1\n        p = 2\n        while p * p <= n:\n            if n % p == 0:\n                exp = 1\n                while n % p == 0:\n                    n //= p\n                    exp += 1\n                total *= (p**(exp + 1) - 1) // (p - 1)\n            p += 1\n        if n > 1:\n            total *= (n**2 - 1) // (n - 1)\n        return total\n\n    # Check if a number is a good integer\n    def is_good_integer(n):\n        return sum_of_divisors(n) % 3 == 0\n\n    # Dynamic programming table\ndp = [[0] * 3 for _ in range(M + 1)]\ndp[0][1] = 1  # Base case: one sequence of length 0 with product 1\n\n    # Fill the DP table\nfor i in range(1, M + 1):\n    for j in range(1, N + 1):\n        if is_good_integer(j):\n            dp[i][j % 3] += dp[i - 1][(j - 1) % 3]\n            dp[i][j % 3] %= MOD\n\n    # Sum up all valid sequences of length M\nresult = sum(dp[M]) % MOD\nprint(result)\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        result = 1\n        p = 2\n        while p * p <= n:\n            if n % p == 0:\n                exp = 0\n                while n % p == 0:\n                    n //= p\n                    exp += 1\n                result *= (p**(exp + 1) - 1) // (p - 1)\n            p += 1\n        if n > 1:\n            result *= (n**2 - 1) // (n - 1)\n        return result\n\n    # Check if a number is a good integer\n    def is_good_integer(n):\n        return sum_of_divisors(n) % 3 == 0\n\n    # Dynamic programming table\ndp = [[0] * (M + 1) for _ in range(N + 1)]\ndp[1][0] = 1\n\n# Fill the DP table\nfor i in range(1, N + 1):\n    for j in range(1, M + 1):\n        dp[i][j] = dp[i - 1][j]\n        if i % 2 == 0 and is_good_integer(i):\n            dp[i][j] += dp[i // 2][j - 1]\n        dp[i][j] %= MOD\n\nprint(dp[N][M])\n\nif __name__ == '__main__':\n    main()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    MOD = 998244353\n\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        total = 1\n        p = 2\n        while p * p <= n:\n            if n % p == 0:\n                exp = 1\n                while n % p == 0:\n                    n //= p\n                    exp += 1\n                total *= (p**(exp + 1) - 1) // (p - 1)\n            p += 1\n        if n > 1:\n            total *= (n**2 - 1) // (n - 1)\n        return total\n\n    # Check if a number is a good integer\n    def is_good_integer(n):\n        return sum_of_divisors(n) % 3 == 0\n\n    # Dynamic programming table\ndp = [[0] * 3 for _ in range(M + 1)]\ndp[0][1] = 1  # Base case: one sequence of length 0 with product 1\n\n    # Fill the DP table\nfor i in range(1, M + 1):\n    for j in range(1, N + 1):\n        if is_good_integer(j):\n            dp[i][j % 3] += dp[i - 1][(j - 1) % 3]\n            dp[i][j % 3] %= MOD\n\n    # Sum up all valid sequences of length M\nresult = sum(dp[M]) % MOD\nprint(result)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc369_g", "codes": ["import sys\nfrom collections import defaultdict, deque\n\ndef min_max_score(N, edges):\n    # Build the adjacency list for the tree\n    adj = defaultdict(list)\n    for u, v, l in edges:\n        adj[u].append((v, l))\n        adj[v].append((u, l))\n\n    def bfs(start):\n        dist = [-1] * (N + 1)\n        dist[start] = 0\n        queue = deque([start])\n        while queue:\n            node = queue.popleft()\n            for neighbor, length in adj[node]:\n                if dist[neighbor] == -1:\n                    dist[neighbor] = dist[node] + length\n                    queue.append(neighbor)\n        return dist\n\n    def find_centroid(node, parent, size):\n        centroid_found = False\n        max_size = 0\n        for neighbor, _ in adj[node]:\n            if neighbor != parent and not centroid_found:\n                child_size = find_centroid(neighbor, node, size)\n                if child_size > max_size:\n                    max_size = child_size\n                    centroid_found = True\n        if not centroid_found:\n            centroid[node] = True\n            return size\n        return max_size\n\n    centroid = {}\n    find_centroid(1, -1, N)\n\n    def get_tree_center(node, parent):\n        center = None\n        max_size = 0\n        for neighbor, _ in adj[node]:\n            if neighbor != parent and not centroid[neighbor]:\n                child_size = get_tree_center(neighbor, node)\n                if child_size > max_size:\n                    max_size = child_size\n                    center = neighbor\n        return center\n\n    center = get_tree_center(1, -1)\n\n    def dfs(node, parent, depth, path_length):\n        nonlocal best_path_length\n        if depth == K:\n            best_path_length = max(best_path_length, path_length)\n            return\n        for neighbor, length in adj[node]:\n            if neighbor != parent:\n                dfs(neighbor, node, depth + 1, path_length + length)\n\n    best_path_length = 0\n    dfs(center, -1, 0, 0)\n\n    return best_path_length\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    edges = [(int(data[i*3+1]), int(data[i*3+2]), int(data[i*3+3])) for i in range(N-1)]\n    results = [min_max_score(N, edges[:i+1]) for i in range(N)]\n    for result in results:\n        print(result)", "import sys\nfrom collections import defaultdict, deque\nimport heapq\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    edges = []\n    for _ in range(N - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        l = int(data[index + 2])\n        edges.append((u, v, l))\n        index += 3\n    \n    return N, edges\n\ndef find_mst(N, edges):\n    mst = []\n    parent = [-1] * N\n    rank = [0] * N\n    \n    def find(x):\n        if parent[x] == -1:\n            return x\n        return find(parent[x])\n    \n    def union(x, y):\n        x_set = find(x)\n        y_set = find(y)\n        \n        if rank[x_set] < rank[y_set]:\n            parent[x_set] = y_set\n        elif rank[x_set] > rank[y_set]:\n            parent[y_set] = x_set\n        else:\n            parent[y_set] = x_set\n            rank[x_set] += 1\n    \n    for u, v, w in sorted(edges, key=lambda x: x[2]):\n        if find(u) != find(v):\n            union(u, v)\n            mst.append((u, v, w))\n    \n    return mst\n\ndef calculate_score(mst, K):\n    n = len(mst)\n    graph = defaultdict(list)\n    \n    for u, v, w in mst:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    def bfs(start):\n        dist = [-1] * n\n        dist[start] = 0\n        queue = deque([start])\n        \n        while queue:\n            node = queue.popleft()\n            for neighbor, weight in graph[node]:\n                if dist[neighbor] == -1:\n                    dist[neighbor] = dist[node] + weight\n                    queue.append(neighbor)\n        \n        return dist\n    \n    dist_from_root = bfs(0)\n    \n    def dfs(node, visited, path_length):\n        visited.add(node)\n        max_path_length = path_length\n        \n        for neighbor, weight in graph[node]:\n            if neighbor not in visited:\n                max_path_length = max(max_path_length, dfs(neighbor, visited, path_length + weight))\n        \n        visited.remove(node)\n        return max_path_length\n    \n    max_path_length = dfs(0, set(), 0)\n    \n    return dist_from_root[0] + max_path_length\n\ndef main():\n    N, edges = read_input()\n    mst = find_mst(N, edges)\n    \n    results = []\n    for K in range(1, N + 1):\n        result = calculate_score(mst, K)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["import sys\nfrom collections import defaultdict, deque\n\ndef min_max_score(N, edges):\n    # Build the adjacency list for the tree\n    adj = defaultdict(list)\n    for u, v, l in edges:\n        adj[u].append((v, l))\n        adj[v].append((u, l))\n\n    def bfs(start):\n        dist = [-1] * (N + 1)\n        dist[start] = 0\n        queue = deque([start])\n        while queue:\n            node = queue.popleft()\n            for neighbor, length in adj[node]:\n                if dist[neighbor] == -1:\n                    dist[neighbor] = dist[node] + length\n                    queue.append(neighbor)\n        return dist\n\n    def find_centroid(node, parent, size):\n        centroid_found = False\n        max_size = 0\n        for neighbor, _ in adj[node]:\n            if neighbor != parent and not centroid_found:\n                child_size = find_centroid(neighbor, node, size)\n                if child_size > max_size:\n                    max_size = child_size\n                    centroid_found = True\n        if not centroid_found:\n            centroid[node] = True\n            return size\n        return max_size\n\n    centroid = {}\n    find_centroid(1, -1, N)\n\n    def get_tree_center(node, parent):\n        center = None\n        max_size = 0\n        for neighbor, _ in adj[node]:\n            if neighbor != parent and not centroid[neighbor]:\n                child_size = get_tree_center(neighbor, node)\n                if child_size > max_size:\n                    max_size = child_size\n                    center = neighbor\n        return center\n\n    center = get_tree_center(1, -1)\n\n    def dfs(node, parent, depth, path_length):\n        nonlocal best_path_length\n        if depth == K:\n            best_path_length = max(best_path_length, path_length)\n            return\n        for neighbor, length in adj[node]:\n            if neighbor != parent:\n                dfs(neighbor, node, depth + 1, path_length + length)\n\n    best_path_length = 0\n    dfs(center, -1, 0, 0)\n\n    return best_path_length\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    edges = [(int(data[i*3+1]), int(data[i*3+2]), int(data[i*3+3])) for i in range(N-1)]\n    results = [min_max_score(N, edges[:i+1]) for i in range(N)]\n    for result in results:\n        print(result)", "```python\nimport sys\nfrom collections import defaultdict, deque\nimport heapq\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    edges = []\n    for _ in range(N - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        l = int(data[index + 2])\n        edges.append((u, v, l))\n        index += 3\n    \n    return N, edges\n\ndef find_mst(N, edges):\n    mst = []\n    parent = [-1] * N\n    rank = [0] * N\n    \n    def find(x):\n        if parent[x] == -1:\n            return x\n        return find(parent[x])\n    \n    def union(x, y):\n        x_set = find(x)\n        y_set = find(y)\n        \n        if rank[x_set] < rank[y_set]:\n            parent[x_set] = y_set\n        elif rank[x_set] > rank[y_set]:\n            parent[y_set] = x_set\n        else:\n            parent[y_set] = x_set\n            rank[x_set] += 1\n    \n    for u, v, w in sorted(edges, key=lambda x: x[2]):\n        if find(u) != find(v):\n            union(u, v)\n            mst.append((u, v, w))\n    \n    return mst\n\ndef calculate_score(mst, K):\n    n = len(mst)\n    graph = defaultdict(list)\n    \n    for u, v, w in mst:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    def bfs(start):\n        dist = [-1] * n\n        dist[start] = 0\n        queue = deque([start])\n        \n        while queue:\n            node = queue.popleft()\n            for neighbor, weight in graph[node]:\n                if dist[neighbor] == -1:\n                    dist[neighbor] = dist[node] + weight\n                    queue.append(neighbor)\n        \n        return dist\n    \n    dist_from_root = bfs(0)\n    \n    def dfs(node, visited, path_length):\n        visited.add(node)\n        max_path_length = path_length\n        \n        for neighbor, weight in graph[node]:\n            if neighbor not in visited:\n                max_path_length = max(max_path_length, dfs(neighbor, visited, path_length + weight))\n        \n        visited.remove(node)\n        return max_path_length\n    \n    max_path_length = dfs(0, set(), 0)\n    \n    return dist_from_root[0] + max_path_length\n\ndef main():\n    N, edges = read_input()\n    mst = find_mst(N, edges)\n    \n    results = []\n    for K in range(1, N + 1):\n        result = calculate_score(mst, K)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "arc183_d", "codes": ["```python\ndef find_leaves(graph):\n    leaves = []\n    for node in graph:\n        if len(graph[node]) == 1:\n            leaves.append(node)\n    return leaves\n\ndef remove_leaf(graph, leaf):\n    neighbor = graph[leaf][0]\n    graph.pop(leaf)\n    graph[neighbor].remove(leaf)\n    return neighbor\n\ndef max_score_operations(N, edges):\n    # Build the graph\n    graph = {i: [] for i in range(1, N+1)}\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    leaves = find_leaves(graph)\n    operations = []\n    \n    while len(leaves) >= 2:\n        # Find the farthest leaves\n        leaf1 = leaves[0]\n        leaf2 = leaves[-1]\n        \n        # Remove the leaves\n        leaves.remove(leaf1)\n        leaves.remove(leaf2)\n        \n        # Update the graph\n        leaf1_parent = remove_leaf(graph, leaf1)\n        leaf2_parent = remove_leaf(graph, leaf2)\n        \n        # Add the operation\n        operations.append((leaf1, leaf2))\n    \n    return operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = [(int(data[i*2+1]), int(data[i*2+2])) for i in range((N-1)//2)]\n\n# Get the operations\noperations = max_score_operations(N, edges)\n\n# Print the result\nfor op in operations:\n    print(op[0], op[1])", "```python\ndef find_leaves(tree):\n    leaves = []\n    for node in range(1, len(tree)):\n        if len(tree[node]) == 1:\n            leaves.append(node)\n    return leaves\n\ndef remove_leaf(tree, leaf):\n    parent = tree[leaf][0]\n    tree[parent].remove(leaf)\n    tree[leaf] = []\n\ndef max_score_operations(N, edges):\n    # Build the tree\n    tree = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    leaves = find_leaves(tree)\n    operations = []\n    \n    while len(leaves) > 1:\n        # Find the two farthest leaves\n        max_distance = 0\n        best_pair = (None, None)\n        \n        for i in range(len(leaves)):\n            for j in range(i + 1, len(leaves)):\n                dist = bfs_distance(tree, leaves[i], leaves[j])\n                if dist > max_distance:\n                    max_distance = dist\n                    best_pair = (leaves[i], leaves[j])\n        \n        # Add the operation\n        operations.append(best_pair)\n        \n        # Remove the chosen leaves\n        remove_leaf(tree, best_pair[0])\n        remove_leaf(tree, best_pair[1])\n        \n        # Update the list of leaves\n        leaves = find_leaves(tree)\n    \n    return operations\n\ndef bfs_distance(tree, start, end):\n    queue = [(start, 0)]\n    visited = set([start])\n    \n    while queue:\n        current, dist = queue.pop(0)\n        if current == end:\n            return dist\n        for neighbor in tree[current]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, dist + 1))\n    \n    return float('inf')\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(N - 1)]\n\n# Get the operations\noperations = max_score_operations(N, edges)\n\n# Print the result\nfor op in operations:\n    print(op[0], op[1])"], "passed": [false, false], "raw_code": ["```python\ndef find_leaves(graph):\n    leaves = []\n    for node in graph:\n        if len(graph[node]) == 1:\n            leaves.append(node)\n    return leaves\n\ndef remove_leaf(graph, leaf):\n    neighbor = graph[leaf][0]\n    graph.pop(leaf)\n    graph[neighbor].remove(leaf)\n    return neighbor\n\ndef max_score_operations(N, edges):\n    # Build the graph\n    graph = {i: [] for i in range(1, N+1)}\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    leaves = find_leaves(graph)\n    operations = []\n    \n    while len(leaves) >= 2:\n        # Find the farthest leaves\n        leaf1 = leaves[0]\n        leaf2 = leaves[-1]\n        \n        # Remove the leaves\n        leaves.remove(leaf1)\n        leaves.remove(leaf2)\n        \n        # Update the graph\n        leaf1_parent = remove_leaf(graph, leaf1)\n        leaf2_parent = remove_leaf(graph, leaf2)\n        \n        # Add the operation\n        operations.append((leaf1, leaf2))\n    \n    return operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = [(int(data[i*2+1]), int(data[i*2+2])) for i in range((N-1)//2)]\n\n# Get the operations\noperations = max_score_operations(N, edges)\n\n# Print the result\nfor op in operations:\n    print(op[0], op[1])", "```python\ndef find_leaves(tree):\n    leaves = []\n    for node in range(1, len(tree)):\n        if len(tree[node]) == 1:\n            leaves.append(node)\n    return leaves\n\ndef remove_leaf(tree, leaf):\n    parent = tree[leaf][0]\n    tree[parent].remove(leaf)\n    tree[leaf] = []\n\ndef max_score_operations(N, edges):\n    # Build the tree\n    tree = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    leaves = find_leaves(tree)\n    operations = []\n    \n    while len(leaves) > 1:\n        # Find the two farthest leaves\n        max_distance = 0\n        best_pair = (None, None)\n        \n        for i in range(len(leaves)):\n            for j in range(i + 1, len(leaves)):\n                dist = bfs_distance(tree, leaves[i], leaves[j])\n                if dist > max_distance:\n                    max_distance = dist\n                    best_pair = (leaves[i], leaves[j])\n        \n        # Add the operation\n        operations.append(best_pair)\n        \n        # Remove the chosen leaves\n        remove_leaf(tree, best_pair[0])\n        remove_leaf(tree, best_pair[1])\n        \n        # Update the list of leaves\n        leaves = find_leaves(tree)\n    \n    return operations\n\ndef bfs_distance(tree, start, end):\n    queue = [(start, 0)]\n    visited = set([start])\n    \n    while queue:\n        current, dist = queue.pop(0)\n        if current == end:\n            return dist\n        for neighbor in tree[current]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, dist + 1))\n    \n    return float('inf')\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(N - 1)]\n\n# Get the operations\noperations = max_score_operations(N, edges)\n\n# Print the result\nfor op in operations:\n    print(op[0], op[1])"]}
{"task_id": "3548", "codes": ["from itertools import combinations_with_replacement, permutations\n\ndef count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def can_form_palindrome(freqs):\n        odd_count = sum(1 for count in freqs.values() if count % 2 != 0)\n        return odd_count <= 1\n    \n    def count_combinations(digits, length):\n        count = 0\n        for combo in combinations_with_replacement(digits, length):\n            if sum(combo) % k == 0:\n                freqs = {}\n                for digit in combo:\n                    if digit in freqs:\n                        freqs[digit] += 1\n                    else:\n                        freqs[digit] = 1\n                if can_form_palindrome(freqs):\n                    count += len(list(permutations(combo)))\n        return count\n    \n    digits = '123456789'\n    total_count = 0\n    for length in range(1, n + 1):\n        total_count += count_combinations(digits, length)\n    \n    return total_count\n\n# Example usage:\nprint(count_good_integers(3, 5))  # Output: 27\nprint(count_good_integers(1, 4))  # Output: 2\nprint(count_good_integers(5, 6))  # Output: 2468", "def countGoodIntegers(n, k):\n    MOD = 10**9 + 7\n    \n    # Initialize DP table\n    dp = [[0] * (k * n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(1, n + 1):\n        for j in range(k * n + 1):\n            for d in range(1, 10):\n                if j - d >= 0:\n                    dp[i][j] += dp[i-1][j-d]\n                    dp[i][j] %= MOD\n    \n    # Sum up valid combinations\n    result = 0\n    for j in range(k * n + 1):\n        if j % k == 0:\n            result += dp[n][j]\n            result %= MOD\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\nfrom itertools import combinations_with_replacement, permutations\n\ndef count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def can_form_palindrome(freqs):\n        odd_count = sum(1 for count in freqs.values() if count % 2 != 0)\n        return odd_count <= 1\n    \n    def count_combinations(digits, length):\n        count = 0\n        for combo in combinations_with_replacement(digits, length):\n            if sum(combo) % k == 0:\n                freqs = {}\n                for digit in combo:\n                    if digit in freqs:\n                        freqs[digit] += 1\n                    else:\n                        freqs[digit] = 1\n                if can_form_palindrome(freqs):\n                    count += len(list(permutations(combo)))\n        return count\n    \n    digits = '123456789'\n    total_count = 0\n    for length in range(1, n + 1):\n        total_count += count_combinations(digits, length)\n    \n    return total_count\n\n# Example usage:\nprint(count_good_integers(3, 5))  # Output: 27\nprint(count_good_integers(1, 4))  # Output: 2\nprint(count_good_integers(5, 6))  # Output: 2468\n```", "```python\ndef countGoodIntegers(n, k):\n    MOD = 10**9 + 7\n    \n    # Initialize DP table\n    dp = [[0] * (k * n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(1, n + 1):\n        for j in range(k * n + 1):\n            for d in range(1, 10):\n                if j - d >= 0:\n                    dp[i][j] += dp[i-1][j-d]\n                    dp[i][j] %= MOD\n    \n    # Sum up valid combinations\n    result = 0\n    for j in range(k * n + 1):\n        if j % k == 0:\n            result += dp[n][j]\n            result %= MOD\n    \n    return result\n```"]}
{"task_id": "abc369_e", "codes": ["import sys\nimport heapq\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    # Create adjacency list\n    adj = [[] for _ in range(N+1)]\n    for u, v, t in bridges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n\n    # Initialize DP array\n    dp = [[float('inf')] * (M+1) for _ in range(N+1)]\n    dp[1][0] = 0\n\n    # Iterate over each bridge\n    for i in range(1, M+1):\n        for u, v, t in bridges:\n            for j in range(N, 0, -1):\n                dp[j][i] = min(dp[j][i], dp[j][i-1])\n                if j == u:\n                    dp[v][i] = min(dp[v][i], dp[u][i-1] + t)\n                elif j == v:\n                    dp[u][i] = min(dp[u][i], dp[v][i-1] + t)\n\n    # Answer each query\n    for K, query in enumerate(queries, start=1):\n        ans = float('inf')\n        for i in range(1, N+1):\n            ans = min(ans, dp[i][query[-1]])\n        print(ans)\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nN = int(data[0])\nM = int(data[1])\nbridges = []\nindex = 2\nfor _ in range(M):\n    u = int(data[index])\n    v = int(data[index+1])\n    t = int(data[index+2])\n    bridges.append((u, v, t))\n    index += 3\nQ = int(data[index])\nqueries = []\nindex += 1\nfor _ in range(Q):\n    K = int(data[index])\n    query = list(map(int, data[index+1:index+K+1]))\n    queries.append(query)\n    index += K+1\n\n# Call function and print result\nmin_time_to_travel(N, M, bridges, Q, queries)", "import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    # Build the graph\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n\n    # Function to find the shortest path using Dijkstra's algorithm\n    def dijkstra(start, end, required_bridges):\n        dist = [float('inf')] * (N + 1)\n        dist[start] = 0\n        pq = [(0, start, set())]\n        while pq:\n            current_dist, u, used_bridges = heapq.heappop(pq)\n            if u == end and used_bridges == required_bridges:\n                return current_dist\n            if current_dist > dist[u]:\n                continue\n            for v, t in graph[u]:\n                if v not in used_bridges:\n                    new_used_bridges = used_bridges | {v}\n                    new_dist = current_dist + t\n                    if new_dist < dist[v] or new_used_bridges not in dist[v]:\n                        dist[v] = new_dist\n                        heapq.heappush(pq, (new_dist, v, new_used_bridges))\n        return float('inf')\n\n    # Process each query\n    results = []\n    for K, required_bridges in queries:\n        required_bridges = set(required_bridges)\n        min_time = float('inf')\n        for start in range(1, N + 1):\n            for end in range(1, N + 1):\n                if start != end and end in required_bridges:\n                    min_time = min(min_time, dijkstra(start, end, required_bridges))\n        results.append(min_time)\n\n    return results\n\n# Read input from stdin\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\ncursor = 0\nN = int(data[cursor])\ncursor += 1\nM = int(data[cursor])\ncursor += 1\nbridges = []\nfor _ in range(M):\n    u = int(data[cursor])\n    cursor += 1\n    v = int(data[cursor])\n    cursor += 1\nt = int(data[cursor])\ncursor += 1\nbridges.append((u, v, t))\nQ = int(data[cursor])\ncursor += 1\nqueries = []\nfor _ in range(Q):\n    K = int(data[cursor])\n    cursor += 1\n    required_bridges = list(map(int, data[cursor:cursor + K]))\n    cursor += K\n    queries.append((K, required_bridges))\n\n# Get the results\nresults = min_time_to_travel(N, M, bridges, Q, queries)\n\n# Print results\nfor result in results:\n    print(result)\n"], "passed": [false, false], "raw_code": ["import sys\nimport heapq\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    # Create adjacency list\n    adj = [[] for _ in range(N+1)]\n    for u, v, t in bridges:\n        adj[u].append((v, t))\n        adj[v].append((u, t))\n\n    # Initialize DP array\n    dp = [[float('inf')] * (M+1) for _ in range(N+1)]\n    dp[1][0] = 0\n\n    # Iterate over each bridge\n    for i in range(1, M+1):\n        for u, v, t in bridges:\n            for j in range(N, 0, -1):\n                dp[j][i] = min(dp[j][i], dp[j][i-1])\n                if j == u:\n                    dp[v][i] = min(dp[v][i], dp[u][i-1] + t)\n                elif j == v:\n                    dp[u][i] = min(dp[u][i], dp[v][i-1] + t)\n\n    # Answer each query\n    for K, query in enumerate(queries, start=1):\n        ans = float('inf')\n        for i in range(1, N+1):\n            ans = min(ans, dp[i][query[-1]])\n        print(ans)\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nN = int(data[0])\nM = int(data[1])\nbridges = []\nindex = 2\nfor _ in range(M):\n    u = int(data[index])\n    v = int(data[index+1])\n    t = int(data[index+2])\n    bridges.append((u, v, t))\n    index += 3\nQ = int(data[index])\nqueries = []\nindex += 1\nfor _ in range(Q):\n    K = int(data[index])\n    query = list(map(int, data[index+1:index+K+1]))\n    queries.append(query)\n    index += K+1\n\n# Call function and print result\nmin_time_to_travel(N, M, bridges, Q, queries)", "import sys\nimport heapq\nfrom collections import defaultdict, deque\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    # Build the graph\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n\n    # Function to find the shortest path using Dijkstra's algorithm\n    def dijkstra(start, end, required_bridges):\n        dist = [float('inf')] * (N + 1)\n        dist[start] = 0\n        pq = [(0, start, set())]\n        while pq:\n            current_dist, u, used_bridges = heapq.heappop(pq)\n            if u == end and used_bridges == required_bridges:\n                return current_dist\n            if current_dist > dist[u]:\n                continue\n            for v, t in graph[u]:\n                if v not in used_bridges:\n                    new_used_bridges = used_bridges | {v}\n                    new_dist = current_dist + t\n                    if new_dist < dist[v] or new_used_bridges not in dist[v]:\n                        dist[v] = new_dist\n                        heapq.heappush(pq, (new_dist, v, new_used_bridges))\n        return float('inf')\n\n    # Process each query\n    results = []\n    for K, required_bridges in queries:\n        required_bridges = set(required_bridges)\n        min_time = float('inf')\n        for start in range(1, N + 1):\n            for end in range(1, N + 1):\n                if start != end and end in required_bridges:\n                    min_time = min(min_time, dijkstra(start, end, required_bridges))\n        results.append(min_time)\n\n    return results\n\n# Read input from stdin\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\ncursor = 0\nN = int(data[cursor])\ncursor += 1\nM = int(data[cursor])\ncursor += 1\nbridges = []\nfor _ in range(M):\n    u = int(data[cursor])\n    cursor += 1\n    v = int(data[cursor])\n    cursor += 1\nt = int(data[cursor])\ncursor += 1\nbridges.append((u, v, t))\nQ = int(data[cursor])\ncursor += 1\nqueries = []\nfor _ in range(Q):\n    K = int(data[cursor])\n    cursor += 1\n    required_bridges = list(map(int, data[cursor:cursor + K]))\n    cursor += K\n    queries.append((K, required_bridges))\n\n# Get the results\nresults = min_time_to_travel(N, M, bridges, Q, queries)\n\n# Print results\nfor result in results:\n    print(result)\n"]}
{"task_id": "3560", "codes": ["def min_moves(kx, ky, px, py):\n    directions = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.pop(0)\n        if cx == px and cy == py:\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n\n@lru_cache(None)\ndef game(kx, ky, positions, alice_turn=True):\n    if not positions:\n        return 0\n    \n    max_moves = float('-inf') if alice_turn else float('inf')\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves(kx, ky, px, py)\n        new_positions = positions[:i] + positions[i+1:]\n        if alice_turn:\n            max_moves = max(max_moves, moves + game(px, py, new_positions, False))\n        else:\n            max_moves = min(max_moves, moves + game(px, py, new_positions, True))\n    \n    return max_moves\n\ndef max_total_moves(kx, ky, positions):\n    return game(kx, ky, tuple(map(tuple, positions)))", "def min_moves_to_capture(kx, ky, positions):\n    directions = [\n        (-2, -1), (-2, 1), (-1, -2), (-1, 2),\n        (1, -2), (1, 2), (2, -1), (2, 1)\n    ]\n    n = 50\n    moves = [[float('inf')] * n for _ in range(n)]\n    moves[kx][ky] = 0\n    \n    queue = [(kx, ky)]\n    while queue:\n        cx, cy = queue.pop(0)\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < n and 0 <= ny < n and moves[nx][ny] > moves[cx][cy] + 1:\n                moves[nx][ny] = moves[cx][cy] + 1\n                queue.append((nx, ny))\n    \n    return {tuple(pos): moves[pos[0]][pos[1]] for pos in positions}\n\ndef max_total_moves(kx, ky, positions):\n    moves = min_moves_to_capture(kx, ky, positions)\n    n = len(positions)\n    \n    @lru_cache(None)\n    def dfs(turn, remaining_positions):\n        if not remaining_positions:\n            return 0\n        \n        if turn % 2 == 0:  # Alice's turn\n            max_moves = float('-inf')\n            for pos in remaining_positions:\n                new_remaining = tuple(sorted(set(remaining_positions) - {pos}))\n                max_moves = max(max_moves, moves[pos] + dfs(turn + 1, new_remaining))\n            return max_moves\n        else:  # Bob's turn\n            min_moves = float('inf')\n            for pos in remaining_positions:\n                new_remaining = tuple(sorted(set(remaining_positions) - {pos}))\n                min_moves = min(min_moves, moves[pos] + dfs(turn + 1, new_remaining))\n            return min_moves\n    \n    return dfs(0, tuple(sorted(positions)))\n\n# Example usage:\nprint(max_total_moves(1, 1, [(0, 0)]))  # Output: 4\nprint(max_total_moves(0, 2, [(1, 1), (2, 2), (3, 3)]))  # Output: 8\nprint(max_total_moves(0, 0, [(1, 2), (2, 4)]))  # Output: 3"], "passed": [false, false], "raw_code": ["```python\ndef min_moves(kx, ky, px, py):\n    directions = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.pop(0)\n        if cx == px and cy == py:\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n\n@lru_cache(None)\ndef game(kx, ky, positions, alice_turn=True):\n    if not positions:\n        return 0\n    \n    max_moves = float('-inf') if alice_turn else float('inf')\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves(kx, ky, px, py)\n        new_positions = positions[:i] + positions[i+1:]\n        if alice_turn:\n            max_moves = max(max_moves, moves + game(px, py, new_positions, False))\n        else:\n            max_moves = min(max_moves, moves + game(px, py, new_positions, True))\n    \n    return max_moves\n\ndef max_total_moves(kx, ky, positions):\n    return game(kx, ky, tuple(map(tuple, positions)))\n```", "```python\ndef min_moves_to_capture(kx, ky, positions):\n    directions = [\n        (-2, -1), (-2, 1), (-1, -2), (-1, 2),\n        (1, -2), (1, 2), (2, -1), (2, 1)\n    ]\n    n = 50\n    moves = [[float('inf')] * n for _ in range(n)]\n    moves[kx][ky] = 0\n    \n    queue = [(kx, ky)]\n    while queue:\n        cx, cy = queue.pop(0)\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < n and 0 <= ny < n and moves[nx][ny] > moves[cx][cy] + 1:\n                moves[nx][ny] = moves[cx][cy] + 1\n                queue.append((nx, ny))\n    \n    return {tuple(pos): moves[pos[0]][pos[1]] for pos in positions}\n\ndef max_total_moves(kx, ky, positions):\n    moves = min_moves_to_capture(kx, ky, positions)\n    n = len(positions)\n    \n    @lru_cache(None)\n    def dfs(turn, remaining_positions):\n        if not remaining_positions:\n            return 0\n        \n        if turn % 2 == 0:  # Alice's turn\n            max_moves = float('-inf')\n            for pos in remaining_positions:\n                new_remaining = tuple(sorted(set(remaining_positions) - {pos}))\n                max_moves = max(max_moves, moves[pos] + dfs(turn + 1, new_remaining))\n            return max_moves\n        else:  # Bob's turn\n            min_moves = float('inf')\n            for pos in remaining_positions:\n                new_remaining = tuple(sorted(set(remaining_positions) - {pos}))\n                min_moves = min(min_moves, moves[pos] + dfs(turn + 1, new_remaining))\n            return min_moves\n    \n    return dfs(0, tuple(sorted(positions)))\n\n# Example usage:\nprint(max_total_moves(1, 1, [(0, 0)]))  # Output: 4\nprint(max_total_moves(0, 2, [(1, 1), (2, 2), (3, 3)]))  # Output: 8\nprint(max_total_moves(0, 0, [(1, 2), (2, 4)]))  # Output: 3\n```"]}
{"task_id": "abc367_g", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (1 << 20) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1 << 20):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] += dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] %= MOD\n    \n    total_score = 0\n    for i in range(1, N + 1):\n        if i % M == 0:\n            for j in range(1 << 20):\n                total_score += pow(dp[i][j], K, MOD)\n                total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (1 << 20) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1 << 20):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] += dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] %= MOD\n    \n    total_score = 0\n    for i in range(1, N + 1):\n        if i % M == 0:\n            for j in range(1 << 20):\n                total_score += pow(dp[i][j], K, MOD)\n                total_score %= MOD\n    \n    print(total_score)\n\nmain()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (1 << 20) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1 << 20):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] += dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] %= MOD\n    \n    total_score = 0\n    for i in range(1, N + 1):\n        if i % M == 0:\n            for j in range(1 << 20):\n                total_score += pow(dp[i][j], K, MOD)\n                total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (1 << 20) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1 << 20):\n            dp[i][j] = dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] += dp[i - 1][j]\n            dp[i][j ^ A[i - 1]] %= MOD\n    \n    total_score = 0\n    for i in range(1, N + 1):\n        if i % M == 0:\n            for j in range(1 << 20):\n                total_score += pow(dp[i][j], K, MOD)\n                total_score %= MOD\n    \n    print(total_score)\n\nmain()\n```"]}
{"task_id": "abc373_e", "codes": ["```python\ndef min_additional_votes():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    current_total_votes = sum(A)\n    remaining_votes = K - current_total_votes\n    \n    C = []\n    \n    for i in range(N):\n        max_votes_other_candidates = max(A[j] for j in range(N) if j != i)\n        if A[i] > max_votes_other_candidates + remaining_votes:\n            C.append(0)\n        else:\n            additional_votes_needed = max(0, max_votes_other_candidates + remaining_votes - A[i] + 1)\n            if additional_votes_needed > remaining_votes:\n                C.append(-1)\n            else:\n                C.append(additional_votes_needed)\n    \n    print(' '.join(map(str, C)))\n\nmin_additional_votes()", "def min_additional_votes(N, M, K, A):\n    from heapq import nlargest\n    \n    # Find the M-th largest number of votes\n    top_M_votes = nlargest(M, A)\n    Mth_largest = top_M_votes[-1]\n    \n    # Calculate the minimum additional votes needed for each candidate\n    results = []\n    for votes in A:\n        if votes > Mth_largest:\n            results.append(0)\n        else:\n            additional_votes_needed = Mth_largest - votes + 1\n            if additional_votes_needed > K - sum(A):\n                results.append(-1)\n            else:\n                results.append(additional_votes_needed)\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Get the results\nresults = min_additional_votes(N, M, K, A)\n\n# Print the results\nprint(\" \".join(map(str, results)))"], "passed": [false, false], "raw_code": ["```python\ndef min_additional_votes():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    current_total_votes = sum(A)\n    remaining_votes = K - current_total_votes\n    \n    C = []\n    \n    for i in range(N):\n        max_votes_other_candidates = max(A[j] for j in range(N) if j != i)\n        if A[i] > max_votes_other_candidates + remaining_votes:\n            C.append(0)\n        else:\n            additional_votes_needed = max(0, max_votes_other_candidates + remaining_votes - A[i] + 1)\n            if additional_votes_needed > remaining_votes:\n                C.append(-1)\n            else:\n                C.append(additional_votes_needed)\n    \n    print(' '.join(map(str, C)))\n\nmin_additional_votes()", "```python\ndef min_additional_votes(N, M, K, A):\n    from heapq import nlargest\n    \n    # Find the M-th largest number of votes\n    top_M_votes = nlargest(M, A)\n    Mth_largest = top_M_votes[-1]\n    \n    # Calculate the minimum additional votes needed for each candidate\n    results = []\n    for votes in A:\n        if votes > Mth_largest:\n            results.append(0)\n        else:\n            additional_votes_needed = Mth_largest - votes + 1\n            if additional_votes_needed > K - sum(A):\n                results.append(-1)\n            else:\n                results.append(additional_votes_needed)\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Get the results\nresults = min_additional_votes(N, M, K, A)\n\n# Print the results\nprint(\" \".join(map(str, results)))\n```"]}
{"task_id": "3575", "codes": ["def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    max_value = 0\n    \n    # Iterate over all possible starting points for the first subsequence\n    for i in range(n - 2 * k + 1):\n        or_first_part = 0\n        or_second_part = 0\n        \n        # Calculate the bitwise OR for the first k elements\n        for j in range(i, i + k):\n            or_first_part |= nums[j]\n        \n        # Calculate the bitwise OR for the next k elements\n        for j in range(i + k, i + 2 * k):\n            or_second_part |= nums[j]\n        \n        # Compute the XOR of the two OR results\n        current_value = or_first_part ^ or_second_part\n        \n        # Update the maximum value if the current one is greater\n        max_value = max(max_value, current_value)\n    \n    return max_value", "def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    # Precompute prefix OR values\n    prefix_or = [0] * (n + 1)\n    for i in range(n):\n        prefix_or[i + 1] = prefix_or[i] | nums[i]\n    \n    # Initialize DP table\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Fill DP table\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            end = start + length\n            if length == 1:\n                dp[start][length] = nums[start]\n            else:\n                dp[start][length] = dp[start][length - 1] | nums[end - 1]\n    \n    # Find maximum XOR value\n    max_xor = 0\n    for i in range(k):\n        left_or = dp[0][i + 1]\n        right_or = prefix_or[n] ^ prefix_or[i + 1]\n        max_xor = max(max_xor, left_or ^ right_or)\n    \n    return max_xor"], "passed": [false, false], "raw_code": ["```python\ndef maxSubsequenceValue(nums, k):\n    n = len(nums)\n    max_value = 0\n    \n    # Iterate over all possible starting points for the first subsequence\n    for i in range(n - 2 * k + 1):\n        or_first_part = 0\n        or_second_part = 0\n        \n        # Calculate the bitwise OR for the first k elements\n        for j in range(i, i + k):\n            or_first_part |= nums[j]\n        \n        # Calculate the bitwise OR for the next k elements\n        for j in range(i + k, i + 2 * k):\n            or_second_part |= nums[j]\n        \n        # Compute the XOR of the two OR results\n        current_value = or_first_part ^ or_second_part\n        \n        # Update the maximum value if the current one is greater\n        max_value = max(max_value, current_value)\n    \n    return max_value\n```", "```python\ndef maxSubsequenceValue(nums, k):\n    n = len(nums)\n    # Precompute prefix OR values\n    prefix_or = [0] * (n + 1)\n    for i in range(n):\n        prefix_or[i + 1] = prefix_or[i] | nums[i]\n    \n    # Initialize DP table\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Fill DP table\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            end = start + length\n            if length == 1:\n                dp[start][length] = nums[start]\n            else:\n                dp[start][length] = dp[start][length - 1] | nums[end - 1]\n    \n    # Find maximum XOR value\n    max_xor = 0\n    for i in range(k):\n        left_or = dp[0][i + 1]\n        right_or = prefix_or[n] ^ prefix_or[i + 1]\n        max_xor = max(max_xor, left_or ^ right_or)\n    \n    return max_xor\n```"]}
{"task_id": "abc365_e", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Step 1: Compute the prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Step 2: Calculate the total contribution of each element\n    total_sum = 0\n    count = [0] * (1 << 29)  # Assuming the maximum value of A_i is 10^8\n    \n    for i in range(N):\n        total_sum += count[prefix_xor[i]]\n        count[prefix_xor[i]] += 1\n    \n    print(total_sum)\n\nmain()", "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Create prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Initialize the result\n    result = 0\n    \n    # Iterate over each element in the array\n    for i in range(1, N + 1):\n        # Count the number of subarrays ending at i with an even number of elements before i\n        count = prefix_xor[i - 1].bit_count()\n        result += count * A[i - 1]\n    \n    print(result)\n\n# Call the function\nsolve()"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Step 1: Compute the prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Step 2: Calculate the total contribution of each element\n    total_sum = 0\n    count = [0] * (1 << 29)  # Assuming the maximum value of A_i is 10^8\n    \n    for i in range(N):\n        total_sum += count[prefix_xor[i]]\n        count[prefix_xor[i]] += 1\n    \n    print(total_sum)\n\nmain()\n```", "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Create prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Initialize the result\n    result = 0\n    \n    # Iterate over each element in the array\n    for i in range(1, N + 1):\n        # Count the number of subarrays ending at i with an even number of elements before i\n        count = prefix_xor[i - 1].bit_count()\n        result += count * A[i - 1]\n    \n    print(result)\n\n# Call the function\nsolve()"]}
{"task_id": "abc367_e", "codes": ["def process_sequence(N, K, X, A):\n    # Create a mapping of the permutation\n    perm = {i: X[i - 1] for i in range(1, N + 1)}\n    \n    # Find the cycle length\n    visited = set()\n    current = 1\n    cycle_length = 0\n    \n    while current not in visited:\n        visited.add(current)\n        current = perm[current]\n        cycle_length += 1\n    \n    # Calculate effective number of operations\n    effective_K = K % cycle_length\n    \n    # Apply the effective number of operations\n    for _ in range(effective_K):\n        A = [A[perm[i] - 1] for i in range(1, N + 1)]\n    \n    # Print the final sequence\n    print(' '.join(map(str, A)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\nprocess_sequence(N, K, X, A)", "def perform_operations(N, K, X, A):\n    K %= N\n    for _ in range(K):\n        A = [A[X[i] - 1] for i in range(N)]\n    return ' '.join(map(str, A))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Perform the operations and print the result\nresult = perform_operations(N, K, X, A)\nprint(result)"], "passed": [false, false], "raw_code": ["```python\ndef process_sequence(N, K, X, A):\n    # Create a mapping of the permutation\n    perm = {i: X[i - 1] for i in range(1, N + 1)}\n    \n    # Find the cycle length\n    visited = set()\n    current = 1\n    cycle_length = 0\n    \n    while current not in visited:\n        visited.add(current)\n        current = perm[current]\n        cycle_length += 1\n    \n    # Calculate effective number of operations\n    effective_K = K % cycle_length\n    \n    # Apply the effective number of operations\n    for _ in range(effective_K):\n        A = [A[perm[i] - 1] for i in range(1, N + 1)]\n    \n    # Print the final sequence\n    print(' '.join(map(str, A)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\nprocess_sequence(N, K, X, A)\n```", "```python\ndef perform_operations(N, K, X, A):\n    K %= N\n    for _ in range(K):\n        A = [A[X[i] - 1] for i in range(N)]\n    return ' '.join(map(str, A))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Perform the operations and print the result\nresult = perform_operations(N, K, X, A)\nprint(result)\n```"]}
{"task_id": "abc368_g", "codes": ["import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self, arr: List[int], func):\n        self.n = len(arr)\n        self.tree = [0] * (2 * self.n)\n        self.func = func\n        for i in range(self.n):\n            self.tree[self.n + i] = arr[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = func(self.tree[2 * i], self.tree[2 * i + 1])\n\n    def update(self, pos: int, val: int):\n        pos += self.n\n        self.tree[pos] = val\n        while pos > 1:\n            pos //= 2\n            self.tree[pos] = self.func(self.tree[2 * pos], self.tree[2 * pos + 1])\n\n    def query(self, left: int, right: int) -> int:\n        result = 0\n        left += self.n\n        right += self.n\n        while left < right:\n            if left % 2 == 1:\n                result = self.func(result, self.tree[left])\n                left += 1\n            if right % 2 == 1:\n                right -= 1\n                result = self.func(result, self.tree[right])\n            left //= 2\n            right //= 2\n        return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    A = list(map(int, data[1:n+1]))\n    B = list(map(int, data[n+1:2*n+1]))\n    Q = int(data[2*n+1])\n    queries = data[2*n+2:]\n\n    sum_tree = SegmentTree(A, lambda x, y: x + y)\n    prod_tree = SegmentTree(B, lambda x, y: x * y)\n\n    ans = []\n    idx = 0\n    for _ in range(Q):\n        query_type = int(queries[idx])\n        idx += 1\n        if query_type == 1:\n            i = int(queries[idx]) - 1\n            x = int(queries[idx + 1])\n            idx += 2\n            sum_tree.update(i, x)\n        elif query_type == 2:\n            i = int(queries[idx]) - 1\n            x = int(queries[idx + 1])\n            idx += 2\n            prod_tree.update(i, x)\n        elif query_type == 3:\n            l = int(queries[idx]) - 1\n            r = int(queries[idx + 1])\n            idx += 2\n            v = sum_tree.query(l, r + 1)\n            v = prod_tree.query(l, r + 1) if v != 0 else 0\n            ans.append(v)\n\n    for a in ans:\n        print(a)\n\nif __name__ == '__main__':\n    main()", "import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self"], "passed": [false, false], "raw_code": ["import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self, arr: List[int], func):\n        self.n = len(arr)\n        self.tree = [0] * (2 * self.n)\n        self.func = func\n        for i in range(self.n):\n            self.tree[self.n + i] = arr[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = func(self.tree[2 * i], self.tree[2 * i + 1])\n\n    def update(self, pos: int, val: int):\n        pos += self.n\n        self.tree[pos] = val\n        while pos > 1:\n            pos //= 2\n            self.tree[pos] = self.func(self.tree[2 * pos], self.tree[2 * pos + 1])\n\n    def query(self, left: int, right: int) -> int:\n        result = 0\n        left += self.n\n        right += self.n\n        while left < right:\n            if left % 2 == 1:\n                result = self.func(result, self.tree[left])\n                left += 1\n            if right % 2 == 1:\n                right -= 1\n                result = self.func(result, self.tree[right])\n            left //= 2\n            right //= 2\n        return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    A = list(map(int, data[1:n+1]))\n    B = list(map(int, data[n+1:2*n+1]))\n    Q = int(data[2*n+1])\n    queries = data[2*n+2:]\n\n    sum_tree = SegmentTree(A, lambda x, y: x + y)\n    prod_tree = SegmentTree(B, lambda x, y: x * y)\n\n    ans = []\n    idx = 0\n    for _ in range(Q):\n        query_type = int(queries[idx])\n        idx += 1\n        if query_type == 1:\n            i = int(queries[idx]) - 1\n            x = int(queries[idx + 1])\n            idx += 2\n            sum_tree.update(i, x)\n        elif query_type == 2:\n            i = int(queries[idx]) - 1\n            x = int(queries[idx + 1])\n            idx += 2\n            prod_tree.update(i, x)\n        elif query_type == 3:\n            l = int(queries[idx]) - 1\n            r = int(queries[idx + 1])\n            idx += 2\n            v = sum_tree.query(l, r + 1)\n            v = prod_tree.query(l, r + 1) if v != 0 else 0\n            ans.append(v)\n\n    for a in ans:\n        print(a)\n\nif __name__ == '__main__':\n    main()", "import sys\nfrom typing import List\n\nclass SegmentTree:\n    def __init__(self"]}
{"task_id": "abc372_e", "codes": ["import heapq\nfrom collections import defaultdict\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = defaultdict(list)\n    heap_dict = defaultdict(lambda: [])\n    \n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1]) - 1\n            v = int(data[index + 2]) - 1\n            index += 3\n            \n            # Add edge to adjacency list\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n            \n            # Update heaps\n            if len(heap_dict[u]) < 10:\n                heapq.heappush(heap_dict[u], v)\n            else:\n                heapq.heappushpop(heap_dict[u], v)\n            \n            if len(heap_dict[v]) < 10:\n                heapq.heappush(heap_dict[v], u)\n            else:\n                heapq.heappushpop(heap_dict[v], u)\n        \n        elif query_type == 2:\n            v = int(data[index]) - 1\n            k = int(data[index + 1])\n            index += 2\n            \n            # Find k-th largest vertex\n            if not heap_dict[v] or k > len(heap_dict[v]):\n                results.append(-1)\n            else:\n                temp_heap = heap_dict[v][:]\n                result = heapq.nlargest(k, temp_heap)[-1]\n                results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "from collections import defaultdict\nfrom sortedcontainers import SortedList\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = defaultdict(set)\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1]) - 1\n            v = int(data[index + 2]) - 1\n            adj_list[u].add(v)\n            adj_list[v].add(u)\n            index += 3\n        elif query_type == 2:\n            v = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            if len(adj_list[v]) < k:\n                results.append(-1)\n            else:\n                sorted_adj = SortedList(adj_list[v])\n                results.append(sorted_adj[-k])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false], "raw_code": ["```python\nimport heapq\nfrom collections import defaultdict\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = defaultdict(list)\n    heap_dict = defaultdict(lambda: [])\n    \n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1]) - 1\n            v = int(data[index + 2]) - 1\n            index += 3\n            \n            # Add edge to adjacency list\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n            \n            # Update heaps\n            if len(heap_dict[u]) < 10:\n                heapq.heappush(heap_dict[u], v)\n            else:\n                heapq.heappushpop(heap_dict[u], v)\n            \n            if len(heap_dict[v]) < 10:\n                heapq.heappush(heap_dict[v], u)\n            else:\n                heapq.heappushpop(heap_dict[v], u)\n        \n        elif query_type == 2:\n            v = int(data[index]) - 1\n            k = int(data[index + 1])\n            index += 2\n            \n            # Find k-th largest vertex\n            if not heap_dict[v] or k > len(heap_dict[v]):\n                results.append(-1)\n            else:\n                temp_heap = heap_dict[v][:]\n                result = heapq.nlargest(k, temp_heap)[-1]\n                results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\nfrom collections import defaultdict\nfrom sortedcontainers import SortedList\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = defaultdict(set)\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1]) - 1\n            v = int(data[index + 2]) - 1\n            adj_list[u].add(v)\n            adj_list[v].add(u)\n            index += 3\n        elif query_type == 2:\n            v = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            if len(adj_list[v]) < k:\n                results.append(-1)\n            else:\n                sorted_adj = SortedList(adj_list[v])\n                results.append(sorted_adj[-k])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "arc182_d", "codes": ["def min_operations_to_transform(N, M, A, B):\n    operations = 0\n    for i in range(N):\n        if A[i] != B[i]:\n            diff = abs(A[i] - B[i])\n            if diff != 1 and (A[i] + 1) % M != B[i] and (A[i] - 1) % M != B[i]:\n                return -1\n            operations += min(diff, M - diff)\n    return operations\n\n# Read input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = min_operations_to_transform(N, M, A, B)\nprint(result)", "def min_operations_to_transform(N, M, A, B):\n    operations = 0\n    for i in range(N):\n        diff = abs(A[i] - B[i])\n        # Calculate the minimum operations needed considering wrap-around\n        min_ops = min(diff, M - diff)\n        operations += min_ops\n    return operations\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Print the result\nprint(min_operations_to_transform(N, M, A, B))"], "passed": [false, false], "raw_code": ["```python\ndef min_operations_to_transform(N, M, A, B):\n    operations = 0\n    for i in range(N):\n        if A[i] != B[i]:\n            diff = abs(A[i] - B[i])\n            if diff != 1 and (A[i] + 1) % M != B[i] and (A[i] - 1) % M != B[i]:\n                return -1\n            operations += min(diff, M - diff)\n    return operations\n\n# Read input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = min_operations_to_transform(N, M, A, B)\nprint(result)\n```", "def min_operations_to_transform(N, M, A, B):\n    operations = 0\n    for i in range(N):\n        diff = abs(A[i] - B[i])\n        # Calculate the minimum operations needed considering wrap-around\n        min_ops = min(diff, M - diff)\n        operations += min_ops\n    return operations\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Print the result\nprint(min_operations_to_transform(N, M, A, B))"]}
{"task_id": "abc368_d", "codes": ["import sys\nfrom collections import defaultdict, deque\n\ndef min_vertices_in_subtree(N, K, edges, vertices):\n    # Build the adjacency list for the tree\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # Function to perform DFS and find the path to a vertex\n    def dfs(start, target, visited, path):\n        if start == target:\n            return True\n        visited.add(start)\n        path.append(start)\n        for neighbor in adj_list[start]:\n            if neighbor not in visited and dfs(neighbor, target, visited, path):\n                return True\n        path.pop()\n        visited.remove(start)\n        return False\n\n    # Find paths to all K vertices\n    paths = [None] * K\n    for i, v in enumerate(vertices):\n        visited = set()\n        path = []\n        dfs(1, v, visited, path)\n        paths[i] = path\n\n    # Find the LCA of all K vertices\n    lca = vertices[0]\n    for v in vertices[1:]:\n        while lca not in paths[vertices.index(v)]:\n            lca = paths[vertices.index(lca)][-2]\n\n    # Count the number of vertices in the subtree rooted at the LCA\n    count = 0\n    stack = [(lca, 0)]\n    while stack:\n        node, level = stack.pop()\n        count += 1\n        for neighbor in adj_list[node]:\n            if neighbor != stack[-1][0] if stack else None:\n                stack.append((neighbor, level + 1))\n\n    return count\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nedges = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(N - 1)]\nvertices = [int(data[2 * N + 2 + i]) for i in range(K)]\n\n# Calculate and print the result\nprint(min_vertices_in_subtree(N, K, edges, vertices))", "import sys\nfrom collections import defaultdict, deque\n\ndef min_vertices_to_cover(N, K, edges, V):\n    # Build the adjacency list for the tree\n    adj = defaultdict(list)\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # Function to perform DFS and return the farthest node and its distance from start_node\n    def dfs(start_node):\n        visited = [False] * (N + 1)\n        stack = [(start_node, 0)]\n        max_distance = -1\n        farthest_node = None\n        while stack:\n            node, dist = stack.pop()\n            if not visited[node]:\n                visited[node] = True\n                max_distance = max(max_distance, dist)\n                farthest_node = node\n                for neighbor in adj[node]:\n                    stack.append((neighbor, dist + 1))\n        return farthest_node, max_distance\n\n    # Step 1: Find the farthest node from any vertex V[0]\n    _, farthest_from_V0 = dfs(V[0])\n\n    # Step 2: Find the farthest node from the farthest node found in step 1\n    farthest_from_farthest, _ = dfs(farthest_from_V0)\n\n    # The minimum number of vertices required to cover all K vertices is the distance between the two farthest nodes plus one\n    return farthest_from_farthest\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nedges = []\nfor i in range(N - 1):\n    u = int(data[2 + 2 * i])\n    v = int(data[3 + 2 * i])\n    edges.append((u, v))\nV = list(map(int, data[2 * N + 1:]))\n\n# Calculate the result\nresult = min_vertices_to_cover(N, K, edges, V)\n\n# Print the result\nprint(result)\n"], "passed": [false, false], "raw_code": ["import sys\nfrom collections import defaultdict, deque\n\ndef min_vertices_in_subtree(N, K, edges, vertices):\n    # Build the adjacency list for the tree\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # Function to perform DFS and find the path to a vertex\n    def dfs(start, target, visited, path):\n        if start == target:\n            return True\n        visited.add(start)\n        path.append(start)\n        for neighbor in adj_list[start]:\n            if neighbor not in visited and dfs(neighbor, target, visited, path):\n                return True\n        path.pop()\n        visited.remove(start)\n        return False\n\n    # Find paths to all K vertices\n    paths = [None] * K\n    for i, v in enumerate(vertices):\n        visited = set()\n        path = []\n        dfs(1, v, visited, path)\n        paths[i] = path\n\n    # Find the LCA of all K vertices\n    lca = vertices[0]\n    for v in vertices[1:]:\n        while lca not in paths[vertices.index(v)]:\n            lca = paths[vertices.index(lca)][-2]\n\n    # Count the number of vertices in the subtree rooted at the LCA\n    count = 0\n    stack = [(lca, 0)]\n    while stack:\n        node, level = stack.pop()\n        count += 1\n        for neighbor in adj_list[node]:\n            if neighbor != stack[-1][0] if stack else None:\n                stack.append((neighbor, level + 1))\n\n    return count\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nedges = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(N - 1)]\nvertices = [int(data[2 * N + 2 + i]) for i in range(K)]\n\n# Calculate and print the result\nprint(min_vertices_in_subtree(N, K, edges, vertices))", "import sys\nfrom collections import defaultdict, deque\n\ndef min_vertices_to_cover(N, K, edges, V):\n    # Build the adjacency list for the tree\n    adj = defaultdict(list)\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # Function to perform DFS and return the farthest node and its distance from start_node\n    def dfs(start_node):\n        visited = [False] * (N + 1)\n        stack = [(start_node, 0)]\n        max_distance = -1\n        farthest_node = None\n        while stack:\n            node, dist = stack.pop()\n            if not visited[node]:\n                visited[node] = True\n                max_distance = max(max_distance, dist)\n                farthest_node = node\n                for neighbor in adj[node]:\n                    stack.append((neighbor, dist + 1))\n        return farthest_node, max_distance\n\n    # Step 1: Find the farthest node from any vertex V[0]\n    _, farthest_from_V0 = dfs(V[0])\n\n    # Step 2: Find the farthest node from the farthest node found in step 1\n    farthest_from_farthest, _ = dfs(farthest_from_V0)\n\n    # The minimum number of vertices required to cover all K vertices is the distance between the two farthest nodes plus one\n    return farthest_from_farthest\n\n# Read input from standard input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nedges = []\nfor i in range(N - 1):\n    u = int(data[2 + 2 * i])\n    v = int(data[3 + 2 * i])\n    edges.append((u, v))\nV = list(map(int, data[2 * N + 1:]))\n\n# Calculate the result\nresult = min_vertices_to_cover(N, K, edges, V)\n\n# Print the result\nprint(result)\n"]}
{"task_id": "3551", "codes": ["class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.max_xor = 0\n\ndef insert(trie, num):\n    node = trie\n    for i in range(31, -1, -1):\n        bit = (num >> i) & 1\n        if bit not in node.children:\n            node.children[bit] = TrieNode()\n        node = node.children[bit]\n        node.max_xor = max(node.max_xor, num)\n\ndef maxXORQuery(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = TrieNode()\n    result = []\n    \n    for l, r in queries:\n        xor_val = prefix_xor[r + 1] ^ prefix_xor[l]\n        insert(trie, xor_val)\n        node = trie\n        current_max_xor = 0\n        for i in range(31, -1, -1):\n            bit = (xor_val >> i) & 1\n            if 1 - bit in node.children:\n                current_max_xor |= (1 << i)\n                node = node.children[1 - bit]\n            else:\n                node = node.children[bit]\n        result.append(current_max_xor)\n    \n    return result", "def max_xor_subarray(nums, queries):\n    n = len(nums)\n    # Step 1: Compute the prefix XOR array\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    # Step 2: Process each query\n    result = []\n    for l, r in queries:\n        if l == 0:\n            result.append(prefix_xor[r])\n        else:\n            result.append(prefix_xor[r] ^ prefix_xor[l - 1])\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.max_xor = 0\n\ndef insert(trie, num):\n    node = trie\n    for i in range(31, -1, -1):\n        bit = (num >> i) & 1\n        if bit not in node.children:\n            node.children[bit] = TrieNode()\n        node = node.children[bit]\n        node.max_xor = max(node.max_xor, num)\n\ndef maxXORQuery(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = TrieNode()\n    result = []\n    \n    for l, r in queries:\n        xor_val = prefix_xor[r + 1] ^ prefix_xor[l]\n        insert(trie, xor_val)\n        node = trie\n        current_max_xor = 0\n        for i in range(31, -1, -1):\n            bit = (xor_val >> i) & 1\n            if 1 - bit in node.children:\n                current_max_xor |= (1 << i)\n                node = node.children[1 - bit]\n            else:\n                node = node.children[bit]\n        result.append(current_max_xor)\n    \n    return result\n```", "```python\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    # Step 1: Compute the prefix XOR array\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    # Step 2: Process each query\n    result = []\n    for l, r in queries:\n        if l == 0:\n            result.append(prefix_xor[r])\n        else:\n            result.append(prefix_xor[r] ^ prefix_xor[l - 1])\n    \n    return result\n```"]}
{"task_id": "3571", "codes": ["def maxIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Step 1: Sort coordinates\n    coordinates.sort()\n    \n    # Step 2: Build the graph\n    graph = defaultdict(list)\n    indegree = defaultdict(int)\n    n = len(coordinates)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                graph[coordinates[i]].append(coordinates[j])\n                indegree[coordinates[j]] += 1\n    \n    # Step 3: Topological sort using Kahn's algorithm\n    queue = deque([node for node in coordinates if indegree[node] == 0])\n    dp = {node: 1 for node in coordinates}\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Step 4: Return the result for the k-th coordinate\n    return dp[coordinates[k]]", "def maxIncreasingPath(coordinates, k):\n    def dfs(x, y):\n        if dp[x][y] != -1:\n            return dp[x][y]\n        \n        dp[x][y] = 1\n        \n        for dx, dy in [(1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(coords) and 0 <= ny < len(coords[0]) and coords[nx][ny] > coords[x][y]:\n                dp[x][y] = max(dp[x][y], 1 + dfs(nx, ny))\n        \n        return dp[x][y]\n    \n    # Step 1: Sort coordinates\n    coords = sorted(coordinates)\n    \n    # Step 2: Initialize DP table\n    dp = [[-1] * len(coords[0]) for _ in range(len(coords))]\n    \n    # Step 3: Build the graph and calculate the longest path\n    result = 0\n    for i in range(len(coords)):\n        x, y = coords[i]\n        result = max(result, dfs(i, y))\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\ndef maxIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Step 1: Sort coordinates\n    coordinates.sort()\n    \n    # Step 2: Build the graph\n    graph = defaultdict(list)\n    indegree = defaultdict(int)\n    n = len(coordinates)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                graph[coordinates[i]].append(coordinates[j])\n                indegree[coordinates[j]] += 1\n    \n    # Step 3: Topological sort using Kahn's algorithm\n    queue = deque([node for node in coordinates if indegree[node] == 0])\n    dp = {node: 1 for node in coordinates}\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Step 4: Return the result for the k-th coordinate\n    return dp[coordinates[k]]\n```", "```python\ndef maxIncreasingPath(coordinates, k):\n    def dfs(x, y):\n        if dp[x][y] != -1:\n            return dp[x][y]\n        \n        dp[x][y] = 1\n        \n        for dx, dy in [(1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(coords) and 0 <= ny < len(coords[0]) and coords[nx][ny] > coords[x][y]:\n                dp[x][y] = max(dp[x][y], 1 + dfs(nx, ny))\n        \n        return dp[x][y]\n    \n    # Step 1: Sort coordinates\n    coords = sorted(coordinates)\n    \n    # Step 2: Initialize DP table\n    dp = [[-1] * len(coords[0]) for _ in range(len(coords))]\n    \n    # Step 3: Build the graph and calculate the longest path\n    result = 0\n    for i in range(len(coords)):\n        x, y = coords[i]\n        result = max(result, dfs(i, y))\n    \n    return result\n```"]}
{"task_id": "arc182_a", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    \n    P = []\n    V = []\n    index = 2\n    for _ in range(Q):\n        P.append(int(data[index]))\n        V.append(int(data[index + 1]))\n        index += 2\n    \n    MOD = 998244353\n    \n    # dp[i][j] := number of valid sequences up to position i with max value j\n    dp = [[0] * (10**9 + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        new_dp = [[0] * (10**9 + 1) for _ in range(N + 1)]\n        for j in range(10**9 + 1):\n            new_dp[i][j] = dp[i - 1][j]\n            if j >= V[P[i - 1]]:\n                new_dp[i][j] += dp[i - 1][j - V[P[i - 1]]]\n                new_dp[i][j] %= MOD\n        dp = new_dp\n    \n    result = sum(dp[N]) % MOD\n    print(result)\n\nmain()", "def count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    dp = [0] * (Q + 1)\n    dp[0] = 1\n    max_val = [0] * (N + 1)\n\n    for i in range(1, Q + 1):\n        p, v = P[i - 1], V[i - 1]\n        new_dp = [0] * (Q + 1)\n        new_max_val = max_val[:]\n\n        for j in range(i, 0, -1):\n            if p == 1:\n                new_dp[j] = (new_dp[j] + dp[j - 1]) % MOD\n                new_max_val[p] = max(new_max_val[p], v)\n            else:\n                if max_val[p - 1] <= v:\n                    new_dp[j] = (new_dp[j] + dp[j - 1]) % MOD\n                new_max_val[p] = max(new_max_val[p], v)\n\n        dp = new_dp\n        max_val = new_max_val\n\n    return dp[-1]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nQ = int(data[1])\nP = list(map(int, data[2::2]))\nV = list(map(int, data[3::2]))\n\n# Calculate and print the result\nresult = count_valid_sequences(N, Q, P, V)\nprint(result)"], "passed": [false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    \n    P = []\n    V = []\n    index = 2\n    for _ in range(Q):\n        P.append(int(data[index]))\n        V.append(int(data[index + 1]))\n        index += 2\n    \n    MOD = 998244353\n    \n    # dp[i][j] := number of valid sequences up to position i with max value j\n    dp = [[0] * (10**9 + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        new_dp = [[0] * (10**9 + 1) for _ in range(N + 1)]\n        for j in range(10**9 + 1):\n            new_dp[i][j] = dp[i - 1][j]\n            if j >= V[P[i - 1]]:\n                new_dp[i][j] += dp[i - 1][j - V[P[i - 1]]]\n                new_dp[i][j] %= MOD\n        dp = new_dp\n    \n    result = sum(dp[N]) % MOD\n    print(result)\n\nmain()\n```", "def count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    dp = [0] * (Q + 1)\n    dp[0] = 1\n    max_val = [0] * (N + 1)\n\n    for i in range(1, Q + 1):\n        p, v = P[i - 1], V[i - 1]\n        new_dp = [0] * (Q + 1)\n        new_max_val = max_val[:]\n\n        for j in range(i, 0, -1):\n            if p == 1:\n                new_dp[j] = (new_dp[j] + dp[j - 1]) % MOD\n                new_max_val[p] = max(new_max_val[p], v)\n            else:\n                if max_val[p - 1] <= v:\n                    new_dp[j] = (new_dp[j] + dp[j - 1]) % MOD\n                new_max_val[p] = max(new_max_val[p], v)\n\n        dp = new_dp\n        max_val = new_max_val\n\n    return dp[-1]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nQ = int(data[1])\nP = list(map(int, data[2::2]))\nV = list(map(int, data[3::2]))\n\n# Calculate and print the result\nresult = count_valid_sequences(N, Q, P, V)\nprint(result)"]}
{"task_id": "3527", "codes": ["def alternatingGroups(colors, queries):\n    n = len(colors)\n    groups = []\n    group_indices = {}\n    \n    def add_group(i, j):\n        if i > j:\n            i -= n\n        group_indices[(i, j)] = len(groups)\n        groups.append([(i + k) % n for k in range(j - i + 1)])\n    \n    def remove_group(i, j):\n        idx = group_indices.pop((i, j))\n        del groups[idx]\n    \n    def merge_groups(i, j, k, l):\n        if i > j:\n            i -= n\n        if k > l:\n            k -= n\n        new_group = [(i + k) % n for k in range(l - i + 1)]\n        group_indices[(new_group[0], new_group[-1])] = len(groups)\n        groups.append(new_group)\n        return new_group\n    \n    def split_group(i, j, m):\n        if i > j:\n            i -= n\n        if m < i or m > j:\n            raise ValueError(\"Invalid split point\")\n        left_group = [(i + k) % n for k in range(m - i + 1)]\n        right_group = [(i + k) % n for k in range(j - m + 1)]\n        group_indices[(left_group[0], left_group[-1])] = len(groups)\n        group_indices[(right_group[0], right_group[-1])] = len(groups)\n        groups.append(left_group)\n        groups.append(right_group)\n        return left_group, right_group\n    \n    # Initial setup\n    for i in range(n):\n        if (colors[i] != colors[(i + 1) % n]):\n            add_group(i, i + 1)\n    \n    result = []\n    \n    for q in queries:\n        if q[0] == 1:\n            size = q[1]\n            count = 0\n            for group in groups:\n                if len(group) == size:\n                    count += 1\n            result.append(count)\n        elif q[0] == 2:\n            index, color = q[1], q[2]\n            old_color = colors[index]\n            colors[index] = color\n            \n            # Find the group(s) involving the changed tile\n            for group in groups:\n                if index in group:\n                    if len(group) == 2:\n                        remove_group(group[0], group[-1])\n                    else:\n                        if (group[group.index(index) - 1] != color and group[(group.index(index) + 1) % len(group)] != color):\n                            remove_group(group[0], group[-1])\n                        else:\n                            left_group, right_group = split_group(group[0], group[-1], group.index(index))\n                            remove_group(group[0], group[-1])\n                            if len(left_group) >= 3:\n                                add_group(left_group[0], left_group[-1])\n                            if len(right_group) >= 3:\n                                add_group(right_group[0], right_group[-1])\n    \n    return result", "def alternatingGroups(colors, queries):\n    n = len(colors)\n    colors = colors + colors[:2]  # Extend the list to handle circular nature\n    group_counts = {}\n    change_indices = []\n    \n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            if i + size > n:\n                break\n            group = colors[i:i+size]\n            if all(group[j] != group[j+1] for j in range(size-1)):\n                count += 1\n        return count\n    \n    def update_color(index, new_color):\n        old_color = colors[index]\n        colors[index] = new_color\n        if old_color != new_color:\n            change_indices.append(index)\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            size = query[1]\n            result.append(count_alternating_groups(size))\n        elif query[0] == 2:\n            index = query[1]\n            new_color = query[2]\n            update_color(index, new_color)\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    groups = []\n    group_indices = {}\n    \n    def add_group(i, j):\n        if i > j:\n            i -= n\n        group_indices[(i, j)] = len(groups)\n        groups.append([(i + k) % n for k in range(j - i + 1)])\n    \n    def remove_group(i, j):\n        idx = group_indices.pop((i, j))\n        del groups[idx]\n    \n    def merge_groups(i, j, k, l):\n        if i > j:\n            i -= n\n        if k > l:\n            k -= n\n        new_group = [(i + k) % n for k in range(l - i + 1)]\n        group_indices[(new_group[0], new_group[-1])] = len(groups)\n        groups.append(new_group)\n        return new_group\n    \n    def split_group(i, j, m):\n        if i > j:\n            i -= n\n        if m < i or m > j:\n            raise ValueError(\"Invalid split point\")\n        left_group = [(i + k) % n for k in range(m - i + 1)]\n        right_group = [(i + k) % n for k in range(j - m + 1)]\n        group_indices[(left_group[0], left_group[-1])] = len(groups)\n        group_indices[(right_group[0], right_group[-1])] = len(groups)\n        groups.append(left_group)\n        groups.append(right_group)\n        return left_group, right_group\n    \n    # Initial setup\n    for i in range(n):\n        if (colors[i] != colors[(i + 1) % n]):\n            add_group(i, i + 1)\n    \n    result = []\n    \n    for q in queries:\n        if q[0] == 1:\n            size = q[1]\n            count = 0\n            for group in groups:\n                if len(group) == size:\n                    count += 1\n            result.append(count)\n        elif q[0] == 2:\n            index, color = q[1], q[2]\n            old_color = colors[index]\n            colors[index] = color\n            \n            # Find the group(s) involving the changed tile\n            for group in groups:\n                if index in group:\n                    if len(group) == 2:\n                        remove_group(group[0], group[-1])\n                    else:\n                        if (group[group.index(index) - 1] != color and group[(group.index(index) + 1) % len(group)] != color):\n                            remove_group(group[0], group[-1])\n                        else:\n                            left_group, right_group = split_group(group[0], group[-1], group.index(index))\n                            remove_group(group[0], group[-1])\n                            if len(left_group) >= 3:\n                                add_group(left_group[0], left_group[-1])\n                            if len(right_group) >= 3:\n                                add_group(right_group[0], right_group[-1])\n    \n    return result\n```", "```python\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    colors = colors + colors[:2]  # Extend the list to handle circular nature\n    group_counts = {}\n    change_indices = []\n    \n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            if i + size > n:\n                break\n            group = colors[i:i+size]\n            if all(group[j] != group[j+1] for j in range(size-1)):\n                count += 1\n        return count\n    \n    def update_color(index, new_color):\n        old_color = colors[index]\n        colors[index] = new_color\n        if old_color != new_color:\n            change_indices.append(index)\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            size = query[1]\n            result.append(count_alternating_groups(size))\n        elif query[0] == 2:\n            index = query[1]\n            new_color = query[2]\n            update_color(index, new_color)\n    \n    return result\n```"]}
{"task_id": "3580", "codes": ["def find_almost_equal_substring(s, pattern):\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    \n    return -1", "def findAlmostEqualSubstring(s: str, pattern: str) -> int:\n    m, n = len(s), len(pattern)\n    for i in range(m - n + 1):\n        diff_count = 0\n        for j in range(n):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    return -1\n\ndef findAlmostEqualSubstringWithK(s: str, pattern: str, k: int) -> int:\n    m, n = len(s), len(pattern)\n    for i in range(m - n + 1):\n        diff_count = 0\n        consecutive_diff_count = 0\n        for j in range(n):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                consecutive_diff_count += 1\n                if consecutive_diff_count > k:\n                    break\n            else:\n                consecutive_diff_count = 0\n        if diff_count <= k:\n            return i\n    return -1"], "passed": [false, false], "raw_code": ["```python\ndef find_almost_equal_substring(s, pattern):\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    \n    return -1\n```", "```python\ndef findAlmostEqualSubstring(s: str, pattern: str) -> int:\n    m, n = len(s), len(pattern)\n    for i in range(m - n + 1):\n        diff_count = 0\n        for j in range(n):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    return -1\n\ndef findAlmostEqualSubstringWithK(s: str, pattern: str, k: int) -> int:\n    m, n = len(s), len(pattern)\n    for i in range(m - n + 1):\n        diff_count = 0\n        consecutive_diff_count = 0\n        for j in range(n):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                consecutive_diff_count += 1\n                if consecutive_diff_count > k:\n                    break\n            else:\n                consecutive_diff_count = 0\n        if diff_count <= k:\n            return i\n    return -1\n```"]}
{"task_id": "3583", "codes": ["def solve(nums, queries):\n    from collections import defaultdict\n    from math import gcd\n    \n    n = len(nums)\n    gcd_count = defaultdict(int)\n    \n    # Compute the GCD for all pairs and count occurrences\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_count[g] += 1\n    \n    # Sort the unique GCD values\n    sorted_gcds = sorted(gcd_count.keys())\n    \n    # Function to find the value at the given index in the sorted GCD list\n    def get_value(index):\n        current_index = 0\n        for g in sorted_gcds:\n            current_index += gcd_count[g]\n            if current_index > index:\n                return g\n    \n    # Answer each query\n    answer = [get_value(q) for q in queries]\n    \n    return answer", "def solve_gcd_pairs(nums, queries):\n    from collections import defaultdict\n    from bisect import bisect_left\n    \n    max_val = max(nums)\n    gcd_count = defaultdict(int)\n    \n    # Function to compute GCD using Euclidean algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # Count the occurrences of each GCD value\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            g = gcd(nums[i], nums[j])\n            gcd_count[g] += 1\n    \n    # Create a list of unique GCD values and their cumulative counts\n    unique_gcds = sorted(gcd_count.keys())\n    cum_counts = [0]\n    for g in unique_gcds:\n        cum_counts.append(cum_counts[-1] + gcd_count[g])\n    \n    # Answer each query using binary search\n    result = []\n    for q in queries:\n        idx = bisect_left(cum_counts, q + 1)\n        if idx > 0:\n            result.append(unique_gcds[idx - 1])\n        else:\n            result.append(0)\n    \n    return result"], "passed": [false, false], "raw_code": ["```python\ndef solve(nums, queries):\n    from collections import defaultdict\n    from math import gcd\n    \n    n = len(nums)\n    gcd_count = defaultdict(int)\n    \n    # Compute the GCD for all pairs and count occurrences\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_count[g] += 1\n    \n    # Sort the unique GCD values\n    sorted_gcds = sorted(gcd_count.keys())\n    \n    # Function to find the value at the given index in the sorted GCD list\n    def get_value(index):\n        current_index = 0\n        for g in sorted_gcds:\n            current_index += gcd_count[g]\n            if current_index > index:\n                return g\n    \n    # Answer each query\n    answer = [get_value(q) for q in queries]\n    \n    return answer\n```", "```python\ndef solve_gcd_pairs(nums, queries):\n    from collections import defaultdict\n    from bisect import bisect_left\n    \n    max_val = max(nums)\n    gcd_count = defaultdict(int)\n    \n    # Function to compute GCD using Euclidean algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # Count the occurrences of each GCD value\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            g = gcd(nums[i], nums[j])\n            gcd_count[g] += 1\n    \n    # Create a list of unique GCD values and their cumulative counts\n    unique_gcds = sorted(gcd_count.keys())\n    cum_counts = [0]\n    for g in unique_gcds:\n        cum_counts.append(cum_counts[-1] + gcd_count[g])\n    \n    # Answer each query using binary search\n    result = []\n    for q in queries:\n        idx = bisect_left(cum_counts, q + 1)\n        if idx > 0:\n            result.append(unique_gcds[idx - 1])\n        else:\n            result.append(0)\n    \n    return result\n```"]}
{"final_accuracy": "0.00%"}
