{"difficulty": "hard", "num_threads": 32, "temperature": 0.2, "n": 1, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp02_bug_trace_TPL_CONCISETRACE_qwen_7b_hard_n_1.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3535", "code": "def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if nums[j] - nums[i] >= 0 and nums[j] - nums[i] <= nums[j]:\n                count += 1\n                \n    return count % MOD", "passed": false, "raw_code": "```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if nums[j] - nums[i] >= 0 and nums[j] - nums[i] <= nums[j]:\n                count += 1\n                \n    return count % MOD\n```"}
{"task_id": "3532", "code": "def minTimeToMarkNodes(edges):\n    def bfs(start):\n        from collections import deque\n        n = len(edges) + 1\n        adj_list = [[] for _ in range(n)]\n        for u, v in edges:\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n        \n        visited = [False] * n\n        visited[start] = True\n        queue = deque([start])\n        time = 0\n        \n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                node = queue.popleft()\n                for neighbor in adj_list[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append(neighbor)\n            time += 1\n        \n        return time\n    \n    n = len(edges) + 1\n    times = []\n    for i in range(n):\n        times.append(bfs(i))\n    \n    return times", "passed": false, "raw_code": "```python\ndef minTimeToMarkNodes(edges):\n    def bfs(start):\n        from collections import deque\n        n = len(edges) + 1\n        adj_list = [[] for _ in range(n)]\n        for u, v in edges:\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n        \n        visited = [False] * n\n        visited[start] = True\n        queue = deque([start])\n        time = 0\n        \n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                node = queue.popleft()\n                for neighbor in adj_list[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append(neighbor)\n            time += 1\n        \n        return time\n    \n    n = len(edges) + 1\n    times = []\n    for i in range(n):\n        times.append(bfs(i))\n    \n    return times\n```"}
{"task_id": "abc368_f", "code": "i", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import Counter\n\ndef count_prime_factors(n):\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            count += 1\n            n //= i\n    if n > 2:\n        count += 1\n    return count\n\ndef determine_winner(N, A):\n    total_factors = sum(count_prime_factors(a) for a in A)\n    if total_factors % 2 == 1:\n        return \"Anna\"\n    else:\n        return \"Bruno\"\n\n# Read input\nN = int(sys.stdin.readline().strip())\nA = list(map(int, sys.stdin.readline().strip().split()))\n\n# Determine and print the winner\nprint(determine_winner(N, A))"}
{"task_id": "abc366_f", "code": "d", "passed": false, "raw_code": "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    \n    functions = []\n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    dp = [0] * (K + 1)\n    \n    for A, B in functions:\n        new_dp = dp[:]\n        for k in range(K, 0, -1):\n            new_dp[k] = max(new_dp[k], A * new_dp[k - 1] + B)\n        dp = new_dp\n    \n    print(max(dp))\n\nmax_nested_function_value()"}
{"task_id": "abc365_e", "code": "d", "passed": false, "raw_code": "```python\ndef calculate_xor_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Step 1: Compute prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Step 2: Calculate the total XOR sum\n    total_xor_sum = 0\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            total_xor_sum += prefix_xor[j] ^ prefix_xor[i]\n    \n    print(total_xor_sum)\n\ncalculate_xor_sum()"}
{"task_id": "abc367_g", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * 20 for _ in range(N + 1)]\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        for j in range(20):\n            dp[i][j] = dp[i - 1][j]\n        for j in range(A[i - 1]):\n            dp[i][j] += dp[i - 1][j ^ A[i - 1]]\n            dp[i][j] %= MOD\n    \n    # Calculate the sum of scores\n    total_score = 0\n    for length in range(1, N + 1):\n        if length % M == 0:\n            total_score += pow(dp[length][0], K, MOD)\n            total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * 20 for _ in range(N + 1)]\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        for j in range(20):\n            dp[i][j] = dp[i - 1][j]\n        for j in range(A[i - 1]):\n            dp[i][j] += dp[i - 1][j ^ A[i - 1]]\n            dp[i][j] %= MOD\n    \n    # Calculate the sum of scores\n    total_score = 0\n    for length in range(1, N + 1):\n        if length % M == 0:\n            total_score += pow(dp[length][0], K, MOD)\n            total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc371_f", "code": "i", "passed": false, "raw_code": "```python\nimport heapq\nfrom sys import stdin\n\ndef min_movements():\n    # Read input\n    N = int(stdin.readline())\n    X = list(map(int, stdin.readline().split()))\n    Q = int(stdin.readline())\n    tasks = [tuple(map(int, stdin.readline().split())) for _ in range(Q)]\n    \n    # Initialize variables\n    movements = []\n    current_positions = X[:]\n    current_indices = {x: i for i, x in enumerate(X)}\n    \n    # Process each task\n    for T, G in tasks:\n        T -= 1  # Convert to zero-based index\n        if current_positions[T] == G:\n            continue\n        \n        # Calculate the distance to move\n        distance = abs(current_positions[T] - G)\n        \n        # Update the current position\n        current_positions[T] = G\n        \n        # Add the movement to the heap\n        heapq.heappush(movements, (distance, T))\n    \n    # Sum up all movements\n    total_movements = sum(distance for distance, _ in movements)\n    \n    # Print the result\n    print(total_movements)\n\n# Call the function\nmin_movements()"}
{"task_id": "abc366_g", "code": "d", "passed": false, "raw_code": "```python\ndef solve_xor_graph():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    # Build adjacency list\n    adj_list = [[] for _ in range(N + 1)]\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        index += 2\n    \n    # Check if there is a solution\n    if M == 0:\n        print(\"Yes\")\n        print(\" \".join(map(str, [1] * N)))\n        return\n    \n    # Create the augmented matrix\n    A = []\n    for i in range(1, N + 1):\n        row = [0] * (N + 1)\n        for neighbor in adj_list[i]:\n            row[neighbor] = 1\n        A.append(row)\n    \n    # Perform Gaussian elimination\n    rank = 0\n    for i in range(1, N + 1):\n        if A[i][i] == 0:\n            found = False\n            for j in range(i + 1, N + 1):\n                if A[j][i] == 1:\n                    A[i], A[j] = A[j], A[i]\n                    found = True\n                    break\n            if not found:\n                print(\"No\")\n                return\n        \n        for j in range(1, N + 1):\n            if j != i and A[j][i] == 1:\n                for k in range(N + 1):\n                    A[j][k] ^= A[i][k]\n    \n    # Check if the system is consistent\n    for i in range(1, N + 1):\n        if A[i][i] == 0 and A[i][-1] == 1:\n            print(\"No\")\n            return\n    \n    # Assign values\n    values = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if A[i][i] == 1:\n            values[i] = 1\n    \n    print(\"Yes\")\n    print(\" \".join(map(str, values[1:])))\n    \nsolve_xor_graph()"}
{"task_id": "abc366_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    x_coords = []\n    y_coords = []\n    \n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        x_coords.append(x)\n        y_coords.append(y)\n        index += 2\n    \n    x_coords.sort()\n    y_coords.sort()\n    \n    def count_pairs(coords, D):\n        n = len(coords)\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + coords[i]\n        \n        count = 0\n        \n        for i in range(n):\n            left = max(0, i - D // 2)\n            right = min(n - 1, i + D // 2)\n            \n            if left <= right:\n                count += prefix_sum[right + 1] - prefix_sum[left]\n        \n        return count\n    \n    x_count = count_pairs(x_coords, D)\n    y_count = count_pairs(y_coords, D)\n    \n    result = x_count * y_count\n    print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    x_coords = []\n    y_coords = []\n    \n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        x_coords.append(x)\n        y_coords.append(y)\n        index += 2\n    \n    x_coords.sort()\n    y_coords.sort()\n    \n    def count_pairs(coords, D):\n        n = len(coords)\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + coords[i]\n        \n        count = 0\n        \n        for i in range(n):\n            left = max(0, i - D // 2)\n            right = min(n - 1, i + D // 2)\n            \n            if left <= right:\n                count += prefix_sum[right + 1] - prefix_sum[left]\n        \n        return count\n    \n    x_count = count_pairs(x_coords, D)\n    y_count = count_pairs(y_coords, D)\n    \n    result = x_count * y_count\n    print(result)\n\nmain()\n```"}
{"task_id": "arc182_d", "code": "def min_operations_to_transform(N, M, A, B):\n    def can_transform(a, b):\n        if a == b:\n            return 0\n        if abs(a - b) == 1 or abs(a - b) == M - 1:\n            return 1\n        if abs(a - b) > 1 and abs(a - b) < M - 1:\n            if (a < b and (a + 1) % M != b and (a - 1) % M != b) or (a > b and (a + 1) % M != b and (a - 1) % M != b):\n                return 2\n            return -1\n        return -1\n\n    total_operations = 0\n    for i in range(N):\n        operations = can_transform(A[i], B[i])\n        if operations == -1:\n            return -1\n        total_operations += operations\n\n    return total_operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:]))\n\n# Calculate and print the result\nresult = min_operations_to_transform(N, M, A, B)\nprint(result)", "passed": false, "raw_code": "```python\ndef min_operations_to_transform(N, M, A, B):\n    def can_transform(a, b):\n        if a == b:\n            return 0\n        if abs(a - b) == 1 or abs(a - b) == M - 1:\n            return 1\n        if abs(a - b) > 1 and abs(a - b) < M - 1:\n            if (a < b and (a + 1) % M != b and (a - 1) % M != b) or (a > b and (a + 1) % M != b and (a - 1) % M != b):\n                return 2\n            return -1\n        return -1\n\n    total_operations = 0\n    for i in range(N):\n        operations = can_transform(A[i], B[i])\n        if operations == -1:\n            return -1\n        total_operations += operations\n\n    return total_operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:]))\n\n# Calculate and print the result\nresult = min_operations_to_transform(N, M, A, B)\nprint(result)\n```"}
{"task_id": "abc373_g", "code": "def read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = [int(data[i]) for i in range(1, 2*N+1, 2)]\n    B = [int(data[i]) for i in range(2, 2*N+1, 2)]\n    C = [int(data[i]) for i in range(2*N+2, 4*N+2, 2)]\n    D = [int(data[i]) for i in range(2*N+3, 4*N+2, 2)]\n    \n    return N, A, B, C, D\n\ndef find_non_crossing_permutation(N, A, B, C, D):\n    points = sorted([(x, y, 'P') for x, y in zip(A, B)] + [(x, y, 'Q') for x, y in zip(C, D)])\n    P_indices = [i for i, (_, _, label) in enumerate(points) if label == 'P']\n    Q_indices = [i for i, (_, _, label) in enumerate(points) if label == 'Q']\n    \n    def is_valid_pair(i, j):\n        p1, q1 = points[P_indices[i]], points[Q_indices[j]]\n        p2, q2 = points[P_indices[i+1]], points[Q_indices[j+1]]\n        \n        # Check if the segments (p1, q1) and (p2, q2) intersect\n        if (p1[1] - q1[1]) * (p2[0] - q2[0]) != (p1[0] - q1[0]) * (p2[1] - q2[1]):\n            return True\n        return False\n    \n    def backtrack(i):\n        if i == N:\n            return True\n        \n        for j in range(N):\n            if not used[j] and not is_valid_pair(i, j):\n                used[j] = True\n                result[i] = j\n                if backtrack(i + 1):\n                    return True\n                used[j] = False\n        return False\n    \n    result = [-1] * N\n    used = [False] * N\n    \n    if backtrack(0):\n        return ' '.join(map(str, [j + 1 for j in result]))\n    else:\n        return '-1'\n\ndef main():\n    N, A, B, C, D = read_input()\n    print(find_non_crossing_permutation(N, A, B, C, D))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = [int(data[i]) for i in range(1, 2*N+1, 2)]\n    B = [int(data[i]) for i in range(2, 2*N+1, 2)]\n    C = [int(data[i]) for i in range(2*N+2, 4*N+2, 2)]\n    D = [int(data[i]) for i in range(2*N+3, 4*N+2, 2)]\n    \n    return N, A, B, C, D\n\ndef find_non_crossing_permutation(N, A, B, C, D):\n    points = sorted([(x, y, 'P') for x, y in zip(A, B)] + [(x, y, 'Q') for x, y in zip(C, D)])\n    P_indices = [i for i, (_, _, label) in enumerate(points) if label == 'P']\n    Q_indices = [i for i, (_, _, label) in enumerate(points) if label == 'Q']\n    \n    def is_valid_pair(i, j):\n        p1, q1 = points[P_indices[i]], points[Q_indices[j]]\n        p2, q2 = points[P_indices[i+1]], points[Q_indices[j+1]]\n        \n        # Check if the segments (p1, q1) and (p2, q2) intersect\n        if (p1[1] - q1[1]) * (p2[0] - q2[0]) != (p1[0] - q1[0]) * (p2[1] - q2[1]):\n            return True\n        return False\n    \n    def backtrack(i):\n        if i == N:\n            return True\n        \n        for j in range(N):\n            if not used[j] and not is_valid_pair(i, j):\n                used[j] = True\n                result[i] = j\n                if backtrack(i + 1):\n                    return True\n                used[j] = False\n        return False\n    \n    result = [-1] * N\n    used = [False] * N\n    \n    if backtrack(0):\n        return ' '.join(map(str, [j + 1 for j in result]))\n    else:\n        return '-1'\n\ndef main():\n    N, A, B, C, D = read_input()\n    print(find_non_crossing_permutation(N, A, B, C, D))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc368_g", "code": "d", "passed": false, "raw_code": "```python\ndef build_segment_tree(arr):\n    n = len(arr)\n    segment_tree = [0] * (4 * n)\n    def build(node, start, end):\n        if start == end:\n            segment_tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            build(2 * node, start, mid)\n            build(2 * node + 1, mid + 1, end)\n            segment_tree[node] = max(segment_tree[2 * node], segment_tree[2 * node + 1])\n    build(1, 0, n - 1)\n    return segment_tree\n\ndef update_segment_tree(segment_tree, node, start, end, index, value):\n    if start == end:\n        segment_tree[node] = value\n    else:\n        mid = (start + end) // 2\n        if start <= index <= mid:\n            update_segment_tree(segment_tree, 2 * node, start, mid, index, value)\n        else:\n            update_segment_tree(segment_tree, 2 * node + 1, mid + 1, end, index, value)\n        segment_tree[node] = max(segment_tree[2 * node], segment_tree[2 * node + 1])\n\ndef query_segment_tree(segment_tree, node, start, end, l, r):\n    if r < start or end < l:\n        return 0\n    if l <= start and end <= r:\n        return segment_tree[node]\n    mid = (start + end) // 2\n    left = query_segment_tree(segment_tree, 2 * node, start, mid, l, r)\n    right = query_segment_tree(segment_tree, 2 * node + 1, mid + 1, end, l, r)\n    return max(left, right)\n\ndef process_queries(N, A, B, Q, queries):\n    segment_tree_A = build_segment_tree(A)\n    segment_tree_B = build_segment_tree(B)\n    \n    results = []\n    for query in queries:\n        if query[0] == 1:\n            i, x = query[1], query[2]\n            A[i - 1] = x\n            update_segment_tree(segment_tree_A, 1, 0, N - 1, i - 1, x)\n        elif query[0] == 2:\n            i, x = query[1], query[2]\n            B[i - 1] = x\n            update_segment_tree(segment_tree_B, 1, 0, N - 1, i - 1, x)\n        elif query[0] == 3:\n            l, r = query[1], query[2]\n            v = 0\n            for i in range(l - 1, r):\n                v = max(v + A[i], v * B[i])\n            results.append(v)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list"}
{"task_id": "arc181_c", "code": "def fill_grid(N, P, Q):\n    grid = [['0'] * N for _ in range(N)]\n    \n    for i in range(N):\n        for j in range(N):\n            if (i < N - 1 and grid[i][j] < grid[i + 1][j]) or (j < N - 1 and grid[i][j] < grid[i][j + 1]):\n                grid[i][j] = '1'\n    \n    for row in grid:\n        print(''.join(row))\n\n# Read input\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Fill and print the grid\nfill_grid(N, P, Q)", "passed": false, "raw_code": "```python\ndef fill_grid(N, P, Q):\n    grid = [['0'] * N for _ in range(N)]\n    \n    for i in range(N):\n        for j in range(N):\n            if (i < N - 1 and grid[i][j] < grid[i + 1][j]) or (j < N - 1 and grid[i][j] < grid[i][j + 1]):\n                grid[i][j] = '1'\n    \n    for row in grid:\n        print(''.join(row))\n\n# Read input\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Fill and print the grid\nfill_grid(N, P, Q)\n```"}
{"task_id": "3563", "code": "def maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(m):\n        for row in range(n):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score", "passed": false, "raw_code": "```python\ndef maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort()\n    \n    selected_values = set()\n    score = 0\n    \n    for col in range(m):\n        for row in range(n):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                score += grid[row][col]\n                break\n    \n    return score\n```"}
{"task_id": "abc373_f", "code": "def max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    items = []\n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        items.append((w, v))\n        index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for w, v in items:\n        for j in range(W, w - 1, -1):\n            dp[j] = max(dp[j], dp[j - w] + v - (j // w) ** 2)\n    \n    print(max(dp))\n\nmax_happiness()", "passed": false, "raw_code": "```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    items = []\n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        items.append((w, v))\n        index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for w, v in items:\n        for j in range(W, w - 1, -1):\n            dp[j] = max(dp[j], dp[j - w] + v - (j // w) ** 2)\n    \n    print(max(dp))\n\nmax_happiness()\n```"}
{"task_id": "abc371_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    \n    for i in range(N):\n        distinct_values = set()\n        for j in range(i, N):\n            distinct_values.add(A[j])\n            total_sum += len(distinct_values)\n    \n    print(total_sum)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_sum = 0\n    \n    for i in range(N):\n        distinct_values = set()\n        for j in range(i, N):\n            distinct_values.add(A[j])\n            total_sum += len(distinct_values)\n    \n    print(total_sum)\n\nmain()\n```"}
{"task_id": "abc367_f", "code": "def can_rearrange_subsequence():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        freq_A = [0] * (N + 1)\n        freq_B = [0] * (N + 1)\n        \n        for num in subseq_A:\n            freq_A[num] += 1\n        for num in subseq_B:\n            freq_B[num] += 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequence()", "passed": false, "raw_code": "```python\ndef can_rearrange_subsequence():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        freq_A = [0] * (N + 1)\n        freq_B = [0] * (N + 1)\n        \n        for num in subseq_A:\n            freq_A[num] += 1\n        for num in subseq_B:\n            freq_B[num] += 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequence()\n```"}
{"task_id": "abc369_g", "code": "i", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef dfs(graph, start):\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    queue = deque([start])\n    \n    while queue:\n        u = queue.popleft()\n        for v, w in graph[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + w\n                queue.append(v)\n    \n    return dist\n\ndef min_max_path(n, edges):\n    graph = defaultdict(list)\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    # Calculate distances from vertex 1 to all other vertices\n    dist_from_1 = dfs(graph, 1)\n    \n    # Calculate the diameter of the tree\n    max_dist = 0\n    farthest_vertex = 1\n    for i in range(1, n + 1):\n        if dist_from_1[i] > max_dist:\n            max_dist = dist_from_1[i]\n            farthest_vertex = i\n    \n    # Calculate distances from the farthest vertex to all other vertices\n    dist_from_farthest = dfs(graph, farthest_vertex)\n    \n    # The diameter of the tree is the maximum distance found\n    diameter = max(max_dist, dist_from_farthest[1])\n    \n    # For K >= 3, the optimal score is half the diameter\n    result = [diameter // 2] * n\n    \n    # For K = 1 and K = 2, calculate the exact scores\n    for k in range(1, 3):\n        min_score = float('inf')\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if k == 1:\n                    min_score = min(min_score, dist_from_1[i] + dist_from_1[j])\n                elif k == 2:\n                    min_score = min(min_score, dist_from_1[i] + dist_from_1[j] + dist_from_1[i] + dist_from_1[j])\n        result[k - 1] = min_score\n    \n    return result\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nedges = []\nindex = 1\nfor _ in range(n - 1):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    w = int(data[index + 2])\n    edges.append((u, v, w))\n    index += 3\n\n# Calculate results\nresults = min_max_path(n, edges)\n\n# Print results\nfor result in results:\n    print(result)"}
{"task_id": "abc369_e", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nedges = []\nindex = 2\nfor _ in range(M):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    t = int(data[index + 2])\n    edges.append((u, v, t))\n    index += 3\n\nQ = int(data[index])\nqueries = []\nindex += 1\nfor _ in range(Q):\n    K = int(data[index])\n    bridges = list(map(int, data[index + 1:index + 1 + K]))\n    queries.append((K, bridges))\n    index += K + 1\n\nINF = float('inf')\ndp = [[INF] * N for _ in range(1 << M)]\ndp[0][0] = 0\n\nfor mask in range(1 << M):\n    for u, v, t in edges:\n        bit_u = 1 << (u - 1)\n        bit_v = 1 << (v - 1)\n        if mask & bit_u:\n            dp[mask][v] = min(dp[mask][v], dp[mask ^ bit_u][u] + t)\n        if mask & bit_v:\n            dp[mask][u] = min(dp[mask][u], dp[mask ^ bit_v][v] + t)\n\nfor K, bridges in queries:\n    mask = 0\n    for bridge in bridges:\n        mask |= 1 << (bridge - 1)\n    result = min(dp[mask][N - 1], dp[mask][0])\n    print(result)", "passed": false, "raw_code": "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nedges = []\nindex = 2\nfor _ in range(M):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    t = int(data[index + 2])\n    edges.append((u, v, t))\n    index += 3\n\nQ = int(data[index])\nqueries = []\nindex += 1\nfor _ in range(Q):\n    K = int(data[index])\n    bridges = list(map(int, data[index + 1:index + 1 + K]))\n    queries.append((K, bridges))\n    index += K + 1\n\nINF = float('inf')\ndp = [[INF] * N for _ in range(1 << M)]\ndp[0][0] = 0\n\nfor mask in range(1 << M):\n    for u, v, t in edges:\n        bit_u = 1 << (u - 1)\n        bit_v = 1 << (v - 1)\n        if mask & bit_u:\n            dp[mask][v] = min(dp[mask][v], dp[mask ^ bit_u][u] + t)\n        if mask & bit_v:\n            dp[mask][u] = min(dp[mask][u], dp[mask ^ bit_v][v] + t)\n\nfor K, bridges in queries:\n    mask = 0\n    for bridge in bridges:\n        mask |= 1 << (bridge - 1)\n    result = min(dp[mask][N - 1], dp[mask][0])\n    print(result)\n```"}
{"task_id": "abc370_g", "code": "import sys\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef sum_of_divisors(n):\n    result = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            result += i\n            if i != n // i:\n                result += n // i\n    return result\n\ndef count_good_integers(N, M):\n    dp = defaultdict(lambda: defaultdict(int))\n    dp[0][1] = 1\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            for k in range(3):\n                dp[j][k] = (dp[j][k] + dp[j - 1][(k * sum_of_divisors(i)) % 3]) % MOD\n    return sum(dp[M][0] for _ in range(3)) % MOD\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    print(count_good_integers(N, M))\n", "passed": false, "raw_code": "import sys\nfrom collections import defaultdict\n\nMOD = 998244353\n\ndef sum_of_divisors(n):\n    result = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            result += i\n            if i != n // i:\n                result += n // i\n    return result\n\ndef count_good_integers(N, M):\n    dp = defaultdict(lambda: defaultdict(int))\n    dp[0][1] = 1\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            for k in range(3):\n                dp[j][k] = (dp[j][k] + dp[j - 1][(k * sum_of_divisors(i)) % 3]) % MOD\n    return sum(dp[M][0] for _ in range(3)) % MOD\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    print(count_good_integers(N, M))\n"}
{"task_id": "arc181_b", "code": "d", "passed": false, "raw_code": "```python\ndef check_f(S, X, Y):\n    # Count the occurrences of each character in S\n    char_count = {}\n    for char in S:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Function to calculate the length of f(S, T, X)\n    def calculate_length(X):\n        length = 0\n        for char in X:\n            if char == '0':\n                length += len(S)\n            elif char == '1':\n                length += len(T)\n        return length\n    \n    # Check if the lengths can be the same\n    if calculate_length(X) != calculate_length(Y):\n        return \"No\"\n    \n    # Check if the character distributions can be the same\n    for char, count in char_count.items():\n        if X.count(char) * len(S) != Y.count(char) * len(T):\n            return \"No\"\n    \n    return \"Yes\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Number of test cases\nt = int(data[0])\n\nresults = []\nindex = 1\nfor _ in range(t):\n    S = data[index]\n    index += 1\n    X = data[index]\n    index += 1\n    Y = data[index]\n    index += 1\n    results.append(check_f(S, X, Y))\n\n# Print results\nfor result in results"}
{"task_id": "abc367_e", "code": "def process_sequence(N, K, X, A):\n    def find_cycle(A, X):\n        visited = {}\n        current = 0\n        while True:\n            if current in visited:\n                return visited[current], current\n            visited[current] = len(visited)\n            current = X[current] - 1\n    \n    def apply_operations(A, X, K):\n        cycle_start, cycle_end = find_cycle(A, X)\n        cycle_length = cycle_end - cycle_start\n        K %= cycle_length\n        if K == 0:\n            K = cycle_length\n        current = 0\n        for _ in range(K):\n            current = X[current] - 1\n        return A[current]\n    \n    for _ in range(K):\n        A = [A[X[i] - 1] for i in range(N)]\n    \n    return ' '.join(map(str, A))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Process the sequence\nresult = process_sequence(N, K, X, A)\n\n# Print the result\nprint(result)", "passed": false, "raw_code": "```python\ndef process_sequence(N, K, X, A):\n    def find_cycle(A, X):\n        visited = {}\n        current = 0\n        while True:\n            if current in visited:\n                return visited[current], current\n            visited[current] = len(visited)\n            current = X[current] - 1\n    \n    def apply_operations(A, X, K):\n        cycle_start, cycle_end = find_cycle(A, X)\n        cycle_length = cycle_end - cycle_start\n        K %= cycle_length\n        if K == 0:\n            K = cycle_length\n        current = 0\n        for _ in range(K):\n            current = X[current] - 1\n        return A[current]\n    \n    for _ in range(K):\n        A = [A[X[i] - 1] for i in range(N)]\n    \n    return ' '.join(map(str, A))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Process the sequence\nresult = process_sequence(N, K, X, A)\n\n# Print the result\nprint(result)\n```"}
{"task_id": "arc181_d", "code": "d", "passed": false, "raw_code": "```python\ndef fenwick_tree(n):\n    tree = [0] * (n + 1)\n    \n    def update(i, val):\n        while i <= n:\n            tree[i] += val\n            i += i & -i\n    \n    def query(i):\n        sum_val = 0\n        while i > 0:\n            sum_val += tree[i]\n            i -= i & -i\n        return sum_val\n    \n    return update, query\n\ndef count_inversions(arr):\n    n = len(arr)\n    sorted_arr = sorted(set(arr))\n    rank = {val: idx + 1 for idx, val in enumerate(sorted_arr)}\n    update, query = fenwick_tree(n)\n    inversions = 0\n    \n    for num in arr:\n        rank_num = rank[num]\n        inversions += query(rank_num - 1)\n        update(rank_num, 1)\n    \n    return inversions\n\ndef process_operations(N, P, M, A):\n    results = []\n    for A_i in A:\n        for i in range(1, A_i):\n            if P[i] > P[i + 1]:\n                P[i], P[i + 1] = P[i + 1], P[i]\n        results.append(count_inversions(P))\n    return results\n\n# Read input\nN = int(input())\nP = list(map(int, input().split()))\nM = int(input())\nA = list(map(int, input().split()))\n\n# Process operations and get results\nresults = process_operations(N, P, M, A)\n\n# Print results\nfor result in results:"}
{"task_id": "arc183_c", "code": "d", "passed": false, "raw_code": "```python\ndef count_permutations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    conditions = []\n    index = 2\n    for _ in range(M):\n        L = int(data[index]) - 1\n        R = int(data[index + 1]) - 1\n        X = int(data[index + 2]) - 1\n        conditions.append((L, R, X))\n        index += 3\n    \n    MOD = 998244353\n    \n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    \n    for j in range(1, N + 1):\n        dp[j][j] = 1\n    \n    for i in range(1, N + 1):\n        new_dp = [0] * (N + 1)\n        for j in range(1, N + 1):\n            if j == i:\n                continue\n            total = 0\n            for k in range(i):\n                valid = True\n                for L, R, X in conditions:\n                    if L <= k < R and j == X:\n                        valid = False\n                        break\n                if valid:\n                    total = (total + dp[k][j]) % MOD\n            new_dp[j] = total\n        dp = new_dp\n    \n    result = 0\n    for j in range(1, N + 1):\n        result = (result + dp[N - 1][j]) % MOD\n    \n    print(result)\n\ncount_permutations()"}
{"task_id": "3550", "code": "def max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(row) for row in board]\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Find rows and columns with exactly one non-zero cell\n    valid_rows = [i for i, s in enumerate(row_sums) if s != 0 and row_sums.count(s) == 1]\n    valid_cols = [j for j, s in enumerate(col_sums) if s != 0 and col_sums.count(s) == 1]\n    \n    # If there are fewer than 3 valid positions, return 0\n    if len(valid_rows) < 3 or len(valid_cols) < 3:\n        return 0\n    \n    # Calculate the maximum sum by selecting 3 valid positions\n    max_sum = 0\n    for r in valid_rows:\n        for c in valid_cols:\n            if r != c:\n                max_sum += board[r][c]\n    \n    return max_sum", "passed": false, "raw_code": "```python\ndef max_rook_sum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(row) for row in board]\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Find rows and columns with exactly one non-zero cell\n    valid_rows = [i for i, s in enumerate(row_sums) if s != 0 and row_sums.count(s) == 1]\n    valid_cols = [j for j, s in enumerate(col_sums) if s != 0 and col_sums.count(s) == 1]\n    \n    # If there are fewer than 3 valid positions, return 0\n    if len(valid_rows) < 3 or len(valid_cols) < 3:\n        return 0\n    \n    # Calculate the maximum sum by selecting 3 valid positions\n    max_sum = 0\n    for r in valid_rows:\n        for c in valid_cols:\n            if r != c:\n                max_sum += board[r][c]\n    \n    return max_sum\n```"}
{"task_id": "3552", "code": "def largest_k_palindrome(n, k):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    max_num = int('9' * n)\n    min_num = 10**(n-1)\n    \n    for num in range(max_num, min_num - 1, -1):\n        if num % k == 0 and is_palindrome(num):\n            return str(num)\n    return \"\"\n\n# Example usage:\nprint(largest_k_palindrome(3, 5))  # Output: \"595\"\nprint(largest_k_palindrome(1, 4))  # Output: \"8\"\nprint(largest_k_palindrome(5, 6))  # Output: \"89898\"", "passed": false, "raw_code": "```python\ndef largest_k_palindrome(n, k):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    max_num = int('9' * n)\n    min_num = 10**(n-1)\n    \n    for num in range(max_num, min_num - 1, -1):\n        if num % k == 0 and is_palindrome(num):\n            return str(num)\n    return \"\"\n\n# Example usage:\nprint(largest_k_palindrome(3, 5))  # Output: \"595\"\nprint(largest_k_palindrome(1, 4))  # Output: \"8\"\nprint(largest_k_palindrome(5, 6))  # Output: \"89898\"\n```"}
{"task_id": "3575", "code": "def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    dp_left = [0] * (n + 1)\n    dp_right = [0] * (n + 1)\n    \n    # Fill dp_left array\n    for i in range(n):\n        dp_left[i + 1] = dp_left[i] | nums[i]\n    \n    # Fill dp_right array\n    for i in range(n - 1, -1, -1):\n        dp_right[i] = dp_right[i + 1] | nums[i]\n    \n    max_value = 0\n    \n    # Combine results from dp_left and dp_right\n    for i in range(k, n - k + 1):\n        max_value = max(max_value, dp_left[i] ^ dp_right[i + k])\n    \n    return max_value", "passed": false, "raw_code": "```python\ndef maxSubsequenceValue(nums, k):\n    n = len(nums)\n    dp_left = [0] * (n + 1)\n    dp_right = [0] * (n + 1)\n    \n    # Fill dp_left array\n    for i in range(n):\n        dp_left[i + 1] = dp_left[i] | nums[i]\n    \n    # Fill dp_right array\n    for i in range(n - 1, -1, -1):\n        dp_right[i] = dp_right[i + 1] | nums[i]\n    \n    max_value = 0\n    \n    # Combine results from dp_left and dp_right\n    for i in range(k, n - k + 1):\n        max_value = max(max_value, dp_left[i] ^ dp_right[i + k])\n    \n    return max_value\n```"}
{"task_id": "arc182_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    min_values = [float('inf')] * M\n    \n    for a in A:\n        for k in range(K):\n            mod_value = (C * k + a) % M\n            if mod_value < min_values[mod_value]:\n                min_values[mod_value] = mod_value\n    \n    result = sum(min_values)\n    print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    min_values = [float('inf')] * M\n    \n    for a in A:\n        for k in range(K):\n            mod_value = (C * k + a) % M\n            if mod_value < min_values[mod_value]:\n                min_values[mod_value] = mod_value\n    \n    result = sum(min_values)\n    print(result)\n\nmain()\n```"}
{"task_id": "arc182_a", "code": "def count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP array\n    dp = [0] * (Q + 1)\n    dp[0] = 1\n    \n    # Iterate through each operation\n    for i in range(1, Q + 1):\n        pi = P[i - 1]\n        vi = V[i - 1]\n        \n        # Check if the operation is valid\n        valid = True\n        for j in range(pi):\n            if dp[j] > vi:\n                valid = False\n                break\n        \n        if valid:\n            dp[i] = dp[i - 1]\n        \n        for j in range(pi, Q + 1):\n            if dp[j] > vi:\n                dp[j] = dp[j - 1]\n    \n    # Sum up the valid sequences\n    result = sum(dp) % MOD\n    print(result)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nP = []\nV = []\n\nindex = 2\nfor _ in range(Q):\n    pi = int(data[index])\n    vi = int(data[index + 1])\n    P.append(pi)\n    V.append(vi)\n    index += 2\n\ncount_valid_sequences(N, Q, P, V)", "passed": false, "raw_code": "```python\ndef count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP array\n    dp = [0] * (Q + 1)\n    dp[0] = 1\n    \n    # Iterate through each operation\n    for i in range(1, Q + 1):\n        pi = P[i - 1]\n        vi = V[i - 1]\n        \n        # Check if the operation is valid\n        valid = True\n        for j in range(pi):\n            if dp[j] > vi:\n                valid = False\n                break\n        \n        if valid:\n            dp[i] = dp[i - 1]\n        \n        for j in range(pi, Q + 1):\n            if dp[j] > vi:\n                dp[j] = dp[j - 1]\n    \n    # Sum up the valid sequences\n    result = sum(dp) % MOD\n    print(result)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nP = []\nV = []\n\nindex = 2\nfor _ in range(Q):\n    pi = int(data[index])\n    vi = int(data[index + 1])\n    P.append(pi)\n    V.append(vi)\n    index += 2\n\ncount_valid_sequences(N, Q, P, V)\n```"}
{"task_id": "arc183_d", "code": "d", "passed": false, "raw_code": "```python\ndef max_score_operations(N, edges):\n    import heapq\n    \n    # Build the adjacency list representation of the tree\n    adj_list = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Function to get all leaves in the tree\n    def get_leaves():\n        leaves = []\n        for i in range(1, N + 1):\n            if len(adj_list[i]) == 1:\n                leaves.append(i)\n        return leaves\n    \n    # Function to calculate the distance between two nodes using BFS\n    def bfs_distance(start, end):\n        queue = [(start, 0)]\n        visited = set([start])\n        while queue:\n            node, dist = queue.pop(0)\n            if node == end:\n                return dist\n            for neighbor in adj_list[node]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, dist + 1))\n        return float('inf')\n    \n    # Main loop to perform operations\n    results = []\n    while len(get_leaves()) >= 2:\n        leaves = get_leaves()\n        max_dist = 0\n        best_pair = (None, None)\n        \n        # Find the pair of leaves with the maximum distance\n        for i in range(len(leaves)):\n            for j in range(i + 1, len(leaves)):\n                dist = bfs_distance(leaves[i], leaves[j])\n                if dist > max_dist:\n                    max_dist = dist\n                    best_pair = (leaves[i], leaves[j])\n        \n        # Add the best pair to the result\n        results.append(best_pair)\n        \n        # Remove the selected leaves from the tree\n        u, v = best_pair\n        adj_list[u].remove(v)\n        adj_list[v].remove(u)\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nedges = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(N - 1)]\n\n# Get the result\nresult = max_score_operations(N, edges)\n\n# Print the result\nfor u, v in result:\n    print(u, v)"}
{"task_id": "3531", "code": "def min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times_to_die = [(h / d) for h, d in zip(health, damage)]\n    \n    # Sort enemies by the time it takes for them to die\n    sorted_enemies = sorted(zip(times_to_die, damage, health))\n    \n    total_damage = 0\n    current_time = 0\n    \n    for _, d, h in sorted_enemies:\n        # Calculate the number of full attacks Bob can make in the remaining time\n        full_attacks = int((current_time + h - 1) // d)\n        total_damage += full_attacks * power\n        \n        # Update the current time after the full attacks\n        current_time += full_attacks * d\n        \n        # If there is any remaining time, add the partial attack damage\n        if current_time < h:\n            total_damage += power\n    \n    return total_damage", "passed": false, "raw_code": "```python\ndef min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times_to_die = [(h / d) for h, d in zip(health, damage)]\n    \n    # Sort enemies by the time it takes for them to die\n    sorted_enemies = sorted(zip(times_to_die, damage, health))\n    \n    total_damage = 0\n    current_time = 0\n    \n    for _, d, h in sorted_enemies:\n        # Calculate the number of full attacks Bob can make in the remaining time\n        full_attacks = int((current_time + h - 1) // d)\n        total_damage += full_attacks * power\n        \n        # Update the current time after the full attacks\n        current_time += full_attacks * d\n        \n        # If there is any remaining time, add the partial attack damage\n        if current_time < h:\n            total_damage += power\n    \n    return total_damage\n```"}
{"task_id": "3571", "code": "def maxIncreasingPath(coordinates, k):\n    def dfs(i):\n        if dp[i] != -1:\n            return dp[i]\n        \n        x, y = coords[i]\n        max_path = 1\n        \n        for dx, dy in [(1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            idx = bisect_left(coords, [nx, ny])\n            \n            if idx < len(coords) and coords[idx] == [nx, ny]:\n                max_path = max(max_path, 1 + dfs(idx))\n        \n        dp[i] = max_path\n        return dp[i]\n    \n    coords = sorted(coordinates)\n    n = len(coords)\n    dp = [-1] * n\n    \n    return dfs(k)", "passed": false, "raw_code": "```python\ndef maxIncreasingPath(coordinates, k):\n    def dfs(i):\n        if dp[i] != -1:\n            return dp[i]\n        \n        x, y = coords[i]\n        max_path = 1\n        \n        for dx, dy in [(1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            idx = bisect_left(coords, [nx, ny])\n            \n            if idx < len(coords) and coords[idx] == [nx, ny]:\n                max_path = max(max_path, 1 + dfs(idx))\n        \n        dp[i] = max_path\n        return dp[i]\n    \n    coords = sorted(coordinates)\n    n = len(coords)\n    dp = [-1] * n\n    \n    return dfs(k)\n```"}
{"task_id": "abc368_e", "code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    X1 = int(data[2])\n    trains = []\n    for i in range(M):\n        A = int(data[3 + 4 * i])\n        B = int(data[4 + 4 * i])\n        S = int(data[5 + 4 * i])\n        T = int(data[6 + 4 * i])\n        trains.append((A, B, S, T))\n    trains.sort(key=lambda x: x[3])\n    delays = [0] * M\n    delays[0] = X1 - trains[0][3]\n    for i in range(1, M):\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        curr_A, curr_B, curr_S, curr_T = trains[i]\n        if curr_B == prev_A and curr_S <= prev_T:\n            delays[i] = max(delays[i], prev_T - curr_S + delays[i - 1])\n    print(' '.join(map(str, delays[1:])))\nsolve()", "passed": false, "raw_code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    X1 = int(data[2])\n    trains = []\n    for i in range(M):\n        A = int(data[3 + 4 * i])\n        B = int(data[4 + 4 * i])\n        S = int(data[5 + 4 * i])\n        T = int(data[6 + 4 * i])\n        trains.append((A, B, S, T))\n    trains.sort(key=lambda x: x[3])\n    delays = [0] * M\n    delays[0] = X1 - trains[0][3]\n    for i in range(1, M):\n        prev_A, prev_B, prev_S, prev_T = trains[i - 1]\n        curr_A, curr_B, curr_S, curr_T = trains[i]\n        if curr_B == prev_A and curr_S <= prev_T:\n            delays[i] = max(delays[i], prev_T - curr_S + delays[i - 1])\n    print(' '.join(map(str, delays[1:])))\nsolve()"}
{"task_id": "3551", "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.max_value = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for bit in range(31, -1, -1):\n            bit_val = (num >> bit) & 1\n            if bit_val not in node.children:\n                node.children[bit_val] = TrieNode()\n            node = node.children[bit_val]\n            node.max_value = max(node.max_value, num)\n\n    def find_max_xor(self, num):\n        node = self.root\n        xor_val = 0\n        for bit in range(31, -1, -1):\n            bit_val = (num >> bit) & 1\n            opposite_bit = 1 - bit_val\n            if opposite_bit in node.children:\n                xor_val |= (1 << bit)\n                node = node.children[opposite_bit]\n            else:\n                node = node.children[bit_val]\n        return xor_val\n\ndef maxXorQueries(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = Trie()\n    result = [-1] * len(queries)\n    query_indices = sorted(range(len(queries)), key=lambda x: queries[x][1])\n    \n    j = 0\n    for i in query_indices:\n        l, r = queries[i]\n        while j < r + 1:\n            trie.insert(prefix_xor[j])\n            j += 1\n        result[i] = trie.find_max_xor(prefix_xor[r] ^ prefix_xor[l - 1])\n    \n    return result", "passed": false, "raw_code": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.max_value = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for bit in range(31, -1, -1):\n            bit_val = (num >> bit) & 1\n            if bit_val not in node.children:\n                node.children[bit_val] = TrieNode()\n            node = node.children[bit_val]\n            node.max_value = max(node.max_value, num)\n\n    def find_max_xor(self, num):\n        node = self.root\n        xor_val = 0\n        for bit in range(31, -1, -1):\n            bit_val = (num >> bit) & 1\n            opposite_bit = 1 - bit_val\n            if opposite_bit in node.children:\n                xor_val |= (1 << bit)\n                node = node.children[opposite_bit]\n            else:\n                node = node.children[bit_val]\n        return xor_val\n\ndef maxXorQueries(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = Trie()\n    result = [-1] * len(queries)\n    query_indices = sorted(range(len(queries)), key=lambda x: queries[x][1])\n    \n    j = 0\n    for i in query_indices:\n        l, r = queries[i]\n        while j < r + 1:\n            trie.insert(prefix_xor[j])\n            j += 1\n        result[i] = trie.find_max_xor(prefix_xor[r] ^ prefix_xor[l - 1])\n    \n    return result\n```"}
{"task_id": "abc368_d", "code": "import sys\nfrom collections import defaultdict\nfrom math import log2\n\n# Function to perform binary lifting for LCA\ndef binary_lifting(n, edges):\n    parent = [[None] * int(log2(n)) for _ in range(n + 1)]\n    depth = [0] * (n + 1)\n    adj_list = defaultdict(list)\n\n    # Build adjacency list\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # DFS to fill parent and depth arrays\n    def dfs(node, par, d):\n        parent[node][0] = par\n        depth[node] = d\n        for i in range(1, int(log2(n)) + 1):\n            if parent[node][i - 1] is not None:\n                parent[node][i] = parent[parent[node][i - 1]][i - 1]\n        for neighbor in adj_list[node]:\n            if neighbor != par:\n                dfs(neighbor, node, d + 1)\n\n    dfs(1, -1, 0)\n    return parent, depth\n\n# Function to get LCA using binary lifting\ndef lca(parent, depth, u, v):\n    if depth[u] > depth[v]:\n        u, v = v, u\n    diff = depth[v] - depth[u]\n    for i in range(int(log2(diff)) + 1):\n        if diff & (1 << i):\n            v = parent[v][i]\n    if u == v:\n        return u\n    for i in range(int(log2(depth[u])) + 1, -1, -1):\n        if parent[u][i] != parent[v][i]:\n            u, v = parent[u][i], parent[v][i]\n    return parent[u][0]\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nk = int(data[1])\nedges = []\nfor i in range(n - 1):\n    u = int(data[2 + 2 * i])\n    v = int(data[3 + 2 * i])\n    edges.append((u, v))\nv = list(map(int, data[2 + 2 * n :]))\n\n# Get LCA for each pair of vertices\nparent, depth = binary_lifting(n, edges)\nlca_values = set()\nfor i in range(k):\n    for j in range(i + 1, k):\n        lca_values.add(lca(parent, depth, v[i], v[j]))\n\n# Output the result\nprint(len(lca_values))", "passed": false, "raw_code": "import sys\nfrom collections import defaultdict\nfrom math import log2\n\n# Function to perform binary lifting for LCA\ndef binary_lifting(n, edges):\n    parent = [[None] * int(log2(n)) for _ in range(n + 1)]\n    depth = [0] * (n + 1)\n    adj_list = defaultdict(list)\n\n    # Build adjacency list\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # DFS to fill parent and depth arrays\n    def dfs(node, par, d):\n        parent[node][0] = par\n        depth[node] = d\n        for i in range(1, int(log2(n)) + 1):\n            if parent[node][i - 1] is not None:\n                parent[node][i] = parent[parent[node][i - 1]][i - 1]\n        for neighbor in adj_list[node]:\n            if neighbor != par:\n                dfs(neighbor, node, d + 1)\n\n    dfs(1, -1, 0)\n    return parent, depth\n\n# Function to get LCA using binary lifting\ndef lca(parent, depth, u, v):\n    if depth[u] > depth[v]:\n        u, v = v, u\n    diff = depth[v] - depth[u]\n    for i in range(int(log2(diff)) + 1):\n        if diff & (1 << i):\n            v = parent[v][i]\n    if u == v:\n        return u\n    for i in range(int(log2(depth[u])) + 1, -1, -1):\n        if parent[u][i] != parent[v][i]:\n            u, v = parent[u][i], parent[v][i]\n    return parent[u][0]\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nk = int(data[1])\nedges = []\nfor i in range(n - 1):\n    u = int(data[2 + 2 * i])\n    v = int(data[3 + 2 * i])\n    edges.append((u, v))\nv = list(map(int, data[2 + 2 * n :]))\n\n# Get LCA for each pair of vertices\nparent, depth = binary_lifting(n, edges)\nlca_values = set()\nfor i in range(k):\n    for j in range(i + 1, k):\n        lca_values.add(lca(parent, depth, v[i], v[j]))\n\n# Output the result\nprint(len(lca_values))"}
{"task_id": "abc370_f", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    A.sort(reverse=True)\n    max_share = sum(A[:K]) // K\n    shares = [max_share] * K\n    for i in range(K, N):\n        for j in range(K):\n            if shares[j] >= A[i]:\n                shares[j] -= A[i]\n                break\n    min_share = min(shares)\n    cuts = K - 1\n    for i in range(1, N):\n        if A[i] != A[i-1]:\n            cuts += 1\n    print(min_share, cuts)\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    A.sort(reverse=True)\n    max_share = sum(A[:K]) // K\n    shares = [max_share] * K\n    for i in range(K, N):\n        for j in range(K):\n            if shares[j] >= A[i]:\n                shares[j] -= A[i]\n                break\n    min_share = min(shares)\n    cuts = K - 1\n    for i in range(1, N):\n        if A[i] != A[i-1]:\n            cuts += 1\n    print(min_share, cuts)\nmain()"}
{"task_id": "3560", "code": "def min_moves_to_capture(kx, ky, px, py):\n    moves = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    while queue:\n        x, y, dist = queue.pop(0)\n        if x == px and y == py:\n            return dist\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, dist + 1))\n\ndef max_moves(kx, ky, positions, memo=None):\n    if memo is None:\n        memo = {}\n    if (kx, ky, tuple(sorted(positions))) in memo:\n        return memo[(kx, ky, tuple(sorted(positions)))]\n    if not positions:\n        return 0\n    max_moves_alice = 0\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        remaining_positions = positions[:i] + positions[i+1:]\n        moves_bob = max_moves(px, py, remaining_positions, memo)\n        max_moves_alice = max(max_moves_alice, moves + moves_bob)\n    memo[(kx, ky, tuple(sorted(positions)))] = max_moves_alice\n    return max_moves_alice\n\n# Example usage:\n# print(max_moves(1, 1, [[0, 0]]))  # Output: 4\n# print(max_moves(0, 2, [[1, 1], [2, 2], [3, 3]]))  # Output: 8\n# print(max_moves(0, 0, [[1, 2], [2, 4]]))  # Output: 3", "passed": false, "raw_code": "def min_moves_to_capture(kx, ky, px, py):\n    moves = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    while queue:\n        x, y, dist = queue.pop(0)\n        if x == px and y == py:\n            return dist\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, dist + 1))\n\ndef max_moves(kx, ky, positions, memo=None):\n    if memo is None:\n        memo = {}\n    if (kx, ky, tuple(sorted(positions))) in memo:\n        return memo[(kx, ky, tuple(sorted(positions)))]\n    if not positions:\n        return 0\n    max_moves_alice = 0\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        remaining_positions = positions[:i] + positions[i+1:]\n        moves_bob = max_moves(px, py, remaining_positions, memo)\n        max_moves_alice = max(max_moves_alice, moves + moves_bob)\n    memo[(kx, ky, tuple(sorted(positions)))] = max_moves_alice\n    return max_moves_alice\n\n# Example usage:\n# print(max_moves(1, 1, [[0, 0]]))  # Output: 4\n# print(max_moves(0, 2, [[1, 1], [2, 2], [3, 3]]))  # Output: 8\n# print(max_moves(0, 0, [[1, 2], [2, 4]]))  # Output: 3"}
{"task_id": "arc182_c", "code": "import sys\nfrom collections import defaultdict\n\ndef sieve_of_eratosthenes(limit):\n    is_prime = [True] * (limit + 1)\n    primes = []\n    for num in range(2, limit + 1):\n        if is_prime[num]:\n            primes.append(num)\n            for multiple in range(num * num, limit + 1, num):\n                is_prime[multiple] = False\n    return primes\n\ndef count_divisors(prime_factors):\n    count = 1\n    for exp in prime_factors.values():\n        count *= (exp + 1)\n    return count\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    MOD = 998244353\n    \n    # Step 1: Get all primes up to M\n    primes = sieve_of_eratosthenes(M)\n    \n    # Step 2: Initialize DP table\n    dp = defaultdict(int)\n    dp[(0,) * len(primes)] = 1\n    \n    # Step 3: Fill DP table\n    for _ in range(N):\n        new_dp = defaultdict(int)\n        for state, count in dp.items():\n            for prime in primes:\n                new_state = list(state)\n                new_state[primes.index(prime)] += 1\n                new_state = tuple(new_state)\n                new_dp[new_state] = (new_dp[new_state] + count) % MOD\n        dp = new_dp\n    \n    # Step 4: Calculate the total score\n    total_score = 0\n    for state, count in dp.items():\n        total_score = (total_score + count * count_divisors(dict(zip(primes, state)))) % MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict\n\ndef sieve_of_eratosthenes(limit):\n    is_prime = [True] * (limit + 1)\n    primes = []\n    for num in range(2, limit + 1):\n        if is_prime[num]:\n            primes.append(num)\n            for multiple in range(num * num, limit + 1, num):\n                is_prime[multiple] = False\n    return primes\n\ndef count_divisors(prime_factors):\n    count = 1\n    for exp in prime_factors.values():\n        count *= (exp + 1)\n    return count\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    MOD = 998244353\n    \n    # Step 1: Get all primes up to M\n    primes = sieve_of_eratosthenes(M)\n    \n    # Step 2: Initialize DP table\n    dp = defaultdict(int)\n    dp[(0,) * len(primes)] = 1\n    \n    # Step 3: Fill DP table\n    for _ in range(N):\n        new_dp = defaultdict(int)\n        for state, count in dp.items():\n            for prime in primes:\n                new_state = list(state)\n                new_state[primes.index(prime)] += 1\n                new_state = tuple(new_state)\n                new_dp[new_state] = (new_dp[new_state] + count) % MOD\n        dp = new_dp\n    \n    # Step 4: Calculate the total score\n    total_score = 0\n    for state, count in dp.items():\n        total_score = (total_score + count * count_divisors(dict(zip(primes, state)))) % MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3527", "code": "def alternatingGroups(colors, queries):\n    n = len(colors)\n    colors += colors[:2]  # Extend colors to handle circular nature\n    group_counts = {}\n    \n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            if (colors[i] != colors[(i + size) % n]) and (colors[(i + size) % n] != colors[(i + 2 * size) % n]):\n                count += 1\n        return count\n    \n    for size in range(3, n + 1):\n        group_counts[size] = count_alternating_groups(size)\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            result.append(group_counts[query[1]])\n        elif query[0] == 2:\n            old_color = colors[query[1]]\n            new_color = query[2]\n            colors[query[1]] = new_color\n            \n            for size in range(3, n + 1):\n                if old_color == colors[(query[1] + size) % n]:\n                    group_counts[size] -= 1\n                if new_color == colors[(query[1] + size) % n]:\n                    group_counts[size] += 1\n    \n    return result", "passed": false, "raw_code": "```python\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    colors += colors[:2]  # Extend colors to handle circular nature\n    group_counts = {}\n    \n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            if (colors[i] != colors[(i + size) % n]) and (colors[(i + size) % n] != colors[(i + 2 * size) % n]):\n                count += 1\n        return count\n    \n    for size in range(3, n + 1):\n        group_counts[size] = count_alternating_groups(size)\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            result.append(group_counts[query[1]])\n        elif query[0] == 2:\n            old_color = colors[query[1]]\n            new_color = query[2]\n            colors[query[1]] = new_color\n            \n            for size in range(3, n + 1):\n                if old_color == colors[(query[1] + size) % n]:\n                    group_counts[size] -= 1\n                if new_color == colors[(query[1] + size) % n]:\n                    group_counts[size] += 1\n    \n    return result\n```"}
{"task_id": "abc373_e", "code": "def min_additional_votes(N, M, K, A):\n    # Calculate the total number of votes currently counted\n    total_counted_votes = sum(A)\n    \n    # Calculate the remaining votes\n    remaining_votes = K - total_counted_votes\n    \n    # Find the maximum votes any candidate currently has\n    max_votes = max(A)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through each candidate\n    for i in range(N):\n        # Calculate the votes needed to surpass the current maximum votes minus one\n        votes_needed = max_votes + 1 - A[i]\n        \n        # Check if the candidate can secure their victory\n        if votes_needed <= remaining_votes:\n            result.append(votes_needed)\n        else:\n            result.append(-1)\n    \n    return result\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Get the result\nresult = min_additional_votes(N, M, K, A)\n\n# Print the result\nprint(' '.join(map(str, result)))", "passed": false, "raw_code": "```python\ndef min_additional_votes(N, M, K, A):\n    # Calculate the total number of votes currently counted\n    total_counted_votes = sum(A)\n    \n    # Calculate the remaining votes\n    remaining_votes = K - total_counted_votes\n    \n    # Find the maximum votes any candidate currently has\n    max_votes = max(A)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through each candidate\n    for i in range(N):\n        # Calculate the votes needed to surpass the current maximum votes minus one\n        votes_needed = max_votes + 1 - A[i]\n        \n        # Check if the candidate can secure their victory\n        if votes_needed <= remaining_votes:\n            result.append(votes_needed)\n        else:\n            result.append(-1)\n    \n    return result\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Get the result\nresult = min_additional_votes(N, M, K, A)\n\n# Print the result\nprint(' '.join(map(str, result)))\n```"}
{"task_id": "abc372_e", "code": "import heapq\nfrom collections import defaultdict\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    graph = defaultdict(set)\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1]) - 1\n            v = int(data[index + 2]) - 1\n            index += 3\n            graph[u].add(v)\n            graph[v].add(u)\n        elif query_type == 2:\n            v = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            if not graph[v]:\n                results.append(-1)\n            else:\n                heap = []\n                for neighbor in graph[v]:\n                    if len(heap) < k:\n                        heapq.heappush(heap, neighbor)\n                    elif neighbor > heap[0]:\n                        heapq.heappop(heap)\n                        heapq.heappush(heap, neighbor)\n                \n                results.append(heap[0] + 1)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport heapq\nfrom collections import defaultdict\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    graph = defaultdict(set)\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1]) - 1\n            v = int(data[index + 2]) - 1\n            index += 3\n            graph[u].add(v)\n            graph[v].add(u)\n        elif query_type == 2:\n            v = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            if not graph[v]:\n                results.append(-1)\n            else:\n                heap = []\n                for neighbor in graph[v]:\n                    if len(heap) < k:\n                        heapq.heappush(heap, neighbor)\n                    elif neighbor > heap[0]:\n                        heapq.heappop(heap)\n                        heapq.heappush(heap, neighbor)\n                \n                results.append(heap[0] + 1)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc370_e", "code": "def count_divisions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * 2 for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(N):\n        dp[i + 1][0] = (dp[i][0] + dp[i][1]) % MOD\n        if A[i] == K:\n            dp[i + 1][1] = dp[i][0]\n        elif A[i] < K:\n            dp[i + 1][0] = (dp[i + 1][0] + dp[i][0]) % MOD\n            dp[i + 1][1] = (dp[i + 1][1] + dp[i][1]) % MOD\n    \n    return dp[N][0]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print result\nprint(count_divisions(N, K, A))", "passed": false, "raw_code": "```python\ndef count_divisions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * 2 for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(N):\n        dp[i + 1][0] = (dp[i][0] + dp[i][1]) % MOD\n        if A[i] == K:\n            dp[i + 1][1] = dp[i][0]\n        elif A[i] < K:\n            dp[i + 1][0] = (dp[i + 1][0] + dp[i][0]) % MOD\n            dp[i + 1][1] = (dp[i + 1][1] + dp[i][1]) % MOD\n    \n    return dp[N][0]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print result\nprint(count_divisions(N, K, A))\n```"}
{"task_id": "abc372_g", "code": "def count_valid_pairs(N, A, B, C):\n    count = 0\n    for i in range(N):\n        if A[i] == 0 and B[i] == 0:\n            if C[i] > 0:\n                count += 1\n        elif A[i] == 0:\n            if C[i] > B[i]:\n                count += 1\n        elif B[i] == 0:\n            if C[i] > A[i]:\n                count += 1\n        else:\n            x_max = (C[i] - B[i]) // A[i]\n            y_max = (C[i] - A[i]) // B[i]\n            count += x_max * y_max\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = []\n        B = []\n        C = []\n        for i in range(N):\n            A.append(int(data[index]))\n            B.append(int(data[index + 1]))\n            C.append(int(data[index + 2]))\n            index += 3\n        \n        result = count_valid_pairs(N, A, B, C)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef count_valid_pairs(N, A, B, C):\n    count = 0\n    for i in range(N):\n        if A[i] == 0 and B[i] == 0:\n            if C[i] > 0:\n                count += 1\n        elif A[i] == 0:\n            if C[i] > B[i]:\n                count += 1\n        elif B[i] == 0:\n            if C[i] > A[i]:\n                count += 1\n        else:\n            x_max = (C[i] - B[i]) // A[i]\n            y_max = (C[i] - A[i]) // B[i]\n            count += x_max * y_max\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = []\n        B = []\n        C = []\n        for i in range(N):\n            A.append(int(data[index]))\n            B.append(int(data[index + 1]))\n            C.append(int(data[index + 2]))\n            index += 3\n        \n        result = count_valid_pairs(N, A, B, C)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc372_f", "code": "import numpy as np\nfrom sympy import mod_inverse\n\nMOD = 998244353\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B) % MOD\n\ndef matrix_power(matrix, k):\n    result = np.eye(len(matrix), dtype=int)\n    base = matrix\n    \n    while k > 0:\n        if k % 2 == 1:\n            result = matrix_multiply(result, base)\n        base = matrix_multiply(base, base)\n        k //= 2\n    \n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    # Initialize adjacency matrix\n    adj_matrix = np.zeros((N, N), dtype=int)\n    \n    # Add edges from vertex i to vertex i+1 (circular)\n    for i in range(N):\n        adj_matrix[i, (i + 1) % N] = 1\n    \n    # Add additional edges\n    index = 3\n    for _ in range(M):\n        x = int(data[index]) - 1\n        y = int(data[index + 1]) - 1\n        adj_matrix[x, y] = 1\n        index += 2\n    \n    # Compute the adjacency matrix raised to the power K\n    result_matrix = matrix_power(adj_matrix, K)\n    \n    # Number of ways to stay at vertex 1 after K moves\n    num_ways = result_matrix[0, 0]\n    \n    print(num_ways)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport numpy as np\nfrom sympy import mod_inverse\n\nMOD = 998244353\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B) % MOD\n\ndef matrix_power(matrix, k):\n    result = np.eye(len(matrix), dtype=int)\n    base = matrix\n    \n    while k > 0:\n        if k % 2 == 1:\n            result = matrix_multiply(result, base)\n        base = matrix_multiply(base, base)\n        k //= 2\n    \n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    # Initialize adjacency matrix\n    adj_matrix = np.zeros((N, N), dtype=int)\n    \n    # Add edges from vertex i to vertex i+1 (circular)\n    for i in range(N):\n        adj_matrix[i, (i + 1) % N] = 1\n    \n    # Add additional edges\n    index = 3\n    for _ in range(M):\n        x = int(data[index]) - 1\n        y = int(data[index + 1]) - 1\n        adj_matrix[x, y] = 1\n        index += 2\n    \n    # Compute the adjacency matrix raised to the power K\n    result_matrix = matrix_power(adj_matrix, K)\n    \n    # Number of ways to stay at vertex 1 after K moves\n    num_ways = result_matrix[0, 0]\n    \n    print(num_ways)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "arc183_b", "code": "def can_make_identical(T):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = list(map(int, data[index + 2:index + 2 + N]))\n        B = list(map(int, data[index + 2 + N:index + 2 + 2 * N]))\n        \n        index += 2 + 2 * N\n        \n        # Create a dictionary to store positions of each value in A and B\n        pos_A = {}\n        pos_B = {}\n        \n        for i in range(N):\n            if A[i] not in pos_A:\n                pos_A[A[i]] = []\n            pos_A[A[i]].append(i)\n            \n            if B[i] not in pos_B:\n                pos_B[B[i]] = []\n            pos_B[B[i]].append(i)\n        \n        # Check if we can make A identical to B\n        def can_reach(start, end):\n            visited = set()\n            queue = [start]\n            while queue:\n                current = queue.pop(0)\n                if current == end:\n                    return True\n                if current not in visited:\n                    visited.add(current)\n                    for next_pos in range(max(0, current - K), min(N, current + K + 1)):\n                        if next_pos != current and next_pos not in visited:\n                            queue.append(next_pos)\n            return False\n        \n        for val in pos_A:\n            if len(pos_A[val]) != len(pos_B[val]):\n                results.append(\"No\")\n                break\n            for a_pos, b_pos in zip(pos_A[val], pos_B[val]):\n                if not can_reach(a_pos, b_pos):\n                    results.append(\"No\")\n                    break\n            else:\n                continue\n            break\n        else:\n            results.append(\"Yes\")\n    \n    for result in results:\n        print(result)\n\n# Call the function with the number of test cases\ncan_make_identical(int(input()))", "passed": false, "raw_code": "```python\ndef can_make_identical(T):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = list(map(int, data[index + 2:index + 2 + N]))\n        B = list(map(int, data[index + 2 + N:index + 2 + 2 * N]))\n        \n        index += 2 + 2 * N\n        \n        # Create a dictionary to store positions of each value in A and B\n        pos_A = {}\n        pos_B = {}\n        \n        for i in range(N):\n            if A[i] not in pos_A:\n                pos_A[A[i]] = []\n            pos_A[A[i]].append(i)\n            \n            if B[i] not in pos_B:\n                pos_B[B[i]] = []\n            pos_B[B[i]].append(i)\n        \n        # Check if we can make A identical to B\n        def can_reach(start, end):\n            visited = set()\n            queue = [start]\n            while queue:\n                current = queue.pop(0)\n                if current == end:\n                    return True\n                if current not in visited:\n                    visited.add(current)\n                    for next_pos in range(max(0, current - K), min(N, current + K + 1)):\n                        if next_pos != current and next_pos not in visited:\n                            queue.append(next_pos)\n            return False\n        \n        for val in pos_A:\n            if len(pos_A[val]) != len(pos_B[val]):\n                results.append(\"No\")\n                break\n            for a_pos, b_pos in zip(pos_A[val], pos_B[val]):\n                if not can_reach(a_pos, b_pos):\n                    results.append(\"No\")\n                    break\n            else:\n                continue\n            break\n        else:\n            results.append(\"Yes\")\n    \n    for result in results:\n        print(result)\n\n# Call the function with the number of test cases\ncan_make_identical(int(input()))\n```"}
{"task_id": "abc371_g", "code": "def min_lexicographical_array():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    A = list(map(int, data[N+1:]))\n\n    # Create a mapping from each index to its position in the permutation cycle\n    pos = [0] * (N + 1)\n    for i in range(N):\n        pos[P[i]] = i\n\n    # Sort the array A based on the positions in the permutation cycle\n    sorted_A = sorted(A, key=lambda x: pos[x])\n\n    # Print the sorted array\n    print(' '.join(map(str, sorted_A)))\n\nmin_lexicographical_array()", "passed": false, "raw_code": "def min_lexicographical_array():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    A = list(map(int, data[N+1:]))\n\n    # Create a mapping from each index to its position in the permutation cycle\n    pos = [0] * (N + 1)\n    for i in range(N):\n        pos[P[i]] = i\n\n    # Sort the array A based on the positions in the permutation cycle\n    sorted_A = sorted(A, key=lambda x: pos[x])\n\n    # Print the sorted array\n    print(' '.join(map(str, sorted_A)))\n\nmin_lexicographical_array()"}
{"task_id": "3580", "code": "def find_almost_equal_substring(s: str, pattern: str) -> int:\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = sum(1 for j in range(m) if s[i + j] != pattern[j])\n        if diff_count <= 1:\n            return i\n    \n    return -1", "passed": false, "raw_code": "```python\ndef find_almost_equal_substring(s: str, pattern: str) -> int:\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = sum(1 for j in range(m) if s[i + j] != pattern[j])\n        if diff_count <= 1:\n            return i\n    \n    return -1\n```"}
{"task_id": "3548", "code": "from itertools import combinations_with_replacement, permutations\n\ndef count_good_integers(n, k):\n    def is_k_palindromic(num):\n        return num % k == 0 and str(num) == str(num)[::-1]\n    \n    count = 0\n    digits = '123456789'\n    \n    for r in range(1, n + 1):\n        for combo in combinations_with_replacement(digits, r):\n            for perm in set(permutations(combo)):\n                num = int(''.join(perm))\n                if is_k_palindromic(num):\n                    count += 1\n    \n    return count", "passed": false, "raw_code": "```python\nfrom itertools import combinations_with_replacement, permutations\n\ndef count_good_integers(n, k):\n    def is_k_palindromic(num):\n        return num % k == 0 and str(num) == str(num)[::-1]\n    \n    count = 0\n    digits = '123456789'\n    \n    for r in range(1, n + 1):\n        for combo in combinations_with_replacement(digits, r):\n            for perm in set(permutations(combo)):\n                num = int(''.join(perm))\n                if is_k_palindromic(num):\n                    count += 1\n    \n    return count\n```"}
{"task_id": "3583", "code": "from math import gcd\nfrom collections import defaultdict\n\ndef solve(nums, queries):\n    max_val = max(nums)\n    gcd_counts = defaultdict(int)\n    \n    for i in range(1, max_val + 1):\n        for j in range(i, max_val + 1, i):\n            gcd_counts[i] += 1\n    \n    gcd_pairs = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            gcd_pairs.append(gcd(nums[i], nums[j]))\n    \n    gcd_pairs.sort()\n    \n    answer = []\n    for query in queries:\n        answer.append(gcd_pairs[query])\n    \n    return answer", "passed": false, "raw_code": "```python\nfrom math import gcd\nfrom collections import defaultdict\n\ndef solve(nums, queries):\n    max_val = max(nums)\n    gcd_counts = defaultdict(int)\n    \n    for i in range(1, max_val + 1):\n        for j in range(i, max_val + 1, i):\n            gcd_counts[i] += 1\n    \n    gcd_pairs = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            gcd_pairs.append(gcd(nums[i], nums[j]))\n    \n    gcd_pairs.sort()\n    \n    answer = []\n    for query in queries:\n        answer.append(gcd_pairs[query])\n    \n    return answer\n```"}
{"final_accuracy": "0.00%"}
