{"difficulty": "medium", "num_threads": 32, "temperature": 0.7, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_CODEEXECUTOR_qwen_7b_medium_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = sum(word in banned_set for word in message)\n    return banned_count >= 2", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = sum(word in banned_set for word in message)\n    return banned_count >= 2\n```"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    start.sort()\n    n = len(start)\n    max_diff = 0\n    \n    for i in range(1, n):\n        diff = abs(start[i] - start[i-1])\n        if diff > d:\n            max_diff = max(max_diff, d)\n        else:\n            max_diff = max(max_diff, diff // 2)\n    \n    return max_diff", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    start.sort()\n    n = len(start)\n    max_diff = 0\n    \n    for i in range(1, n):\n        diff = abs(start[i] - start[i-1])\n        if diff > d:\n            max_diff = max(max_diff, d)\n        else:\n            max_diff = max(max_diff, diff // 2)\n    \n    return max_diff\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_elements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_elements()", "passed": true, "raw_code": "```python\ndef max_sum_of_elements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_elements()\n```"}
{"task_id": "abc372_d", "code": "d", "passed": false, "raw_code": "```python\ndef count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    stack = []\n    \n    for i in range(N - 1, -1, -1):\n        while stack and heights[stack[-1]] < heights[i]:\n            stack.pop()\n        if stack:\n            result[i] = len(stack)\n        stack.append(i)\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    # Sort array b\n    b.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Pair each element of a with the largest possible elements of b\n    for i in range(4):\n        score += a[i] * b[-i-1]\n    \n    return score", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    # Sort array b\n    b.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Pair each element of a with the largest possible elements of b\n    for i in range(4):\n        score += a[i] * b[-i-1]\n    \n    return score\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    return max(dp_A[-1], dp_B[-1])", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    return max(dp_A[-1], dp_B[-1])\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        if queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n        elif queries[index] == '3':\n            results.append(len(bag))\n            index += 1\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        if queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n        elif queries[index] == '3':\n            results.append(len(bag))\n            index += 1\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3496", "code": "def minimumTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        remainingHeight = height\n        for workerTime in workerTimes:\n            x = 1\n            while workerTime * (x * (x + 1)) // 2 <= time and remainingHeight > 0:\n                if workerTime * x <= time:\n                    remainingHeight -= 1\n                x += 1\n        return remainingHeight == 0\n\n    low, high = 0, mountainHeight * max(workerTimes)\n    while low < high:\n        mid = (low + high) // 2\n        if canReduce(mountainHeight, mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low", "passed": false, "raw_code": "```python\ndef minimumTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        remainingHeight = height\n        for workerTime in workerTimes:\n            x = 1\n            while workerTime * (x * (x + 1)) // 2 <= time and remainingHeight > 0:\n                if workerTime * x <= time:\n                    remainingHeight -= 1\n                x += 1\n        return remainingHeight == 0\n\n    low, high = 0, mountainHeight * max(workerTimes)\n    while low < high:\n        mid = (low + high) // 2\n        if canReduce(mountainHeight, mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low\n```"}
{"task_id": "abc367_c", "code": "def find_sequences(N, K, R):\n    def backtrack(index, current_sequence, current_sum):\n        if index == N:\n            if current_sum % K == 0:\n                result.append(current_sequence[:])\n            return\n        for i in range(1, R[index] + 1):\n            current_sequence[index] = i\n            backtrack(index + 1, current_sequence, current_sum + i)\n\n    result = []\n    current_sequence = [0] * N\n    backtrack(0, current_sequence, 0)\n    result.sort()\n    for seq in result:\n        print(' '.join(map(str, seq)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nR = list(map(int, data[2:]))\n\nfind_sequences(N, K, R)", "passed": true, "raw_code": "def find_sequences(N, K, R):\n    def backtrack(index, current_sequence, current_sum):\n        if index == N:\n            if current_sum % K == 0:\n                result.append(current_sequence[:])\n            return\n        for i in range(1, R[index] + 1):\n            current_sequence[index] = i\n            backtrack(index + 1, current_sequence, current_sum + i)\n\n    result = []\n    current_sequence = [0] * N\n    backtrack(0, current_sequence, 0)\n    result.sort()\n    for seq in result:\n        print(' '.join(map(str, seq)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nR = list(map(int, data[2:]))\n\nfind_sequences(N, K, R)"}
{"task_id": "3526", "code": "def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range((n + 1) // 2) if row[i] != row[-i - 1])\n    \n    def flips_for_column(col):\n        return sum(1 for j in range((m + 1) // 2) if grid[j][col] != grid[-j - 1][col])\n    \n    total_flips_rows = sum(flips_for_row(grid[i]) for i in range(m))\n    total_flips_columns = sum(flips_for_column(j) for j in range(n))\n    \n    return min(total_flips_rows, total_flips_columns)", "passed": true, "raw_code": "```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range((n + 1) // 2) if row[i] != row[-i - 1])\n    \n    def flips_for_column(col):\n        return sum(1 for j in range((m + 1) // 2) if grid[j][col] != grid[-j - 1][col])\n    \n    total_flips_rows = sum(flips_for_row(grid[i]) for i in range(m))\n    total_flips_columns = sum(flips_for_column(j) for j in range(n))\n    \n    return min(total_flips_rows, total_flips_columns)\n```"}
{"task_id": "3534", "code": "def count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def get_swapped_numbers(num_str):\n        swapped_numbers = set()\n        num_list = list(num_str)\n        length = len(num_list)\n        \n        for i in range(length):\n            for j in range(i + 1, length):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                swapped_numbers.add(''.join(num_list))\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n        \n        return swapped_numbers\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            \n            if num1 == num2:\n                count += 1\n                continue\n            \n            swapped_num1 = get_swapped_numbers(num1)\n            swapped_num2 = get_swapped_numbers(num2)\n            \n            if num2 in swapped_num1 or num1 in swapped_num2:\n                count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def get_swapped_numbers(num_str):\n        swapped_numbers = set()\n        num_list = list(num_str)\n        length = len(num_list)\n        \n        for i in range(length):\n            for j in range(i + 1, length):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                swapped_numbers.add(''.join(num_list))\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n        \n        return swapped_numbers\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            \n            if num1 == num2:\n                count += 1\n                continue\n            \n            swapped_num1 = get_swapped_numbers(num1)\n            swapped_num2 = get_swapped_numbers(num2)\n            \n            if num2 in swapped_num1 or num1 in swapped_num2:\n                count += 1\n    \n    return count\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    n = len(s)\n    for i in range(0, n, k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    n = len(s)\n    for i in range(0, n, k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for start in range(N):\n        diff_count = {}\n        for end in range(start, N):\n            if end > start:\n                diff = A[end] - A[end - 1]\n                if diff not in diff_count:\n                    diff_count[diff] = 1\n                else:\n                    diff_count[diff] += 1\n                    count += diff_count[diff] - 1\n            else:\n                count += 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for start in range(N):\n        diff_count = {}\n        for end in range(start, N):\n            if end > start:\n                diff = A[end] - A[end - 1]\n                if diff not in diff_count:\n                    diff_count[diff] = 1\n                else:\n                    diff_count[diff] += 1\n                    count += diff_count[diff] - 1\n            else:\n                count += 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "3559", "code": "def minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Create a dictionary to store all prefixes of each word\n    prefixes = defaultdict(set)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefixes[word[:i]].add(word)\n    \n    # Initialize the dp array\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill the dp array\n    for i in range(1, len(target) + 1):\n        for prefix in prefixes:\n            if target.startswith(prefix) and len(prefix) <= i:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    # Return the result\n    return dp[len(target)] if dp[len(target)] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Create a dictionary to store all prefixes of each word\n    prefixes = defaultdict(set)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefixes[word[:i]].add(word)\n    \n    # Initialize the dp array\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill the dp array\n    for i in range(1, len(target) + 1):\n        for prefix in prefixes:\n            if target.startswith(prefix) and len(prefix) <= i:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    # Return the result\n    return dp[len(target)] if dp[len(target)] != float('inf') else -1\n```"}
{"task_id": "arc181_a", "code": "def min_operations_to_sort(permutation):\n    n = len(permutation)\n    operations = 0\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            cycle_length = 0\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                x = permutation[x] - 1\n                cycle_length += 1\n            operations += (cycle_length - 1) if cycle_length > 1 else 0\n    return operations\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        results.append(min_operations_to_sort(P))\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "def min_operations_to_sort(permutation):\n    n = len(permutation)\n    operations = 0\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            cycle_length = 0\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                x = permutation[x] - 1\n                cycle_length += 1\n            operations += (cycle_length - 1) if cycle_length > 1 else 0\n    return operations\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        results.append(min_operations_to_sort(P))\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "3579", "code": "def max_possible_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their numerical value\n    binary_nums.sort(key=int, reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "passed": false, "raw_code": "```python\ndef max_possible_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their numerical value\n    binary_nums.sort(key=int, reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```"}
{"task_id": "3522", "code": "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        sorted_subarray = sorted(subarray)\n        if subarray == sorted_subarray and all(sorted_subarray[j] + 1 == sorted_subarray[j + 1] for j in range(k - 1)):\n            results[i] = max(subarray)\n    \n    return results", "passed": true, "raw_code": "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        sorted_subarray = sorted(subarray)\n        if subarray == sorted_subarray and all(sorted_subarray[j] + 1 == sorted_subarray[j + 1] for j in range(k - 1)):\n            results[i] = max(subarray)\n    \n    return results\n```"}
{"task_id": "3517", "code": "def shortestPath(n, queries):\n    import collections\n    def bfs(start, end, graph):\n        queue = collections.deque([start])\n        visited = set([start])\n        distance = {start: 0}\n        while queue:\n            current = queue.popleft()\n            if current == end:\n                return distance[end]\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    distance[neighbor] = distance[current] + 1\n                    queue.append(neighbor)\n        return float('inf')\n\n    graph = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs(0, n - 1, graph))\n    return result", "passed": true, "raw_code": "def shortestPath(n, queries):\n    import collections\n    def bfs(start, end, graph):\n        queue = collections.deque([start])\n        visited = set([start])\n        distance = {start: 0}\n        while queue:\n            current = queue.popleft()\n            if current == end:\n                return distance[end]\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    distance[neighbor] = distance[current] + 1\n                    queue.append(neighbor)\n        return float('inf')\n\n    graph = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs(0, n - 1, graph))\n    return result"}
{"task_id": "3573", "code": "from collections import Counter\n\ndef count_valid_substrings(word1, word2):\n    w2_count = Counter(word2)\n    w1_count = Counter()\n    n, m = len(word1), len(word2)\n    result = 0\n    \n    for i in range(n):\n        w1_count[word1[i]] += 1\n        if i >= m:\n            w1_count[word1[i - m]] -= 1\n            if w1_count[word1[i - m]] == 0:\n                del w1_count[word1[i - m]]\n        if w1_count >= w2_count:\n            result += n - i\n    \n    return result", "passed": false, "raw_code": "```python\nfrom collections import Counter\n\ndef count_valid_substrings(word1, word2):\n    w2_count = Counter(word2)\n    w1_count = Counter()\n    n, m = len(word1), len(word2)\n    result = 0\n    \n    for i in range(n):\n        w1_count[word1[i]] += 1\n        if i >= m:\n            w1_count[word1[i - m]] -= 1\n            if w1_count[word1[i - m]] == 0:\n                del w1_count[word1[i - m]]\n        if w1_count >= w2_count:\n            result += n - i\n    \n    return result\n```"}
{"task_id": "abc370_c", "code": "def min_operations(S, T):\n    n = len(S)\n    X = []\n    for i in range(n):\n        if S[i] != T[i]:\n            # Find the smallest character greater than or equal to S[i] that matches T[i]\n            j = ord('z')\n            for k in range(i, n):\n                if S[k] >= S[i] and S[k] < chr(j) and S[k] == T[k]:\n                    j = ord(S[k])\n            # Change S to the new string\n            S = S[:i] + chr(j) + S[i+1:]\n            X.append(S)\n    return X\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\nS, T = input().split()\n\n# Get the result\nresult = min_operations(S, T)\n\n# Print the result\nprint(len(result))\nfor s in result:\n    print(s)", "passed": false, "raw_code": "def min_operations(S, T):\n    n = len(S)\n    X = []\n    for i in range(n):\n        if S[i] != T[i]:\n            # Find the smallest character greater than or equal to S[i] that matches T[i]\n            j = ord('z')\n            for k in range(i, n):\n                if S[k] >= S[i] and S[k] < chr(j) and S[k] == T[k]:\n                    j = ord(S[k])\n            # Change S to the new string\n            S = S[:i] + chr(j) + S[i+1:]\n            X.append(S)\n    return X\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\nS, T = input().split()\n\n# Get the result\nresult = min_operations(S, T)\n\n# Print the result\nprint(len(result))\nfor s in result:\n    print(s)"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    # Initialize variables\n    takahashi_moves = [''] * N\n    takahashi_wins = 0\n    last_move = ''\n\n    # Iterate through each game\n    for i in range(N):\n        aoki_move = S[i]\n        # Determine Takahashi's move based on Aoki's move and last move\n        if aoki_move == 'R':\n            takahashi_move = 'P'\n        elif aoki_move == 'P':\n            takahashi_move = 'S'\n        elif aoki_move == 'S':\n            takahashi_move = 'R'\n\n        # Ensure Takahashi does not repeat the same move consecutively\n        while takahashi_move == last_move:\n            if takahashi_move == 'R':\n                takahashi_move = 'P'\n            elif takahashi_move == 'P':\n                takahashi_move = 'S'\n            elif takahashi_move == 'S':\n                takahashi_move = 'R'\n\n        # Update last move and check if Takahashi wins\n        last_move = takahashi_move\n        if (takahashi_move == 'R' and aoki_move == 'S') or (takahashi_move == 'P' and aoki_move == 'R') or (takahashi_move == 'S' and aoki_move == 'P'):\n            takahashi_wins += 1\n\n    return takahashi_wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\nN, S = input().split()\nN = int(N)\n\n# Calculate and print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "def max_wins(N, S):\n    # Initialize variables\n    takahashi_moves = [''] * N\n    takahashi_wins = 0\n    last_move = ''\n\n    # Iterate through each game\n    for i in range(N):\n        aoki_move = S[i]\n        # Determine Takahashi's move based on Aoki's move and last move\n        if aoki_move == 'R':\n            takahashi_move = 'P'\n        elif aoki_move == 'P':\n            takahashi_move = 'S'\n        elif aoki_move == 'S':\n            takahashi_move = 'R'\n\n        # Ensure Takahashi does not repeat the same move consecutively\n        while takahashi_move == last_move:\n            if takahashi_move == 'R':\n                takahashi_move = 'P'\n            elif takahashi_move == 'P':\n                takahashi_move = 'S'\n            elif takahashi_move == 'S':\n                takahashi_move = 'R'\n\n        # Update last move and check if Takahashi wins\n        last_move = takahashi_move\n        if (takahashi_move == 'R' and aoki_move == 'S') or (takahashi_move == 'P' and aoki_move == 'R') or (takahashi_move == 'S' and aoki_move == 'P'):\n            takahashi_wins += 1\n\n    return takahashi_wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\nN, S = input().split()\nN = int(N)\n\n# Calculate and print the result\nprint(max_wins(N, S))"}
{"task_id": "abc371_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input values\n    N = int(data[0])\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = [(int(data[2*N+2 + 2*i]), int(data[2*N+3 + 2*i])) for i in range(Q)]\n\n    # Create prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i+1] = prefix_sum[i] + P[i]\n\n    # Process each query\n    results = []\n    for L, R in queries:\n        result = prefix_sum[R] - prefix_sum[L-1]\n        results.append(result)\n\n    # Print all results\n    for result in results:\n        print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input values\n    N = int(data[0])\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = [(int(data[2*N+2 + 2*i]), int(data[2*N+3 + 2*i])) for i in range(Q)]\n\n    # Create prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i+1] = prefix_sum[i] + P[i]\n\n    # Process each query\n    results = []\n    for L, R in queries:\n        result = prefix_sum[R] - prefix_sum[L-1]\n        results.append(result)\n\n    # Print all results\n    for result in results:\n        print(result)\n\nmain()\n```"}
{"task_id": "arc183_a", "code": "def find_good_sequence(N, K):\n    def backtrack(path, count):\n        if len(path) == NK:\n            result.append(path[:])\n            return\n        for i in range(1, N + 1):\n            if count[i] < K:\n                path.append(i)\n                count[i] += 1\n                backtrack(path, count)\n                path.pop()\n                count[i] -= 1\n    \n    NK = N * K\n    result = []\n    backtrack([], [0] * (N + 1))\n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    sequences = find_good_sequence(N, K)\n    mid_index = (len(sequences) + 1) // 2 - 1\n    \n    print(\" \".join(map(str, sequences[mid_index])))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef find_good_sequence(N, K):\n    def backtrack(path, count):\n        if len(path) == NK:\n            result.append(path[:])\n            return\n        for i in range(1, N + 1):\n            if count[i] < K:\n                path.append(i)\n                count[i] += 1\n                backtrack(path, count)\n                path.pop()\n                count[i] -= 1\n    \n    NK = N * K\n    result = []\n    backtrack([], [0] * (N + 1))\n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    sequences = find_good_sequence(N, K)\n    mid_index = (len(sequences) + 1) // 2 - 1\n    \n    print(\" \".join(map(str, sequences[mid_index])))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    grid = [[True] * W for _ in range(H)]\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C]:\n            grid[R][C] = False\n        else:\n            # Destroy walls up, down, left, right\n            for r in range(R - 1, -1, -1):\n                if grid[r][C]:\n                    grid[r][C] = False\n                    break\n            for r in range(R + 1, H):\n                if grid[r][C]:\n                    grid[r][C] = False\n                    break\n            for c in range(C - 1, -1, -1):\n                if grid[R][c]:\n                    grid[R][c] = False\n                    break\n            for c in range(C + 1, W):\n                if grid[R][c]:\n                    grid[R][c] = False\n                    break\n    \n    remaining_walls = sum(row.count(True) for row in grid)\n    print(remaining_walls)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    grid = [[True] * W for _ in range(H)]\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C]:\n            grid[R][C] = False\n        else:\n            # Destroy walls up, down, left, right\n            for r in range(R - 1, -1, -1):\n                if grid[r][C]:\n                    grid[r][C] = False\n                    break\n            for r in range(R + 1, H):\n                if grid[r][C]:\n                    grid[r][C] = False\n                    break\n            for c in range(C - 1, -1, -1):\n                if grid[R][c]:\n                    grid[R][c] = False\n                    break\n            for c in range(C + 1, W):\n                if grid[R][c]:\n                    grid[R][c] = False\n                    break\n    \n    remaining_walls = sum(row.count(True) for row in grid)\n    print(remaining_walls)\n\nmain()\n```"}
{"task_id": "3584", "code": "def smallestSequence(word1, word2):\n    m, n = len(word1), len(word2)\n    i, j = 0, 0\n    changes = []\n    \n    while i < m and j < n:\n        if word1[i] != word2[j]:\n            # Check if changing word1[i] to word2[j] makes it almost equal\n            temp_word1 = list(word1)\n            temp_word1[i] = word2[j]\n            if ''.join(temp_word1) == word2[:i+1] + word2[i+1:]:\n                changes.append(i)\n                i += 1\n                j += 1\n            else:\n                return []\n        else:\n            i += 1\n            j += 1\n    \n    # Add remaining unmatched indices from word2\n    while j < n:\n        changes.append(m + j - n)\n        j += 1\n    \n    return changes", "passed": false, "raw_code": "```python\ndef smallestSequence(word1, word2):\n    m, n = len(word1), len(word2)\n    i, j = 0, 0\n    changes = []\n    \n    while i < m and j < n:\n        if word1[i] != word2[j]:\n            # Check if changing word1[i] to word2[j] makes it almost equal\n            temp_word1 = list(word1)\n            temp_word1[i] = word2[j]\n            if ''.join(temp_word1) == word2[:i+1] + word2[i+1:]:\n                changes.append(i)\n                i += 1\n                j += 1\n            else:\n                return []\n        else:\n            i += 1\n            j += 1\n    \n    # Add remaining unmatched indices from word2\n    while j < n:\n        changes.append(m + j - n)\n        j += 1\n    \n    return changes\n```"}
{"task_id": "abc372_c", "code": "def count_substring(s):\n    count = 0\n    n = len(s)\n    for i in range(n - 2):\n        if s[i:i+3] == \"ABC\":\n            count += 1\n    return count\n\ndef process_queries(N, Q, S, queries):\n    result = []\n    current_count = count_substring(S)\n    result.append(current_count)\n    \n    for X, C in queries:\n        X -= 1  # Convert to 0-based index\n        if S[X] != C:\n            if S[X:X+3] == \"ABC\":\n                current_count -= 1\n            if S[X-1:X+2] == \"ABC\":\n                current_count += 1\n            S = S[:X] + C + S[X+1:]\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[3 + 2 * i]) - 1, data[4 + 2 * i]) for i in range(Q)]\n\n# Process queries and print results\nresults = process_queries(N, Q, S, queries)\nfor res in results:\n    print(res)", "passed": false, "raw_code": "```python\ndef count_substring(s):\n    count = 0\n    n = len(s)\n    for i in range(n - 2):\n        if s[i:i+3] == \"ABC\":\n            count += 1\n    return count\n\ndef process_queries(N, Q, S, queries):\n    result = []\n    current_count = count_substring(S)\n    result.append(current_count)\n    \n    for X, C in queries:\n        X -= 1  # Convert to 0-based index\n        if S[X] != C:\n            if S[X:X+3] == \"ABC\":\n                current_count -= 1\n            if S[X-1:X+2] == \"ABC\":\n                current_count += 1\n            S = S[:X] + C + S[X+1:]\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[3 + 2 * i]) - 1, data[4 + 2 * i]) for i in range(Q)]\n\n# Process queries and print results\nresults = process_queries(N, Q, S, queries)\nfor res in results:\n    print(res)\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the strengths in descending order\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    for i in range(N):\n        if i % 2 == 0:\n            total_experience += A[i]\n        else:\n            total_experience += 2 * A[i]\n    \n    print(total_experience)\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the strengths in descending order\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    for i in range(N):\n        if i % 2 == 0:\n            total_experience += A[i]\n        else:\n            total_experience += 2 * A[i]\n    \n    print(total_experience)\n\nmax_experience_points()\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    A.sort()\n    total_sum = sum(A)\n    \n    # If the total sum is already within the budget, the limit can be infinite\n    if total_sum <= M:\n        return \"infinite\"\n    \n    left, right = 0, max(A)\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        current_sum = sum(min(mid, a) for a in A)\n        \n        if current_sum <= M:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nprint(max_subsidy_limit(N, M, A))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    A.sort()\n    total_sum = sum(A)\n    \n    # If the total sum is already within the budget, the limit can be infinite\n    if total_sum <= M:\n        return \"infinite\"\n    \n    left, right = 0, max(A)\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        current_sum = sum(min(mid, a) for a in A)\n        \n        if current_sum <= M:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "3558", "code": "def hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        if dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp):\n            return True\n        \n        grid[x][y] = temp  # Unmark as visited\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        if dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp):\n            return True\n        \n        grid[x][y] = temp  # Unmark as visited\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    enemies = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while enemies:\n        T += 1\n        if T % 3 == 0:\n            enemies[0] -= 3\n        else:\n            enemies[0] -= 1\n        \n        if enemies[0] <= 0:\n            enemies.pop(0)\n    \n    print(T)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    enemies = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while enemies:\n        T += 1\n        if T % 3 == 0:\n            enemies[0] -= 3\n        else:\n            enemies[0] -= 1\n        \n        if enemies[0] <= 0:\n            enemies.pop(0)\n    \n    print(T)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3495", "code": "import heapq\n\ndef kthSmallestDistance(queries, k):\n    # Min-heap to store distances\n    heap = []\n    \n    # List to store results\n    results = []\n    \n    for x, y in queries:\n        # Calculate Manhattan distance from the origin\n        distance = abs(x) + abs(y)\n        \n        # Add distance to the heap\n        heapq.heappush(heap, distance)\n        \n        # Extract the k smallest distances\n        k_smallest = heapq.nsmallest(k, heap)\n        \n        # If there are fewer than k elements, append -1; otherwise, append the k-th smallest distance\n        if len(k_smallest) < k:\n            results.append(-1)\n        else:\n            results.append(k_smallest[-1])\n    \n    return results", "passed": false, "raw_code": "```python\nimport heapq\n\ndef kthSmallestDistance(queries, k):\n    # Min-heap to store distances\n    heap = []\n    \n    # List to store results\n    results = []\n    \n    for x, y in queries:\n        # Calculate Manhattan distance from the origin\n        distance = abs(x) + abs(y)\n        \n        # Add distance to the heap\n        heapq.heappush(heap, distance)\n        \n        # Extract the k smallest distances\n        k_smallest = heapq.nsmallest(k, heap)\n        \n        # If there are fewer than k elements, append -1; otherwise, append the k-th smallest distance\n        if len(k_smallest) < k:\n            results.append(-1)\n        else:\n            results.append(k_smallest[-1])\n    \n    return results\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, min(n, i + nums[i] + 1)):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, min(n, i + nums[i] + 1)):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```"}
{"task_id": "abc367_d", "code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate cumulative sum of steps\n    cumulative_sum = [0] * (N + 1)\n    for i in range(N):\n        cumulative_sum[i + 1] = cumulative_sum[i] + A[i]\n\n    # Dictionary to store the remainder of cumulative sums and their counts\n    remainder_count = {}\n    for i in range(N + 1):\n        remainder = cumulative_sum[i] % M\n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n\n    # Calculate the number of valid pairs (s, t)\n    result = 0\n    for count in remainder_count.values():\n        result += count * (count - 1) // 2\n\n    print(result)\n\nsolve()", "passed": false, "raw_code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate cumulative sum of steps\n    cumulative_sum = [0] * (N + 1)\n    for i in range(N):\n        cumulative_sum[i + 1] = cumulative_sum[i] + A[i]\n\n    # Dictionary to store the remainder of cumulative sums and their counts\n    remainder_count = {}\n    for i in range(N + 1):\n        remainder = cumulative_sum[i] % M\n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n\n    # Calculate the number of valid pairs (s, t)\n    result = 0\n    for count in remainder_count.values():\n        result += count * (count - 1) // 2\n\n    print(result)\n\nsolve()"}
{"task_id": "3510", "code": "def assignTowerHeights(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    assignedHeights = set()\n    totalSum = 0\n    \n    for height in maximumHeight:\n        for candidate in range(height, 0, -1):\n            if candidate not in assignedHeights:\n                assignedHeights.add(candidate)\n                totalSum += candidate\n                break\n        else:\n            return -1\n    \n    return totalSum", "passed": false, "raw_code": "```python\ndef assignTowerHeights(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    assignedHeights = set()\n    totalSum = 0\n    \n    for height in maximumHeight:\n        for candidate in range(height, 0, -1):\n            if candidate not in assignedHeights:\n                assignedHeights.add(candidate)\n                totalSum += candidate\n                break\n        else:\n            return -1\n    \n    return totalSum\n```"}
{"task_id": "3570", "code": "def countSubstrings(word, k):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        v = set()\n        c = 0\n        for j in range(i, n):\n            if word[j] in vowels:\n                v.add(word[j])\n            else:\n                c += 1\n            if len(v) == 5 and c == k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef countSubstrings(word, k):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        v = set()\n        c = 0\n        for j in range(i, n):\n            if word[j] in vowels:\n                v.add(word[j])\n            else:\n                c += 1\n            if len(v) == 5 and c == k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc366_d", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\ni = 1\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            A[x][y][z] = int(data[i])\n            i += 1\nprefix_sum = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            prefix_sum[x][y][z] = A[x][y][z] + prefix_sum[x - 1][y][z] + prefix_sum[x][y - 1][z] + prefix_sum[x][y][z - 1] - prefix_sum[x - 1][y - 1][z] - prefix_sum[x - 1][y][z - 1] - prefix_sum[x][y - 1][z - 1] + prefix_sum[x - 1][y - 1][z - 1]\nQ = int(data[i])\ni += 1\nresults = []\nfor _ in range(Q):\n    Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[i:i+6])\n    i += 6\n    result = prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx - 1][Ry][Rz] - prefix_sum[Rx][Ly - 1][Rz] - prefix_sum[Rx][Ry][Lz - 1] + prefix_sum[Lx - 1][Ly - 1][Rz] + prefix_sum[Lx - 1][Ry][Lz - 1] + prefix_sum[Rx][Ly - 1][Lz - 1] - prefix_sum[Lx - 1][Ly - 1][Lz - 1]\n    results.append(result)\nfor result in results:\n    print(result)", "passed": true, "raw_code": "import sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\ni = 1\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            A[x][y][z] = int(data[i])\n            i += 1\nprefix_sum = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            prefix_sum[x][y][z] = A[x][y][z] + prefix_sum[x - 1][y][z] + prefix_sum[x][y - 1][z] + prefix_sum[x][y][z - 1] - prefix_sum[x - 1][y - 1][z] - prefix_sum[x - 1][y][z - 1] - prefix_sum[x][y - 1][z - 1] + prefix_sum[x - 1][y - 1][z - 1]\nQ = int(data[i])\ni += 1\nresults = []\nfor _ in range(Q):\n    Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[i:i+6])\n    i += 6\n    result = prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx - 1][Ry][Rz] - prefix_sum[Rx][Ly - 1][Rz] - prefix_sum[Rx][Ry][Lz - 1] + prefix_sum[Lx - 1][Ly - 1][Rz] + prefix_sum[Lx - 1][Ry][Lz - 1] + prefix_sum[Rx][Ly - 1][Lz - 1] - prefix_sum[Lx - 1][Ly - 1][Lz - 1]\n    results.append(result)\nfor result in results:\n    print(result)"}
{"task_id": "abc371_c", "code": "def min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    G = [[] for _ in range(N + 1)]\n    for _ in range(M_G):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        G[u].append(v)\n        G[v].append(u)\n\n    M_H = int(data[index])\n    index += 1\n    H = [[] for _ in range(N + 1)]\n    for _ in range(M_H):\n        a = int(data[index])\n        index += 1\n        b = int(data[index])\n        index += 1\n        H[a].append(b)\n        H[b].append(a)\n\n    A = []\n    for i in range(N):\n        row = []\n        for j in range(i + 1, N):\n            row.append(int(data[index]))\n            index += 1\n        A.append(row)\n\n    # Check if G and H are already isomorphic\n    def is_isomorphic(G, H):\n        if len(G) != len(H):\n            return False\n        for i in range(1, len(G)):\n            if set(G[i]) != set(H[i]):\n                return False\n        return True\n\n    if is_isomorphic(G, H):\n        print(0)\n        return\n\n    # Use dynamic programming to find the minimum cost to make G and H isomorphic\n    dp = [[float('inf')] * (1 << N) for _ in range(N + 1)]\n    for i in range(N + 1):\n        dp[i][0] = 0\n\n    for i in range(1, N + 1):\n        for mask in range(1 << N):\n            if (mask & (1 << (i - 1))) == 0:\n                continue\n            for j in range(i):\n                if (mask & (1 << j)) != 0:\n                    cost = A[j][i - 1]\n                    if mask ^ (1 << j) ^ (1 << (i - 1)) in dp[j] and dp[j][mask ^ (1 << j) ^ (1 << (i - 1))] + cost < dp[i][mask]:\n                        dp[i][mask] = dp[j][mask ^ (1 << j) ^ (1 << (i - 1))] + cost\n\n    # Find the minimum cost to make G and H isomorphic\n    min_cost = float('inf')\n    for mask in range(1 << N):\n        if dp[N][mask] < min_cost:\n            min_cost = dp[N][mask]\n\n    print(min_cost)\n\nmin_cost_to_isomorphic()", "passed": false, "raw_code": "def min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    G = [[] for _ in range(N + 1)]\n    for _ in range(M_G):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        G[u].append(v)\n        G[v].append(u)\n\n    M_H = int(data[index])\n    index += 1\n    H = [[] for _ in range(N + 1)]\n    for _ in range(M_H):\n        a = int(data[index])\n        index += 1\n        b = int(data[index])\n        index += 1\n        H[a].append(b)\n        H[b].append(a)\n\n    A = []\n    for i in range(N):\n        row = []\n        for j in range(i + 1, N):\n            row.append(int(data[index]))\n            index += 1\n        A.append(row)\n\n    # Check if G and H are already isomorphic\n    def is_isomorphic(G, H):\n        if len(G) != len(H):\n            return False\n        for i in range(1, len(G)):\n            if set(G[i]) != set(H[i]):\n                return False\n        return True\n\n    if is_isomorphic(G, H):\n        print(0)\n        return\n\n    # Use dynamic programming to find the minimum cost to make G and H isomorphic\n    dp = [[float('inf')] * (1 << N) for _ in range(N + 1)]\n    for i in range(N + 1):\n        dp[i][0] = 0\n\n    for i in range(1, N + 1):\n        for mask in range(1 << N):\n            if (mask & (1 << (i - 1))) == 0:\n                continue\n            for j in range(i):\n                if (mask & (1 << j)) != 0:\n                    cost = A[j][i - 1]\n                    if mask ^ (1 << j) ^ (1 << (i - 1)) in dp[j] and dp[j][mask ^ (1 << j) ^ (1 << (i - 1))] + cost < dp[i][mask]:\n                        dp[i][mask] = dp[j][mask ^ (1 << j) ^ (1 << (i - 1))] + cost\n\n    # Find the minimum cost to make G and H isomorphic\n    min_cost = float('inf')\n    for mask in range(1 << N):\n        if dp[N][mask] < min_cost:\n            min_cost = dp[N][mask]\n\n    print(min_cost)\n\nmin_cost_to_isomorphic()"}
{"final_accuracy": "29.73%"}
