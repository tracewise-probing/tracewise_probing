{"difficulty": "hard", "num_threads": 32, "temperature": 0.7, "n": 1, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_OUR01_qwen_7b_hard_n_1.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc366_e", "code": "d", "passed": false, "raw_code": "```python\ndef count_valid_points(N, D, points):\n    def count_within_distance(points, D, median):\n        count = 0\n        for x, y in points:\n            if abs(x - median[0]) + abs(y - median[1]) <= D:\n                count += 1\n        return count\n    \n    # Separate points into x and y coordinates\n    x_points = [x for x, y in points]\n    y_points = [y for x, y in points]\n    \n    # Find the medians\n    x_median = sorted(x_points)[N // 2]\n    y_median = sorted(y_points)[N // 2]\n    \n    # Count points within the distance in each dimension\n    count_x = count_within_distance(points, D, (x_median, y_median[0]))\n    count_y = count_within_distance(points, D, (x_median[0], y_median))\n    \n    # Use inclusion-exclusion principle\n    return count_x + count_y - count_within_distance(points, D, (x_median, y_median))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nD = int(data[1])\npoints = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(N)]\n\n# Output the result\nprint(count_valid_points(N, D, points))"}
{"task_id": "abc370_f", "code": "d", "passed": false, "raw_code": "```python\ndef divide_cake(N, K, A):\n    total_mass = sum(A)\n    target_mass = (total_mass + K - 1) // K\n    A.sort(reverse=True)\n    \n    partitions = []\n    current_partition = []\n    current_partition_mass = 0\n    \n    for piece in A:\n        if current_partition_mass + piece <= target_mass:\n            current_partition.append(piece)\n            current_partition_mass += piece\n        else:\n            partitions.append(current_partition)\n            current_partition = [piece]\n            current_partition_mass = piece\n    \n    if current_partition:\n        partitions.append(current_partition)\n    \n    min_partition_mass = min(sum(partition) for partition in partitions)\n    never_cut_lines = 0\n    \n    for i in range(N):\n        if A[i] + A[(i + 1) % N] <= target_mass:\n            never_cut_lines += 1\n    \n    print(min_partition_mass, never_cut_lines)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function\ndivide_cake(N, K, A)"}
{"task_id": "abc367_g", "code": "d", "passed": false, "raw_code": "```python\ndef sum_of_scores():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Function to calculate (base^exponent) % MOD\n    def power(base, exponent):\n        result = 1\n        base = base % MOD\n        while exponent > 0:\n            if exponent % 2 == 1:\n                result = (result * base) % MOD\n            exponent = exponent >> 1\n            base = (base * base) % MOD\n        return result\n    \n    # Function to calculate bitwise XOR of all elements in a subsequence\n    def xor_subsequence(subsequence):\n        xor_result = 0\n        for num in subsequence:\n            xor_result ^= num\n        return xor_result\n    \n    # Calculate the sum of scores\n    total_score = 0\n    for length in range(1, 1 << N):\n        if length % M == 0:\n            xor_sum = 0\n            for i in range(N):\n                if (length & (1 << i)) != 0:\n                    xor_sum ^= A[i]\n            total_score += power(xor_sum, K)\n            total_score %= MOD\n    \n    print(total_score)\n\nsum_of_scores()"}
{"task_id": "abc373_f", "code": "d", "passed": false, "raw_code": "```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    items = []\n    \n    index = 2\n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        items.append((w, v))\n        index += 2\n    \n    total_happiness = 0\n    current_weight = 0\n    \n    for w, v in items:\n        max_k = min(10**10, W // w)\n        optimal_k = 0\n        max_happiness_for_type = 0\n        \n        for k in range(max_k + 1):\n            happiness = k * v - k**2\n            if happiness > max_happiness_for_type:\n                max_happiness_for_type = happiness\n                optimal_k = k\n        \n        total_happiness += max_happiness_for_type\n        current_weight += optimal_k * w\n    \n    print(total_happiness)\n\nmax_happiness()"}
{"task_id": "arc181_b", "code": "d", "passed": false, "raw_code": "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        index += 1\n        X = data[index]\n        index += 1\n        Y = data[index]\n        index += 1\n        \n        count_X_0 = X.count('0')\n        count_X_1 = X.count('1')\n        count_Y_0 = Y.count('0')\n        count_Y_1 = Y.count('1')\n        \n        if count_X_0 == count_Y_0 and count_X_1 == count_Y_1:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nsolve()"}
{"task_id": "abc370_g", "code": "d", "passed": false, "raw_code": "```python\ndef sum_of_divisors(n):\n    divisors_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1, i):\n            divisors_sum[j] += i\n    return divisors_sum\n\ndef is_good_integer(n, divisors_sum):\n    return divisors_sum[n] % 3 == 0\n\ndef count_sequences(N, M):\n    MOD = 998244353\n    max_product = N\n    max_divisor_sum = sum_of_divisors(max_product)\n    max_divisor_sum_value = max_divisor_sum[-1]\n    \n    dp = [[[0] * (max_divisor_sum_value + 1) for _ in range(M + 1)] for _ in range(max_product + 1)]\n    \n    for i in range(1, max_product + 1):\n        if is_good_integer(i, max_divisor_sum):\n            dp[i][1][max_divisor_sum[i]] = 1\n    \n    for length in range(2, M + 1):\n        for product in range(1, max_product + 1):\n            for divisor_sum in range(1, max_divisor_sum_value + 1):\n                for divisor in range(1, product + 1):\n                    if product % divisor == 0:\n                        dp[product][length][divisor_sum] = (dp[product][length][divisor_sum] + dp[divisor][length - 1][divisor_sum - max_divisor_sum[divisor]]) % MOD\n    \n    result = 0\n    for product in range(1, max_product + 1):\n        if is_good_integer(product, max_divisor_sum):\n            result = (result + dp[product][M][max_divisor_sum[product]]) % MOD\n    \n    return result\n\n# Read input\nN, M = map(int, input().strip().split())\n\n# Calculate and print the result\nprint(count_sequences(N, M))"}
{"task_id": "abc373_g", "code": "i", "passed": false, "raw_code": "```python\nimport sys\n\ndef read_input():\n    input = sys.stdin.read\n    data = input().split()\n    return data\n\ndef find_non_crossing_permutation(N, P, Q):\n    # Sort points P based on their x-coordinates\n    P_indices = sorted(range(N), key=lambda i: P[i][0])\n    \n    # Create a list to store the permutation\n    R = [-1] * N\n    \n    # Create a list to keep track of which points are already paired\n    paired = [False] * N\n    \n    for i in P_indices:\n        # Find the farthest point to the right that is not already paired\n        farthest = -1\n        for j in range(N):\n            if not paired[j] and (Q[j][0] > P[i][0] or (Q[j][0] == P[i][0] and Q[j][1] > P[i][1])):\n                farthest = j\n                break\n        \n        # If no valid point is found, return -1\n        if farthest == -1:\n            return -1\n        \n        # Pair the points\n        R[i] = farthest + 1\n        paired[farthest] = True\n    \n    return R\n\ndef main():\n    data = read_input()\n    N = int(data[0])\n    \n    P = []\n    Q = []\n    \n    index = 1\n    for _ in range(N):\n        P.append((int(data[index]), int(data[index + 1])))\n        index += 2\n    \n    for _ in range(N):\n        Q.append((int(data[index]), int(data[index + 1])))\n        index += 2\n    \n    R = find_non_crossing_permutation(N, P, Q)\n    \n    if R == -1:\n        print(-1)\n    else:\n        print(' '.join(map(str, R)))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "abc371_f", "code": "i", "passed": false, "raw_code": "```python\nimport heapq\n\ndef min_movements(N, X, Q, tasks):\n    # Calculate the number of movements required for each task\n    movements = []\n    for t, g in tasks:\n        x_t = X[t - 1]\n        movements.append((abs(x_t - g), t))\n    \n    # Use a min-heap to process the tasks in order of increasing movements\n    heapq.heapify(movements)\n    total_movements = 0\n    \n    while movements:\n        move, t = heapq.heappop(movements)\n        total_movements += move\n    \n    return total_movements\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nX = list(map(int, data[1:N+1]))\nQ = int(data[N+1])\ntasks = [(int(data[N+2 + 2*i]) - 1, int(data[N+3 + 2*i])) for i in range(Q)]\n\n# Print the result\nprint(min_movements(N, X, Q, tasks))"}
{"task_id": "3532", "code": "def minTimeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    # Step 1: Build the graph\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Step 2: Perform BFS to find levels of nodes\n    levels = [-1] * len(graph)\n    levels[0] = 0\n    queue = deque([0])\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if levels[neighbor] == -1:\n                levels[neighbor] = levels[node] + 1\n                queue.append(neighbor)\n    \n    # Step 3: Simulate the marking process\n    times = [-1] * len(graph)\n    times[0] = 0\n    \n    def can_mark(node, time):\n        for neighbor in graph[node]:\n            if times[neighbor] != -1 and times[neighbor] < time:\n                return False\n        return True\n    \n    def mark_node(node, time):\n        times[node] = time\n        for neighbor in graph[node]:\n            if times[neighbor] == -1:\n                if node % 2 == 0:\n                    if levels[neighbor] >= levels[node] - 2:\n                        mark_node(neighbor, time + 1)\n                else:\n                    if levels[neighbor] >= levels[node] - 1:\n                        mark_node(neighbor, time + 1)\n    \n    for node in range(len(graph)):\n        if times[node] == -1:\n            mark_node(node, 0)\n    \n    return times", "passed": false, "raw_code": "```python\ndef minTimeToMarkNodes(edges):\n    from collections import defaultdict, deque\n    \n    # Step 1: Build the graph\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Step 2: Perform BFS to find levels of nodes\n    levels = [-1] * len(graph)\n    levels[0] = 0\n    queue = deque([0])\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if levels[neighbor] == -1:\n                levels[neighbor] = levels[node] + 1\n                queue.append(neighbor)\n    \n    # Step 3: Simulate the marking process\n    times = [-1] * len(graph)\n    times[0] = 0\n    \n    def can_mark(node, time):\n        for neighbor in graph[node]:\n            if times[neighbor] != -1 and times[neighbor] < time:\n                return False\n        return True\n    \n    def mark_node(node, time):\n        times[node] = time\n        for neighbor in graph[node]:\n            if times[neighbor] == -1:\n                if node % 2 == 0:\n                    if levels[neighbor] >= levels[node] - 2:\n                        mark_node(neighbor, time + 1)\n                else:\n                    if levels[neighbor] >= levels[node] - 1:\n                        mark_node(neighbor, time + 1)\n    \n    for node in range(len(graph)):\n        if times[node] == -1:\n            mark_node(node, 0)\n    \n    return times\n```"}
{"task_id": "arc182_e", "code": "d", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n\n    # Step 1: Compute the sequence (Ck + A_i) % M for k from 0 to M-1\n    min_values = [float('inf')] * M\n    for i in range(N):\n        for k in range(M):\n            min_values[k] = min(min_values[k], (C * k + A[i]) % M)\n\n    # Step 2: Find the minimum value in this sequence\n    min_val = min(min_values)\n\n    # Step 3: Determine how many complete cycles of M fit into K\n    complete_cycles = K // M\n    remaining_elements = K % M\n\n    # Step 4: Compute the sum for the remaining K % M elements\n    remaining_sum = sum(min_values[:remaining_elements])\n\n    # Step 5: Sum the contributions from the complete cycles and the remaining elements\n    total_sum = complete_cycles * sum(min_values) + remaining_sum\n\n    print(total_sum)\n\nmain()"}
{"task_id": "3535", "code": "def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_incr = [[0] * 51 for _ in range(n)]\n    dp_decr = [[0] * 51 for _ in range(n)]\n    \n    # Base cases\n    dp_incr[0][nums[0]] = 1\n    dp_decr[0][nums[0]] = 1\n    \n    for i in range(1, n):\n        for j in range(nums[i] + 1):\n            if j <= nums[i]:\n                dp_incr[i][j] = (dp_incr[i-1][j] + dp_incr[i-1][j-1]) % MOD\n            if j >= nums[i]:\n                dp_decr[i][j] = (dp_decr[i-1][j] + dp_decr[i-1][j+1]) % MOD\n    \n    # Count the total number of valid pairs\n    result = 0\n    for j in range(51):\n        result = (result + dp_incr[-1][j] * dp_decr[-1][j]) % MOD\n    \n    return result", "passed": false, "raw_code": "```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_incr = [[0] * 51 for _ in range(n)]\n    dp_decr = [[0] * 51 for _ in range(n)]\n    \n    # Base cases\n    dp_incr[0][nums[0]] = 1\n    dp_decr[0][nums[0]] = 1\n    \n    for i in range(1, n):\n        for j in range(nums[i] + 1):\n            if j <= nums[i]:\n                dp_incr[i][j] = (dp_incr[i-1][j] + dp_incr[i-1][j-1]) % MOD\n            if j >= nums[i]:\n                dp_decr[i][j] = (dp_decr[i-1][j] + dp_decr[i-1][j+1]) % MOD\n    \n    # Count the total number of valid pairs\n    result = 0\n    for j in range(51):\n        result = (result + dp_incr[-1][j] * dp_decr[-1][j]) % MOD\n    \n    return result\n```"}
{"task_id": "abc368_f", "code": "def determine_winner(N, A):\n    moves = 0\n    for num in A:\n        # Count the number of divisors of num (excluding num itself)\n        divisors = [i for i in range(1, num // 2 + 1) if num % i == 0]\n        moves += len(divisors)\n    \n    # Determine the winner based on the parity of total moves\n    if moves % 2 == 0:\n        return \"Bruno\"\n    else:\n        return \"Anna\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Output the result\nprint(determine_winner(N, A))", "passed": false, "raw_code": "```python\ndef determine_winner(N, A):\n    moves = 0\n    for num in A:\n        # Count the number of divisors of num (excluding num itself)\n        divisors = [i for i in range(1, num // 2 + 1) if num % i == 0]\n        moves += len(divisors)\n    \n    # Determine the winner based on the parity of total moves\n    if moves % 2 == 0:\n        return \"Bruno\"\n    else:\n        return \"Anna\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Output the result\nprint(determine_winner(N, A))\n```"}
{"task_id": "abc367_e", "code": "def process_sequence(N, K, X, A):\n    # Dictionary to store the visited states and their indices\n    visited = {}\n    \n    # Initial state\n    current_state = tuple(A)\n    visited[current_state] = 0\n    \n    # Perform the operation K times or until a cycle is detected\n    for i in range(1, K + 1):\n        next_state = tuple(A[X[j] - 1] for j in range(N))\n        \n        if next_state in visited:\n            # Cycle detected\n            cycle_start = visited[next_state]\n            cycle_length = i - cycle_start\n            break\n        \n        visited[next_state] = i\n        A = list(next_state)\n    \n    else:\n        # No cycle detected, return the state after K operations\n        pass\n    \n    # If a cycle is detected, adjust K to find the position within the cycle\n    if 'cycle_length' in locals():\n        effective_k = (K - cycle_start) % cycle_length\n        current_state = tuple(A[X[j] - 1] for j in range(effective_k))\n    \n    # Print the final sequence\n    print(' '.join(map(str, current_state)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\nprocess_sequence(N, K, X, A)", "passed": false, "raw_code": "```python\ndef process_sequence(N, K, X, A):\n    # Dictionary to store the visited states and their indices\n    visited = {}\n    \n    # Initial state\n    current_state = tuple(A)\n    visited[current_state] = 0\n    \n    # Perform the operation K times or until a cycle is detected\n    for i in range(1, K + 1):\n        next_state = tuple(A[X[j] - 1] for j in range(N))\n        \n        if next_state in visited:\n            # Cycle detected\n            cycle_start = visited[next_state]\n            cycle_length = i - cycle_start\n            break\n        \n        visited[next_state] = i\n        A = list(next_state)\n    \n    else:\n        # No cycle detected, return the state after K operations\n        pass\n    \n    # If a cycle is detected, adjust K to find the position within the cycle\n    if 'cycle_length' in locals():\n        effective_k = (K - cycle_start) % cycle_length\n        current_state = tuple(A[X[j] - 1] for j in range(effective_k))\n    \n    # Print the final sequence\n    print(' '.join(map(str, current_state)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\nprocess_sequence(N, K, X, A)\n```"}
{"task_id": "abc370_e", "code": "d", "passed": false, "raw_code": "```python\ndef count_partitions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n\n    MOD = 998244353\n    \n    # dp[i][j] will store the number of ways to partition the first i elements such that the last subsequence sums to j\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        prefix_sum = 0\n        for j in range(K + 1):\n            prefix_sum += dp[i - 1][j]\n            prefix_sum %= MOD\n            \n            if j >= A[i - 1]:\n                dp[i][j] = prefix_sum - dp[i - 1][j - A[i - 1]]\n                if dp[i][j] < 0:\n                    dp[i][j] += MOD\n            else:\n                dp[i][j] = prefix_sum\n    \n    # Sum up all valid partitions where the last subsequence does not sum to K\n    result = 0\n    for j in range(K + 1):\n        if j != K:\n            result += dp[N][j]\n            result %= MOD\n    \n    print(result)\n\ncount_partitions()"}
{"task_id": "abc368_d", "code": "import sys\nfrom collections import defaultdict\n\ndef lca_query(u, v):\n    if depth[u] > depth[v]:\n        u, v = v, u\n    while depth[u] < depth[v]:\n        v = parent[v]\n    while u != v:\n        u = parent[u]\n        v = parent[v]\n    return u\n\ndef dfs(node, par):\n    parent[node] = par\n    depth[node] = depth[par] + 1\n    for neighbor in adj_list[node]:\n        if neighbor != par:\n            dfs(neighbor, node)\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\n\nedges = data[2:2 * (N - 1)]\nvertices = list(map(int, data[2 * (N - 1):]))\n\nadj_list = defaultdict(list)\nfor i in range(N - 1):\n    u = int(edges[2 * i]) - 1\n    v = int(edges[2 * i + 1]) - 1\n    adj_list[u].append(v)\n    adj_list[v].append(u)\n\nparent = [-1] * N\ndepth = [0] * N\ndfs(0, -1)\n\nresult = set()\nfor i in range(K - 1):\n    result.add(lca_query(vertices[i] - 1, vertices[i + 1] - 1))\n\nprint(len(result))", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict\n\ndef lca_query(u, v):\n    if depth[u] > depth[v]:\n        u, v = v, u\n    while depth[u] < depth[v]:\n        v = parent[v]\n    while u != v:\n        u = parent[u]\n        v = parent[v]\n    return u\n\ndef dfs(node, par):\n    parent[node] = par\n    depth[node] = depth[par] + 1\n    for neighbor in adj_list[node]:\n        if neighbor != par:\n            dfs(neighbor, node)\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\n\nedges = data[2:2 * (N - 1)]\nvertices = list(map(int, data[2 * (N - 1):]))\n\nadj_list = defaultdict(list)\nfor i in range(N - 1):\n    u = int(edges[2 * i]) - 1\n    v = int(edges[2 * i + 1]) - 1\n    adj_list[u].append(v)\n    adj_list[v].append(u)\n\nparent = [-1] * N\ndepth = [0] * N\ndfs(0, -1)\n\nresult = set()\nfor i in range(K - 1):\n    result.add(lca_query(vertices[i] - 1, vertices[i + 1] - 1))\n\nprint(len(result))\n```"}
{"task_id": "arc183_b", "code": "def can_transform(A, B, K):\n    # Check if the frequency of each value in A matches that in B\n    if sorted(A) != sorted(B):\n        return \"No\"\n    \n    # Sort the sequences A and B\n    A.sort()\n    B.sort()\n    \n    # Use a sliding window to check if B can be transformed into A\n    n = len(A)\n    for i in range(n - K):\n        if A[i + K] < B[i]:\n            return \"No\"\n    \n    return \"Yes\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        A = list(map(int, data[index:index + N]))\n        index += N\n        B = list(map(int, data[index:index + N]))\n        index += N\n        \n        result = can_transform(A, B, K)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef can_transform(A, B, K):\n    # Check if the frequency of each value in A matches that in B\n    if sorted(A) != sorted(B):\n        return \"No\"\n    \n    # Sort the sequences A and B\n    A.sort()\n    B.sort()\n    \n    # Use a sliding window to check if B can be transformed into A\n    n = len(A)\n    for i in range(n - K):\n        if A[i + K] < B[i]:\n            return \"No\"\n    \n    return \"Yes\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        A = list(map(int, data[index:index + N]))\n        index += N\n        B = list(map(int, data[index:index + N]))\n        index += N\n        \n        result = can_transform(A, B, K)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3563", "code": "def maxScore(grid):\n    # Sort each row in descending order\n    for row in grid:\n        row.sort(reverse=True)\n    \n    selected_values = set()\n    max_score = 0\n    \n    for row in grid:\n        for value in row:\n            if value not in selected_values:\n                selected_values.add(value)\n                max_score += value\n                break\n    \n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(grid):\n    # Sort each row in descending order\n    for row in grid:\n        row.sort(reverse=True)\n    \n    selected_values = set()\n    max_score = 0\n    \n    for row in grid:\n        for value in row:\n            if value not in selected_values:\n                selected_values.add(value)\n                max_score += value\n                break\n    \n    return max_score\n```"}
{"task_id": "abc365_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute prefix XOR array\n    P = [0] * (N + 1)\n    for i in range(1, N + 1):\n        P[i] = P[i - 1] ^ A[i - 1]\n    \n    # Initialize the result\n    result = 0\n    \n    # Iterate over all pairs (i, j)\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            result += P[j] ^ P[i - 1]\n    \n    # Print the result\n    print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute prefix XOR array\n    P = [0] * (N + 1)\n    for i in range(1, N + 1):\n        P[i] = P[i - 1] ^ A[i - 1]\n    \n    # Initialize the result\n    result = 0\n    \n    # Iterate over all pairs (i, j)\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            result += P[j] ^ P[i - 1]\n    \n    # Print the result\n    print(result)\n\nmain()\n```"}
{"task_id": "abc373_e", "code": "def min_additional_votes(N, M, K, A):\n    results = []\n    \n    for i in range(N):\n        # Calculate the current lead of candidate i\n        current_lead = K - sum(A) + A[i]\n        \n        # Determine the minimum number of additional votes needed\n        if current_lead >= (M * (M - 1)) // 2:\n            results.append(0)\n        elif current_lead < (M * (M - 1)) // 2:\n            needed_votes = (M * (M - 1)) // 2 - current_lead\n            if needed_votes <= K - sum(A):\n                results.append(needed_votes)\n            else:\n                results.append(-1)\n        else:\n            results.append(-1)\n    \n    return \" \".join(map(str, results))\n\n# Example usage\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    print(min_additional_votes(N, M, K, A))", "passed": false, "raw_code": "```python\ndef min_additional_votes(N, M, K, A):\n    results = []\n    \n    for i in range(N):\n        # Calculate the current lead of candidate i\n        current_lead = K - sum(A) + A[i]\n        \n        # Determine the minimum number of additional votes needed\n        if current_lead >= (M * (M - 1)) // 2:\n            results.append(0)\n        elif current_lead < (M * (M - 1)) // 2:\n            needed_votes = (M * (M - 1)) // 2 - current_lead\n            if needed_votes <= K - sum(A):\n                results.append(needed_votes)\n            else:\n                results.append(-1)\n        else:\n            results.append(-1)\n    \n    return \" \".join(map(str, results))\n\n# Example usage\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    print(min_additional_votes(N, M, K, A))\n```"}
{"task_id": "abc368_g", "code": "d", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    A = list(map(int, data[index:index + N]))\n    index += N\n\n    B = list(map(int, data[index:index + N]))\n    index += N\n\n    Q = int(data[index])\n    index += 1\n\n    queries = []\n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        if query_type == 1:\n            i = int(data[index]) - 1\n            index += 1\n            x = int(data[index])\n            index += 1\n            queries.append((query_type, i, x))\n        elif query_type == 2:\n            i = int(data[index]) - 1\n            index += 1\n            x = int(data[index])\n            index += 1\n            queries.append((query_type, i, x))\n        elif query_type == 3:\n            l = int(data[index]) - 1\n            index += 1\n            r = int(data[index]) - 1\n            index += 1\n            queries.append((query_type, l, r))\n\n    processor = SequenceProcessor(N, A, B)\n    results = []\n\n    for query in queries:\n        if query[0] == 1:\n            _, i, x = query\n            processor.update_A(i, x)\n        elif query[0] == 2:\n            _, i, x = query\n            processor.update_B(i, x)\n        elif query[0] == 3:\n            _, l, r = query\n            result = processor.query(l, r)\n            results.append(result)\n\n    for result in results:\n        print(result)\n\nclass SequenceProcessor:\n    def __init__(self, N, A, B):\n        self.N = N\n        self.A = A\n        self.B = B\n        self.prefix_sum_A = [0] * (N + 1)\n        self.prefix_product_A = [1] * (N + 1)\n        self.prefix_sum_B = [0] * (N + 1)\n        self.prefix_product_B = [1] * (N + 1)\n\n        for i in range(1, N + 1):\n            self.prefix_sum_A[i] = self.prefix_sum_A[i - 1] + A[i - 1]\n            self.prefix_product_A[i] = self.prefix_product_A[i - 1] * A[i - 1]\n            self.prefix_sum_B[i] = self.prefix_sum_B[i - 1] + B[i - 1]\n            self.prefix_product_B[i] = self.prefix_product_B[i - 1] * B[i - 1]\n\n    def update_A(self, i, x):\n        self.A[i] = x\n        self.prefix_sum_A[i + 1] = self.prefix_sum_A[i] + x\n        self.prefix_product_A[i + 1] = self.prefix_product_A[i] * x\n\n    def update_B(self, i, x):\n        self.B[i] = x\n        self.prefix_sum_B[i + 1] = self.prefix_sum_B[i] + x\n        self.prefix_product_B[i + 1] = self.prefix_product_B[i] * x\n\n    def query(self, l, r):\n        max_value = 0\n        v = 0"}
{"task_id": "3531", "code": "def min_damage(power, damage, health):\n    # Calculate the total damage each enemy can take until it is defeated\n    total_damages = [(d * h) // p for d, h, p in zip(damage, health, [power] * len(damage))]\n    \n    # Sort the total damages in ascending order\n    total_damages.sort()\n    \n    # Sum the smallest n elements in the sorted list\n    return sum(total_damages[:len(damage)])", "passed": false, "raw_code": "```python\ndef min_damage(power, damage, health):\n    # Calculate the total damage each enemy can take until it is defeated\n    total_damages = [(d * h) // p for d, h, p in zip(damage, health, [power] * len(damage))]\n    \n    # Sort the total damages in ascending order\n    total_damages.sort()\n    \n    # Sum the smallest n elements in the sorted list\n    return sum(total_damages[:len(damage)])\n```"}
{"task_id": "3551", "code": "class TrieNode:\n    def __init__(self):\n        self.children = [None, None]\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if not node.children[bit]:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n\n    def maxXor(self, num):\n        node = self.root\n        xor_val = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            alt_bit = 1 - bit\n            if node.children[alt_bit]:\n                xor_val |= (1 << i)\n                node = node.children[alt_bit]\n            else:\n                node = node.children[bit]\n        return xor_val\n\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = Trie()\n    result = []\n    \n    for l, r in queries:\n        range_xor = prefix_xor[r + 1] ^ prefix_xor[l]\n        max_xor = trie.maxXor(range_xor)\n        result.append(max_xor)\n        trie.insert(range_xor)\n    \n    return result", "passed": false, "raw_code": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = [None, None]\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if not node.children[bit]:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n\n    def maxXor(self, num):\n        node = self.root\n        xor_val = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            alt_bit = 1 - bit\n            if node.children[alt_bit]:\n                xor_val |= (1 << i)\n                node = node.children[alt_bit]\n            else:\n                node = node.children[bit]\n        return xor_val\n\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = Trie()\n    result = []\n    \n    for l, r in queries:\n        range_xor = prefix_xor[r + 1] ^ prefix_xor[l]\n        max_xor = trie.maxXor(range_xor)\n        result.append(max_xor)\n        trie.insert(range_xor)\n    \n    return result\n```"}
{"task_id": "arc182_c", "code": "def calculate_divisors_product(n, m):\n    MOD = 998244353\n    def prime_factors(n):\n        i = 2\n        factors = {}\n        while i * i <= n:\n            while n % i == 0:\n                if i in factors:\n                    factors[i] += 1\n                else:\n                    factors[i] = 1\n                n //= i\n            i += 1\n        if n > 1:\n            factors[n] = 1 if n not in factors else factors[n] + 1\n        return factors\n\n    def product_of_factors(factors):\n        result = 1\n        for factor, power in factors.items():\n            result = (result * (power + 1)) % MOD\n        return result\n\n    total_score = 0\n    for i in range(1, n + 1):\n        total_score = (total_score + product_of_factors(prime_factors(m))) % MOD\n    return total_score\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    print(calculate_divisors_product(N, M))", "passed": false, "raw_code": "def calculate_divisors_product(n, m):\n    MOD = 998244353\n    def prime_factors(n):\n        i = 2\n        factors = {}\n        while i * i <= n:\n            while n % i == 0:\n                if i in factors:\n                    factors[i] += 1\n                else:\n                    factors[i] = 1\n                n //= i\n            i += 1\n        if n > 1:\n            factors[n] = 1 if n not in factors else factors[n] + 1\n        return factors\n\n    def product_of_factors(factors):\n        result = 1\n        for factor, power in factors.items():\n            result = (result * (power + 1)) % MOD\n        return result\n\n    total_score = 0\n    for i in range(1, n + 1):\n        total_score = (total_score + product_of_factors(prime_factors(m))) % MOD\n    return total_score\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    print(calculate_divisors_product(N, M))"}
{"task_id": "arc183_c", "code": "d", "passed": false, "raw_code": "```python\ndef count_valid_permutations(N, M, constraints):\n    MOD = 998244353\n    \n    # Initialize dp table\n    dp = [[0] * (1 << N) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, N + 1):\n        new_dp = [0] * (1 << N)\n        for mask in range(1 << N):\n            if dp[i - 1][mask] == 0:\n                continue\n            for j in range(i):\n                if mask & (1 << j):\n                    max_val = max((j + 1) for j in range(i) if mask & (1 << j))\n                    if all(max_val != x for _, _, x in constraints if L <= j + 1 <= R):\n                        new_dp[mask | (1 << i)] += dp[i - 1][mask]\n                        new_dp[mask | (1 << i)] %= MOD\n        dp[i] = new_dp\n    \n    return sum(dp[N]) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nconstraints = []\nindex = 2\nfor _ in range(M):\n    L = int(data[index]) - 1\n    R = int(data[index + 1]) - 1\n    X = int(data[index + 2])\n    constraints.append((L, R, X))\n    index += 3\n\n# Get result\nresult = count_valid_permutations(N, M, constraints)\nprint(result)"}
{"task_id": "3560", "code": "def min_moves_to_capture(kx, ky, px, py):\n    directions = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.pop(0)\n        if (cx, cy) == (px, py):\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    return float('inf')\n\ndef max_moves_alice(kx, ky, positions, alpha, beta):\n    if not positions:\n        return 0\n    \n    max_moves = float('-inf')\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        new_positions = positions[:i] + positions[i+1:]\n        new_kx, new_ky = px, py\n        max_moves = max(max_moves, moves + max_moves_alice(new_kx, new_ky, new_positions, alpha, beta))\n        alpha = max(alpha, max_moves)\n        if alpha >= beta:\n            break\n    \n    return max_moves\n\ndef min_moves_bob(kx, ky, positions, alpha, beta):\n    if not positions:\n        return 0\n    \n    min_moves = float('inf')\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        new_positions = positions[:i] + positions[i+1:]\n        new_kx, new_ky = px, py\n        min_moves = min(min_moves, moves + min_moves_bob(new_kx, new_ky, new_positions, alpha, beta))\n        beta = min(beta, min_moves)\n        if alpha >= beta:\n            break\n    \n    return min_moves\n\ndef knight_capture_game(kx, ky, positions):\n    return max_moves_alice(kx, ky, positions, float('-inf'), float('inf'))", "passed": false, "raw_code": "```python\ndef min_moves_to_capture(kx, ky, px, py):\n    directions = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.pop(0)\n        if (cx, cy) == (px, py):\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    return float('inf')\n\ndef max_moves_alice(kx, ky, positions, alpha, beta):\n    if not positions:\n        return 0\n    \n    max_moves = float('-inf')\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        new_positions = positions[:i] + positions[i+1:]\n        new_kx, new_ky = px, py\n        max_moves = max(max_moves, moves + max_moves_alice(new_kx, new_ky, new_positions, alpha, beta))\n        alpha = max(alpha, max_moves)\n        if alpha >= beta:\n            break\n    \n    return max_moves\n\ndef min_moves_bob(kx, ky, positions, alpha, beta):\n    if not positions:\n        return 0\n    \n    min_moves = float('inf')\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        new_positions = positions[:i] + positions[i+1:]\n        new_kx, new_ky = px, py\n        min_moves = min(min_moves, moves + min_moves_bob(new_kx, new_ky, new_positions, alpha, beta))\n        beta = min(beta, min_moves)\n        if alpha >= beta:\n            break\n    \n    return min_moves\n\ndef knight_capture_game(kx, ky, positions):\n    return max_moves_alice(kx, ky, positions, float('-inf'), float('inf'))\n```"}
{"task_id": "arc182_d", "code": "def min_operations_to_transform(N, M, A, B):\n    operations = 0\n    for i in range(N):\n        diff = abs(A[i] - B[i])\n        if diff > M // 2:\n            diff = M - diff\n        operations += diff\n    return operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Calculate and print result\nresult = min_operations_to_transform(N, M, A, B)\nprint(result)", "passed": false, "raw_code": "def min_operations_to_transform(N, M, A, B):\n    operations = 0\n    for i in range(N):\n        diff = abs(A[i] - B[i])\n        if diff > M // 2:\n            diff = M - diff\n        operations += diff\n    return operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Calculate and print result\nresult = min_operations_to_transform(N, M, A, B)\nprint(result)"}
{"task_id": "3583", "code": "from collections import defaultdict\nimport bisect\n\ndef getGCD(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(nums, queries):\n    n = len(nums)\n    gcd_count = defaultdict(int)\n    \n    # Calculate GCD for all pairs and count their frequencies\n    for i in range(n):\n        for j in range(i + 1, n):\n            gcd_value = getGCD(nums[i], nums[j])\n            gcd_count[gcd_value] += 1\n    \n    # Sort the unique GCD values\n    unique_gcds = sorted(gcd_count.keys())\n    cum_freq = []\n    current_sum = 0\n    \n    # Calculate cumulative frequency\n    for gcd_value in unique_gcds:\n        current_sum += gcd_count[gcd_value]\n        cum_freq.append(current_sum)\n    \n    # Answer each query using binary search on cumulative frequency\n    result = []\n    for query in queries:\n        idx = bisect.bisect_left(cum_freq, query + 1)\n        if idx < len(unique_gcds):\n            result.append(unique_gcds[idx])\n        else:\n            result.append(unique_gcds[-1])\n    \n    return result", "passed": false, "raw_code": "```python\nfrom collections import defaultdict\nimport bisect\n\ndef getGCD(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(nums, queries):\n    n = len(nums)\n    gcd_count = defaultdict(int)\n    \n    # Calculate GCD for all pairs and count their frequencies\n    for i in range(n):\n        for j in range(i + 1, n):\n            gcd_value = getGCD(nums[i], nums[j])\n            gcd_count[gcd_value] += 1\n    \n    # Sort the unique GCD values\n    unique_gcds = sorted(gcd_count.keys())\n    cum_freq = []\n    current_sum = 0\n    \n    # Calculate cumulative frequency\n    for gcd_value in unique_gcds:\n        current_sum += gcd_count[gcd_value]\n        cum_freq.append(current_sum)\n    \n    # Answer each query using binary search on cumulative frequency\n    result = []\n    for query in queries:\n        idx = bisect.bisect_left(cum_freq, query + 1)\n        if idx < len(unique_gcds):\n            result.append(unique_gcds[idx])\n        else:\n            result.append(unique_gcds[-1])\n    \n    return result\n```"}
{"task_id": "abc367_f", "code": "import sys\nfrom collections import Counter\ndef can_rearrange(subseq_A, subseq_B):\n    return Counter(subseq_A) == Counter(subseq_B)\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    Q = int(data[1])\n    A = list(map(int, data[2:2+N]))\n    B = list(map(int, data[2+N:2+N+N]))\n    queries = []\n    index = 2 * N + 2\n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        queries.append((l_i, r_i, L_i, R_i))\n        index += 4\n    for l_i, r_i, L_i, R_i in queries:\n        subseq_A = A[l_i:r_i+1]\n        subseq_B = B[L_i:R_i+1]\n        if can_rearrange(subseq_A, subseq_B):\n            print('Yes')\n        else:\n            print('No')\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "import sys\nfrom collections import Counter\ndef can_rearrange(subseq_A, subseq_B):\n    return Counter(subseq_A) == Counter(subseq_B)\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    Q = int(data[1])\n    A = list(map(int, data[2:2+N]))\n    B = list(map(int, data[2+N:2+N+N]))\n    queries = []\n    index = 2 * N + 2\n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        queries.append((l_i, r_i, L_i, R_i))\n        index += 4\n    for l_i, r_i, L_i, R_i in queries:\n        subseq_A = A[l_i:r_i+1]\n        subseq_B = B[L_i:R_i+1]\n        if can_rearrange(subseq_A, subseq_B):\n            print('Yes')\n        else:\n            print('No')\nif __name__ == '__main__':\n    main()"}
{"task_id": "3550", "code": "def maxSumOfRooks(board):\n    m, n = len(board), len(board[0])\n    \n    # Find the maximum value in each row and its column index\n    max_in_rows = [(max(row), i) for i, row in enumerate(board)]\n    max_in_cols = [(max(col), j) for j, col in enumerate(zip(*board))]\n    \n    # Sort by the maximum value in descending order\n    max_in_rows.sort(reverse=True)\n    max_in_cols.sort(reverse=True)\n    \n    # Ensure the selected positions are unique across rows and columns\n    selected_positions = set()\n    selected_sum = 0\n    \n    for val_row, idx_row in max_in_rows:\n        for val_col, idx_col in max_in_cols:\n            if idx_col not in selected_positions:\n                selected_positions.add(idx_col)\n                selected_sum += val_row\n                break\n    \n    return selected_sum", "passed": false, "raw_code": "```python\ndef maxSumOfRooks(board):\n    m, n = len(board), len(board[0])\n    \n    # Find the maximum value in each row and its column index\n    max_in_rows = [(max(row), i) for i, row in enumerate(board)]\n    max_in_cols = [(max(col), j) for j, col in enumerate(zip(*board))]\n    \n    # Sort by the maximum value in descending order\n    max_in_rows.sort(reverse=True)\n    max_in_cols.sort(reverse=True)\n    \n    # Ensure the selected positions are unique across rows and columns\n    selected_positions = set()\n    selected_sum = 0\n    \n    for val_row, idx_row in max_in_rows:\n        for val_col, idx_col in max_in_cols:\n            if idx_col not in selected_positions:\n                selected_positions.add(idx_col)\n                selected_sum += val_row\n                break\n    \n    return selected_sum\n```"}
{"task_id": "abc371_e", "code": "def calculate_sum(N, A):\n    from collections import defaultdict\n    \n    # Initialize prefix sum array and result variable\n    prefix_sum = [defaultdict(int) for _ in range(N + 1)]\n    result = 0\n    \n    # Compute prefix sums\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1].copy()\n        prefix_sum[i][A[i - 1]] += 1\n    \n    # Sliding window to find the number of distinct elements in each subsequence\n    for i in range(1, N + 1):\n        unique_count = len(prefix_sum[i])\n        for j in range(i, N + 1):\n            unique_count += (prefix_sum[j][A[j - 1]] > prefix_sum[j - 1][A[j - 1]])\n            result += unique_count\n    \n    print(result)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Calculate and print the result\ncalculate_sum(N, A)", "passed": false, "raw_code": "```python\ndef calculate_sum(N, A):\n    from collections import defaultdict\n    \n    # Initialize prefix sum array and result variable\n    prefix_sum = [defaultdict(int) for _ in range(N + 1)]\n    result = 0\n    \n    # Compute prefix sums\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1].copy()\n        prefix_sum[i][A[i - 1]] += 1\n    \n    # Sliding window to find the number of distinct elements in each subsequence\n    for i in range(1, N + 1):\n        unique_count = len(prefix_sum[i])\n        for j in range(i, N + 1):\n            unique_count += (prefix_sum[j][A[j - 1]] > prefix_sum[j - 1][A[j - 1]])\n            result += unique_count\n    \n    print(result)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Calculate and print the result\ncalculate_sum(N, A)\n```"}
{"task_id": "abc372_e", "code": "i", "passed": false, "raw_code": "```python\nimport heapq\nfrom sys import stdin\n\ndef main():\n    input = stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = [[] for _ in range(N + 1)]\n    degree = [0] * (N + 1)\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            u = int(data[index])\n            v = int(data[index + 1])\n            index += 2\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n            degree[u] += 1\n            degree[v] += 1\n        elif query_type == 2:\n            v = int(data[index])\n            k = int(data[index + 1])\n            index += 2\n            \n            if degree[v] < k:\n                results.append(-1)\n            else:\n                min_heap = []\n                for neighbor in adj_list[v]:\n                    if len(min_heap) < k:\n                        heapq.heappush(min_heap, neighbor)\n                    elif neighbor > min_heap[0]:\n                        heapq.heappop(min_heap)\n                        heapq.heappush(min_heap, neighbor)\n                results.append(min_heap[0])\n    \n    for result in results:\n        print(result)\n\nmain()"}
{"task_id": "abc372_g", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef count_valid_pairs(N, A, B, C):\n    count = 0\n    max_x = min(C[0] // A[0], C[0] // B[0])\n    \n    for x in range(1, max_x + 1):\n        valid = True\n        for i in range(N):\n            if A[i] * x >= C[i]:\n                valid = False\n                break\n            y_max = (C[i] - A[i] * x - 1) // B[i]\n            if y_max <= 0:\n                valid = False\n                break\n        if valid:\n            count += 1\n    \n    return count\n\ndef main():\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        B = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        C = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        \n        result = count_valid_pairs(N, A, B, C)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef count_valid_pairs(N, A, B, C):\n    count = 0\n    max_x = min(C[0] // A[0], C[0] // B[0])\n    \n    for x in range(1, max_x + 1):\n        valid = True\n        for i in range(N):\n            if A[i] * x >= C[i]:\n                valid = False\n                break\n            y_max = (C[i] - A[i] * x - 1) // B[i]\n            if y_max <= 0:\n                valid = False\n                break\n        if valid:\n            count += 1\n    \n    return count\n\ndef main():\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        B = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        C = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        \n        result = count_valid_pairs(N, A, B, C)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc368_e", "code": "i", "passed": false, "raw_code": "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nX1 = int(data[2])\n\n# Parse the train data\ntrains = []\nfor i in range(M):\n    A = int(data[3 + i * 4]) - 1\n    B = int(data[4 + i * 4]) - 1\n    S = int(data[5 + i * 4])\n    T = int(data[6 + i * 4])\n    trains.append((A, B, S, T))\n\n# Sort trains by their arrival times\ntrains.sort(key=lambda x: x[3])\n\n# Initialize the delay array\nX = [0] * M\nX[0] = X1\n\n# Process each train\nfor i in range(1, M):\n    train_i = trains[i]\n    A_i, B_i, S_i, T_i = train_i\n    max_delay = 0\n    \n    # Check all trains that can be transferred to train i\n    for j in range(i):\n        train_j = trains[j]\n        A_j, B_j, S_j, T_j = train_j\n        if B_i == A_j and T_i <= S_j:\n            required_delay = S_j - T_i\n            max_delay = max(max_delay, required_delay)\n    \n    # Update the delay for train i\n    X[i] = max_delay\n\n# Output the delays for trains 2 to M\nprint(\" \".join(map(str, X[1:])))"}
{"task_id": "arc183_d", "code": "import sys\nfrom collections import defaultdict, deque\n\ndef find_leaves(n, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    leaves = []\n    for node in range(1, n + 1):\n        if len(graph[node]) == 1:\n            leaves.append(node)\n    \n    return leaves\n\ndef remove_leaf(leaves, graph):\n    leaf = leaves.pop()\n    neighbor = graph[leaf][0]\n    graph[neighbor].remove(leaf)\n    if len(graph[neighbor]) == 1:\n        leaves.append(neighbor)\n    return leaf, neighbor\n\ndef max_score_operations(n, edges):\n    leaves = find_leaves(n, edges)\n    result = []\n    \n    while len(leaves) > 0:\n        leaf1, leaf2 = remove_leaf(leaves, graph)\n        result.append((leaf1, leaf2))\n    \n    return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    \n    edges = []\n    for _ in range(n - 1):\n        u = int(data[index])\n        v = int(data[index + 1])\n        edges.append((u, v))\n        index += 2\n    \n    result = max_score_operations(n, edges)\n    \n    for x, y in result:\n        print(x, y)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef find_leaves(n, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    leaves = []\n    for node in range(1, n + 1):\n        if len(graph[node]) == 1:\n            leaves.append(node)\n    \n    return leaves\n\ndef remove_leaf(leaves, graph):\n    leaf = leaves.pop()\n    neighbor = graph[leaf][0]\n    graph[neighbor].remove(leaf)\n    if len(graph[neighbor]) == 1:\n        leaves.append(neighbor)\n    return leaf, neighbor\n\ndef max_score_operations(n, edges):\n    leaves = find_leaves(n, edges)\n    result = []\n    \n    while len(leaves) > 0:\n        leaf1, leaf2 = remove_leaf(leaves, graph)\n        result.append((leaf1, leaf2))\n    \n    return result\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    \n    edges = []\n    for _ in range(n - 1):\n        u = int(data[index])\n        v = int(data[index + 1])\n        edges.append((u, v))\n        index += 2\n    \n    result = max_score_operations(n, edges)\n    \n    for x, y in result:\n        print(x, y)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc372_f", "code": "def count_ways(N, M, K, edges):\n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * (K + 1) for _ in range(N)]\n    \n    # Starting point\n    dp[0][0] = 1\n    \n    # Fill dp table\n    for k in range(1, K + 1):\n        new_dp = [0] * N\n        for v in range(N):\n            new_dp[v] = dp[v][(k-1) % N]\n            if v == 0:\n                new_dp[v] += sum(dp[i][k-1] for i in range(1, N))\n            else:\n                new_dp[v] += dp[v-1][k-1]\n            if v < M:\n                x, y = edges[v]\n                if x == v:\n                    new_dp[y-1] += dp[x-1][k-1]\n        dp = [x % MOD for x in new_dp]\n    \n    return dp[0][K]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\n\nedges = []\nfor i in range(M):\n    x = int(data[3 + 2*i]) - 1\n    y = int(data[4 + 2*i]) - 1\n    edges.append((x, y))\n\n# Calculate and print the result\nresult = count_ways(N, M, K, edges)\nprint(result)", "passed": false, "raw_code": "```python\ndef count_ways(N, M, K, edges):\n    MOD = 998244353\n    \n    # Initialize dp array\n    dp = [[0] * (K + 1) for _ in range(N)]\n    \n    # Starting point\n    dp[0][0] = 1\n    \n    # Fill dp table\n    for k in range(1, K + 1):\n        new_dp = [0] * N\n        for v in range(N):\n            new_dp[v] = dp[v][(k-1) % N]\n            if v == 0:\n                new_dp[v] += sum(dp[i][k-1] for i in range(1, N))\n            else:\n                new_dp[v] += dp[v-1][k-1]\n            if v < M:\n                x, y = edges[v]\n                if x == v:\n                    new_dp[y-1] += dp[x-1][k-1]\n        dp = [x % MOD for x in new_dp]\n    \n    return dp[0][K]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\n\nedges = []\nfor i in range(M):\n    x = int(data[3 + 2*i]) - 1\n    y = int(data[4 + 2*i]) - 1\n    edges.append((x, y))\n\n# Calculate and print the result\nresult = count_ways(N, M, K, edges)\nprint(result)\n```"}
{"task_id": "3552", "code": "def largest_k_palindrome(n, k):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    # Start with the largest possible n-digit number\n    for i in range(10**(n-1), 10**n):\n        candidate = int(str(i) + str(i)[:n-1][::-1])\n        if candidate % k == 0 and is_palindrome(candidate):\n            return str(candidate)\n    return \"\"\n\n# Example usage:\nprint(largest_k_palindrome(3, 5))  # Output: \"595\"\nprint(largest_k_palindrome(1, 4))  # Output: \"8\"\nprint(largest_k_palindrome(5, 6))  # Output: \"89898\"", "passed": false, "raw_code": "```python\ndef largest_k_palindrome(n, k):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    # Start with the largest possible n-digit number\n    for i in range(10**(n-1), 10**n):\n        candidate = int(str(i) + str(i)[:n-1][::-1])\n        if candidate % k == 0 and is_palindrome(candidate):\n            return str(candidate)\n    return \"\"\n\n# Example usage:\nprint(largest_k_palindrome(3, 5))  # Output: \"595\"\nprint(largest_k_palindrome(1, 4))  # Output: \"8\"\nprint(largest_k_palindrome(5, 6))  # Output: \"89898\"\n```"}
{"task_id": "abc366_f", "code": "import sys\nfrom itertools import permutations\n\ndef max_nested_function_value(N, K, functions):\n    max_value = 0\n    for perm in permutations(range(N), K):\n        x = 1\n        for i in perm:\n            A, B = functions[i]\n            x = A * x + B\n        max_value = max(max_value, x)\n    return max_value\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nfunctions = []\nfor i in range(N):\n    A = int(data[2 + 2 * i])\n    B = int(data[3 + 2 * i])\n    functions.append((A, B))\n\n# Find the maximum value\nresult = max_nested_function_value(N, K, functions)\n\n# Print the result\nprint(result)", "passed": false, "raw_code": "```python\nimport sys\nfrom itertools import permutations\n\ndef max_nested_function_value(N, K, functions):\n    max_value = 0\n    for perm in permutations(range(N), K):\n        x = 1\n        for i in perm:\n            A, B = functions[i]\n            x = A * x + B\n        max_value = max(max_value, x)\n    return max_value\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nfunctions = []\nfor i in range(N):\n    A = int(data[2 + 2 * i])\n    B = int(data[3 + 2 * i])\n    functions.append((A, B))\n\n# Find the maximum value\nresult = max_nested_function_value(N, K, functions)\n\n# Print the result\nprint(result)\n```"}
{"task_id": "arc182_a", "code": "def count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n    \n    for q in range(1, Q + 1):\n        pi = P[q - 1]\n        vi = V[q - 1]\n        \n        for j in range(N, 0, -1):\n            if j >= pi:\n                dp[q][j] += dp[q - 1][pi - 1]\n                dp[q][j] %= MOD\n        \n        for j in range(pi, N + 1):\n            dp[q][j] += dp[q - 1][j - 1]\n            dp[q][j] %= MOD\n    \n    return sum(dp[-1]) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nP = []\nV = []\n\nindex = 2\nfor _ in range(Q):\n    pi = int(data[index])\n    vi = int(data[index + 1])\n    P.append(pi)\n    V.append(vi)\n    index += 2\n\n# Calculate and print result\nresult = count_valid_sequences(N, Q, P, V)\nprint(result)", "passed": false, "raw_code": "```python\ndef count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n    \n    for q in range(1, Q + 1):\n        pi = P[q - 1]\n        vi = V[q - 1]\n        \n        for j in range(N, 0, -1):\n            if j >= pi:\n                dp[q][j] += dp[q - 1][pi - 1]\n                dp[q][j] %= MOD\n        \n        for j in range(pi, N + 1):\n            dp[q][j] += dp[q - 1][j - 1]\n            dp[q][j] %= MOD\n    \n    return sum(dp[-1]) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\n\nP = []\nV = []\n\nindex = 2\nfor _ in range(Q):\n    pi = int(data[index])\n    vi = int(data[index + 1])\n    P.append(pi)\n    V.append(vi)\n    index += 2\n\n# Calculate and print result\nresult = count_valid_sequences(N, Q, P, V)\nprint(result)\n```"}
{"task_id": "arc181_c", "code": "def generate_grid(N, P, Q):\n    # Initialize an empty N x N grid\n    grid = [['' for _ in range(N)] for _ in range(N)]\n\n    # Fill the grid using a Latin square pattern\n    for i in range(N):\n        for j in range(N):\n            if (i + j) % 2 == 0:\n                grid[i][j] = '0'\n            else:\n                grid[i][j] = '1'\n\n    # Print the grid in the required format\n    for row in grid:\n        print(''.join(row))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\nlines = input().split()\nN = int(lines[0])\nP = list(map(int, lines[1].split()))\nQ = list(map(int, lines[2].split()))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)\n", "passed": false, "raw_code": "def generate_grid(N, P, Q):\n    # Initialize an empty N x N grid\n    grid = [['' for _ in range(N)] for _ in range(N)]\n\n    # Fill the grid using a Latin square pattern\n    for i in range(N):\n        for j in range(N):\n            if (i + j) % 2 == 0:\n                grid[i][j] = '0'\n            else:\n                grid[i][j] = '1'\n\n    # Print the grid in the required format\n    for row in grid:\n        print(''.join(row))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\nlines = input().split()\nN = int(lines[0])\nP = list(map(int, lines[1].split()))\nQ = list(map(int, lines[2].split()))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)\n"}
{"task_id": "3575", "code": "def max_value(nums, k):\n    n = len(nums)\n    dp = [[0] * 2 for _ in range(k + 1)]\n    \n    for i in range(n):\n        new_dp = [[0] * 2 for _ in range(k + 1)]\n        for j in range(k + 1):\n            for x in range(2):\n                if j > 0:\n                    new_dp[j][x] = max(new_dp[j][x], dp[j - 1][x ^ (nums[i] >> (6 - i % 7))])\n                if j < k:\n                    new_dp[j][x] = max(new_dp[j][x], dp[j][x | (nums[i] >> (6 - i % 7))])\n        dp = new_dp\n    \n    return dp[k][0]", "passed": false, "raw_code": "```python\ndef max_value(nums, k):\n    n = len(nums)\n    dp = [[0] * 2 for _ in range(k + 1)]\n    \n    for i in range(n):\n        new_dp = [[0] * 2 for _ in range(k + 1)]\n        for j in range(k + 1):\n            for x in range(2):\n                if j > 0:\n                    new_dp[j][x] = max(new_dp[j][x], dp[j - 1][x ^ (nums[i] >> (6 - i % 7))])\n                if j < k:\n                    new_dp[j][x] = max(new_dp[j][x], dp[j][x | (nums[i] >> (6 - i % 7))])\n        dp = new_dp\n    \n    return dp[k][0]\n```"}
{"task_id": "arc181_d", "code": "import sys\nfrom typing import List\n\ndef fenwick_update(tree: List[int], index: int, value: int) -> None:\n    while index < len(tree):\n        tree[index] += value\n        index += index & -index\n\ndef fenwick_query(tree: List[int], index: int) -> int:\n    result = 0\n    while index > 0:\n        result += tree[index]\n        index -= index & -index\n    return result\n\ndef count_inversions(sequence: List[int]) -> int:\n    n = len(sequence)\n    sorted_indices = sorted(range(n), key=lambda i: sequence[i])\n    fenwick_tree = [0] * (n + 1)\n    inversions = 0\n    for i in range(n):\n        index = sorted_indices[i]\n        inversions += i - fenwick_query(fenwick_tree, index)\n        fenwick_update(fenwick_tree, index + 1, 1)\n    return inversions\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    p = list(map(int, data[1:n+1]))\n    m = int(data[n+1])\n    a = list(map(int, data[n+2:n+m+2]))\n    results = []\n    current_permutation = p[:]\n    for op in a:\n        while op in current_permutation:\n            index = current_permutation.index(op)\n            del current_permutation[index]\n            current_permutation.insert(index - 1, op)\n        results.append(count_inversions(current_permutation))\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "import sys\nfrom typing import List\n\ndef fenwick_update(tree: List[int], index: int, value: int) -> None:\n    while index < len(tree):\n        tree[index] += value\n        index += index & -index\n\ndef fenwick_query(tree: List[int], index: int) -> int:\n    result = 0\n    while index > 0:\n        result += tree[index]\n        index -= index & -index\n    return result\n\ndef count_inversions(sequence: List[int]) -> int:\n    n = len(sequence)\n    sorted_indices = sorted(range(n), key=lambda i: sequence[i])\n    fenwick_tree = [0] * (n + 1)\n    inversions = 0\n    for i in range(n):\n        index = sorted_indices[i]\n        inversions += i - fenwick_query(fenwick_tree, index)\n        fenwick_update(fenwick_tree, index + 1, 1)\n    return inversions\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    p = list(map(int, data[1:n+1]))\n    m = int(data[n+1])\n    a = list(map(int, data[n+2:n+m+2]))\n    results = []\n    current_permutation = p[:]\n    for op in a:\n        while op in current_permutation:\n            index = current_permutation.index(op)\n            del current_permutation[index]\n            current_permutation.insert(index - 1, op)\n        results.append(count_inversions(current_permutation))\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "abc366_g", "code": "def dfs(graph, visited, current_vertex, current_assignment):\n    visited[current_vertex] = True\n    \n    # Calculate the required XOR value for the current vertex\n    required_xor = 0\n    for neighbor in graph[current_vertex]:\n        if visited[neighbor]:\n            required_xor ^= current_assignment[neighbor]\n    \n    # Try assigning values from 1 to 2^60 - 1\n    for value in range(1, 2**60):\n        if value ^ required_xor == 0:\n            current_assignment[current_vertex] = value\n            valid = True\n            for neighbor in graph[current_vertex]:\n                if not visited[neighbor]:\n                    valid &= dfs(graph, visited, neighbor, current_assignment)\n            if valid:\n                return True\n            current_assignment[current_vertex] = None\n    \n    visited[current_vertex] = False\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [False] * N\n    current_assignment = [None] * N\n    \n    if dfs(graph, visited, 0, current_assignment):\n        print(\"Yes\")\n        for value in current_assignment:\n            print(value, end=\" \")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef dfs(graph, visited, current_vertex, current_assignment):\n    visited[current_vertex] = True\n    \n    # Calculate the required XOR value for the current vertex\n    required_xor = 0\n    for neighbor in graph[current_vertex]:\n        if visited[neighbor]:\n            required_xor ^= current_assignment[neighbor]\n    \n    # Try assigning values from 1 to 2^60 - 1\n    for value in range(1, 2**60):\n        if value ^ required_xor == 0:\n            current_assignment[current_vertex] = value\n            valid = True\n            for neighbor in graph[current_vertex]:\n                if not visited[neighbor]:\n                    valid &= dfs(graph, visited, neighbor, current_assignment)\n            if valid:\n                return True\n            current_assignment[current_vertex] = None\n    \n    visited[current_vertex] = False\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        index += 2\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [False] * N\n    current_assignment = [None] * N\n    \n    if dfs(graph, visited, 0, current_assignment):\n        print(\"Yes\")\n        for value in current_assignment:\n            print(value, end=\" \")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3548", "code": "def count_good_integers(n, k):\n    if n == 1:\n        return 2 if k % 2 == 0 else 1\n    \n    count = 0\n    for i in range(10**(n-1), 10**n):\n        str_i = str(i)\n        if str_i == str_i[::-1] and i % k == 0:\n            count += 1\n    return count", "passed": false, "raw_code": "```python\ndef count_good_integers(n, k):\n    if n == 1:\n        return 2 if k % 2 == 0 else 1\n    \n    count = 0\n    for i in range(10**(n-1), 10**n):\n        str_i = str(i)\n        if str_i == str_i[::-1] and i % k == 0:\n            count += 1\n    return count\n```"}
{"task_id": "abc369_g", "code": "i", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef min_max_score(N, edges):\n    # Build the adjacency list representation of the tree\n    adj_list = defaultdict(list)\n    for u, v, l in edges:\n        adj_list[u].append((v, l))\n        adj_list[v].append((u, l))\n    \n    # Function to perform BFS and calculate distances from the root\n    def bfs(root):\n        dist = [float('inf')] * (N + 1)\n        dist[root] = 0\n        queue = deque([root])\n        \n        while queue:\n            node = queue.popleft()\n            for neighbor, length in adj_list[node]:\n                if dist[neighbor] == float('inf'):\n                    dist[neighbor] = dist[node] + length\n                    queue.append(neighbor)\n        \n        return dist\n    \n    # Calculate distances from the root\n    root = 1\n    dist = bfs(root)\n    \n    # Dynamic programming table to store the minimum and maximum scores\n    dp = [[[-1] * (1 << N) for _ in range(N)] for _ in range(N)]\n    \n    # Helper function to compute the minimum score for a subset of vertices\n    def min_score(subset, mask):\n        if dp[subset][mask][0] != -1:\n            return dp[subset][mask][0]\n        \n        if mask == 0:\n            dp[subset][mask][0] = 0\n            return 0\n        \n        min_val = float('inf')\n        for i in range(N):\n            if (mask & (1 << i)) > 0:\n                new_mask = mask ^ (1 << i)\n                for j in range(N):\n                    if (new_mask & (1 << j)) > 0:\n                        new_subset = subset | (1 << j)\n                        cost = dist[i + 1] + dist[j + 1] + min_score(new_subset, new_mask)\n                        min_val = min(min_val, cost)\n        \n        dp[subset][mask][0] = min_val\n        return min_val\n    \n    # Helper function to compute the maximum score for a subset of vertices\n    def max_score(subset, mask):\n        if dp[subset][mask][1] != -1:\n            return dp[subset][mask][1]\n        \n        if mask == 0:\n            dp[subset][mask][1] = 0\n            return 0\n        \n        max_val = 0\n        for i in range(N):\n            if (mask & (1 << i)) > 0:\n                new_mask = mask ^ (1 << i)\n                for j in range(N):\n                    if (new_mask & (1 << j)) > 0:\n                        new_subset = subset | (1 << j)\n                        cost = dist[i + 1] + dist[j + 1] + max_score(new_subset, new_mask)\n                        max_val = max(max_val, cost)\n        \n        dp[subset][mask][1] = max_val\n        return max_val\n    \n    # Compute the result for each K\n    results = []\n    for K in range(1, N + 1):\n        total_cost = 0\n        for i in range(K):\n            total_cost += dist[i + 1"}
{"task_id": "3527", "code": "def alternatingGroups(colors, queries):\n    n = len(colors)\n    prefix_sums = [0] * (n + 1)\n    for i in range(n):\n        prefix_sums[i + 1] = prefix_sums[i] + (colors[i] ^ colors[(i + 1) % n])\n    \n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            if prefix_sums[(i + size) % n] - prefix_sums[i] == size // 2:\n                count += 1\n        return count\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            result.append(count_alternating_groups(query[1]))\n        elif query[0] == 2:\n            old_color = colors[query[1]]\n            new_color = query[2]\n            colors[query[1]] = new_color\n            \n            # Update prefix sums\n            prefix_sums[query[1] + 1] -= old_color ^ new_color\n    \n    return result", "passed": false, "raw_code": "```python\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    prefix_sums = [0] * (n + 1)\n    for i in range(n):\n        prefix_sums[i + 1] = prefix_sums[i] + (colors[i] ^ colors[(i + 1) % n])\n    \n    def count_alternating_groups(size):\n        count = 0\n        for i in range(n):\n            if prefix_sums[(i + size) % n] - prefix_sums[i] == size // 2:\n                count += 1\n        return count\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            result.append(count_alternating_groups(query[1]))\n        elif query[0] == 2:\n            old_color = colors[query[1]]\n            new_color = query[2]\n            colors[query[1]] = new_color\n            \n            # Update prefix sums\n            prefix_sums[query[1] + 1] -= old_color ^ new_color\n    \n    return result\n```"}
{"task_id": "abc371_g", "code": "def find(parent, x):\n    if parent[x] != x:\n        parent[x] = find(parent, parent[x])\n    return parent[x]\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef get_cycles(n, p):\n    parent = list(range(n))\n    rank = [0] * n\n    \n    for i in range(n):\n        union(parent, rank, i, p[i] - 1)\n    \n    cycle_map = {}\n    for i in range(n):\n        root = find(parent, i)\n        if root not in cycle_map:\n            cycle_map[root] = []\n        cycle_map[root].append(i)\n    \n    return cycle_map\n\ndef smallest_array(n, p, a):\n    cycle_map = get_cycles(n, p)\n    result = [0] * n\n    \n    for cycle in cycle_map.values():\n        cycle.sort(key=lambda x: a[x])\n        for i, idx in enumerate(cycle):\n            result[idx] = a[cycle[(i + 1) % len(cycle)]]\n    \n    return ' '.join(map(str, result))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\np = list(map(int, data[1:n+1]))\na = list(map(int, data[n+1:]))\n\n# Get the lexicographically smallest array\nsmallest_a = smallest_array(n, p, a)\n\n# Print the result\nprint(smallest_a)", "passed": false, "raw_code": "```python\ndef find(parent, x):\n    if parent[x] != x:\n        parent[x] = find(parent, parent[x])\n    return parent[x]\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef get_cycles(n, p):\n    parent = list(range(n))\n    rank = [0] * n\n    \n    for i in range(n):\n        union(parent, rank, i, p[i] - 1)\n    \n    cycle_map = {}\n    for i in range(n):\n        root = find(parent, i)\n        if root not in cycle_map:\n            cycle_map[root] = []\n        cycle_map[root].append(i)\n    \n    return cycle_map\n\ndef smallest_array(n, p, a):\n    cycle_map = get_cycles(n, p)\n    result = [0] * n\n    \n    for cycle in cycle_map.values():\n        cycle.sort(key=lambda x: a[x])\n        for i, idx in enumerate(cycle):\n            result[idx] = a[cycle[(i + 1) % len(cycle)]]\n    \n    return ' '.join(map(str, result))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\np = list(map(int, data[1:n+1]))\na = list(map(int, data[n+1:]))\n\n# Get the lexicographically smallest array\nsmallest_a = smallest_array(n, p, a)\n\n# Print the result\nprint(smallest_a)\n```"}
{"task_id": "abc369_e", "code": "import sys\nfrom heapq import heappop, heappush\nfrom collections import defaultdict, deque\n\ndef dijkstra(graph, start, n):\n    dist = [float('inf')] * (n + 1)\n    dist[start] = 0\n    pq = [(0, start)]\n    while pq:\n        current_dist, u = heappop(pq)\n        if current_dist > dist[u]:\n            continue\n        for v, w in graph[u].items():\n            distance = current_dist + w\n            if distance < dist[v]:\n                dist[v] = distance\n                heappush(pq, (distance, v))\n    return dist\n\ndef min_time_to_travel(n, m, bridges, q, queries):\n    graph = defaultdict(lambda: defaultdict(int))\n    for u, v, t in bridges:\n        graph[u][v] = min(graph[u][v], t)\n        graph[v][u] = min(graph[v][u], t)\n\n    dist = dijkstra(graph, 1, n)\n    results = []\n\n    for k, query in enumerate(queries):\n        bridges_used = set(query)\n        total_time = float('inf')\n\n        for mask in range(1 << len(bridges_used)):\n            current_time = 0\n            current_node = 1\n            for i, b in enumerate(bridges_used):\n                if mask & (1 << i):\n                    u, v, t = bridges[b - 1]\n                    if u == current_node:\n                        current_time += t\n                        current_node = v\n                    elif v == current_node:\n                        current_time += t\n                        current_node = u\n                    else:\n                        break\n            if current_node == n:\n                total_time = min(total_time, current_time)\n\n        results.append(total_time)\n\n    return results\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n\n    bridges = []\n    for _ in range(m):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        bridges.append((u, v, t))\n\n    q = int(data[index])\n    index += 1\n\n    queries = []\n    for _ in range(q):\n        k = int(data[index])\n        index += 1\n        query = list(map(int, data[index:index + k]))\n        index += k\n        queries.append(query)\n\n    results = min_time_to_travel(n, m, bridges, q, queries)\n    for result in results:\n        print(result)", "passed": false, "raw_code": "import sys\nfrom heapq import heappop, heappush\nfrom collections import defaultdict, deque\n\ndef dijkstra(graph, start, n):\n    dist = [float('inf')] * (n + 1)\n    dist[start] = 0\n    pq = [(0, start)]\n    while pq:\n        current_dist, u = heappop(pq)\n        if current_dist > dist[u]:\n            continue\n        for v, w in graph[u].items():\n            distance = current_dist + w\n            if distance < dist[v]:\n                dist[v] = distance\n                heappush(pq, (distance, v))\n    return dist\n\ndef min_time_to_travel(n, m, bridges, q, queries):\n    graph = defaultdict(lambda: defaultdict(int))\n    for u, v, t in bridges:\n        graph[u][v] = min(graph[u][v], t)\n        graph[v][u] = min(graph[v][u], t)\n\n    dist = dijkstra(graph, 1, n)\n    results = []\n\n    for k, query in enumerate(queries):\n        bridges_used = set(query)\n        total_time = float('inf')\n\n        for mask in range(1 << len(bridges_used)):\n            current_time = 0\n            current_node = 1\n            for i, b in enumerate(bridges_used):\n                if mask & (1 << i):\n                    u, v, t = bridges[b - 1]\n                    if u == current_node:\n                        current_time += t\n                        current_node = v\n                    elif v == current_node:\n                        current_time += t\n                        current_node = u\n                    else:\n                        break\n            if current_node == n:\n                total_time = min(total_time, current_time)\n\n        results.append(total_time)\n\n    return results\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n\n    bridges = []\n    for _ in range(m):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        bridges.append((u, v, t))\n\n    q = int(data[index])\n    index += 1\n\n    queries = []\n    for _ in range(q):\n        k = int(data[index])\n        index += 1\n        query = list(map(int, data[index:index + k]))\n        index += k\n        queries.append(query)\n\n    results = min_time_to_travel(n, m, bridges, q, queries)\n    for result in results:\n        print(result)"}
{"task_id": "3571", "code": "def maxIncreasingPath(coordinates, k):\n    def dfs(x, y):\n        if (x, y) in memo:\n            return memo[(x, y)]\n        \n        max_length = 1\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and coordinates[nx][ny] > coordinates[x][y]:\n                max_length = max(max_length, 1 + dfs(nx, ny))\n        \n        memo[(x, y)] = max_length\n        return max_length\n    \n    n, m = len(coordinates), len(coordinates[0])\n    directions = [(1, 0), (0, 1)]\n    coordinates.sort()\n    \n    memo = {}\n    max_path_length = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if i == k or j == k // m:\n                max_path_length = max(max_path_length, dfs(i, j))\n    \n    return max_path_length", "passed": false, "raw_code": "```python\ndef maxIncreasingPath(coordinates, k):\n    def dfs(x, y):\n        if (x, y) in memo:\n            return memo[(x, y)]\n        \n        max_length = 1\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and coordinates[nx][ny] > coordinates[x][y]:\n                max_length = max(max_length, 1 + dfs(nx, ny))\n        \n        memo[(x, y)] = max_length\n        return max_length\n    \n    n, m = len(coordinates), len(coordinates[0])\n    directions = [(1, 0), (0, 1)]\n    coordinates.sort()\n    \n    memo = {}\n    max_path_length = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if i == k or j == k // m:\n                max_path_length = max(max_path_length, dfs(i, j))\n    \n    return max_path_length\n```"}
{"task_id": "3580", "code": "def smallestAlmostEqualSubstring(s: str, pattern: str) -> int:\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = sum(1 for j in range(m) if s[i + j] != pattern[j])\n        if diff_count <= 1:\n            return i\n    \n    return -1", "passed": false, "raw_code": "```python\ndef smallestAlmostEqualSubstring(s: str, pattern: str) -> int:\n    m, n = len(pattern), len(s)\n    \n    for i in range(n - m + 1):\n        diff_count = sum(1 for j in range(m) if s[i + j] != pattern[j])\n        if diff_count <= 1:\n            return i\n    \n    return -1\n```"}
{"final_accuracy": "0.00%"}
