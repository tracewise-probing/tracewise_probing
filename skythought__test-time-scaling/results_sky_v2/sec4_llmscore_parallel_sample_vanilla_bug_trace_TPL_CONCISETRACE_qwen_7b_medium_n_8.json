{"difficulty": "medium", "num_threads": 32, "temperature": 0.7, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_CONCISETRACE_qwen_7b_medium_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3485", "code": "def maxScore(start, d):\n    # Create a list of all possible choices for each interval\n    choices = []\n    for s in start:\n        choices.append(s)\n        choices.append(s + d)\n    \n    # Sort the choices\n    choices.sort()\n    \n    # Calculate the maximum possible score\n    max_score = 0\n    for i in range(1, len(choices)):\n        max_score = max(max_score, choices[i] - choices[i - 1])\n    \n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    # Create a list of all possible choices for each interval\n    choices = []\n    for s in start:\n        choices.append(s)\n        choices.append(s + d)\n    \n    # Sort the choices\n    choices.sort()\n    \n    # Calculate the maximum possible score\n    max_score = 0\n    for i in range(1, len(choices)):\n        max_score = max(max_score, choices[i] - choices[i - 1])\n    \n    return max_score\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)\n```"}
{"task_id": "3526", "code": "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    flips_row = 0\n    flips_col = 0\n\n    for i in range(m):\n        for j in range(n // 2):\n            if grid[i][j] != grid[i][n - j - 1]:\n                flips_row += 1\n\n    for j in range(n):\n        for i in range(m // 2):\n            if grid[i][j] != grid[m - i - 1][j]:\n                flips_col += 1\n\n    return min(flips_row, flips_col)", "passed": true, "raw_code": "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    flips_row = 0\n    flips_col = 0\n\n    for i in range(m):\n        for j in range(n // 2):\n            if grid[i][j] != grid[i][n - j - 1]:\n                flips_row += 1\n\n    for j in range(n):\n        for i in range(m // 2):\n            if grid[i][j] != grid[m - i - 1][j]:\n                flips_col += 1\n\n    return min(flips_row, flips_col)\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    index = 1\n    unique_balls = set()\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(data[index])\n            index += 1\n            unique_balls.add(x)\n        elif query_type == 2:\n            x = int(data[index])\n            index += 1\n            unique_balls.remove(x)\n        elif query_type == 3:\n            results.append(len(unique_balls))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    index = 1\n    unique_balls = set()\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(data[index])\n            index += 1\n            unique_balls.add(x)\n        elif query_type == 2:\n            x = int(data[index])\n            index += 1\n            unique_balls.remove(x)\n        elif query_type == 3:\n            results.append(len(unique_balls))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3525", "code": "def max_energy_boost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1], dp_B[i-1] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1], dp_A[i-1] + energyDrinkB[i])\n    \n    return max(dp_A[-1], dp_B[-1])", "passed": false, "raw_code": "```python\ndef max_energy_boost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1], dp_B[i-1] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1], dp_A[i-1] + energyDrinkB[i])\n    \n    return max(dp_A[-1], dp_B[-1])\n```"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    b_sorted = sorted(b, reverse=True)\n    return sum(a[i] * b_sorted[i] for i in range(4))", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    b_sorted = sorted(b, reverse=True)\n    return sum(a[i] * b_sorted[i] for i in range(4))\n```"}
{"task_id": "abc372_d", "code": "def count_visible_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    stack = []\n    \n    for i in range(N):\n        while stack and heights[i] >= heights[stack[-1]]:\n            stack.pop()\n        \n        if stack:\n            result[i] = i - stack[-1]\n        \n        stack.append(i)\n    \n    print(' '.join(map(str, result)))\n\ncount_visible_buildings()", "passed": false, "raw_code": "```python\ndef count_visible_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    stack = []\n    \n    for i in range(N):\n        while stack and heights[i] >= heights[stack[-1]]:\n            stack.pop()\n        \n        if stack:\n            result[i] = i - stack[-1]\n        \n        stack.append(i)\n    \n    print(' '.join(map(str, result)))\n\ncount_visible_buildings()\n```"}
{"task_id": "3534", "code": "def almost_equal_pairs(nums):\n    def generate_swaps(num):\n        num_str = str(num)\n        swaps = set()\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swaps.add((num_str[i], num_str[j]))\n        return swaps\n\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = int(str(nums[i]).replace(str(nums[i])[0], str(nums[j])[0]))\n            num2 = int(str(nums[j]).replace(str(nums[j])[0], str(nums[i])[0]))\n            if num1 == nums[j] or num2 == nums[i]:\n                count += 1\n    return count", "passed": false, "raw_code": "```python\ndef almost_equal_pairs(nums):\n    def generate_swaps(num):\n        num_str = str(num)\n        swaps = set()\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swaps.add((num_str[i], num_str[j]))\n        return swaps\n\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = int(str(nums[i]).replace(str(nums[i])[0], str(nums[j])[0]))\n            num2 = int(str(nums[j]).replace(str(nums[j])[0], str(nums[i])[0]))\n            if num1 == nums[j] or num2 == nums[i]:\n                count += 1\n    return count\n```"}
{"task_id": "abc371_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    P = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n    \n    # Compute prefix sums of P\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + P[i - 1]\n    \n    # Process each query\n    for L, R in queries:\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        \n        if left_index == len(X) or X[left_index] > R:\n            result = 0\n        else:\n            result = prefix_sum[right_index] - prefix_sum[left_index]\n        \n        print(result)\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    P = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n    \n    # Compute prefix sums of P\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + P[i - 1]\n    \n    # Process each query\n    for L, R in queries:\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        \n        if left_index == len(X) or X[left_index] > R:\n            result = 0\n        else:\n            result = prefix_sum[right_index] - prefix_sum[left_index]\n        \n        print(result)\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    count = 0\n    for word in message:\n        if word in banned_set:\n            count += 1\n            if count >= 2:\n                return True\n    return False", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    count = 0\n    for word in message:\n        if word in banned_set:\n            count += 1\n            if count >= 2:\n                return True\n    return False\n```"}
{"task_id": "3496", "code": "def minTime(mountainHeight, workerTimes):\n    def canReduce(height, totalTime):\n        remainingHeight = height\n        for time in workerTimes:\n            currentWork = 0\n            multiplier = 1\n            while currentWork < totalTime and remainingHeight > 0:\n                if currentWork + time * multiplier <= totalTime:\n                    currentWork += time * multiplier\n                    remainingHeight -= 1\n                else:\n                    break\n                multiplier += 1\n        return remainingHeight == 0\n    \n    left, right = 0, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minTime(mountainHeight, workerTimes):\n    def canReduce(height, totalTime):\n        remainingHeight = height\n        for time in workerTimes:\n            currentWork = 0\n            multiplier = 1\n            while currentWork < totalTime and remainingHeight > 0:\n                if currentWork + time * multiplier <= totalTime:\n                    currentWork += time * multiplier\n                    remainingHeight -= 1\n                else:\n                    break\n                multiplier += 1\n        return remainingHeight == 0\n    \n    left, right = 0, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortest_path_after_queries(n, queries):\n    def dijkstra(graph, start, end):\n        distances = [float('inf')] * n\n        distances[start] = 0\n        priority_queue = [(0, start)]\n        \n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            if current_distance > distances[current_node]:\n                continue\n            for neighbor, weight in graph[current_node]:\n                distance = current_distance + weight\n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    result = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "passed": true, "raw_code": "```python\nimport heapq\n\ndef shortest_path_after_queries(n, queries):\n    def dijkstra(graph, start, end):\n        distances = [float('inf')] * n\n        distances[start] = 0\n        priority_queue = [(0, start)]\n        \n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            if current_distance > distances[current_node]:\n                continue\n            for neighbor, weight in graph[current_node]:\n                distance = current_distance + weight\n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    result = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```"}
{"task_id": "abc367_c", "code": "def generate_sequences(N, K, ranges):\n    def is_valid(seq):\n        return sum(seq) % K == 0\n\n    def backtrack(index, current_seq):\n        if index == N:\n            if is_valid(current_seq):\n                result.append(list(current_seq))\n            return\n\n        for num in range(1, ranges[index] + 1):\n            current_seq[index] = num\n            backtrack(index + 1, current_seq)\n\n    result = []\n    current_seq = [0] * N\n    backtrack(0, current_seq)\n    return sorted(result)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nranges = list(map(int, data[2:]))\nsequences = generate_sequences(N, K, ranges)\nfor seq in sequences:\n    print(' '.join(map(str, seq)))", "passed": true, "raw_code": "def generate_sequences(N, K, ranges):\n    def is_valid(seq):\n        return sum(seq) % K == 0\n\n    def backtrack(index, current_seq):\n        if index == N:\n            if is_valid(current_seq):\n                result.append(list(current_seq))\n            return\n\n        for num in range(1, ranges[index] + 1):\n            current_seq[index] = num\n            backtrack(index + 1, current_seq)\n\n    result = []\n    current_seq = [0] * N\n    backtrack(0, current_seq)\n    return sorted(result)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nranges = list(map(int, data[2:]))\nsequences = generate_sequences(N, K, ranges)\nfor seq in sequences:\n    print(' '.join(map(str, seq)))"}
{"task_id": "3522", "code": "def findSubarrayPowers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        sorted_subarray = sorted(subarray)\n        if subarray == sorted_subarray and all(sorted_subarray[j] == sorted_subarray[j - 1] + 1 for j in range(1, k)):\n            results[i] = max(subarray)\n    \n    return results", "passed": true, "raw_code": "```python\ndef findSubarrayPowers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        sorted_subarray = sorted(subarray)\n        if subarray == sorted_subarray and all(sorted_subarray[j] == sorted_subarray[j - 1] + 1 for j in range(1, k)):\n            results[i] = max(subarray)\n    \n    return results\n```"}
{"task_id": "abc367_d", "code": "def count_pairs(N, M, A):\n    # Compute prefix sums\n    P = [0] * (N + 1)\n    for i in range(1, N + 1):\n        P[i] = P[i - 1] + A[i - 1]\n    \n    # Total steps around the lake\n    S = P[N]\n    \n    # Hash map to count occurrences of prefix sums modulo M\n    count = {}\n    for i in range(N + 1):\n        key = (P[i] % M) * (N + 1) + (i % (N + 1))\n        count[key] = count.get(key, 0) + 1\n    \n    # Count valid pairs\n    result = 0\n    for i in range(N + 1):\n        key = (P[i] % M) * (N + 1) + (i % (N + 1))\n        result += count[key] - 1\n    \n    print(result)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function with the input data\ncount_pairs(N, M, A)", "passed": false, "raw_code": "```python\ndef count_pairs(N, M, A):\n    # Compute prefix sums\n    P = [0] * (N + 1)\n    for i in range(1, N + 1):\n        P[i] = P[i - 1] + A[i - 1]\n    \n    # Total steps around the lake\n    S = P[N]\n    \n    # Hash map to count occurrences of prefix sums modulo M\n    count = {}\n    for i in range(N + 1):\n        key = (P[i] % M) * (N + 1) + (i % (N + 1))\n        count[key] = count.get(key, 0) + 1\n    \n    # Count valid pairs\n    result = 0\n    for i in range(N + 1):\n        key = (P[i] % M) * (N + 1) + (i % (N + 1))\n        result += count[key] - 1\n    \n    print(result)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function with the input data\ncount_pairs(N, M, A)\n```"}
{"task_id": "3495", "code": "import heapq\n\ndef kthSmallestObstacle(queries, k):\n    heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(heap, (-distance, x, y))\n        \n        if len(heap) > k:\n            heapq.heappop(heap)\n        \n        if len(heap) < k:\n            results.append(-1)\n        else:\n            results.append(-heap[0][0])\n    \n    return results", "passed": true, "raw_code": "```python\nimport heapq\n\ndef kthSmallestObstacle(queries, k):\n    heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(heap, (-distance, x, y))\n        \n        if len(heap) > k:\n            heapq.heappop(heap)\n        \n        if len(heap) < k:\n            results.append(-1)\n        else:\n            results.append(-heap[0][0])\n    \n    return results\n```"}
{"task_id": "abc372_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    queries = [(int(data[3 + 2 * i]), data[4 + 2 * i]) for i in range(Q)]\n\n    def count_ABC(s):\n        return s.count('ABC')\n\n    result = []\n    current_count = count_ABC(S)\n    result.append(current_count)\n\n    for x, c in queries:\n        if S[x - 1] != c:\n            current_count += count_ABC(S[:x - 1] + c + S[x:]) - count_ABC(S[:x - 1] + S[x - 1] + S[x:])\n        S = S[:x - 1] + c + S[x:]\n        result.append(current_count)\n\n    for r in result[1:]:\n        print(r)\n\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    queries = [(int(data[3 + 2 * i]), data[4 + 2 * i]) for i in range(Q)]\n\n    def count_ABC(s):\n        return s.count('ABC')\n\n    result = []\n    current_count = count_ABC(S)\n    result.append(current_count)\n\n    for x, c in queries:\n        if S[x - 1] != c:\n            current_count += count_ABC(S[:x - 1] + c + S[x:]) - count_ABC(S[:x - 1] + S[x - 1] + S[x:])\n        S = S[:x - 1] + c + S[x:]\n        result.append(current_count)\n\n    for r in result[1:]:\n        print(r)\n\nmain()"}
{"task_id": "3579", "code": "def maxNumber(nums):\n    # Convert each number to its binary representation without the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their lengths\n    # If two binary strings have the same length, sort them lexicographically in descending order\n    binary_nums.sort(key=lambda x: (-len(x), x), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "passed": false, "raw_code": "```python\ndef maxNumber(nums):\n    # Convert each number to its binary representation without the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their lengths\n    # If two binary strings have the same length, sort them lexicographically in descending order\n    binary_nums.sort(key=lambda x: (-len(x), x), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    grid = [[True] * W for _ in range(H)]\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C]:\n            grid[R][C] = False\n        else:\n            # Destroy walls in the four directions\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                r, c = R, C\n                while 0 <= r < H and 0 <= c < W:\n                    if grid[r][c]:\n                        grid[r][c] = False\n                        break\n                    r += dr\n                    c += dc\n    \n    remaining_walls = sum(row.count(True) for row in grid)\n    print(remaining_walls)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    grid = [[True] * W for _ in range(H)]\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C]:\n            grid[R][C] = False\n        else:\n            # Destroy walls in the four directions\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                r, c = R, C\n                while 0 <= r < H and 0 <= c < W:\n                    if grid[r][c]:\n                        grid[r][c] = False\n                        break\n                    r += dr\n                    c += dc\n    \n    remaining_walls = sum(row.count(True) for row in grid)\n    print(remaining_walls)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_arrays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    # Sort array A\n    A.sort()\n    \n    # Compute prefix sums of array B\n    prefix_sums_B = [0] * (N + 1)\n    for i in range(N):\n        prefix_sums_B[i+1] = prefix_sums_B[i] + B[i]\n    \n    # Find the maximum sum of A[i] + B[j]\n    max_sum = float('-inf')\n    for i in range(N):\n        j = N - 1 - i\n        if j >= 0:\n            max_sum = max(max_sum, A[i] + prefix_sums_B[j+1])\n    \n    print(max_sum)\n\n# Call the function to execute\nmax_sum_of_arrays()", "passed": false, "raw_code": "```python\ndef max_sum_of_arrays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    # Sort array A\n    A.sort()\n    \n    # Compute prefix sums of array B\n    prefix_sums_B = [0] * (N + 1)\n    for i in range(N):\n        prefix_sums_B[i+1] = prefix_sums_B[i] + B[i]\n    \n    # Find the maximum sum of A[i] + B[j]\n    max_sum = float('-inf')\n    for i in range(N):\n        j = N - 1 - i\n        if j >= 0:\n            max_sum = max(max_sum, A[i] + prefix_sums_B[j+1])\n    \n    print(max_sum)\n\n# Call the function to execute\nmax_sum_of_arrays()\n```"}
{"task_id": "3573", "code": "from collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    n, m = len(word1), len(word2)\n    if m > n:\n        return 0\n    \n    target_counter = Counter(word2)\n    window_counter = Counter()\n    \n    result = 0\n    left = 0\n    \n    for right in range(n):\n        window_counter[word1[right]] += 1\n        \n        while window_counter[word1[left]] > target_counter.get(word1[left], 0):\n            window_counter[word1[left]] -= 1\n            left += 1\n        \n        if right - left + 1 >= m and window_counter == target_counter:\n            result += n - right\n    \n    return result", "passed": false, "raw_code": "```python\nfrom collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    n, m = len(word1), len(word2)\n    if m > n:\n        return 0\n    \n    target_counter = Counter(word2)\n    window_counter = Counter()\n    \n    result = 0\n    left = 0\n    \n    for right in range(n):\n        window_counter[word1[right]] += 1\n        \n        while window_counter[word1[left]] > target_counter.get(word1[left], 0):\n            window_counter[word1[left]] -= 1\n            left += 1\n        \n        if right - left + 1 >= m and window_counter == target_counter:\n            result += n - right\n    \n    return result\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    A.sort()\n    \n    if sum(A) <= M:\n        return \"infinite\"\n    \n    left, right = 0, max(A)\n    while left < right:\n        mid = (left + right + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    A.sort()\n    \n    if sum(A) <= M:\n        return \"infinite\"\n    \n    left, right = 0, max(A)\n    while left < right:\n        mid = (left + right + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    wins = 0\n    last_move = None\n    \n    for move in S:\n        if move == 'R':\n            if last_move != 'P':\n                wins += 1\n                last_move = 'P'\n            else:\n                last_move = 'R'\n        elif move == 'P':\n            if last_move != 'S':\n                wins += 1\n                last_move = 'S'\n            else:\n                last_move = 'P'\n        elif move == 'S':\n            if last_move != 'R':\n                wins += 1\n                last_move = 'R'\n            else:\n                last_move = 'S'\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Output the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    wins = 0\n    last_move = None\n    \n    for move in S:\n        if move == 'R':\n            if last_move != 'P':\n                wins += 1\n                last_move = 'P'\n            else:\n                last_move = 'R'\n        elif move == 'P':\n            if last_move != 'S':\n                wins += 1\n                last_move = 'S'\n            else:\n                last_move = 'P'\n        elif move == 'S':\n            if last_move != 'R':\n                wins += 1\n                last_move = 'R'\n            else:\n                last_move = 'S'\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Output the result\nprint(max_wins(N, S))\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    # Sort the array to try assigning the smallest heights first\n    maximumHeight.sort()\n    \n    # Initialize variables\n    n = len(maximumHeight)\n    current_height = 0\n    total_sum = 0\n    \n    # Iterate through the sorted array\n    for i in range(n):\n        # Check if the current height can be assigned without exceeding maximumHeight[i]\n        if current_height + 1 > maximumHeight[i]:\n            return -1\n        # Assign the next unique height\n        current_height += 1\n        # Add the assigned height to the total sum\n        total_sum += current_height\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    # Sort the array to try assigning the smallest heights first\n    maximumHeight.sort()\n    \n    # Initialize variables\n    n = len(maximumHeight)\n    current_height = 0\n    total_sum = 0\n    \n    # Iterate through the sorted array\n    for i in range(n):\n        # Check if the current height can be assigned without exceeding maximumHeight[i]\n        if current_height + 1 > maximumHeight[i]:\n            return -1\n        # Assign the next unique height\n        current_height += 1\n        # Add the assigned height to the total sum\n        total_sum += current_height\n    \n    return total_sum\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    healths = list(map(int, data[1:]))\n    \n    T = 0\n    while healths:\n        T += 1\n        if T % 3 == 0:\n            healths[0] -= 3\n        else:\n            healths[0] -= 1\n        \n        if healths[0] <= 0:\n            healths.pop(0)\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    healths = list(map(int, data[1:]))\n    \n    T = 0\n    while healths:\n        T += 1\n        if T % 3 == 0:\n            healths[0] -= 3\n        else:\n            healths[0] -= 1\n        \n        if healths[0] <= 0:\n            healths.pop(0)\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strengths\n    A.sort()\n    \n    total_points = 0\n    defeated_count = 0\n    \n    for strength in A:\n        # Calculate the experience points if defeated\n        points = strength\n        \n        # Add the experience points to the total\n        total_points += points\n        \n        # Increment the count of defeated monsters\n        defeated_count += 1\n        \n        # If the count of defeated monsters is even, add the strength again\n        if defeated_count % 2 == 0:\n            total_points += strength\n    \n    print(total_points)\n\n# Call the function\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strengths\n    A.sort()\n    \n    total_points = 0\n    defeated_count = 0\n    \n    for strength in A:\n        # Calculate the experience points if defeated\n        points = strength\n        \n        # Add the experience points to the total\n        total_points += points\n        \n        # Increment the count of defeated monsters\n        defeated_count += 1\n        \n        # If the count of defeated monsters is even, add the strength again\n        if defeated_count % 2 == 0:\n            total_points += strength\n    \n    print(total_points)\n\n# Call the function\nmax_experience_points()\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    return dp[n-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    return dp[n-1]\n```"}
{"task_id": "3559", "code": "def minimumNumberOfStrings(words, target):\n    from collections import defaultdict\n    import math\n    \n    # Create a dictionary to store all possible prefixes of the words\n    prefixes = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefixes[word[:i]].append(word)\n    \n    # Initialize the DP array\n    dp = [math.inf] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill the DP array\n    for i in range(1, len(target) + 1):\n        for prefix in prefixes:\n            if target[i - len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    # Return the result\n    return dp[len(target)] if dp[len(target)] != math.inf else -1", "passed": false, "raw_code": "```python\ndef minimumNumberOfStrings(words, target):\n    from collections import defaultdict\n    import math\n    \n    # Create a dictionary to store all possible prefixes of the words\n    prefixes = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefixes[word[:i]].append(word)\n    \n    # Initialize the DP array\n    dp = [math.inf] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill the DP array\n    for i in range(1, len(target) + 1):\n        for prefix in prefixes:\n            if target[i - len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    # Return the result\n    return dp[len(target)] if dp[len(target)] != math.inf else -1\n```"}
{"task_id": "3584", "code": "def smallestSequenceIndices(word1, word2):\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    indices = []\n    \n    while i < n and j < m:\n        if word1[i] == word2[j]:\n            indices.append(i)\n            i += 1\n            j += 1\n        else:\n            if len(indices) > 0 and indices[-1] != i - 1:\n                break\n            indices.append(i)\n            i += 1\n    \n    if j < m or (len(indices) > 0 and indices[-1] != i - 1):\n        return []\n    \n    return indices", "passed": false, "raw_code": "```python\ndef smallestSequenceIndices(word1, word2):\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    indices = []\n    \n    while i < n and j < m:\n        if word1[i] == word2[j]:\n            indices.append(i)\n            i += 1\n            j += 1\n        else:\n            if len(indices) > 0 and indices[-1] != i - 1:\n                break\n            indices.append(i)\n            i += 1\n    \n    if j < m or (len(indices) > 0 and indices[-1] != i - 1):\n        return []\n    \n    return indices\n```"}
{"task_id": "arc181_a", "code": "def count_inversions(arr):\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        \n        inversions = count_inversions(P)\n        results.append(str(inversions))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef count_inversions(arr):\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        \n        inversions = count_inversions(P)\n        results.append(str(inversions))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc370_c", "code": "def generate_array(S, T):\n    X = []\n    while S != T:\n        for i in range(len(S)):\n            if S[i] != T[i]:\n                S = S[:i] + T[i] + S[i+1:]\n                break\n        X.append(S)\n    return len(X), X\n\nimport sys\ninput = sys.stdin.read\nS, T = input().split()\nM, X = generate_array(S, T)\nprint(M)\nfor s in X:\n    print(s)\n", "passed": false, "raw_code": "def generate_array(S, T):\n    X = []\n    while S != T:\n        for i in range(len(S)):\n            if S[i] != T[i]:\n                S = S[:i] + T[i] + S[i+1:]\n                break\n        X.append(S)\n    return len(X), X\n\nimport sys\ninput = sys.stdin.read\nS, T = input().split()\nM, X = generate_array(S, T)\nprint(M)\nfor s in X:\n    print(s)\n"}
{"task_id": "3558", "code": "def hasPath(grid, health):\n    def dfs(x, y, health):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or health <= 0:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        if dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp):\n            return True\n        \n        grid[x][y] = temp  # Unmark as visited\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef hasPath(grid, health):\n    def dfs(x, y, health):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or health <= 0:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        if dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp):\n            return True\n        \n        grid[x][y] = temp  # Unmark as visited\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_count = 0\n    \n    for l in range(N):\n        diff_map = {}\n        common_difference = None\n        \n        for r in range(l, N):\n            if r > l:\n                current_diff = A[r] - A[r - 1]\n                \n                if common_difference is None:\n                    common_difference = current_diff\n                elif current_diff != common_difference:\n                    break\n                \n                if current_diff in diff_map:\n                    total_count += diff_map[current_diff]\n                \n                diff_map[current_diff] = diff_map.get(current_diff, 0) + 1\n            else:\n                total_count += 1\n    \n    print(total_count)\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_count = 0\n    \n    for l in range(N):\n        diff_map = {}\n        common_difference = None\n        \n        for r in range(l, N):\n            if r > l:\n                current_diff = A[r] - A[r - 1]\n                \n                if common_difference is None:\n                    common_difference = current_diff\n                elif current_diff != common_difference:\n                    break\n                \n                if current_diff in diff_map:\n                    total_count += diff_map[current_diff]\n                \n                diff_map[current_diff] = diff_map.get(current_diff, 0) + 1\n            else:\n                total_count += 1\n    \n    print(total_count)\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "arc183_a", "code": "import math\nfrom itertools import permutations\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\ndef combinations(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef generate_sequences(N, K):\n    elements = [i for i in range(1, N + 1)] * K\n    all_permutations = set(permutations(elements))\n    sorted_permutations = sorted(all_permutations)\n    return sorted_permutations\n\ndef find_kth_sequence(N, K, k):\n    elements = [i for i in range(1, N + 1)] * K\n    all_permutations = list(set(permutations(elements)))\n    sorted_permutations = sorted(all_permutations)\n    return sorted_permutations[k - 1]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    # Calculate the total number of good sequences\n    total_sequences = combinations(N * K, K)\n    \n    # Determine the target index\n    target_index = math.floor((total_sequences + 1) / 2)\n    \n    # Generate and find the k-th sequence\n    sequence = find_kth_sequence(N, K, target_index)\n    \n    # Print the sequence\n    print(' '.join(map(str, sequence)))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport math\nfrom itertools import permutations\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\ndef combinations(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef generate_sequences(N, K):\n    elements = [i for i in range(1, N + 1)] * K\n    all_permutations = set(permutations(elements))\n    sorted_permutations = sorted(all_permutations)\n    return sorted_permutations\n\ndef find_kth_sequence(N, K, k):\n    elements = [i for i in range(1, N + 1)] * K\n    all_permutations = list(set(permutations(elements)))\n    sorted_permutations = sorted(all_permutations)\n    return sorted_permutations[k - 1]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    # Calculate the total number of good sequences\n    total_sequences = combinations(N * K, K)\n    \n    # Determine the target index\n    target_index = math.floor((total_sequences + 1) / 2)\n    \n    # Generate and find the k-th sequence\n    sequence = find_kth_sequence(N, K, target_index)\n    \n    # Print the sequence\n    print(' '.join(map(str, sequence)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc366_d", "code": "d", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    N = int(data[0])\n    \n    # Read the 3D array A\n    A = []\n    index = 1\n    for _ in range(N):\n        row = []\n        for _ in range(N):\n            row.extend(map(int, data[index:index+N]))\n            index += N\n        A.append(row)\n    \n    # Read Q\n    Q = int(data[index])\n    index += 1\n    \n    # Read the queries\n    queries = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        queries.append((Lx, Rx, Ly, Ry, Lz, Rz))\n        index += 6\n    \n    # Create the 4D prefix sum array\n    prefix_sum = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix_sum[x][y][z] = A[x-1][y-1][z-1] + prefix_sum[x-1][y][z] + prefix_sum[x][y-1][z] + prefix_sum[x][y][z-1] - prefix_sum[x-1][y-1][z] - prefix_sum[x-1][y][z-1] - prefix_sum[x][y-1][z-1] + prefix_sum[x-1][y-1][z-1]\n    \n    # Process each query\n    for Lx, Rx, Ly, Ry, Lz, Rz in queries:\n        result = prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx-1][Ry][Rz] - prefix_sum[Rx][Ly-1][Rz] - prefix_sum[Rx][Ry][Lz-1] + prefix_sum[Lx-1][Ly-1][Rz] + prefix_sum[Lx-1][Ry][Lz-1] + prefix_sum[Rx][Ly-1][Lz-1] - prefix_sum[Lx-1][Ly-1][Lz-1]\n        print(result)\n\nprocess_queries()"}
{"task_id": "abc371_c", "code": "def min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    M_G = int(data[index])\n    index += 1\n    edges_G = []\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        edges_G.append((min(u, v), max(u, v)))\n        index += 2\n\n    M_H = int(data[index])\n    index += 1\n    edges_H = []\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        edges_H.append((min(a, b), max(a, b)))\n        index += 2\n\n    A = []\n    for i in range(1, N):\n        row = []\n        for j in range(i + 1, N):\n            row.append(int(data[index]))\n            index += 1\n        A.append(row)\n\n    # Sort edges for easier comparison\n    edges_G.sort()\n    edges_H.sort()\n\n    # Initialize DP table\n    dp = [float('inf')] * (1 << len(edges_G))\n    dp[0] = 0\n\n    for mask in range(1 << len(edges_G)):\n        current_edges = []\n        for i in range(len(edges_G)):\n            if mask & (1 << i):\n                current_edges.append(edges_G[i])\n\n        for i in range(len(current_edges)):\n            u, v = current_edges[i]\n            for j in range(len(edges_H)):\n                if not (mask & (1 << j)) and (u == edges_H[j][0] and v == edges_H[j][1]):\n                    new_mask = mask | (1 << j)\n                    dp[new_mask] = min(dp[new_mask], dp[mask])\n                elif not (mask & (1 << j)) and (v == edges_H[j][0] and u == edges_H[j][1]):\n                    new_mask = mask | (1 << j)\n                    dp[new_mask] = min(dp[new_mask], dp[mask])\n\n    print(min(dp))\n\n# Call the function to execute\nmin_cost_to_isomorphic()", "passed": false, "raw_code": "```python\ndef min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    M_G = int(data[index])\n    index += 1\n    edges_G = []\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        edges_G.append((min(u, v), max(u, v)))\n        index += 2\n\n    M_H = int(data[index])\n    index += 1\n    edges_H = []\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        edges_H.append((min(a, b), max(a, b)))\n        index += 2\n\n    A = []\n    for i in range(1, N):\n        row = []\n        for j in range(i + 1, N):\n            row.append(int(data[index]))\n            index += 1\n        A.append(row)\n\n    # Sort edges for easier comparison\n    edges_G.sort()\n    edges_H.sort()\n\n    # Initialize DP table\n    dp = [float('inf')] * (1 << len(edges_G))\n    dp[0] = 0\n\n    for mask in range(1 << len(edges_G)):\n        current_edges = []\n        for i in range(len(edges_G)):\n            if mask & (1 << i):\n                current_edges.append(edges_G[i])\n\n        for i in range(len(current_edges)):\n            u, v = current_edges[i]\n            for j in range(len(edges_H)):\n                if not (mask & (1 << j)) and (u == edges_H[j][0] and v == edges_H[j][1]):\n                    new_mask = mask | (1 << j)\n                    dp[new_mask] = min(dp[new_mask], dp[mask])\n                elif not (mask & (1 << j)) and (v == edges_H[j][0] and u == edges_H[j][1]):\n                    new_mask = mask | (1 << j)\n                    dp[new_mask] = min(dp[new_mask], dp[mask])\n\n    print(min(dp))\n\n# Call the function to execute\nmin_cost_to_isomorphic()\n```"}
{"task_id": "3570", "code": "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            else:\n                consonant_count += 1\n            \n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            else:\n                consonant_count += 1\n            \n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count\n```"}
{"final_accuracy": "24.32%"}
