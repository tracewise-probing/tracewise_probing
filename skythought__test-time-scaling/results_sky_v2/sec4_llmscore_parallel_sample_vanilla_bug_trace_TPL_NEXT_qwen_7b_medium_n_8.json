{"difficulty": "medium", "num_threads": 32, "temperature": 0.7, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_NEXT_qwen_7b_medium_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```"}
{"task_id": "abc373_c", "code": "def max_sum(A, B):\n    max_A = max(A)\n    max_B = max(B)\n    return max_A + max_B\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:N+1]))\nB = list(map(int, data[N+1:]))\n\n# Calculate and print the result\nprint(max_sum(A, B))", "passed": true, "raw_code": "```python\ndef max_sum(A, B):\n    max_A = max(A)\n    max_B = max(B)\n    return max_A + max_B\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:N+1]))\nB = list(map(int, data[N+1:]))\n\n# Calculate and print the result\nprint(max_sum(A, B))\n```"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    b.sort(reverse=True)\n    return sum(x * y for x, y in zip(a, b[:4]))", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    b.sort(reverse=True)\n    return sum(x * y for x, y in zip(a, b[:4]))\n```"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    return d", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    return d\n```"}
{"task_id": "3496", "code": "def minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduceHeight(maxTime):\n        height = mountainHeight\n        for time in workerTimes:\n            x = 1\n            while time * (x * (x + 1) // 2) <= maxTime:\n                if height <= 0:\n                    break\n                height -= 1\n                x += 1\n        return height <= 0\n\n    left, right = 0, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduceHeight(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduceHeight(maxTime):\n        height = mountainHeight\n        for time in workerTimes:\n            x = 1\n            while time * (x * (x + 1) // 2) <= maxTime:\n                if height <= 0:\n                    break\n                height -= 1\n                x += 1\n        return height <= 0\n\n    left, right = 0, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduceHeight(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3540", "code": "def hash_string(s, k):\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s, k):\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = energyDrinkA[0]\n    dp_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B), max(dp_B + energyDrinkB[i], dp_A)\n    \n    return max(dp_A, dp_B)", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = energyDrinkA[0]\n    dp_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B), max(dp_B + energyDrinkB[i], dp_A)\n    \n    return max(dp_A, dp_B)\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            results.append(len(bag))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            results.append(len(bag))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3522", "code": "def findSubarrayPowers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if all(subarray[j] <= subarray[j + 1] for j in range(k - 1)) and len(set(subarray)) == k:\n            results[i] = max(subarray)\n    \n    return results", "passed": false, "raw_code": "```python\ndef findSubarrayPowers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if all(subarray[j] <= subarray[j + 1] for j in range(k - 1)) and len(set(subarray)) == k:\n            results[i] = max(subarray)\n    \n    return results\n```"}
{"task_id": "3526", "code": "def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_needed(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_needed(row) for row in grid)\n    col_flips = sum(flips_needed(col) for col in zip(*grid))\n    \n    return min(row_flips, col_flips)", "passed": true, "raw_code": "```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_needed(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_needed(row) for row in grid)\n    col_flips = sum(flips_needed(col) for col in zip(*grid))\n    \n    return min(row_flips, col_flips)\n```"}
{"task_id": "abc371_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read number of villages\n    N = int(data[0])\n    \n    # Read village positions\n    X = list(map(int, data[1:N+1]))\n    \n    # Read number of villagers in each village\n    P = list(map(int, data[N+1:2*N+1]))\n    \n    # Read number of queries\n    Q = int(data[2*N+1])\n    \n    # Read queries\n    queries = []\n    for i in range(Q):\n        L = int(data[2*N+2 + 2*i])\n        R = int(data[2*N+3 + 2*i])\n        queries.append((L, R))\n    \n    # Build prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for i in range(N):\n        current_sum += P[i]\n        prefix_sum.append(current_sum)\n    \n    # Process each query\n    for L, R in queries:\n        # Find indices of L and R in the sorted list X\n        idx_L = bisect_left(X, L)\n        idx_R = bisect_right(X, R)\n        \n        # Calculate the result using prefix sum\n        result = prefix_sum[idx_R] - prefix_sum[idx_L]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read number of villages\n    N = int(data[0])\n    \n    # Read village positions\n    X = list(map(int, data[1:N+1]))\n    \n    # Read number of villagers in each village\n    P = list(map(int, data[N+1:2*N+1]))\n    \n    # Read number of queries\n    Q = int(data[2*N+1])\n    \n    # Read queries\n    queries = []\n    for i in range(Q):\n        L = int(data[2*N+2 + 2*i])\n        R = int(data[2*N+3 + 2*i])\n        queries.append((L, R))\n    \n    # Build prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for i in range(N):\n        current_sum += P[i]\n        prefix_sum.append(current_sum)\n    \n    # Process each query\n    for L, R in queries:\n        # Find indices of L and R in the sorted list X\n        idx_L = bisect_left(X, L)\n        idx_R = bisect_right(X, R)\n        \n        # Calculate the result using prefix sum\n        result = prefix_sum[idx_R] - prefix_sum[idx_L]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc372_d", "code": "def count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            if max(heights[i:j]) > heights[j]:\n                break\n            result[i] += 1\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()", "passed": false, "raw_code": "```python\ndef count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            if max(heights[i:j]) > heights[j]:\n                break\n            result[i] += 1\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()\n```"}
{"task_id": "3534", "code": "def almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            s1, s2 = str(nums[i]), str(nums[j])\n            diff = 0\n            for c1, c2 in zip(s1, s2):\n                if c1 != c2:\n                    diff += 1\n                    if diff > 2:\n                        break\n            if diff <= 2:\n                count += 1\n    return count", "passed": false, "raw_code": "```python\ndef almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            s1, s2 = str(nums[i]), str(nums[j])\n            diff = 0\n            for c1, c2 in zip(s1, s2):\n                if c1 != c2:\n                    diff += 1\n                    if diff > 2:\n                        break\n            if diff <= 2:\n                count += 1\n    return count\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    # Lengths of the words\n    m, n = len(word1), len(word2)\n    \n    # Counters for word2 and the current window in word1\n    target_counter = Counter(word2)\n    window_counter = Counter()\n    \n    # Initialize variables\n    i, j = 0, 0\n    result = 0\n    \n    while j < m:\n        # Add the current character to the window counter\n        window_counter[word1[j]] += 1\n        \n        # Check if the current window matches the prefix of word2\n        while i <= j and window_counter >= target_counter:\n            # All substrings starting from i to j are valid\n            result += m - j\n        \n            # Shrink the window from the left\n            window_counter[word1[i]] -= 1\n            if window_counter[word1[i]] == 0:\n                del window_counter[word1[i]]\n            i += 1\n        \n        j += 1\n    \n    return result", "passed": true, "raw_code": "```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    # Lengths of the words\n    m, n = len(word1), len(word2)\n    \n    # Counters for word2 and the current window in word1\n    target_counter = Counter(word2)\n    window_counter = Counter()\n    \n    # Initialize variables\n    i, j = 0, 0\n    result = 0\n    \n    while j < m:\n        # Add the current character to the window counter\n        window_counter[word1[j]] += 1\n        \n        # Check if the current window matches the prefix of word2\n        while i <= j and window_counter >= target_counter:\n            # All substrings starting from i to j are valid\n            result += m - j\n        \n            # Shrink the window from the left\n            window_counter[word1[i]] -= 1\n            if window_counter[word1[i]] == 0:\n                del window_counter[word1[i]]\n            i += 1\n        \n        j += 1\n    \n    return result\n```"}
{"task_id": "3559", "code": "def minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Step 1: Preprocess words into a dictionary of prefixes\n    prefix_dict = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefix_dict[i].append(word[:i])\n    \n    # Step 2: Initialize DP array\n    dp = [float('inf')] * len(target)\n    dp[0] = 0\n    \n    # Step 3: Fill DP array\n    for i in range(len(target)):\n        for j in range(1, i + 2):\n            if target[i - j + 1:i + 1] in prefix_dict[j]:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n    \n    # Step 4: Return result\n    return dp[-1] if dp[-1] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Step 1: Preprocess words into a dictionary of prefixes\n    prefix_dict = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefix_dict[i].append(word[:i])\n    \n    # Step 2: Initialize DP array\n    dp = [float('inf')] * len(target)\n    dp[0] = 0\n    \n    # Step 3: Fill DP array\n    for i in range(len(target)):\n        for j in range(1, i + 2):\n            if target[i - j + 1:i + 1] in prefix_dict[j]:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n    \n    # Step 4: Return result\n    return dp[-1] if dp[-1] != float('inf') else -1\n```"}
{"task_id": "abc367_d", "code": "def find_pairs(N, M, A):\n    # Step 1: Calculate prefix sums\n    prefix_sums = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + A[i - 1]\n    \n    # Step 2: Dictionary to store the frequency of remainders\n    remainder_count = {}\n    for prefix_sum in prefix_sums:\n        remainder = prefix_sum % M\n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n    \n    # Step 3: Calculate the number of valid pairs\n    result = 0\n    for count in remainder_count.values():\n        result += count * (count - 1) // 2\n    \n    return result\n\n# Example usage\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nprint(find_pairs(N, M, A))", "passed": false, "raw_code": "```python\ndef find_pairs(N, M, A):\n    # Step 1: Calculate prefix sums\n    prefix_sums = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + A[i - 1]\n    \n    # Step 2: Dictionary to store the frequency of remainders\n    remainder_count = {}\n    for prefix_sum in prefix_sums:\n        remainder = prefix_sum % M\n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n    \n    # Step 3: Calculate the number of valid pairs\n    result = 0\n    for count in remainder_count.values():\n        result += count * (count - 1) // 2\n    \n    return result\n\n# Example usage\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nprint(find_pairs(N, M, A))\n```"}
{"task_id": "3579", "code": "def largestNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary numbers in a custom order that maximizes the concatenated result\n    binary_nums.sort(key=lambda x: x*3, reverse=True)\n    \n    # Concatenate the sorted binary numbers\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    result = int(concatenated_binary, 2)\n    \n    return result", "passed": true, "raw_code": "```python\ndef largestNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary numbers in a custom order that maximizes the concatenated result\n    binary_nums.sort(key=lambda x: x*3, reverse=True)\n    \n    # Concatenate the sorted binary numbers\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    result = int(concatenated_binary, 2)\n    \n    return result\n```"}
{"task_id": "3510", "code": "def maxTowerSum(maximumHeight):\n    n = len(maximumHeight)\n    sorted_heights = sorted(maximumHeight)\n    \n    # Check if it's possible to assign unique heights\n    for i in range(n):\n        if sorted_heights[i] < i + 1:\n            return -1\n    \n    # Calculate the maximum possible sum\n    max_sum = n * (n + 1) // 2\n    for i in range(n):\n        max_sum += sorted_heights[i] - (i + 1)\n    \n    return max_sum", "passed": false, "raw_code": "```python\ndef maxTowerSum(maximumHeight):\n    n = len(maximumHeight)\n    sorted_heights = sorted(maximumHeight)\n    \n    # Check if it's possible to assign unique heights\n    for i in range(n):\n        if sorted_heights[i] < i + 1:\n            return -1\n    \n    # Calculate the maximum possible sum\n    max_sum = n * (n + 1) // 2\n    for i in range(n):\n        max_sum += sorted_heights[i] - (i + 1)\n    \n    return max_sum\n```"}
{"task_id": "abc367_c", "code": "def generate_sequences(N, K, R, current_sequence, current_sum):\n    if len(current_sequence) == N:\n        if current_sum % K == 0:\n            print(\" \".join(map(str, current_sequence)))\n        return\n    \n    for i in range(1, R[len(current_sequence)] + 1):\n        generate_sequences(N, K, R, current_sequence + [i], current_sum + i)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    \n    generate_sequences(N, K, R, [], 0)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef generate_sequences(N, K, R, current_sequence, current_sum):\n    if len(current_sequence) == N:\n        if current_sum % K == 0:\n            print(\" \".join(map(str, current_sequence)))\n        return\n    \n    for i in range(1, R[len(current_sequence)] + 1):\n        generate_sequences(N, K, R, current_sequence + [i], current_sum + i)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    \n    generate_sequences(N, K, R, [], 0)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions(N, A):\n    count = 0\n    for l in range(N):\n        diff_dict = {}\n        for r in range(l, N):\n            if r > l:\n                diff = A[r] - A[r-1]\n                if diff not in diff_dict:\n                    diff_dict[diff] = 0\n                diff_dict[diff] += 1\n                if len(diff_dict) > 1:\n                    break\n            count += 1\n    return count\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\nprint(count_arithmetic_progressions(N, A))", "passed": false, "raw_code": "def count_arithmetic_progressions(N, A):\n    count = 0\n    for l in range(N):\n        diff_dict = {}\n        for r in range(l, N):\n            if r > l:\n                diff = A[r] - A[r-1]\n                if diff not in diff_dict:\n                    diff_dict[diff] = 0\n                diff_dict[diff] += 1\n                if len(diff_dict) > 1:\n                    break\n            count += 1\n    return count\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\nprint(count_arithmetic_progressions(N, A))"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    # Initialize the count of wins\n    wins = 0\n    \n    # Iterate through Aoki's moves\n    for i in range(N):\n        if S[i] == 'R':\n            # If Aoki plays Rock, Takahashi can play Paper or Scissors\n            wins += 1\n        elif S[i] == 'P':\n            # If Aoki plays Paper, Takahashi can play Scissors or Rock\n            wins += 1\n        elif S[i] == 'S':\n            # If Aoki plays Scissors, Takahashi can play Rock or Paper\n            wins += 1\n    \n    # Since Takahashi's moves must alternate, we need to ensure he doesn't lose any games\n    # We can achieve this by alternating between two choices that beat or tie Aoki's moves\n    # This ensures that Takahashi never loses and maximizes the number of wins\n    \n    return min(wins // 2 + wins % 2, N)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    # Initialize the count of wins\n    wins = 0\n    \n    # Iterate through Aoki's moves\n    for i in range(N):\n        if S[i] == 'R':\n            # If Aoki plays Rock, Takahashi can play Paper or Scissors\n            wins += 1\n        elif S[i] == 'P':\n            # If Aoki plays Paper, Takahashi can play Scissors or Rock\n            wins += 1\n        elif S[i] == 'S':\n            # If Aoki plays Scissors, Takahashi can play Rock or Paper\n            wins += 1\n    \n    # Since Takahashi's moves must alternate, we need to ensure he doesn't lose any games\n    # We can achieve this by alternating between two choices that beat or tie Aoki's moves\n    # This ensures that Takahashi never loses and maximizes the number of wins\n    \n    return min(wins // 2 + wins % 2, N)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 3\n                    break\n        else:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 1\n                    break\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 3\n                    break\n        else:\n            for i in range(N):\n                if H[i] > 0:\n                    H[i] -= 1\n                    break\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "3558", "code": "def can_reach_final_cell(grid, health):\n    def dfs(x, y, health):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or health <= 0:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return health >= 1\n        temp = grid[x][y]\n        grid[x][y] = 1\n        result = dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp)\n        grid[x][y] = temp\n        return result\n\n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef can_reach_final_cell(grid, health):\n    def dfs(x, y, health):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or health <= 0:\n            return False\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\n            return health >= 1\n        temp = grid[x][y]\n        grid[x][y] = 1\n        result = dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp)\n        grid[x][y] = temp\n        return result\n\n    return dfs(0, 0, health)\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[n-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[n-1]\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    \n    walls = set((i, j) for i in range(H) for j in range(W))\n    \n    index = 3\n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if (R, C) in walls:\n            walls.remove((R, C))\n        else:\n            # Find the first wall above\n            i = R - 1\n            while i >= 0 and (i, C) not in walls:\n                i -= 1\n            if i >= 0:\n                walls.remove((i, C))\n            \n            # Find the first wall below\n            i = R + 1\n            while i < H and (i, C) not in walls:\n                i += 1\n            if i < H:\n                walls.remove((i, C))\n            \n            # Find the first wall to the left\n            j = C - 1\n            while j >= 0 and (R, j) not in walls:\n                j -= 1\n            if j >= 0:\n                walls.remove((R, j))\n            \n            # Find the first wall to the right\n            j = C + 1\n            while j < W and (R, j) not in walls:\n                j += 1\n            if j < W:\n                walls.remove((R, j))\n    \n    print(len(walls))\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    \n    walls = set((i, j) for i in range(H) for j in range(W))\n    \n    index = 3\n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if (R, C) in walls:\n            walls.remove((R, C))\n        else:\n            # Find the first wall above\n            i = R - 1\n            while i >= 0 and (i, C) not in walls:\n                i -= 1\n            if i >= 0:\n                walls.remove((i, C))\n            \n            # Find the first wall below\n            i = R + 1\n            while i < H and (i, C) not in walls:\n                i += 1\n            if i < H:\n                walls.remove((i, C))\n            \n            # Find the first wall to the left\n            j = C - 1\n            while j >= 0 and (R, j) not in walls:\n                j -= 1\n            if j >= 0:\n                walls.remove((R, j))\n            \n            # Find the first wall to the right\n            j = C + 1\n            while j < W and (R, j) not in walls:\n                j += 1\n            if j < W:\n                walls.remove((R, j))\n    \n    print(len(walls))\n\nmain()\n```"}
{"task_id": "3584", "code": "def smallest_sequence(word1, word2):\n    n1, n2 = len(word1), len(word2)\n    mismatches = []\n    \n    # Identify all mismatched positions\n    for i in range(n2):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n    \n    # If there are more than one mismatch, it's impossible to make them almost equal\n    if len(mismatches) > 1:\n        return []\n    \n    # If there are no mismatches, no changes are needed\n    if len(mismatches) == 0:\n        return list(range(n2))\n    \n    # There is exactly one mismatch, check if changing it makes them almost equal\n    i = mismatches[0]\n    for j in range(n1):\n        if word1[j] == word2[i] and j != i:\n            return [j] + list(range(i + 1, n2))\n    \n    return []", "passed": false, "raw_code": "```python\ndef smallest_sequence(word1, word2):\n    n1, n2 = len(word1), len(word2)\n    mismatches = []\n    \n    # Identify all mismatched positions\n    for i in range(n2):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n    \n    # If there are more than one mismatch, it's impossible to make them almost equal\n    if len(mismatches) > 1:\n        return []\n    \n    # If there are no mismatches, no changes are needed\n    if len(mismatches) == 0:\n        return list(range(n2))\n    \n    # There is exactly one mismatch, check if changing it makes them almost equal\n    i = mismatches[0]\n    for j in range(n1):\n        if word1[j] == word2[i] and j != i:\n            return [j] + list(range(i + 1, n2))\n    \n    return []\n```"}
{"task_id": "abc372_c", "code": "def count_abc(s):\n    n = len(s)\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    return count\n\ndef process_queries(N, Q, S, queries):\n    results = []\n    abc_count = count_abc(S)\n    \n    for X, C in queries:\n        X -= 1  # Convert to 0-based index\n        \n        # Check if the character at X-1 and X+2 form part of an \"ABC\"\n        if X > 0 and X + 2 < N and S[X-1:X+3] == 'ABC':\n            abc_count -= 1\n        \n        # Replace the character\n        S = S[:X] + C + S[X+1:]\n        \n        # Check if the new character at X-1 and X+2 form a new \"ABC\"\n        if X > 0 and X + 2 < N and S[X-1:X+3] == 'ABC':\n            abc_count += 1\n        \n        results.append(abc_count)\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[3 + 2 * i]) - 1, data[4 + 2 * i]) for i in range(Q)]\n\n# Process queries and print results\nresults = process_queries(N, Q, S, queries)\nfor result in results:\n    print(result)", "passed": false, "raw_code": "```python\ndef count_abc(s):\n    n = len(s)\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    return count\n\ndef process_queries(N, Q, S, queries):\n    results = []\n    abc_count = count_abc(S)\n    \n    for X, C in queries:\n        X -= 1  # Convert to 0-based index\n        \n        # Check if the character at X-1 and X+2 form part of an \"ABC\"\n        if X > 0 and X + 2 < N and S[X-1:X+3] == 'ABC':\n            abc_count -= 1\n        \n        # Replace the character\n        S = S[:X] + C + S[X+1:]\n        \n        # Check if the new character at X-1 and X+2 form a new \"ABC\"\n        if X > 0 and X + 2 < N and S[X-1:X+3] == 'ABC':\n            abc_count += 1\n        \n        results.append(abc_count)\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[3 + 2 * i]) - 1, data[4 + 2 * i]) for i in range(Q)]\n\n# Process queries and print results\nresults = process_queries(N, Q, S, queries)\nfor result in results:\n    print(result)\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortest_path_after_queries(n, queries):\n    def dijkstra(graph, start, end):\n        dist = {node: float('inf') for node in range(n)}\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            \n            if current_dist > dist[current_node]:\n                continue\n            \n            if current_node == end:\n                return current_dist\n            \n            for neighbor, weight in graph[current_node]:\n                distance = current_dist + weight\n                \n                if distance < dist[neighbor]:\n                    dist[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return dist[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    result = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "passed": true, "raw_code": "```python\nimport heapq\n\ndef shortest_path_after_queries(n, queries):\n    def dijkstra(graph, start, end):\n        dist = {node: float('inf') for node in range(n)}\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            \n            if current_dist > dist[current_node]:\n                continue\n            \n            if current_node == end:\n                return current_dist\n            \n            for neighbor, weight in graph[current_node]:\n                distance = current_dist + weight\n                \n                if distance < dist[neighbor]:\n                    dist[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return dist[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    result = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```"}
{"task_id": "abc370_c", "code": "def min_steps_to_equal_strings(S, T):\n    if S == T:\n        return [0]\n    X = [S]\n    S = S[:]\n    for i in range(len(S)):\n        for j in 'abcdefghijklmnopqrstuvwxyz':\n            if S[i] != j:\n                S = S[:i] + j + S[i+1:]\n                if S == T:\n                    X.append(S)\n                    return [len(X)-1] + X\n                else:\n                    X.append(S)\n    return X\n\n# Example usage\nS = input().strip()\nT = input().strip()\nresult = min_steps_to_equal_strings(S, T)\nprint(result[0])\nfor s in result[1:]:\n    print(s)", "passed": false, "raw_code": "def min_steps_to_equal_strings(S, T):\n    if S == T:\n        return [0]\n    X = [S]\n    S = S[:]\n    for i in range(len(S)):\n        for j in 'abcdefghijklmnopqrstuvwxyz':\n            if S[i] != j:\n                S = S[:i] + j + S[i+1:]\n                if S == T:\n                    X.append(S)\n                    return [len(X)-1] + X\n                else:\n                    X.append(S)\n    return X\n\n# Example usage\nS = input().strip()\nT = input().strip()\nresult = min_steps_to_equal_strings(S, T)\nprint(result[0])\nfor s in result[1:]:\n    print(s)"}
{"task_id": "arc181_a", "code": "def count_inversions(arr):\n    def merge_sort_and_count(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        \n        mid = len(arr) // 2\n        left, left_inv = merge_sort_and_count(arr[:mid])\n        right, right_inv = merge_sort_and_count(arr[mid:])\n        \n        merged, split_inv = merge_and_count(left, right)\n        \n        return merged, left_inv + right_inv + split_inv\n    \n    def merge_and_count(left, right):\n        result = []\n        i = j = inv_count = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        \n        result.extend(left[i:])\n        result.extend(right[j:])\n        \n        return result, inv_count\n    \n    _, inv_count = merge_sort_and_count(arr)\n    return inv_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index+N]))\n        index += N\n        \n        inv_count = count_inversions(P)\n        results.append(inv_count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef count_inversions(arr):\n    def merge_sort_and_count(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        \n        mid = len(arr) // 2\n        left, left_inv = merge_sort_and_count(arr[:mid])\n        right, right_inv = merge_sort_and_count(arr[mid:])\n        \n        merged, split_inv = merge_and_count(left, right)\n        \n        return merged, left_inv + right_inv + split_inv\n    \n    def merge_and_count(left, right):\n        result = []\n        i = j = inv_count = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        \n        result.extend(left[i:])\n        result.extend(right[j:])\n        \n        return result, inv_count\n    \n    _, inv_count = merge_sort_and_count(arr)\n    return inv_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index+N]))\n        index += N\n        \n        inv_count = count_inversions(P)\n        results.append(inv_count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3495", "code": "def kthSmallestObstacleDistance(queries, k):\n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        distances.append(distance)\n        distances.sort()\n        \n        if len(distances) >= k:\n            results.append(distances[k-1])\n        else:\n            results.append(-1)\n    \n    return results", "passed": false, "raw_code": "```python\ndef kthSmallestObstacleDistance(queries, k):\n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        distances.append(distance)\n        distances.sort()\n        \n        if len(distances) >= k:\n            results.append(distances[k-1])\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by strength in descending order\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    for i in range(N):\n        if (i + 1) % 2 == 0:\n            # Even-indexed (1-based) monster, add double the strength\n            total_experience += A[i] * 2\n        else:\n            # Odd-indexed (1-based) monster, add the strength once\n            total_experience += A[i]\n    \n    print(total_experience)\n\n# Call the function\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by strength in descending order\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    for i in range(N):\n        if (i + 1) % 2 == 0:\n            # Even-indexed (1-based) monster, add double the strength\n            total_experience += A[i] * 2\n        else:\n            # Odd-indexed (1-based) monster, add the strength once\n            total_experience += A[i]\n    \n    print(total_experience)\n\n# Call the function\nmax_experience_points()\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    if sum(A) <= M:\n        return \"infinite\"\n    \n    low, high = 0, max(A)\n    \n    while low < high:\n        mid = (low + high) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return high - 1\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nprint(max_subsidy_limit(N, M, A))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    if sum(A) <= M:\n        return \"infinite\"\n    \n    low, high = 0, max(A)\n    \n    while low < high:\n        mid = (low + high) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return high - 1\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "abc366_d", "code": "d", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read N\n    N = int(data[index])\n    index += 1\n    \n    # Read the 3D array\n    A = [[[int(data[index + k * N + j]) for j in range(N)] for k in range(N)] for _ in range(N)]\n    index += N * N * N\n    \n    # Read Q\n    Q = int(data[index])\n    index += 1\n    \n    # Precompute the prefix sum 4D array\n    prefix_sum = [[[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n    \n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix_sum[x][y][z][0] = A[x-1][y-1][z-1] + prefix_sum[x-1][y][z][0] + prefix_sum[x][y-1][z][0] + prefix_sum[x][y][z-1][0] - prefix_sum[x-1][y-1][z][0] - prefix_sum[x-1][y][z-1][0] - prefix_sum[x][y-1][z-1][0] + prefix_sum[x-1][y-1][z-1][0]\n    \n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n        index += 6\n        \n        result = prefix_sum[Rx][Ry][Rz][0] - prefix_sum[Lx-1][Ry][Rz][0]"}
{"task_id": "arc183_a", "code": "import math\nfrom itertools import permutations\n\ndef factorial(n):\n    return math.factorial(n)\n\ndef generate_good_sequences(N, K):\n    elements = [i for i in range(1, N + 1)] * K\n    all_permutations = sorted(set(permutations(elements)))\n    return all_permutations\n\ndef get_target_sequence(N, K):\n    S = factorial(N * K) // (factorial(K) ** N)\n    target_index = (S + 1) // 2 - 1\n    good_sequences = generate_good_sequences(N, K)\n    return good_sequences[target_index]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    \n    target_sequence = get_target_sequence(N, K)\n    print(' '.join(map(str, target_sequence)))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport math\nfrom itertools import permutations\n\ndef factorial(n):\n    return math.factorial(n)\n\ndef generate_good_sequences(N, K):\n    elements = [i for i in range(1, N + 1)] * K\n    all_permutations = sorted(set(permutations(elements)))\n    return all_permutations\n\ndef get_target_sequence(N, K):\n    S = factorial(N * K) // (factorial(K) ** N)\n    target_index = (S + 1) // 2 - 1\n    good_sequences = generate_good_sequences(N, K)\n    return good_sequences[target_index]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    \n    target_sequence = get_target_sequence(N, K)\n    print(' '.join(map(str, target_sequence)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc371_c", "code": "import sys\nfrom itertools import permutations\n\ndef is_isomorphic(G, H):\n    n = len(G)\n    for perm in permutations(range(n)):\n        H_perm = [[H[perm[i]][perm[j]] for j in range(n)] for i in range(n)]\n        if G == H_perm:\n            return True\n    return False\n\ndef min_cost_to_isomorphic(G, H, A):\n    n = len(G)\n    min_cost = float('inf')\n    \n    if is_isomorphic(G, H):\n        return 0\n    \n    for perm in permutations(range(n)):\n        H_perm = [[H[perm[i]][perm[j]] for j in range(n)] for i in range(n)]\n        cost = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if G[i][j] != H_perm[i][j]:\n                    cost += A[i][j]\n        min_cost = min(min_cost, cost)\n    \n    return min_cost\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    G = [[0] * N for _ in range(N)]\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G[u][v] = 1\n        G[v][u] = 1\n        index += 2\n    \n    M_H = int(data[index])\n    index += 1\n    H = [[0] * N for _ in range(N)]\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H[a][b] = 1\n        H[b][a] = 1\n        index += 2\n    \n    A = []\n    for _ in range(N - 1):\n        row = list(map(int, data[index:index + N - 1]))\n        A.append(row)\n        index += N - 1\n    \n    result = min_cost_to_isomorphic(G, H, A)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom itertools import permutations\n\ndef is_isomorphic(G, H):\n    n = len(G)\n    for perm in permutations(range(n)):\n        H_perm = [[H[perm[i]][perm[j]] for j in range(n)] for i in range(n)]\n        if G == H_perm:\n            return True\n    return False\n\ndef min_cost_to_isomorphic(G, H, A):\n    n = len(G)\n    min_cost = float('inf')\n    \n    if is_isomorphic(G, H):\n        return 0\n    \n    for perm in permutations(range(n)):\n        H_perm = [[H[perm[i]][perm[j]] for j in range(n)] for i in range(n)]\n        cost = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if G[i][j] != H_perm[i][j]:\n                    cost += A[i][j]\n        min_cost = min(min_cost, cost)\n    \n    return min_cost\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    G = [[0] * N for _ in range(N)]\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G[u][v] = 1\n        G[v][u] = 1\n        index += 2\n    \n    M_H = int(data[index])\n    index += 1\n    H = [[0] * N for _ in range(N)]\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H[a][b] = 1\n        H[b][a] = 1\n        index += 2\n    \n    A = []\n    for _ in range(N - 1):\n        row = list(map(int, data[index:index + N - 1]))\n        A.append(row)\n        index += N - 1\n    \n    result = min_cost_to_isomorphic(G, H, A)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3570", "code": "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            if word[j] in vowels:\n                vowel_count += 1\n                seen_vowels.add(word[j])\n            else:\n                consonant_count += 1\n            \n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            if word[j] in vowels:\n                vowel_count += 1\n                seen_vowels.add(word[j])\n            else:\n                consonant_count += 1\n            \n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count\n```"}
{"final_accuracy": "29.73%"}
