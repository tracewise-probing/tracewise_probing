{"difficulty": "easy", "num_threads": 32, "temperature": 0.5, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp05_bug_trace_TPL_CODEEXECUTOR_qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result_string = input_string.replace('.', '')\n    print(result_string)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result_string = input_string.replace('.', '')\n    print(result_string)\n\nremove_dots()\n```"}
{"task_id": "abc368_b", "code": "def count_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\ncount_operations()", "passed": true, "raw_code": "```python\ndef count_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\ncount_operations()\n```"}
{"task_id": "3606", "code": "def min_digit_sum(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return min(sum_of_digits(num) for num in nums)", "passed": true, "raw_code": "```python\ndef min_digit_sum(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return min(sum_of_digits(num) for num in nums)\n```"}
{"task_id": "abc373_a", "code": "def main():\n    count = 0\n    for i in range(1, 13):\n        s = input().strip()\n        if len(s) == i:\n            count += 1\n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    count = 0\n    for i in range(1, 13):\n        s = input().strip()\n        if len(s) == i:\n            count += 1\n    print(count)\n\nmain()\n```"}
{"task_id": "abc367_b", "code": "def process_number():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    X = float(data[0])\n    formatted_X = \"{:.3f}\".format(X).rstrip('0').rstrip('.')\n    print(formatted_X)\n\nprocess_number()", "passed": true, "raw_code": "```python\ndef process_number():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    X = float(data[0])\n    formatted_X = \"{:.3f}\".format(X).rstrip('0').rstrip('.')\n    print(formatted_X)\n\nprocess_number()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n    \n    if (B <= A < C) or (C <= A < B + 24):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncan_shout_takoyaki()", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n    \n    if (B <= A < C) or (C <= A < B + 24):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncan_shout_takoyaki()\n```"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    majority = (N + 1) // 2\n    \n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()", "passed": true, "raw_code": "```python\ndef determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    majority = (N + 1) // 2\n    \n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()\n```"}
{"task_id": "3555", "code": "def apply_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] = min_val * multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef apply_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] = min_val * multiplier\n    return nums\n```"}
{"task_id": "3567", "code": "def binary_date(date: str) -> str:\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"", "passed": true, "raw_code": "```python\ndef binary_date(date: str) -> str:\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n```"}
{"task_id": "3553", "code": "def are_squares_same_color(coordinate1: str, coordinate2: str) -> bool:\n    col1, row1 = ord(coordinate1[0]), int(coordinate1[1])\n    col2, row2 = ord(coordinate2[0]), int(coordinate2[1])\n    return (col1 + row1) % 2 == (col2 + row2) % 2", "passed": true, "raw_code": "```python\ndef are_squares_same_color(coordinate1: str, coordinate2: str) -> bool:\n    col1, row1 = ord(coordinate1[0]), int(coordinate1[1])\n    col2, row2 = ord(coordinate2[0]), int(coordinate2[1])\n    return (col1 + row1) % 2 == (col2 + row2) % 2\n```"}
{"task_id": "abc370_b", "code": "d", "passed": false, "raw_code": "```python\ndef combine_elements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    index = 1\n\n    # Read the transformation table A_{i, j}\n    A = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1):\n            A[i][j] = int(data[index])\n            index += 1\n\n    # Start with element 1\n    current_element = 1\n\n    # Combine current_element with elements 1 through N\n    for i in range(1, N):\n        if i >= current_element:\n            current_element = A[current_element - 1][i - 1]\n        else:\n            current_element = A[i - 1][current_element - 1]\n\n    # Print the final element\n    print(current_element)\n\ncombine_elements()"}
{"task_id": "abc365_a", "code": "def number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\nnumber_of_days_in_year()", "passed": true, "raw_code": "```python\ndef number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\nnumber_of_days_in_year()\n```"}
{"task_id": "abc368_a", "code": "def rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N and K\n    N = int(data[0])\n    K = int(data[1])\n    \n    # Read the list of cards\n    cards = list(map(int, data[2:]))\n    \n    # Perform the rotation\n    rotated_cards = cards[-K:] + cards[:-K]\n    \n    # Print the result\n    print(' '.join(map(str, rotated_cards)))\n\n# Call the function\nrotate_cards()", "passed": true, "raw_code": "```python\ndef rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N and K\n    N = int(data[0])\n    K = int(data[1])\n    \n    # Read the list of cards\n    cards = list(map(int, data[2:]))\n    \n    # Perform the rotation\n    rotated_cards = cards[-K:] + cards[:-K]\n    \n    # Print the result\n    print(' '.join(map(str, rotated_cards)))\n\n# Call the function\nrotate_cards()\n```"}
{"task_id": "abc371_b", "code": "def determine_taro_name(N, M, births):\n    # Initialize an array to keep track of the earliest born male child in each family\n    earliest_male = [-1] * (N + 1)\n    \n    results = []\n    \n    for family, gender in births:\n        if gender == 'M':\n            if earliest_male[family] == -1:\n                earliest_male[family] = family\n                results.append(\"Yes\")\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    return \"\\n\".join(results)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbirths = [(int(data[2 + 2 * i]) - 1, data[3 + 2 * i]) for i in range(M)]\n\n# Determine the names and print the results\nprint(determine_taro_name(N, M, births))", "passed": true, "raw_code": "```python\ndef determine_taro_name(N, M, births):\n    # Initialize an array to keep track of the earliest born male child in each family\n    earliest_male = [-1] * (N + 1)\n    \n    results = []\n    \n    for family, gender in births:\n        if gender == 'M':\n            if earliest_male[family] == -1:\n                earliest_male[family] = family\n                results.append(\"Yes\")\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    return \"\\n\".join(results)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbirths = [(int(data[2 + 2 * i]) - 1, data[3 + 2 * i]) for i in range(M)]\n\n# Determine the names and print the results\nprint(determine_taro_name(N, M, births))\n```"}
{"task_id": "abc369_b", "code": "d", "passed": false, "raw_code": "```python\ndef min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    left_hand = 1\n    right_hand = 1\n    fatigue = 0\n    \n    for i in range(1, 2 * N, 2):\n        key = int(data[i])\n        hand = data[i + 1]\n        \n        if hand == 'L':\n            if left_hand != key:\n                fatigue += abs(key - left_hand)\n                left_hand = key\n        else:\n            if right_hand != key:\n                fatigue += abs(key - right_hand)\n                right_hand = key\n    \n    print(fatigue)\n\nmin_fatigue_level()"}
{"task_id": "abc369_a", "code": "def count_arithmetic_sequences(A, B):\n    # Calculate the possible values of x\n    x1 = (A + B) / 2\n    x2 = (A + A) / 2\n    x3 = (B + B) / 2\n    \n    # Check if x1, x2, and x3 are integers\n    x1 = int(x1) if x1.is_integer() else None\n    x2 = int(x2) if x2.is_integer() else None\n    x3 = int(x3) if x3.is_integer() else None\n    \n    # Count the number of valid x values\n    valid_x = [x for x in [x1, x2, x3] if x is not None]\n    return len(valid_x)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse the input\nA = int(data[0])\nB = int(data[1])\n\n# Calculate and print the result\nresult = count_arithmetic_sequences(A, B)\nprint(result)", "passed": false, "raw_code": "```python\ndef count_arithmetic_sequences(A, B):\n    # Calculate the possible values of x\n    x1 = (A + B) / 2\n    x2 = (A + A) / 2\n    x3 = (B + B) / 2\n    \n    # Check if x1, x2, and x3 are integers\n    x1 = int(x1) if x1.is_integer() else None\n    x2 = int(x2) if x2.is_integer() else None\n    x3 = int(x3) if x3.is_integer() else None\n    \n    # Count the number of valid x values\n    valid_x = [x for x in [x1, x2, x3] if x is not None]\n    return len(valid_x)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse the input\nA = int(data[0])\nB = int(data[1])\n\n# Calculate and print the result\nresult = count_arithmetic_sequences(A, B)\nprint(result)\n```"}
{"task_id": "3600", "code": "def findKthCharacter(k):\n    # Initial string and its length\n    word = \"a\"\n    length = 1\n    \n    # Determine the cycle length and the remainder\n    while k > length:\n        k -= length\n        length *= 2\n    \n    # Adjust k to be zero-indexed\n    k -= 1\n    \n    # Calculate the character at the k-th position\n    return chr((ord(word[0]) - ord('a') + k) % 26 + ord('a'))", "passed": false, "raw_code": "```python\ndef findKthCharacter(k):\n    # Initial string and its length\n    word = \"a\"\n    length = 1\n    \n    # Determine the cycle length and the remainder\n    while k > length:\n        k -= length\n        length *= 2\n    \n    # Adjust k to be zero-indexed\n    k -= 1\n    \n    # Calculate the character at the k-th position\n    return chr((ord(word[0]) - ord('a') + k) % 26 + ord('a'))\n```"}
{"task_id": "abc370_a", "code": "def check_hand_raising(L, R):\n    if L == 1 and R == 0:\n        return \"Yes\"\n    elif L == 0 and R == 1:\n        return \"No\"\n    else:\n        return \"Invalid\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\n# Print the result\nprint(check_hand_raising(L, R))", "passed": true, "raw_code": "```python\ndef check_hand_raising(L, R):\n    if L == 1 and R == 0:\n        return \"Yes\"\n    elif L == 0 and R == 1:\n        return \"No\"\n    else:\n        return \"Invalid\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\n# Print the result\nprint(check_hand_raising(L, R))\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for num in A:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif num > second_max:\n            second_max = num\n    \n    second_largest_index = A.index(second_max) + 1\n    print(second_largest_index)\n\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for num in A:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif num > second_max:\n            second_max = num\n    \n    second_largest_index = A.index(second_max) + 1\n    print(second_largest_index)\n\nfind_second_largest_index()\n```"}
{"task_id": "abc366_b", "code": "def vertical_text():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    strings = data[1:]\n    \n    max_length = max(len(s) for s in strings)\n    \n    result = [''] * max_length\n    \n    for j in range(max_length):\n        for i in range(N):\n            if j < len(strings[i]):\n                result[j] += strings[i][j]\n            else:\n                result[j] += '*'\n    \n    for line in result:\n        print(line)\n\nvertical_text()", "passed": false, "raw_code": "```python\ndef vertical_text():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    strings = data[1:]\n    \n    max_length = max(len(s) for s in strings)\n    \n    result = [''] * max_length\n    \n    for j in range(max_length):\n        for i in range(N):\n            if j < len(strings[i]):\n                result[j] += strings[i][j]\n            else:\n                result[j] += '*'\n    \n    for line in result:\n        print(line)\n\nvertical_text()\n```"}
{"task_id": "3519", "code": "def countPlayersWinning(n, pick):\n    player_balls = {i: {} for i in range(n)}\n    \n    for player, color in pick:\n        if color in player_balls[player]:\n            player_balls[player][color] += 1\n        else:\n            player_balls[player][color] = 1\n    \n    wins = 0\n    for player, colors in player_balls.items():\n        for color, count in colors.items():\n            if count >= player + 1:\n                wins += 1\n                break\n    \n    return wins", "passed": true, "raw_code": "```python\ndef countPlayersWinning(n, pick):\n    player_balls = {i: {} for i in range(n)}\n    \n    for player, color in pick:\n        if color in player_balls[player]:\n            player_balls[player][color] += 1\n        else:\n            player_balls[player][color] = 1\n    \n    wins = 0\n    for player, colors in player_balls.items():\n        for color, count in colors.items():\n            if count >= player + 1:\n                wins += 1\n                break\n    \n    return wins\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    # Create a dictionary to map each character to its position in the permutation\n    char_position = {char: idx for idx, char in enumerate(S)}\n    \n    # Initialize the total distance to 0\n    total_distance = 0\n    \n    # Start from the position of 'A' (which is 0 in the alphabet)\n    current_position = char_position['A']\n    \n    # Iterate through the characters in the alphabet from B to Z\n    for char in \"BCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        # Get the position of the next character\n        next_position = char_position[char]\n        \n        # Calculate the absolute difference between the current and next positions\n        distance = abs(next_position - current_position)\n        \n        # Add the distance to the total distance\n        total_distance += distance\n        \n        # Update the current position to the next position\n        current_position = next_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with standard input\nmin_traveled_distance(input().strip())", "passed": true, "raw_code": "```python\ndef min_traveled_distance(S):\n    # Create a dictionary to map each character to its position in the permutation\n    char_position = {char: idx for idx, char in enumerate(S)}\n    \n    # Initialize the total distance to 0\n    total_distance = 0\n    \n    # Start from the position of 'A' (which is 0 in the alphabet)\n    current_position = char_position['A']\n    \n    # Iterate through the characters in the alphabet from B to Z\n    for char in \"BCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        # Get the position of the next character\n        next_position = char_position[char]\n        \n        # Calculate the absolute difference between the current and next positions\n        distance = abs(next_position - current_position)\n        \n        # Add the distance to the total distance\n        total_distance += distance\n        \n        # Update the current position to the next position\n        current_position = next_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with standard input\nmin_traveled_distance(input().strip())\n```"}
{"task_id": "3568", "code": "def generate_key(num1, num2, num3):\n    # Convert numbers to four-digit strings\n    str_num1 = f\"{num1:04d}\"\n    str_num2 = f\"{num2:04d}\"\n    str_num3 = f\"{num3:04d}\"\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(str_num1[i], str_num2[i], str_num3[i])\n        key += min_digit\n    \n    # Convert the key to an integer and return\n    return int(key) if key != \"0000\" else 0", "passed": true, "raw_code": "```python\ndef generate_key(num1, num2, num3):\n    # Convert numbers to four-digit strings\n    str_num1 = f\"{num1:04d}\"\n    str_num2 = f\"{num2:04d}\"\n    str_num3 = f\"{num3:04d}\"\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(str_num1[i], str_num2[i], str_num3[i])\n        key += min_digit\n    \n    # Convert the key to an integer and return\n    return int(key) if key != \"0000\" else 0\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    # Initial position of the snake\n    i, j = 0, 0\n    \n    # Directions mapping\n    directions = {\n        \"UP\": (-1, 0),\n        \"RIGHT\": (0, 1),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1)\n    }\n    \n    # Iterate through each command\n    for command in commands:\n        di, dj = directions[command]\n        ni, nj = i + di, j + dj\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= ni < n and 0 <= nj < n:\n            i, j = ni, nj\n    \n    # Return the final position as a single index\n    return i * n + j", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    # Initial position of the snake\n    i, j = 0, 0\n    \n    # Directions mapping\n    directions = {\n        \"UP\": (-1, 0),\n        \"RIGHT\": (0, 1),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1)\n    }\n    \n    # Iterate through each command\n    for command in commands:\n        di, dj = directions[command]\n        ni, nj = i + di, j + dj\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= ni < n and 0 <= nj < n:\n            i, j = ni, nj\n    \n    # Return the final position as a single index\n    return i * n + j\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read().strip()\n    s_ab, s_ac, s_bc = input.split()\n\n    # Determine the order of the brothers\n    if s_ab == '<' and s_ac == '<':\n        if s_bc == '<':\n            print('B')\n        else:\n            print('C')\n    elif s_ab == '<' and s_ac == '>':\n        if s_bc == '<':\n            print('B')\n        else:\n            print('A')\n    elif s_ab == '>' and s_ac == '<':\n        if s_bc == '<':\n            print('B')\n        else:\n            print('C')\n    elif s_ab == '>' and s_ac == '>':\n        if s_bc == '<':\n            print('A')\n        else:\n            print('B')\n\n# Call the function\nfind_middle_brother()", "passed": false, "raw_code": "```python\ndef find_middle_brother():\n    import sys\n    input = sys.stdin.read().strip()\n    s_ab, s_ac, s_bc = input.split()\n\n    # Determine the order of the brothers\n    if s_ab == '<' and s_ac == '<':\n        if s_bc == '<':\n            print('B')\n        else:\n            print('C')\n    elif s_ab == '<' and s_ac == '>':\n        if s_bc == '<':\n            print('B')\n        else:\n            print('A')\n    elif s_ab == '>' and s_ac == '<':\n        if s_bc == '<':\n            print('B')\n        else:\n            print('C')\n    elif s_ab == '>' and s_ac == '>':\n        if s_bc == '<':\n            print('A')\n        else:\n            print('B')\n\n# Call the function\nfind_middle_brother()\n```"}
{"task_id": "3543", "code": "def countSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    zero_count = 0\n    one_count = 0\n    \n    left = 0\n    for right in range(n):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > k and one_count > k:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        count += right - left + 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef countSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    zero_count = 0\n    one_count = 0\n    \n    left = 0\n    for right in range(n):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > k and one_count > k:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        count += right - left + 1\n    \n    return count\n```"}
{"final_accuracy": "73.08%"}
