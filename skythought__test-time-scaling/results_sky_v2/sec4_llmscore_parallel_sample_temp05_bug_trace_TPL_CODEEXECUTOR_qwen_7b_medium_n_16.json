{"difficulty": "medium", "num_threads": 32, "temperature": 0.5, "n": 16, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp05_bug_trace_TPL_CODEEXECUTOR_qwen_7b_medium_n_16.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    choices = []\n    for s in start:\n        choices.append(s + d)\n        choices.append(s)\n    choices.sort()\n    \n    max_score = 0\n    for i in range(1, len(choices)):\n        max_score = max(max_score, choices[i] - choices[i - 1])\n    \n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    choices = []\n    for s in start:\n        choices.append(s + d)\n        choices.append(s)\n    choices.sort()\n    \n    max_score = 0\n    for i in range(1, len(choices)):\n        max_score = max(max_score, choices[i] - choices[i - 1])\n    \n    return max_score\n```"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by multiplying the largest elements of b with a\n    max_score = sum(a[i] * b_sorted[i] for i in range(4))\n    \n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by multiplying the largest elements of b with a\n    max_score = sum(a[i] * b_sorted[i] for i in range(4))\n    \n    return max_score\n```"}
{"task_id": "3495", "code": "def kthObstacleDistance(queries, k):\n    import bisect\n    \n    # List to store the distances of obstacles from the origin\n    distances = []\n    \n    results = []\n    \n    for x, y in queries:\n        # Calculate the distance of the new obstacle from the origin\n        distance = abs(x) + abs(y)\n        \n        # Insert the distance into the sorted list\n        bisect.insort(distances, distance)\n        \n        # Check if there are at least k obstacles\n        if len(distances) < k:\n            results.append(-1)\n        else:\n            # Return the k-th smallest distance\n            results.append(distances[k-1])\n    \n    return results", "passed": true, "raw_code": "```python\ndef kthObstacleDistance(queries, k):\n    import bisect\n    \n    # List to store the distances of obstacles from the origin\n    distances = []\n    \n    results = []\n    \n    for x, y in queries:\n        # Calculate the distance of the new obstacle from the origin\n        distance = abs(x) + abs(y)\n        \n        # Insert the distance into the sorted list\n        bisect.insort(distances, distance)\n        \n        # Check if there are at least k obstacles\n        if len(distances) < k:\n            results.append(-1)\n        else:\n            # Return the k-th smallest distance\n            results.append(distances[k-1])\n    \n    return results\n```"}
{"task_id": "3496", "code": "def minTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        totalWork = 0\n        for t in workerTimes:\n            x = 1\n            while t * x * (x + 1) // 2 <= time:\n                totalWork += x\n                x += 1\n            if totalWork >= height:\n                return True\n        return False\n    \n    left, right = 1, mountainHeight * sum(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        totalWork = 0\n        for t in workerTimes:\n            x = 1\n            while t * x * (x + 1) // 2 <= time:\n                totalWork += x\n                x += 1\n            if totalWork >= height:\n                return True\n        return False\n    \n    left, right = 1, mountainHeight * sum(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            results.append(len(bag))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            results.append(len(bag))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    # Initialize dp arrays\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Base cases\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill dp arrays\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    # Return the maximum energy boost\n    return max(dp_A[-1], dp_B[-1])", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    # Initialize dp arrays\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Base cases\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill dp arrays\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    # Return the maximum energy boost\n    return max(dp_A[-1], dp_B[-1])\n```"}
{"task_id": "3540", "code": "def hash_string(s, k):\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)", "passed": true, "raw_code": "```python\ndef hash_string(s, k):\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)\n```"}
{"task_id": "3534", "code": "def countAlmostEqualPairs(nums):\n    def canBecomeEqualBySwappingOnce(num1, num2):\n        str1, str2 = str(num1), str(num2)\n        diff_indices = []\n        \n        for i in range(min(len(str1), len(str2))):\n            if str1[i] != str2[i]:\n                diff_indices.append(i)\n            \n            if len(diff_indices) > 2:\n                return False\n        \n        if len(diff_indices) == 0:\n            return True\n        \n        if len(diff_indices) == 1:\n            return False\n        \n        i, j = diff_indices\n        return str1[i] == str2[j] and str1[j] == str2[i]\n    \n    count = 0\n    n = len(nums)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if canBecomeEqualBySwappingOnce(nums[i], nums[j]):\n                count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef countAlmostEqualPairs(nums):\n    def canBecomeEqualBySwappingOnce(num1, num2):\n        str1, str2 = str(num1), str(num2)\n        diff_indices = []\n        \n        for i in range(min(len(str1), len(str2))):\n            if str1[i] != str2[i]:\n                diff_indices.append(i)\n            \n            if len(diff_indices) > 2:\n                return False\n        \n        if len(diff_indices) == 0:\n            return True\n        \n        if len(diff_indices) == 1:\n            return False\n        \n        i, j = diff_indices\n        return str1[i] == str2[j] and str1[j] == str2[i]\n    \n    count = 0\n    n = len(nums)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if canBecomeEqualBySwappingOnce(nums[i], nums[j]):\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        for r in range(l, N):\n            if r == l:\n                count += 1\n                continue\n            \n            d = A[r] - A[r - 1]\n            \n            if d in diff_count:\n                count += diff_count[d]\n            diff_count[d] = diff_count.get(d, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        for r in range(l, N):\n            if r == l:\n                count += 1\n                continue\n            \n            d = A[r] - A[r - 1]\n            \n            if d in diff_count:\n                count += diff_count[d]\n            diff_count[d] = diff_count.get(d, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortest_path_after_queries(n, queries):\n    def dijkstra(graph, start, end):\n        distances = [float('inf')] * n\n        distances[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_distance, current_node = heapq.heappop(pq)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node]:\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    result = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "passed": true, "raw_code": "```python\nimport heapq\n\ndef shortest_path_after_queries(n, queries):\n    def dijkstra(graph, start, end):\n        distances = [float('inf')] * n\n        distances[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_distance, current_node = heapq.heappop(pq)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node]:\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    result = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```"}
{"task_id": "3526", "code": "def minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[~i] for i in range((n + 1) // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[i][j] for i in range(m)]) for j in range(n))\n    \n    return min(row_flips, col_flips)", "passed": false, "raw_code": "```python\ndef minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[~i] for i in range((n + 1) // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[i][j] for i in range(m)]) for j in range(n))\n    \n    return min(row_flips, col_flips)\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    wins = 0\n    prev_move = None\n    \n    for move in S:\n        if move == 'R':\n            if prev_move != 'P':\n                wins += 1\n                prev_move = 'P'\n            else:\n                prev_move = 'S'\n        elif move == 'P':\n            if prev_move != 'S':\n                wins += 1\n                prev_move = 'S'\n            else:\n                prev_move = 'R'\n        elif move == 'S':\n            if prev_move != 'R':\n                wins += 1\n                prev_move = 'R'\n            else:\n                prev_move = 'P'\n    \n    return wins\n\n# Read input\nN = int(input())\nS = input()\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    wins = 0\n    prev_move = None\n    \n    for move in S:\n        if move == 'R':\n            if prev_move != 'P':\n                wins += 1\n                prev_move = 'P'\n            else:\n                prev_move = 'S'\n        elif move == 'P':\n            if prev_move != 'S':\n                wins += 1\n                prev_move = 'S'\n            else:\n                prev_move = 'R'\n        elif move == 'S':\n            if prev_move != 'R':\n                wins += 1\n                prev_move = 'R'\n            else:\n                prev_move = 'P'\n    \n    return wins\n\n# Read input\nN = int(input())\nS = input()\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "abc372_d", "code": "def count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        max_height = 0\n        for j in range(i + 1, N):\n            if heights[j] >= max_height:\n                count += 1\n                max_height = heights[j]\n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()", "passed": false, "raw_code": "```python\ndef count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        max_height = 0\n        for j in range(i + 1, N):\n            if heights[j] >= max_height:\n                count += 1\n                max_height = heights[j]\n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()\n```"}
{"task_id": "abc367_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Dictionary to store the frequency of remainders\n    remainder_count = {}\n    for remainder in prefix_sum:\n        if remainder % M in remainder_count:\n            remainder_count[remainder % M] += 1\n        else:\n            remainder_count[remainder % M] = 1\n    \n    # Count valid pairs\n    count = 0\n    for remainder in remainder_count:\n        if remainder == 0:\n            count += remainder_count[remainder] * (remainder_count[remainder] - 1) // 2\n        else:\n            complement = (M - remainder) % M\n            if complement in remainder_count:\n                count += remainder_count[remainder] * remainder_count[complement]\n    \n    print(count)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Dictionary to store the frequency of remainders\n    remainder_count = {}\n    for remainder in prefix_sum:\n        if remainder % M in remainder_count:\n            remainder_count[remainder % M] += 1\n        else:\n            remainder_count[remainder % M] = 1\n    \n    # Count valid pairs\n    count = 0\n    for remainder in remainder_count:\n        if remainder == 0:\n            count += remainder_count[remainder] * (remainder_count[remainder] - 1) // 2\n        else:\n            complement = (M - remainder) % M\n            if complement in remainder_count:\n                count += remainder_count[remainder] * remainder_count[complement]\n    \n    print(count)\n\nmain()\n```"}
{"task_id": "3522", "code": "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if subarray == sorted(subarray) and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "passed": false, "raw_code": "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if subarray == sorted(subarray) and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "abc372_c", "code": "d", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = list(data[2])\n    \n    # Initial count of \"ABC\"\n    count = 0\n    for i in range(N - 2):\n        if ''.join(S[i:i+3]) == 'ABC':\n            count += 1\n    \n    # Sliding window to keep track of the current count of \"ABC\"\n    window = ''.join(S[:3])\n    if window == 'ABC':\n        count += 1\n    \n    # Process each query\n    index = 3\n    for _ in range(Q):\n        X = int(data[index]) - 1\n        C = data[index + 1]\n        \n        # Remove the old character from the window\n        old_char = S[X]\n        window = window[:X] + window[X+1:]\n        \n        # Update the string and the window\n        S[X] = C\n        window += C\n        \n        # Adjust the count of \"ABC\"\n        if old_char == 'A' and window[-3:] == 'ABC':\n            count += 1\n        elif old_char == 'B' and window[-3:] == 'ABC':\n            count += 1\n        elif old_char == 'C' and window[-3:] == 'ABC':\n            count -= 1\n        \n        if C == 'A' and window[-3:-1] == 'BC':\n            count += 1\n        elif C == 'B' and window[-3:-1] == 'CA':\n            count += 1\n        elif C == 'C' and window[-3:-1] == 'AB':\n            count -= 1\n        \n        # Print the current count\n        print(count)\n        \n        # Move to the next query\n        index += 2\n\nprocess_queries()"}
{"task_id": "abc371_d", "code": "import sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read input values\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = [int(data[index + i]) for i in range(N)]\n    P = [int(data[index + N + i]) for i in range(N)]\n    index += 2 * N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = [(int(data[index + 2 * i]), int(data[index + 2 * i + 1])) for i in range(Q)]\n    \n    # Combine X and P into a list of tuples and sort by X\n    villages = sorted(zip(X, P))\n    \n    # Compute prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for _, p in villages:\n        current_sum += p\n        prefix_sum.append(current_sum)\n    \n    # Process each query\n    for l, r in queries:\n        # Find the indices of the villages just before and after the range [l, r]\n        left_index = bisect_left(villages, (l, float('-inf')))\n        right_index = bisect_right(villages, (r, float('inf')))\n        \n        # Calculate the number of villagers in the range [l, r]\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\nimport sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read input values\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = [int(data[index + i]) for i in range(N)]\n    P = [int(data[index + N + i]) for i in range(N)]\n    index += 2 * N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = [(int(data[index + 2 * i]), int(data[index + 2 * i + 1])) for i in range(Q)]\n    \n    # Combine X and P into a list of tuples and sort by X\n    villages = sorted(zip(X, P))\n    \n    # Compute prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for _, p in villages:\n        current_sum += p\n        prefix_sum.append(current_sum)\n    \n    # Process each query\n    for l, r in queries:\n        # Find the indices of the villages just before and after the range [l, r]\n        left_index = bisect_left(villages, (l, float('-inf')))\n        right_index = bisect_right(villages, (r, float('inf')))\n        \n        # Calculate the number of villagers in the range [l, r]\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "arc181_a", "code": "def min_operations(N, P):\n    operations = 0\n    visited = [False] * N\n    \n    for i in range(N):\n        if not visited[i]:\n            cycle_length = 0\n            x = i\n            \n            while not visited[x]:\n                visited[x] = True\n                x = P[x] - 1\n                cycle_length += 1\n            \n            if cycle_length > 0:\n                operations += (cycle_length - 1)\n    \n    return operations\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        P = list(map(int, data[index + 1:index + N + 1]))\n        index += N + 1\n        \n        result = min_operations(N, P)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef min_operations(N, P):\n    operations = 0\n    visited = [False] * N\n    \n    for i in range(N):\n        if not visited[i]:\n            cycle_length = 0\n            x = i\n            \n            while not visited[x]:\n                visited[x] = True\n                x = P[x] - 1\n                cycle_length += 1\n            \n            if cycle_length > 0:\n                operations += (cycle_length - 1)\n    \n    return operations\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        P = list(map(int, data[index + 1:index + N + 1]))\n        index += N + 1\n        \n        result = min_operations(N, P)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc367_c", "code": "def generate_sequences(N, K, R, current_sequence):\n    if len(current_sequence) == N:\n        if sum(current_sequence) % K == 0:\n            print(' '.join(map(str, current_sequence)))\n        return\n    for i in range(1, R[len(current_sequence)] + 1):\n        generate_sequences(N, K, R, current_sequence + [i])\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n\n    generate_sequences(N, K, R, [])\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef generate_sequences(N, K, R, current_sequence):\n    if len(current_sequence) == N:\n        if sum(current_sequence) % K == 0:\n            print(' '.join(map(str, current_sequence)))\n        return\n    for i in range(1, R[len(current_sequence)] + 1):\n        generate_sequences(N, K, R, current_sequence + [i])\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n\n    generate_sequences(N, K, R, [])\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength in descending order\n    A.sort(reverse=True)\n    \n    total_points = 0\n    for i, strength in enumerate(A):\n        if (i + 1) % 2 == 0:\n            total_points += strength * 2\n        else:\n            total_points += strength\n    \n    print(total_points)\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength in descending order\n    A.sort(reverse=True)\n    \n    total_points = 0\n    for i, strength in enumerate(A):\n        if (i + 1) % 2 == 0:\n            total_points += strength * 2\n        else:\n            total_points += strength\n    \n    print(total_points)\n\nmax_experience_points()\n```"}
{"task_id": "3579", "code": "from itertools import permutations\n\ndef max_binary_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    bin_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    permuted_bin_nums = permutations(bin_nums)\n    \n    # Initialize the maximum value\n    max_value = 0\n    \n    # Iterate through each permutation and calculate the concatenated value\n    for perm in permuted_bin_nums:\n        concatenated_value = int(''.join(perm), 2)\n        if concatenated_value > max_value:\n            max_value = concatenated_value\n    \n    return max_value", "passed": true, "raw_code": "```python\nfrom itertools import permutations\n\ndef max_binary_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    bin_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    permuted_bin_nums = permutations(bin_nums)\n    \n    # Initialize the maximum value\n    max_value = 0\n    \n    # Iterate through each permutation and calculate the concatenated value\n    for perm in permuted_bin_nums:\n        concatenated_value = int(''.join(perm), 2)\n        if concatenated_value > max_value:\n            max_value = concatenated_value\n    \n    return max_value\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    if sum(A) <= M:\n        return \"infinite\"\n    \n    low, high = 0, max(A)\n    \n    while low <= high:\n        mid = (low + high) // 2\n        total_subsidy = sum(min(mid, a) for a in A)\n        \n        if total_subsidy <= M:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return high\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    if sum(A) <= M:\n        return \"infinite\"\n    \n    low, high = 0, max(A)\n    \n    while low <= high:\n        mid = (low + high) // 2\n        total_subsidy = sum(min(mid, a) for a in A)\n        \n        if total_subsidy <= M:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return high\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "abc370_c", "code": "def transform_string(S, T):\n    X = []\n    i = 0\n    while S != T:\n        if S[i] != T[i]:\n            for char in 'abcdefghijklmnopqrstuvwxyz':\n                if char == T[i]:\n                    S = S[:i] + char + S[i+1:]\n                    break\n        X.append(S)\n        i += 1\n    return X\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    S = data[0]\n    T = data[1]\n    \n    X = transform_string(S, T)\n    print(len(X))\n    for s in X:\n        print(s)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef transform_string(S, T):\n    X = []\n    i = 0\n    while S != T:\n        if S[i] != T[i]:\n            for char in 'abcdefghijklmnopqrstuvwxyz':\n                if char == T[i]:\n                    S = S[:i] + char + S[i+1:]\n                    break\n        X.append(S)\n        i += 1\n    return X\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    S = data[0]\n    T = data[1]\n    \n    X = transform_string(S, T)\n    print(len(X))\n    for s in X:\n        print(s)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc373_c", "code": "def max_sum(A, B):\n    import bisect\n    \n    # Sort sequence A\n    A.sort()\n    \n    max_val = float('-inf')\n    \n    # Iterate through each element in B\n    for b in B:\n        # Find the index where b would go in A to maintain sorted order\n        idx = bisect.bisect_right(A, b)\n        \n        if idx > 0:\n            # If there is at least one element in A less than or equal to b\n            max_val = max(max_val, A[idx - 1] + b)\n        if idx < len(A):\n            # If there is at least one element in A greater than b\n            max_val = max(max_val, A[idx] + b)\n    \n    return max_val\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:N+1]))\nB = list(map(int, data[N+1:]))\n\n# Print the result\nprint(max_sum(A, B))", "passed": false, "raw_code": "```python\ndef max_sum(A, B):\n    import bisect\n    \n    # Sort sequence A\n    A.sort()\n    \n    max_val = float('-inf')\n    \n    # Iterate through each element in B\n    for b in B:\n        # Find the index where b would go in A to maintain sorted order\n        idx = bisect.bisect_right(A, b)\n        \n        if idx > 0:\n            # If there is at least one element in A less than or equal to b\n            max_val = max(max_val, A[idx - 1] + b)\n        if idx < len(A):\n            # If there is at least one element in A greater than b\n            max_val = max(max_val, A[idx] + b)\n    \n    return max_val\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:N+1]))\nB = list(map(int, data[N+1:]))\n\n# Print the result\nprint(max_sum(A, B))\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    walls = set((i, j) for i in range(H) for j in range(W))\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if (R, C) in walls:\n            walls.remove((R, C))\n        else:\n            # Find and destroy the first walls in the specified directions\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                r, c = R, C\n                while True:\n                    r += dr\n                    c += dc\n                    if not (0 <= r < H and 0 <= c < W):\n                        break\n                    if (r, c) in walls:\n                        walls.remove((r, c))\n                        break\n    \n    print(len(walls))\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    walls = set((i, j) for i in range(H) for j in range(W))\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if (R, C) in walls:\n            walls.remove((R, C))\n        else:\n            # Find and destroy the first walls in the specified directions\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                r, c = R, C\n                while True:\n                    r += dr\n                    c += dc\n                    if not (0 <= r < H and 0 <= c < W):\n                        break\n                    if (r, c) in walls:\n                        walls.remove((r, c))\n                        break\n    \n    print(len(walls))\n\nmain()\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    count_w2 = Counter(word2)\n    count_window = Counter()\n    n, m = len(word1), len(word2)\n    valid_count = 0\n    \n    for i in range(n):\n        count_window[word1[i]] += 1\n        \n        # Remove characters that are no longer needed\n        if i >= m:\n            count_window[word1[i - m]] -= 1\n            if count_window[word1[i - m]] == 0:\n                del count_window[word1[i - m]]\n        \n        # Check if the current window can form a valid prefix\n        if count_window & count_w2 == count_w2:\n            valid_count += n - i\n    \n    return valid_count", "passed": false, "raw_code": "```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    count_w2 = Counter(word2)\n    count_window = Counter()\n    n, m = len(word1), len(word2)\n    valid_count = 0\n    \n    for i in range(n):\n        count_window[word1[i]] += 1\n        \n        # Remove characters that are no longer needed\n        if i >= m:\n            count_window[word1[i - m]] -= 1\n            if count_window[word1[i - m]] == 0:\n                del count_window[word1[i - m]]\n        \n        # Check if the current window can form a valid prefix\n        if count_window & count_w2 == count_w2:\n            valid_count += n - i\n    \n    return valid_count\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[-1]\n```"}
{"task_id": "3558", "code": "def can_reach_final_cell(grid, health):\n    def dfs(i, j, health):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or health <= 0:\n            return False\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return health >= 1\n        temp = grid[i][j]\n        grid[i][j] = 1\n        result = dfs(i + 1, j, health - temp) or \\\n                 dfs(i - 1, j, health - temp) or \\\n                 dfs(i, j + 1, health - temp) or \\\n                 dfs(i, j - 1, health - temp)\n        grid[i][j] = temp\n        return result\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef can_reach_final_cell(grid, health):\n    def dfs(i, j, health):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or health <= 0:\n            return False\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return health >= 1\n        temp = grid[i][j]\n        grid[i][j] = 1\n        result = dfs(i + 1, j, health - temp) or \\\n                 dfs(i - 1, j, health - temp) or \\\n                 dfs(i, j + 1, health - temp) or \\\n                 dfs(i, j - 1, health - temp)\n        grid[i][j] = temp\n        return result\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "3559", "code": "def minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Preprocess words into a dictionary of prefixes\n    prefix_dict = defaultdict(list)\n    for word in words:\n        for j in range(1, len(word) + 1):\n            prefix_dict[j].append(word[:j])\n    \n    # Initialize DP array\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill DP array\n    for i in range(1, len(target) + 1):\n        for j in range(1, i + 1):\n            if target[i-j:i] in prefix_dict[j]:\n                dp[i] = min(dp[i], dp[i-j] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Preprocess words into a dictionary of prefixes\n    prefix_dict = defaultdict(list)\n    for word in words:\n        for j in range(1, len(word) + 1):\n            prefix_dict[j].append(word[:j])\n    \n    # Initialize DP array\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill DP array\n    for i in range(1, len(target) + 1):\n        for j in range(1, i + 1):\n            if target[i-j:i] in prefix_dict[j]:\n                dp[i] = min(dp[i], dp[i-j] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n```"}
{"task_id": "3584", "code": "def smallestSequenceIndices(word1, word2):\n    n, m = len(word1), len(word2)\n    mismatches = []\n\n    # Identify mismatches\n    for i in range(m):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n\n    # Check if there is a valid sequence\n    if len(mismatches) > 1:\n        return []\n\n    # Form the sequence\n    if len(mismatches) == 1:\n        return [mismatches[0]]\n\n    # Check if no changes are needed\n    if word1[:m] == word2:\n        return list(range(m))\n\n    return []", "passed": false, "raw_code": "```python\ndef smallestSequenceIndices(word1, word2):\n    n, m = len(word1), len(word2)\n    mismatches = []\n\n    # Identify mismatches\n    for i in range(m):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n\n    # Check if there is a valid sequence\n    if len(mismatches) > 1:\n        return []\n\n    # Form the sequence\n    if len(mismatches) == 1:\n        return [mismatches[0]]\n\n    # Check if no changes are needed\n    if word1[:m] == word2:\n        return list(range(m))\n\n    return []\n```"}
{"task_id": "abc366_d", "code": "d", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read input parameters\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize 3D array A\n    A = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            A[x][y][1] = int(data[index])\n            index += 1\n        for z in range(2, N + 1):\n            A[x][y][z] = A[x][y][z - 1] + A[x][y][1]\n    \n    for y in range(2, N + 1):\n        for x in range(1, N + 1):\n            for z in range(1, N + 1):\n                A[x][y][z] += A[x - 1][y][z]\n    \n    for z in range(2, N + 1):\n        for x in range(1, N + 1):\n            for y in range(1, N + 1):\n                A[x][y][z] += A[x][y - 1][z]\n    \n    # Read number of queries\n    Q = int(data[index])\n    index += 1\n    \n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n        index += 6\n        \n        # Calculate the result using prefix sums\n        if Lx == 1 and Ly == 1 and Lz == 1:\n            result = A[Rx][Ry][Rz]\n        elif Lx == 1 and Ly == 1:\n            result = A[Rx][Ry][Rz] - A[Rx][Ry][Lz - 1]\n        elif Lx == 1 and Lz == 1:\n            result = A[Rx][Ry][Rz] - A[Rx][Ly - 1][Rz]\n        elif Ly == 1 and Lz == 1:\n            result = A[Rx][Ry][Rz] - A[Lx - 1][Ry][Rz]\n        elif Lx == 1:\n            result = A[Rx][Ry][Rz] - A[Rx][Ly - 1][Rz] - A[Rx][Ry][Lz - 1] + A[Rx][Ly - 1][Lz - 1]\n        elif Ly == 1:\n            result = A"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    enemies = list(map(int, data[1:]))\n    \n    T = 0\n    while enemies:\n        T += 1\n        if T % 3 == 0:\n            enemies[0] -= 3\n        else:\n            enemies[0] -= 1\n        \n        if enemies[0] <= 0:\n            enemies.pop(0)\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    enemies = list(map(int, data[1:]))\n    \n    T = 0\n    while enemies:\n        T += 1\n        if T % 3 == 0:\n            enemies[0] -= 3\n        else:\n            enemies[0] -= 1\n        \n        if enemies[0] <= 0:\n            enemies.pop(0)\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "arc183_a", "code": "from itertools import permutations\nimport math\n\ndef get_good_sequence(N, K):\n    # Create the sequence with each number from 1 to N appearing K times\n    sequence = []\n    for i in range(1, N + 1):\n        sequence.extend([i] * K)\n    \n    # Generate all unique permutations of the sequence\n    all_permutations = set(permutations(sequence))\n    \n    # Convert the set of tuples to a sorted list of strings\n    sorted_permutations = sorted([' '.join(map(str, perm)) for perm in all_permutations])\n    \n    # Calculate the index we need\n    index = math.floor((len(sorted_permutations) + 1) / 2) - 1\n    \n    # Return the required permutation\n    return sorted_permutations[index]\n\n# Read input\nN, K = map(int, input().split())\n\n# Get the result\nresult = get_good_sequence(N, K)\n\n# Print the result\nprint(result)", "passed": false, "raw_code": "```python\nfrom itertools import permutations\nimport math\n\ndef get_good_sequence(N, K):\n    # Create the sequence with each number from 1 to N appearing K times\n    sequence = []\n    for i in range(1, N + 1):\n        sequence.extend([i] * K)\n    \n    # Generate all unique permutations of the sequence\n    all_permutations = set(permutations(sequence))\n    \n    # Convert the set of tuples to a sorted list of strings\n    sorted_permutations = sorted([' '.join(map(str, perm)) for perm in all_permutations])\n    \n    # Calculate the index we need\n    index = math.floor((len(sorted_permutations) + 1) / 2) - 1\n    \n    # Return the required permutation\n    return sorted_permutations[index]\n\n# Read input\nN, K = map(int, input().split())\n\n# Get the result\nresult = get_good_sequence(N, K)\n\n# Print the result\nprint(result)\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    # Sort the maximumHeight array in descending order\n    maximumHeight.sort(reverse=True)\n    \n    # Create a set to keep track of used heights\n    used_heights = set()\n    \n    # Initialize the total sum of heights\n    total_sum = 0\n    \n    # Iterate through the sorted array\n    for mh in maximumHeight:\n        # Find the highest unique height that does not exceed mh\n        for height in range(mh, 0, -1):\n            if height not in used_heights:\n                used_heights.add(height)\n                total_sum += height\n                break\n        else:\n            # If no valid height is found, return -1\n            return -1\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    # Sort the maximumHeight array in descending order\n    maximumHeight.sort(reverse=True)\n    \n    # Create a set to keep track of used heights\n    used_heights = set()\n    \n    # Initialize the total sum of heights\n    total_sum = 0\n    \n    # Iterate through the sorted array\n    for mh in maximumHeight:\n        # Find the highest unique height that does not exceed mh\n        for height in range(mh, 0, -1):\n            if height not in used_heights:\n                used_heights.add(height)\n                total_sum += height\n                break\n        else:\n            # If no valid height is found, return -1\n            return -1\n    \n    return total_sum\n```"}
{"task_id": "3570", "code": "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Iterate over all possible starting points of the substring\n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        # Iterate over all possible ending points of the substring\n        for j in range(i, n):\n            if word[j] in vowels:\n                vowel_count += 1\n                seen_vowels.add(word[j])\n            elif word[j] not in 'aeiou':\n                consonant_count += 1\n            \n            # Check if the current substring contains all vowels and exactly k consonants\n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Iterate over all possible starting points of the substring\n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        # Iterate over all possible ending points of the substring\n        for j in range(i, n):\n            if word[j] in vowels:\n                vowel_count += 1\n                seen_vowels.add(word[j])\n            elif word[j] not in 'aeiou':\n                consonant_count += 1\n            \n            # Check if the current substring contains all vowels and exactly k consonants\n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc371_c", "code": "import sys\nfrom itertools import permutations\n\ndef is_isomorphic(G, H, mapping):\n    N = len(G)\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i][j] != H[mapping[i]][mapping[j]]:\n                return False\n    return True\n\ndef min_cost_to_isomorphic(G, H, A):\n    N = len(G)\n    min_cost = float('inf')\n    \n    for perm in permutations(range(N)):\n        if is_isomorphic(G, H, perm):\n            cost = 0\n            for i in range(N):\n                for j in range(i + 1, N):\n                    if G[i][j] != H[perm[i]][perm[j]]:\n                        cost += A[i][j] if G[i][j] == 0 else -A[i][j]\n            min_cost = min(min_cost, abs(cost))\n    \n    return min_cost\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    M_G = int(data[index])\n    index += 1\n    G = [[0] * N for _ in range(N)]\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G[u][v] = 1\n        G[v][u] = 1\n        index += 2\n    \n    M_H = int(data[index])\n    index += 1\n    H = [[0] * N for _ in range(N)]\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H[a][b] = 1\n        H[b][a] = 1\n        index += 2\n    \n    A = []\n    for _ in range(N - 1):\n        row = list(map(int, data[index:index + N - 1]))\n        A.append(row)\n        index += N - 1\n    \n    result = min_cost_to_isomorphic(G, H, A)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom itertools import permutations\n\ndef is_isomorphic(G, H, mapping):\n    N = len(G)\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G[i][j] != H[mapping[i]][mapping[j]]:\n                return False\n    return True\n\ndef min_cost_to_isomorphic(G, H, A):\n    N = len(G)\n    min_cost = float('inf')\n    \n    for perm in permutations(range(N)):\n        if is_isomorphic(G, H, perm):\n            cost = 0\n            for i in range(N):\n                for j in range(i + 1, N):\n                    if G[i][j] != H[perm[i]][perm[j]]:\n                        cost += A[i][j] if G[i][j] == 0 else -A[i][j]\n            min_cost = min(min_cost, abs(cost))\n    \n    return min_cost\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    M_G = int(data[index])\n    index += 1\n    G = [[0] * N for _ in range(N)]\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G[u][v] = 1\n        G[v][u] = 1\n        index += 2\n    \n    M_H = int(data[index])\n    index += 1\n    H = [[0] * N for _ in range(N)]\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H[a][b] = 1\n        H[b][a] = 1\n        index += 2\n    \n    A = []\n    for _ in range(N - 1):\n        row = list(map(int, data[index:index + N - 1]))\n        A.append(row)\n        index += N - 1\n    \n    result = min_cost_to_isomorphic(G, H, A)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"final_accuracy": "27.03%"}
