{"difficulty": "medium", "num_threads": 32, "temperature": 0.9, "n": 32, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_CODEEXECUTOR_qwen_7b_medium_n_32.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3541", "code": "def isSpam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef isSpam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    return d", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    return d\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    N = int(data[0])\n    \n    # Read sequence A\n    A = list(map(int, data[1:N+1]))\n    \n    # Read sequence B\n    B = list(map(int, data[N+1:]))\n    \n    # Find the maximum value in A and B\n    max_A = max(A)\n    max_B = max(B)\n    \n    # Calculate the maximum sum\n    max_sum = max_A + max_B\n    \n    # Print the result\n    print(max_sum)\n\n# Call the function\nmax_sum_of_sequences()", "passed": true, "raw_code": "```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    N = int(data[0])\n    \n    # Read sequence A\n    A = list(map(int, data[1:N+1]))\n    \n    # Read sequence B\n    B = list(map(int, data[N+1:]))\n    \n    # Find the maximum value in A and B\n    max_A = max(A)\n    max_B = max(B)\n    \n    # Calculate the maximum sum\n    max_sum = max_A + max_B\n    \n    # Print the result\n    print(max_sum)\n\n# Call the function\nmax_sum_of_sequences()\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    balls = []\n    unique_integers = set()\n    \n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            balls.append(x)\n            unique_integers.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            balls.remove(x)\n            unique_integers.discard(x)\n        elif query_type == 3:\n            results.append(len(unique_integers))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    balls = []\n    unique_integers = set()\n    \n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            balls.append(x)\n            unique_integers.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            balls.remove(x)\n            unique_integers.discard(x)\n        elif query_type == 3:\n            results.append(len(unique_integers))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3495", "code": "import heapq\n\ndef findKthSmallestObstacleDistances(queries, k):\n    heap = []\n    results = [-1] * len(queries)\n    \n    for i, (x, y) in enumerate(queries):\n        distance = abs(x) + abs(y)\n        heapq.heappush(heap, (-distance, x, y))\n        \n        if len(heap) > k:\n            heapq.heappop(heap)\n        \n        if len(heap) == k:\n            results[i] = -heap[0][0]\n    \n    return results", "passed": true, "raw_code": "```python\nimport heapq\n\ndef findKthSmallestObstacleDistances(queries, k):\n    heap = []\n    results = [-1] * len(queries)\n    \n    for i, (x, y) in enumerate(queries):\n        distance = abs(x) + abs(y)\n        heapq.heappush(heap, (-distance, x, y))\n        \n        if len(heap) > k:\n            heapq.heappop(heap)\n        \n        if len(heap) == k:\n            results[i] = -heap[0][0]\n    \n    return results\n```"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    b_sorted = sorted(b)\n    max_score = 0\n    for i in range(len(a)):\n        if a[i] > 0:\n            max_score += a[i] * b_sorted.pop()\n        else:\n            max_score += a[i] * b_sorted.pop(0)\n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    b_sorted = sorted(b)\n    max_score = 0\n    for i in range(len(a)):\n        if a[i] > 0:\n            max_score += a[i] * b_sorted.pop()\n        else:\n            max_score += a[i] * b_sorted.pop(0)\n    return max_score\n```"}
{"task_id": "abc372_d", "code": "def count_visible_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        stack = []\n        \n        for j in range(i + 1, N):\n            while stack and heights[j] >= stack[-1]:\n                stack.pop()\n            \n            if not stack:\n                count += 1\n            \n            stack.append(heights[j])\n        \n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_visible_buildings()", "passed": false, "raw_code": "```python\ndef count_visible_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        stack = []\n        \n        for j in range(i + 1, N):\n            while stack and heights[j] >= stack[-1]:\n                stack.pop()\n            \n            if not stack:\n                count += 1\n            \n            stack.append(heights[j])\n        \n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_visible_buildings()\n```"}
{"task_id": "3526", "code": "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)", "passed": true, "raw_code": "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)\n```"}
{"task_id": "3522", "code": "def find_power_of_subarrays(nums, k):\n    results = []\n    n = len(nums)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if sorted(subarray) == subarray and subarray == list(range(min(subarray), max(subarray) + 1)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "passed": true, "raw_code": "```python\ndef find_power_of_subarrays(nums, k):\n    results = []\n    n = len(nums)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if sorted(subarray) == subarray and subarray == list(range(min(subarray), max(subarray) + 1)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "3496", "code": "def minimumTime(mountainHeight: int, workerTimes: list[int]) -> int:\n    def canReduce(height, time):\n        return sum((time // (wt * (i + 1))) for i, wt in enumerate(workerTimes)) >= height\n\n    workerTimes.sort()\n    left, right = 1, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minimumTime(mountainHeight: int, workerTimes: list[int]) -> int:\n    def canReduce(height, time):\n        return sum((time // (wt * (i + 1))) for i, wt in enumerate(workerTimes)) >= height\n\n    workerTimes.sort()\n    left, right = 1, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result\n```"}
{"task_id": "3534", "code": "def almost_equal_pairs(nums):\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            diff_count = 0\n            diff_positions = []\n            for k in range(len(num1)):\n                if num1[k] != num2[k]:\n                    diff_count += 1\n                    diff_positions.append(k)\n            if diff_count == 0:\n                count += 1\n            elif diff_count == 2:\n                if num1[diff_positions[0]] == num2[diff_positions[1]] and num1[diff_positions[1]] == num2[diff_positions[0]]:\n                    count += 1\n    return count", "passed": false, "raw_code": "```python\ndef almost_equal_pairs(nums):\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            diff_count = 0\n            diff_positions = []\n            for k in range(len(num1)):\n                if num1[k] != num2[k]:\n                    diff_count += 1\n                    diff_positions.append(k)\n            if diff_count == 0:\n                count += 1\n            elif diff_count == 2:\n                if num1[diff_positions[0]] == num2[diff_positions[1]] and num1[diff_positions[1]] == num2[diff_positions[0]]:\n                    count += 1\n    return count\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    # Initialize variables\n    wins = 0\n    last_move = None\n    \n    for move in S:\n        if move != last_move:\n            wins += 1\n            last_move = move\n    \n    # The maximum number of wins is half the number of moves plus any additional wins from transitions\n    return wins + (N - wins) // 2\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Calculate and print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    # Initialize variables\n    wins = 0\n    last_move = None\n    \n    for move in S:\n        if move != last_move:\n            wins += 1\n            last_move = move\n    \n    # The maximum number of wins is half the number of moves plus any additional wins from transitions\n    return wins + (N - wins) // 2\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Calculate and print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "abc367_c", "code": "def backtrack(N, K, R, current_sequence, current_sum, result):\n    if len(current_sequence) == N:\n        if current_sum % K == 0:\n            result.append(current_sequence)\n        return\n    for i in range(1, R[len(current_sequence)] + 1):\n        backtrack(N, K, R, current_sequence + [i], current_sum + i, result)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = [int(data[i]) for i in range(2, 2 + N)]\n    \n    result = []\n    backtrack(N, K, R, [], 0, result)\n    \n    for seq in result:\n        print(\" \".join(map(str, seq)))\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef backtrack(N, K, R, current_sequence, current_sum, result):\n    if len(current_sequence) == N:\n        if current_sum % K == 0:\n            result.append(current_sequence)\n        return\n    for i in range(1, R[len(current_sequence)] + 1):\n        backtrack(N, K, R, current_sequence + [i], current_sum + i, result)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = [int(data[i]) for i in range(2, 2 + N)]\n    \n    result = []\n    backtrack(N, K, R, [], 0, result)\n    \n    for seq in result:\n        print(\" \".join(map(str, seq)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3517", "code": "def shortest_path_after_queries(n, queries):\n    from collections import deque\n    \n    # Step 1: Create the initial graph\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    # Step 2: Function to perform BFS and find the shortest path from 0 to n-1\n    def bfs():\n        queue = deque([0])\n        visited = set([0])\n        distance = [-1] * n\n        distance[0] = 0\n        \n        while queue:\n            current = queue.popleft()\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    distance[neighbor] = distance[current] + 1\n                    queue.append(neighbor)\n        \n        return distance[n - 1]\n    \n    # Step 3: Process each query and store the results\n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs())\n    \n    return result", "passed": true, "raw_code": "```python\ndef shortest_path_after_queries(n, queries):\n    from collections import deque\n    \n    # Step 1: Create the initial graph\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    # Step 2: Function to perform BFS and find the shortest path from 0 to n-1\n    def bfs():\n        queue = deque([0])\n        visited = set([0])\n        distance = [-1] * n\n        distance[0] = 0\n        \n        while queue:\n            current = queue.popleft()\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    distance[neighbor] = distance[current] + 1\n                    queue.append(neighbor)\n        \n        return distance[n - 1]\n    \n    # Step 3: Process each query and store the results\n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs())\n    \n    return result\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], (i - j) * nums[j] + dp[j])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], (i - j) * nums[j] + dp[j])\n    \n    return dp[-1]\n```"}
{"task_id": "abc369_d", "code": "import sys\ninput = sys.stdin.read\nn, *a = map(int, input().split())\nans = sum(a)\nfor i in range(1, n, 2):\n    ans += a[i]\nprint(ans)", "passed": false, "raw_code": "import sys\ninput = sys.stdin.read\nn, *a = map(int, input().split())\nans = sum(a)\nfor i in range(1, n, 2):\n    ans += a[i]\nprint(ans)"}
{"task_id": "abc371_d", "code": "d", "passed": false, "raw_code": "```python\ndef answer_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    coordinates = list(map(int, data[index:index + N]))\n    index += N\n    travelers = list(map(int, data[index:index + N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        index += 2\n        queries.append((L, R))\n    \n    # Combine coordinates and travelers into a list of tuples and sort by coordinate\n    points = list(zip(coordinates, travelers))\n    points.sort()\n    \n    # Compute prefix sums of the number of travelers\n    prefix_sums = [0] * (N + 1)\n    for i in range(N):\n        prefix_sums[i + 1] = prefix_sums[i] + points[i][1]\n    \n    # Answer each query using the prefix sums\n    for L, R in queries:\n        # Find the indices of the first and last points within the range [L, R]\n        left_index = bisect_left(coordinates, L)\n        right_index = bisect_right(coordinates, R)\n        # The number of travelers in the range [L, R] is the prefix sum at right_index minus the prefix sum at left_index\n        result = prefix_sums[right_index] - prefix_sums[left_index]\n        print(result)\n\nanswer_queries()"}
{"task_id": "3558", "code": "def canReach(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        if health <= 0:\n            return False\n        \n        grid[x][y] = -1  # Mark the cell as visited\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] != -1:\n                if dfs(nx, ny, health - grid[nx][ny]):\n                    return True\n        \n        grid[x][y] = 1  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef canReach(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        if health <= 0:\n            return False\n        \n        grid[x][y] = -1  # Mark the cell as visited\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] != -1:\n                if dfs(nx, ny, health - grid[nx][ny]):\n                    return True\n        \n        grid[x][y] = 1  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    max_energy_A = energyDrinkA[0]\n    max_energy_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        new_max_energy_A = max(max_energy_A + energyDrinkA[i], max_energy_B - energyDrinkB[i-1] + energyDrinkA[i])\n        new_max_energy_B = max(max_energy_B + energyDrinkB[i], max_energy_A - energyDrinkA[i-1] + energyDrinkB[i])\n        \n        max_energy_A = new_max_energy_A\n        max_energy_B = new_max_energy_B\n    \n    return max(max_energy_A, max_energy_B)", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    max_energy_A = energyDrinkA[0]\n    max_energy_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        new_max_energy_A = max(max_energy_A + energyDrinkA[i], max_energy_B - energyDrinkB[i-1] + energyDrinkA[i])\n        new_max_energy_B = max(max_energy_B + energyDrinkB[i], max_energy_A - energyDrinkA[i-1] + energyDrinkB[i])\n        \n        max_energy_A = new_max_energy_A\n        max_energy_B = new_max_energy_B\n    \n    return max(max_energy_A, max_energy_B)\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    if sum(A) <= M:\n        print(\"infinite\")\n        return\n    \n    left, right = 0, max(A)\n    while left < right:\n        mid = (left + right + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        if total_subsidy > M:\n            right = mid - 1\n        else:\n            left = mid\n    \n    print(left)\n\nmax_subsidy_limit()", "passed": true, "raw_code": "```python\ndef max_subsidy_limit():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    if sum(A) <= M:\n        print(\"infinite\")\n        return\n    \n    left, right = 0, max(A)\n    while left < right:\n        mid = (left + right + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        if total_subsidy > M:\n            right = mid - 1\n        else:\n            left = mid\n    \n    print(left)\n\nmax_subsidy_limit()\n```"}
{"task_id": "abc367_d", "code": "def find_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Calculate remainders of prefix sums when divided by M\n    remainders = [prefix_sum[i] % M for i in range(N)]\n    \n    # Count occurrences of each remainder\n    remainder_count = {}\n    for r in remainders:\n        if r in remainder_count:\n            remainder_count[r] += 1\n        else:\n            remainder_count[r] = 1\n    \n    # Calculate the number of valid pairs\n    valid_pairs = 0\n    for count in remainder_count.values():\n        valid_pairs += count * (count - 1) // 2\n    \n    print(valid_pairs)\n\nfind_valid_pairs()", "passed": false, "raw_code": "```python\ndef find_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Calculate remainders of prefix sums when divided by M\n    remainders = [prefix_sum[i] % M for i in range(N)]\n    \n    # Count occurrences of each remainder\n    remainder_count = {}\n    for r in remainders:\n        if r in remainder_count:\n            remainder_count[r] += 1\n        else:\n            remainder_count[r] = 1\n    \n    # Calculate the number of valid pairs\n    valid_pairs = 0\n    for count in remainder_count.values():\n        valid_pairs += count * (count - 1) // 2\n    \n    print(valid_pairs)\n\nfind_valid_pairs()\n```"}
{"task_id": "abc372_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    S = data[index + 2]\n    index += 3\n    \n    results = []\n    \n    for _ in range(Q):\n        X = int(data[index]) - 1\n        C = data[index + 1]\n        index += 2\n        \n        # Update the string\n        S = S[:X] + C + S[X+1:]\n        \n        # Count the occurrences of \"ABC\"\n        count = 0\n        for i in range(len(S) - 2):\n            if S[i:i+3] == \"ABC\":\n                count += 1\n                \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    S = data[index + 2]\n    index += 3\n    \n    results = []\n    \n    for _ in range(Q):\n        X = int(data[index]) - 1\n        C = data[index + 1]\n        index += 2\n        \n        # Update the string\n        S = S[:X] + C + S[X+1:]\n        \n        # Count the occurrences of \"ABC\"\n        count = 0\n        for i in range(len(S) - 2):\n            if S[i:i+3] == \"ABC\":\n                count += 1\n                \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nmain()\n```"}
{"task_id": "3559", "code": "def minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Build a prefix dictionary for words\n    prefix_dict = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefix_dict[word[:i]].append(word)\n    \n    # Initialize DP array with infinity\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0  # Base case: 0 strings needed to form empty string\n    \n    # Fill the DP array\n    for i in range(1, len(target) + 1):\n        for prefix in prefix_dict:\n            if target[i-len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i-len(prefix)] + 1)\n    \n    # Return the result\n    if dp[-1] == float('inf'):\n        return -1\n    else:\n        return dp[-1]", "passed": false, "raw_code": "```python\ndef minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Build a prefix dictionary for words\n    prefix_dict = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefix_dict[word[:i]].append(word)\n    \n    # Initialize DP array with infinity\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0  # Base case: 0 strings needed to form empty string\n    \n    # Fill the DP array\n    for i in range(1, len(target) + 1):\n        for prefix in prefix_dict:\n            if target[i-len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i-len(prefix)] + 1)\n    \n    # Return the result\n    if dp[-1] == float('inf'):\n        return -1\n    else:\n        return dp[-1]\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    count = 0\n    for l in range(N):\n        diff_set = set()\n        valid = True\n        for r in range(l, N):\n            if r > l:\n                d = A[r] - A[r-1]\n                if diff_set and d not in diff_set:\n                    valid = False\n                    break\n                diff_set.add(d)\n            if valid:\n                count += 1\n    print(count)\ncount_arithmetic_progressions()", "passed": false, "raw_code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    count = 0\n    for l in range(N):\n        diff_set = set()\n        valid = True\n        for r in range(l, N):\n            if r > l:\n                d = A[r] - A[r-1]\n                if diff_set and d not in diff_set:\n                    valid = False\n                    break\n                diff_set.add(d)\n            if valid:\n                count += 1\n    print(count)\ncount_arithmetic_progressions()"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    index = 0\n    \n    while True:\n        if index >= N:\n            break\n        \n        if H[index] > 0:\n            T += 1\n            if T % 3 == 0:\n                H[index] -= 3\n            else:\n                H[index] -= 1\n            \n            if H[index] <= 0:\n                H[index] = 0\n                index += 1\n        else:\n            index += 1\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    index = 0\n    \n    while True:\n        if index >= N:\n            break\n        \n        if H[index] > 0:\n            T += 1\n            if T % 3 == 0:\n                H[index] -= 3\n            else:\n                H[index] -= 1\n            \n            if H[index] <= 0:\n                H[index] = 0\n                index += 1\n        else:\n            index += 1\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "arc181_a", "code": "def min_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        \n        # Count inversions\n        inversions = 0\n        for i in range(N):\n            for j in range(i + 1, N):\n                if P[i] > P[j]:\n                    inversions += 1\n        \n        results.append(inversions)\n    \n    for result in results:\n        print(result)\n\nmin_operations()", "passed": false, "raw_code": "```python\ndef min_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        \n        # Count inversions\n        inversions = 0\n        for i in range(N):\n            for j in range(i + 1, N):\n                if P[i] > P[j]:\n                    inversions += 1\n        \n        results.append(inversions)\n    \n    for result in results:\n        print(result)\n\nmin_operations()\n```"}
{"task_id": "3579", "code": "from itertools import permutations\n\ndef largestNumber(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    bin_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = [''.join(p) for p in permutations(bin_nums)]\n    \n    # Convert each permutation back to an integer and find the maximum\n    max_num = max(int(''.join(p), 2) for p in perms)\n    \n    return max_num", "passed": true, "raw_code": "```python\nfrom itertools import permutations\n\ndef largestNumber(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    bin_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = [''.join(p) for p in permutations(bin_nums)]\n    \n    # Convert each permutation back to an integer and find the maximum\n    max_num = max(int(''.join(p), 2) for p in perms)\n    \n    return max_num\n```"}
{"task_id": "3573", "code": "from collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    n, m = len(word1), len(word2)\n    count = 0\n    target = Counter(word2)\n    current = Counter()\n    \n    for i in range(n):\n        current[word1[i]] += 1\n        \n        # Remove characters from the start of the window if they are no longer needed\n        while current[word1[i - m + 1]] > target.get(word1[i - m + 1], 0):\n            current[word1[i - m + 1]] -= 1\n            \n        # Check if the current window has at least one of each character in word2\n        if i >= m - 1 and all(current[char] >= target[char] for char in target):\n            count += n - i\n    \n    return count", "passed": false, "raw_code": "```python\nfrom collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    n, m = len(word1), len(word2)\n    count = 0\n    target = Counter(word2)\n    current = Counter()\n    \n    for i in range(n):\n        current[word1[i]] += 1\n        \n        # Remove characters from the start of the window if they are no longer needed\n        while current[word1[i - m + 1]] > target.get(word1[i - m + 1], 0):\n            current[word1[i - m + 1]] -= 1\n            \n        # Check if the current window has at least one of each character in word2\n        if i >= m - 1 and all(current[char] >= target[char] for char in target):\n            count += n - i\n    \n    return count\n```"}
{"task_id": "abc370_d", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nH = int(data[0])\nW = int(data[1])\nQ = int(data[2])\nqueries = [(int(data[i*2+3]), int(data[i*2+4])) for i in range(Q)]\n\ndef get_wall_count(H, W, queries):\n    grid = [[True] * W for _ in range(H)]\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for r, c in queries:\n        r -= 1\n        c -= 1\n        if grid[r][c]:\n            grid[r][c] = False\n        else:\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                while 0 <= nr < H and 0 <= nc < W and not grid[nr][nc]:\n                    nr += dr\n                    nc += dc\n                if 0 <= nr < H and 0 <= nc < W:\n                    grid[nr][nc] = False\n\n    return sum(sum(row) for row in grid)\n\nprint(get_wall_count(H, W, queries))", "passed": false, "raw_code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nH = int(data[0])\nW = int(data[1])\nQ = int(data[2])\nqueries = [(int(data[i*2+3]), int(data[i*2+4])) for i in range(Q)]\n\ndef get_wall_count(H, W, queries):\n    grid = [[True] * W for _ in range(H)]\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for r, c in queries:\n        r -= 1\n        c -= 1\n        if grid[r][c]:\n            grid[r][c] = False\n        else:\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                while 0 <= nr < H and 0 <= nc < W and not grid[nr][nc]:\n                    nr += dr\n                    nc += dc\n                if 0 <= nr < H and 0 <= nc < W:\n                    grid[nr][nc] = False\n\n    return sum(sum(row) for row in grid)\n\nprint(get_wall_count(H, W, queries))"}
{"task_id": "arc183_a", "code": "import sys\nimport math\nfrom itertools import permutations\n\ndef find_good_sequence(N, K):\n    elements = [i for i in range(1, N + 1) for _ in range(K)]\n    all_sequences = set(permutations(elements))\n    sorted_sequences = sorted(all_sequences)\n    index = (len(sorted_sequences) + 1) // 2\n    return sorted_sequences[index - 1]\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    sequence = find_good_sequence(N, K)\n    print(' '.join(map(str, sequence)))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nimport math\nfrom itertools import permutations\n\ndef find_good_sequence(N, K):\n    elements = [i for i in range(1, N + 1) for _ in range(K)]\n    all_sequences = set(permutations(elements))\n    sorted_sequences = sorted(all_sequences)\n    index = (len(sorted_sequences) + 1) // 2\n    return sorted_sequences[index - 1]\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    sequence = find_good_sequence(N, K)\n    print(' '.join(map(str, sequence)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc370_c", "code": "def find_min_array(S, T):\n    if S == T:\n        return 0, []\n\n    M = 0\n    X = []\n    i = 0\n    while S != T:\n        if S[i] != T[i]:\n            X.append(S[:i+1] + ''.join(['a' if S[j] == T[i] else S[j] for j in range(i+1, len(S))]))\n            S = X[-1]\n            M += 1\n        i += 1\n    X.append(T)\n\n    return M + 1, X\n\nimport sys\ninput = sys.stdin.read\nS, T = input().split()\nM, X = find_min_array(S, T)\nprint(M)\nfor s in X:\n    print(s)", "passed": false, "raw_code": "def find_min_array(S, T):\n    if S == T:\n        return 0, []\n\n    M = 0\n    X = []\n    i = 0\n    while S != T:\n        if S[i] != T[i]:\n            X.append(S[:i+1] + ''.join(['a' if S[j] == T[i] else S[j] for j in range(i+1, len(S))]))\n            S = X[-1]\n            M += 1\n        i += 1\n    X.append(T)\n\n    return M + 1, X\n\nimport sys\ninput = sys.stdin.read\nS, T = input().split()\nM, X = find_min_array(S, T)\nprint(M)\nfor s in X:\n    print(s)"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    n = len(maximumHeight)\n    if n > len(set(range(1, max(maximumHeight) + 1))):\n        return -1\n    \n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        for h in range(mh, 0, -1):\n            if h not in used_heights:\n                used_heights.add(h)\n                total_sum += h\n                break\n        else:\n            return -1\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    n = len(maximumHeight)\n    if n > len(set(range(1, max(maximumHeight) + 1))):\n        return -1\n    \n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        for h in range(mh, 0, -1):\n            if h not in used_heights:\n                used_heights.add(h)\n                total_sum += h\n                break\n        else:\n            return -1\n    \n    return total_sum\n```"}
{"task_id": "3584", "code": "def findAlmostEqualSequence(word1, word2):\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    indices = []\n    changes = 0\n    \n    while j < m:\n        if i < n and word1[i] == word2[j]:\n            indices.append(i)\n            i += 1\n            j += 1\n        else:\n            if changes == 0:\n                if i < n:\n                    indices.append(i)\n                    i += 1\n                    j += 1\n                    changes += 1\n                else:\n                    return []\n            else:\n                return []\n    return indices", "passed": false, "raw_code": "```python\ndef findAlmostEqualSequence(word1, word2):\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    indices = []\n    changes = 0\n    \n    while j < m:\n        if i < n and word1[i] == word2[j]:\n            indices.append(i)\n            i += 1\n            j += 1\n        else:\n            if changes == 0:\n                if i < n:\n                    indices.append(i)\n                    i += 1\n                    j += 1\n                    changes += 1\n                else:\n                    return []\n            else:\n                return []\n    return indices\n```"}
{"task_id": "abc371_c", "code": "import sys\nfrom itertools import permutations\n\ndef min_cost_to_isomorphic(N, M_G, edges_G, M_H, edges_H, costs):\n    from collections import defaultdict\n    \n    # Build the adjacency lists for both graphs\n    adj_G = defaultdict(list)\n    for u, v in edges_G:\n        adj_G[u].append(v)\n        adj_G[v].append(u)\n    \n    adj_H = defaultdict(list)\n    for a, b in edges_H:\n        adj_H[a].append(b)\n        adj_H[b].append(a)\n    \n    def isomorphic_cost(p):\n        total_cost = 0\n        new_adj_H = defaultdict(list)\n        for i in range(N):\n            for j in range(i + 1, N):\n                if p[i] in adj_G[i + 1] and p[j - 1] not in adj_H[p[i] - 1]:\n                    total_cost += costs[p[i] - 1][p[j] - 1]\n                elif p[i] not in adj_G[i + 1] and p[j - 1] in adj_H[p[i] - 1]:\n                    total_cost -= costs[p[i] - 1][p[j] - 1]\n                if p[j] in adj_G[j + 1] and p[i - 1] not in adj_H[p[j] - 1]:\n                    total_cost += costs[p[j] - 1][p[i] - 1]\n                elif p[j] not in adj_G[j + 1] and p[i - 1] in adj_H[p[j] - 1]:\n                    total_cost -= costs[p[j] - 1][p[i] - 1]\n        \n        return total_cost\n    \n    min_cost = float('inf')\n    for perm in permutations(range(1, N + 1)):\n        cost = isomorphic_cost(perm)\n        if cost < min_cost:\n            min_cost = cost\n    \n    return min_cost\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    edges_G = [(int(data[index]), int(data[index + 1])) for _ in range(M_G)]\n    index += 2 * M_G\n    M_H = int(data[index])\n    index += 1\n    edges_H = [(int(data[index]), int(data[index + 1])) for _ in range(M_H)]\n    index += 2 * M_H\n    costs = []\n    for i in range(N):\n        costs.append([int(data[index + j]) for j in range(N - i - 1)])\n        index += N - i - 1\n    \n    result = min_cost_to_isomorphic(N, M_G, edges_G, M_H, edges_H, costs)\n    print(result)", "passed": false, "raw_code": "```python\nimport sys\nfrom itertools import permutations\n\ndef min_cost_to_isomorphic(N, M_G, edges_G, M_H, edges_H, costs):\n    from collections import defaultdict\n    \n    # Build the adjacency lists for both graphs\n    adj_G = defaultdict(list)\n    for u, v in edges_G:\n        adj_G[u].append(v)\n        adj_G[v].append(u)\n    \n    adj_H = defaultdict(list)\n    for a, b in edges_H:\n        adj_H[a].append(b)\n        adj_H[b].append(a)\n    \n    def isomorphic_cost(p):\n        total_cost = 0\n        new_adj_H = defaultdict(list)\n        for i in range(N):\n            for j in range(i + 1, N):\n                if p[i] in adj_G[i + 1] and p[j - 1] not in adj_H[p[i] - 1]:\n                    total_cost += costs[p[i] - 1][p[j] - 1]\n                elif p[i] not in adj_G[i + 1] and p[j - 1] in adj_H[p[i] - 1]:\n                    total_cost -= costs[p[i] - 1][p[j] - 1]\n                if p[j] in adj_G[j + 1] and p[i - 1] not in adj_H[p[j] - 1]:\n                    total_cost += costs[p[j] - 1][p[i] - 1]\n                elif p[j] not in adj_G[j + 1] and p[i - 1] in adj_H[p[j] - 1]:\n                    total_cost -= costs[p[j] - 1][p[i] - 1]\n        \n        return total_cost\n    \n    min_cost = float('inf')\n    for perm in permutations(range(1, N + 1)):\n        cost = isomorphic_cost(perm)\n        if cost < min_cost:\n            min_cost = cost\n    \n    return min_cost\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    edges_G = [(int(data[index]), int(data[index + 1])) for _ in range(M_G)]\n    index += 2 * M_G\n    M_H = int(data[index])\n    index += 1\n    edges_H = [(int(data[index]), int(data[index + 1])) for _ in range(M_H)]\n    index += 2 * M_H\n    costs = []\n    for i in range(N):\n        costs.append([int(data[index + j]) for j in range(N - i - 1)])\n        index += N - i - 1\n    \n    result = min_cost_to_isomorphic(N, M_G, edges_G, M_H, edges_H, costs)\n    print(result)\n```"}
{"task_id": "3570", "code": "def countSubstrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Helper function to check if the current window has all vowels\n    def has_all_vowels(window):\n        return all(window.count(vowel) > 0 for vowel in vowels)\n    \n    # Sliding window approach\n    start = 0\n    vowel_count = 0\n    consonant_count = 0\n    \n    for end in range(n):\n        char = word[end]\n        if char in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n        \n        # Adjust the window to have exactly k consonants\n        while consonant_count > k:\n            start_char = word[start]\n            if start_char in vowels:\n                vowel_count -= 1\n            else:\n                consonant_count -= 1\n            start += 1\n        \n        # Check if the current window has all vowels and exactly k consonants\n        if vowel_count == 5 and consonant_count == k:\n            count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef countSubstrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Helper function to check if the current window has all vowels\n    def has_all_vowels(window):\n        return all(window.count(vowel) > 0 for vowel in vowels)\n    \n    # Sliding window approach\n    start = 0\n    vowel_count = 0\n    consonant_count = 0\n    \n    for end in range(n):\n        char = word[end]\n        if char in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n        \n        # Adjust the window to have exactly k consonants\n        while consonant_count > k:\n            start_char = word[start]\n            if start_char in vowels:\n                vowel_count -= 1\n            else:\n                consonant_count -= 1\n            start += 1\n        \n        # Check if the current window has all vowels and exactly k consonants\n        if vowel_count == 5 and consonant_count == k:\n            count += 1\n    \n    return count\n```"}
{"task_id": "abc366_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize 3D array and prefix sum array\n    A = [[[0 for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n    prefix_sum = [[[0 for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n    \n    # Fill the 3D array\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            for k in range(1, N + 1):\n                A[i][j][k] = int(data[index])\n                index += 1\n    \n    # Compute prefix sums\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            for k in range(1, N + 1):\n                prefix_sum[i][j][k] = A[i][j][k] + prefix_sum[i - 1][j][k] + prefix_sum[i][j - 1][k] + prefix_sum[i][j][k - 1] - prefix_sum[i - 1][j - 1][k] - prefix_sum[i - 1][j][k - 1] - prefix_sum[i][j - 1][k - 1] + prefix_sum[i - 1][j - 1][k - 1]\n    \n    # Process queries\n    Q = int(data[index])\n    index += 1\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n        index += 6\n        result = prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx - 1][Ry][Rz] - prefix_sum[Rx][Ly - 1][Rz] - prefix_sum[Rx][Ry][Lz - 1] + prefix_sum[Lx - 1][Ly - 1][Rz] + prefix_sum[Lx - 1][Ry][Lz - 1] + prefix_sum[Rx][Ly - 1][Lz - 1] - prefix_sum[Lx - 1][Ly - 1][Lz - 1]\n        results.append(result)\n    \n    # Print results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize 3D array and prefix sum array\n    A = [[[0 for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n    prefix_sum = [[[0 for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n    \n    # Fill the 3D array\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            for k in range(1, N + 1):\n                A[i][j][k] = int(data[index])\n                index += 1\n    \n    # Compute prefix sums\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            for k in range(1, N + 1):\n                prefix_sum[i][j][k] = A[i][j][k] + prefix_sum[i - 1][j][k] + prefix_sum[i][j - 1][k] + prefix_sum[i][j][k - 1] - prefix_sum[i - 1][j - 1][k] - prefix_sum[i - 1][j][k - 1] - prefix_sum[i][j - 1][k - 1] + prefix_sum[i - 1][j - 1][k - 1]\n    \n    # Process queries\n    Q = int(data[index])\n    index += 1\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n        index += 6\n        result = prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx - 1][Ry][Rz] - prefix_sum[Rx][Ly - 1][Rz] - prefix_sum[Rx][Ry][Lz - 1] + prefix_sum[Lx - 1][Ly - 1][Rz] + prefix_sum[Lx - 1][Ry][Lz - 1] + prefix_sum[Rx][Ly - 1][Lz - 1] - prefix_sum[Lx - 1][Ly - 1][Lz - 1]\n        results.append(result)\n    \n    # Print results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"final_accuracy": "32.43%"}
