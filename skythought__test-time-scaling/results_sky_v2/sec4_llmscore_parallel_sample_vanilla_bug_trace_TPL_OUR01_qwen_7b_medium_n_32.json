{"difficulty": "medium", "num_threads": 32, "temperature": 0.7, "n": 32, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_OUR01_qwen_7b_medium_n_32.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3485", "code": "def maxScore(start, d):\n    choices = []\n    for s in start:\n        choices.append(s + d)\n        choices.append(s)\n    choices.sort()\n    max_diff = 0\n    for i in range(1, len(choices)):\n        max_diff = max(max_diff, choices[i] - choices[i - 1])\n    return max_diff", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    choices = []\n    for s in start:\n        choices.append(s + d)\n        choices.append(s)\n    choices.sort()\n    max_diff = 0\n    for i in range(1, len(choices)):\n        max_diff = max(max_diff, choices[i] - choices[i - 1])\n    return max_diff\n```"}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    seen_banned = set()\n    \n    for word in message:\n        if word in banned_set and word not in seen_banned:\n            banned_count += 1\n            seen_banned.add(word)\n        \n        if banned_count >= 2:\n            return True\n    \n    return False", "passed": false, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    seen_banned = set()\n    \n    for word in message:\n        if word in banned_set and word not in seen_banned:\n            banned_count += 1\n            seen_banned.add(word)\n        \n        if banned_count >= 2:\n            return True\n    \n    return False\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read the first line to get the number of elements\n    N = int(data[0])\n    \n    # Read the second line to get the elements of sequence A\n    A = list(map(int, data[1:N+1]))\n    \n    # Read the third line to get the elements of sequence B\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    # Find the maximum value in sequence A\n    max_A = max(A)\n    \n    # Find the maximum value in sequence B\n    max_B = max(B)\n    \n    # Print the sum of the maximum values\n    print(max_A + max_B)\n\nmax_sum_of_sequences()", "passed": true, "raw_code": "```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read the first line to get the number of elements\n    N = int(data[0])\n    \n    # Read the second line to get the elements of sequence A\n    A = list(map(int, data[1:N+1]))\n    \n    # Read the third line to get the elements of sequence B\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    # Find the maximum value in sequence A\n    max_A = max(A)\n    \n    # Find the maximum value in sequence B\n    max_B = max(B)\n    \n    # Print the sum of the maximum values\n    print(max_A + max_B)\n\nmax_sum_of_sequences()\n```"}
{"task_id": "3518", "code": "def max_score(a, b):\n    # Sort the array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score using the top four elements of b\n    score = a[0] * b_sorted[0] + a[1] * b_sorted[1] + a[2] * b_sorted[2] + a[3] * b_sorted[3]\n    \n    return score", "passed": false, "raw_code": "```python\ndef max_score(a, b):\n    # Sort the array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score using the top four elements of b\n    score = a[0] * b_sorted[0] + a[1] * b_sorted[1] + a[2] * b_sorted[2] + a[3] * b_sorted[3]\n    \n    return score\n```"}
{"task_id": "3540", "code": "def hash_string(s, k):\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s, k):\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    # Initialize DP arrays\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Base cases\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill DP arrays\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkA[i] if i >= 2 else 0)\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkB[i] if i >= 2 else 0)\n    \n    return max(dp_A[-1], dp_B[-1])", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    # Initialize DP arrays\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Base cases\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill DP arrays\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkA[i] if i >= 2 else 0)\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkB[i] if i >= 2 else 0)\n    \n    return max(dp_A[-1], dp_B[-1])\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    ball_count = {}\n    unique_balls = set()\n    result = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            if x in ball_count:\n                ball_count[x] += 1\n            else:\n                ball_count[x] = 1\n                unique_balls.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            ball_count[x] -= 1\n            if ball_count[x] == 0:\n                unique_balls.remove(x)\n        elif query_type == 3:\n            result.append(len(unique_balls))\n    \n    for r in result:\n        print(r)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    ball_count = {}\n    unique_balls = set()\n    result = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            if x in ball_count:\n                ball_count[x] += 1\n            else:\n                ball_count[x] = 1\n                unique_balls.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            ball_count[x] -= 1\n            if ball_count[x] == 0:\n                unique_balls.remove(x)\n        elif query_type == 3:\n            result.append(len(unique_balls))\n    \n    for r in result:\n        print(r)\n\nprocess_queries()\n```"}
{"task_id": "3522", "code": "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if sorted(subarray) == subarray and all(subarray[j] + 1 == subarray[j+1] for j in range(k-1)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "passed": true, "raw_code": "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if sorted(subarray) == subarray and all(subarray[j] + 1 == subarray[j+1] for j in range(k-1)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "abc372_d", "code": "def count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    \n    for i in range(N):\n        max_height = -1\n        for j in range(i + 1, N):\n            if heights[j] > max_height:\n                result[i] += 1\n                max_height = heights[j]\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()", "passed": false, "raw_code": "```python\ndef count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    \n    for i in range(N):\n        max_height = -1\n        for j in range(i + 1, N):\n            if heights[j] > max_height:\n                result[i] += 1\n                max_height = heights[j]\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()\n```"}
{"task_id": "3526", "code": "def minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    row_flips = [sum(grid[i][j] != grid[i][n-1-j] for j in range(n)) // 2 for i in range(m)]\n    col_flips = [sum(grid[i][j] != grid[m-1-i][j] for i in range(m)) // 2 for j in range(n)]\n    return min(sum(row_flips), sum(col_flips))", "passed": true, "raw_code": "```python\ndef minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    row_flips = [sum(grid[i][j] != grid[i][n-1-j] for j in range(n)) // 2 for i in range(m)]\n    col_flips = [sum(grid[i][j] != grid[m-1-i][j] for i in range(m)) // 2 for j in range(n)]\n    return min(sum(row_flips), sum(col_flips))\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    # Iterate through the sorted list and calculate the experience points\n    for i in range(N):\n        if i % 2 == 0:\n            total_experience += A[i]\n        else:\n            total_experience += A[i] * 2\n    \n    print(total_experience)\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    # Iterate through the sorted list and calculate the experience points\n    for i in range(N):\n        if i % 2 == 0:\n            total_experience += A[i]\n        else:\n            total_experience += A[i] * 2\n    \n    print(total_experience)\n\nmax_experience_points()\n```"}
{"task_id": "3496", "code": "def minMountainReductionTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        return sum((time // (workerTime * (i + 1))) for i, workerTime in enumerate(workerTimes)) >= height\n    \n    workerTimes.sort()\n    left, right = 1, sum(workerTime * (mountainHeight * (mountainHeight + 1) // 2) for workerTime in workerTimes)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n            \n    return left", "passed": false, "raw_code": "```python\ndef minMountainReductionTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        return sum((time // (workerTime * (i + 1))) for i, workerTime in enumerate(workerTimes)) >= height\n    \n    workerTimes.sort()\n    left, right = 1, sum(workerTime * (mountainHeight * (mountainHeight + 1) // 2) for workerTime in workerTimes)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n            \n    return left\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[n - 1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[n - 1]\n```"}
{"task_id": "abc367_d", "code": "def count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    count = 0\n    \n    for s in range(N):\n        total_steps = 0\n        for t in range(s + 1, N):\n            total_steps += A[(t - s) % N]\n            if total_steps % M == 0:\n                count += 1\n        \n        total_steps = 0\n        for t in range(0, s):\n            total_steps += A[(N - s + t) % N]\n            if total_steps % M == 0:\n                count += 1\n    \n    print(count)\n\ncount_valid_pairs()", "passed": false, "raw_code": "```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    count = 0\n    \n    for s in range(N):\n        total_steps = 0\n        for t in range(s + 1, N):\n            total_steps += A[(t - s) % N]\n            if total_steps % M == 0:\n                count += 1\n        \n        total_steps = 0\n        for t in range(0, s):\n            total_steps += A[(N - s + t) % N]\n            if total_steps % M == 0:\n                count += 1\n    \n    print(count)\n\ncount_valid_pairs()\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        for r in range(l, N):\n            if r - l <= 1:\n                count += 1\n            else:\n                d = A[r] - A[r-1]\n                is_arithmetic = True\n                for i in range(r-1, l, -1):\n                    if A[i] - A[i-1] != d:\n                        is_arithmetic = False\n                        break\n                if is_arithmetic:\n                    count += 1\n    \n    print(count)\n\n# Call the function\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        for r in range(l, N):\n            if r - l <= 1:\n                count += 1\n            else:\n                d = A[r] - A[r-1]\n                is_arithmetic = True\n                for i in range(r-1, l, -1):\n                    if A[i] - A[i-1] != d:\n                        is_arithmetic = False\n                        break\n                if is_arithmetic:\n                    count += 1\n    \n    print(count)\n\n# Call the function\ncount_arithmetic_progressions()\n```"}
{"task_id": "3534", "code": "def count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def swap_digits(num, i, j):\n        num_str = str(num)\n        num_list = list(num_str)\n        num_list[i], num_list[j] = num_list[j], num_list[i]\n        return int(''.join(num_list))\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] == nums[j]:\n                count += 1\n            else:\n                num1 = str(nums[i])\n                num2 = str(nums[j])\n                for k in range(len(num1)):\n                    for l in range(k + 1, len(num1)):\n                        swapped_num1 = swap_digits(nums[i], k, l)\n                        if swapped_num1 == nums[j]:\n                            count += 1\n                        swapped_num2 = swap_digits(nums[j], k, l)\n                        if swapped_num2 == nums[i]:\n                            count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def swap_digits(num, i, j):\n        num_str = str(num)\n        num_list = list(num_str)\n        num_list[i], num_list[j] = num_list[j], num_list[i]\n        return int(''.join(num_list))\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] == nums[j]:\n                count += 1\n            else:\n                num1 = str(nums[i])\n                num2 = str(nums[j])\n                for k in range(len(num1)):\n                    for l in range(k + 1, len(num1)):\n                        swapped_num1 = swap_digits(nums[i], k, l)\n                        if swapped_num1 == nums[j]:\n                            count += 1\n                        swapped_num2 = swap_digits(nums[j], k, l)\n                        if swapped_num2 == nums[i]:\n                            count += 1\n    \n    return count\n```"}
{"task_id": "3559", "code": "def min_valid_strings(words, target):\n    prefix_map = {}\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefix_map[word[:i]] = True\n    \n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    for i in range(1, len(target) + 1):\n        for j in range(i):\n            if target[j:i] in prefix_map:\n                dp[i] = min(dp[i], dp[j] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef min_valid_strings(words, target):\n    prefix_map = {}\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefix_map[word[:i]] = True\n    \n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    for i in range(1, len(target) + 1):\n        for j in range(i):\n            if target[j:i] in prefix_map:\n                dp[i] = min(dp[i], dp[j] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n```"}
{"task_id": "3495", "code": "import heapq\n\ndef kthSmallestDistance(queries, k):\n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(distances, distance)\n        \n        if len(distances) >= k:\n            results.append(heapq.nsmallest(k, distances)[-1])\n        else:\n            results.append(-1)\n    \n    return results", "passed": false, "raw_code": "```python\nimport heapq\n\ndef kthSmallestDistance(queries, k):\n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(distances, distance)\n        \n        if len(distances) >= k:\n            results.append(heapq.nsmallest(k, distances)[-1])\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "abc367_c", "code": "def generate_sequences(N, K, R, current_sequence, current_sum):\n    if len(current_sequence) == N:\n        if current_sum % K == 0:\n            print(' '.join(map(str, current_sequence)))\n        return\n    for i in range(1, R[len(current_sequence)] + 1):\n        generate_sequences(N, K, R, current_sequence + [i], current_sum + i)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nR = list(map(int, data[2:]))\ngenerate_sequences(N, K, R, [], 0)", "passed": true, "raw_code": "def generate_sequences(N, K, R, current_sequence, current_sum):\n    if len(current_sequence) == N:\n        if current_sum % K == 0:\n            print(' '.join(map(str, current_sequence)))\n        return\n    for i in range(1, R[len(current_sequence)] + 1):\n        generate_sequences(N, K, R, current_sequence + [i], current_sum + i)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nR = list(map(int, data[2:]))\ngenerate_sequences(N, K, R, [], 0)"}
{"task_id": "abc371_d", "code": "import sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read number of villages\n    N = int(data[0])\n    \n    # Read village coordinates and populations\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    \n    # Read number of queries\n    Q = int(data[2*N+1])\n    \n    # Read queries\n    queries = []\n    for i in range(Q):\n        L = int(data[2*N+2 + 2*i])\n        R = int(data[2*N+3 + 2*i])\n        queries.append((L, R))\n    \n    # Compute prefix sum array\n    prefix_sum = [0]\n    for p in P:\n        prefix_sum.append(prefix_sum[-1] + p)\n    \n    # Process each query\n    for L, R in queries:\n        # Find the leftmost village greater than or equal to L\n        left_index = bisect_left(X, L)\n        \n        # Find the rightmost village less than or equal to R\n        right_index = bisect_right(X, R)\n        \n        # Calculate the number of villagers in the range [L, R]\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\nimport sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read number of villages\n    N = int(data[0])\n    \n    # Read village coordinates and populations\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    \n    # Read number of queries\n    Q = int(data[2*N+1])\n    \n    # Read queries\n    queries = []\n    for i in range(Q):\n        L = int(data[2*N+2 + 2*i])\n        R = int(data[2*N+3 + 2*i])\n        queries.append((L, R))\n    \n    # Compute prefix sum array\n    prefix_sum = [0]\n    for p in P:\n        prefix_sum.append(prefix_sum[-1] + p)\n    \n    # Process each query\n    for L, R in queries:\n        # Find the leftmost village greater than or equal to L\n        left_index = bisect_left(X, L)\n        \n        # Find the rightmost village less than or equal to R\n        right_index = bisect_right(X, R)\n        \n        # Calculate the number of villagers in the range [L, R]\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3579", "code": "def max_number(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Define a custom comparator to compare concatenated results\n    def compare(x, y):\n        return int(y + x, 2) - int(x + y, 2)\n    \n    # Sort the numbers based on the custom comparator\n    sorted_nums = sorted(binary_nums, key=cmp_to_key(compare))\n    \n    # Concatenate the sorted binary representations and convert to integer\n    max_num = int(''.join(sorted_nums), 2)\n    \n    return max_num\n\nfrom functools import cmp_to_key", "passed": true, "raw_code": "```python\ndef max_number(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Define a custom comparator to compare concatenated results\n    def compare(x, y):\n        return int(y + x, 2) - int(x + y, 2)\n    \n    # Sort the numbers based on the custom comparator\n    sorted_nums = sorted(binary_nums, key=cmp_to_key(compare))\n    \n    # Concatenate the sorted binary representations and convert to integer\n    max_num = int(''.join(sorted_nums), 2)\n    \n    return max_num\n\nfrom functools import cmp_to_key\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    A.sort()\n    total = sum(A)\n    if total <= M:\n        return \"infinite\"\n    \n    left, right = 0, A[-1]\n    while left < right:\n        mid = (left + right + 1) // 2\n        if sum(min(mid, a) for a in A) <= M:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    A.sort()\n    total = sum(A)\n    if total <= M:\n        return \"infinite\"\n    \n    left, right = 0, A[-1]\n    while left < right:\n        mid = (left + right + 1) // 2\n        if sum(min(mid, a) for a in A) <= M:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "arc181_a", "code": "d", "passed": false, "raw_code": "```python\ndef merge_sort_and_count(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    \n    mid = len(arr) // 2\n    left, inv_left = merge_sort_and_count(arr[:mid])\n    right, inv_right = merge_sort_and_count(arr[mid:])\n    \n    merged, inv_merge = merge_and_count(left, right)\n    \n    return merged, inv_left + inv_right + inv_merge\n\ndef merge_and_count(left, right):\n    result = []\n    i = j = inv_count = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n    \n    result += left[i:]\n    result += right[j:]\n    \n    return result, inv_count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        \n        _, inversions = merge_sort_and_count(P)\n        results.append(str(inversions))\n    \n    for result in results:\n        print(result)\n\nsolve()"}
{"task_id": "3558", "code": "def canReachFinalCell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy, health - temp):\n                return True\n        \n        grid[x][y] = temp  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef canReachFinalCell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy, health - temp):\n                return True\n        \n        grid[x][y] = temp  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "3517", "code": "def shortestPath(n, queries):\n    parent = list(range(n))\n    rank = [1] * n\n    dist = [float('inf')] * n\n    dist[0] = 0\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        rootX = find(x)\n        rootY = find(y)\n        if rootX != rootY:\n            if rank[rootX] > rank[rootY]:\n                parent[rootY] = rootX\n                dist[rootY] = min(dist[rootY], dist[rootX] + 1)\n            elif rank[rootX] < rank[rootY]:\n                parent[rootX] = rootY\n                dist[rootX] = min(dist[rootX], dist[rootY] + 1)\n            else:\n                parent[rootY] = rootX\n                rank[rootX] += 1\n                dist[rootY] = min(dist[rootY], dist[rootX] + 1)\n\n    result = []\n    for u, v in queries:\n        union(u, v)\n        result.append(min(dist[n-1], len(queries) - len(result)))\n    \n    return result", "passed": false, "raw_code": "```python\ndef shortestPath(n, queries):\n    parent = list(range(n))\n    rank = [1] * n\n    dist = [float('inf')] * n\n    dist[0] = 0\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        rootX = find(x)\n        rootY = find(y)\n        if rootX != rootY:\n            if rank[rootX] > rank[rootY]:\n                parent[rootY] = rootX\n                dist[rootY] = min(dist[rootY], dist[rootX] + 1)\n            elif rank[rootX] < rank[rootY]:\n                parent[rootX] = rootY\n                dist[rootX] = min(dist[rootX], dist[rootY] + 1)\n            else:\n                parent[rootY] = rootX\n                rank[rootX] += 1\n                dist[rootY] = min(dist[rootY], dist[rootX] + 1)\n\n    result = []\n    for u, v in queries:\n        union(u, v)\n        result.append(min(dist[n-1], len(queries) - len(result)))\n    \n    return result\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    # Initialize variables\n    takahashi_wins = 0\n    last_takahashi_move = None\n    \n    # Iterate through Aoki's moves\n    for move in S:\n        if last_takahashi_move is None:\n            # Choose a move that beats Aoki's first move\n            if move == 'R':\n                takahashi_move = 'P'\n            elif move == 'P':\n                takahashi_move = 'S'\n            else:\n                takahashi_move = 'R'\n        else:\n            # Alternate between the remaining two moves\n            if last_takahashi_move == 'R':\n                takahashi_move = 'P' if move != 'P' else 'S'\n            elif last_takahashi_move == 'P':\n                takahashi_move = 'S' if move != 'S' else 'R'\n            else:\n                takahashi_move = 'R' if move != 'R' else 'P'\n        \n        # Check if Takahashi wins\n        if (takahashi_move == 'R' and move == 'S') or \\\n           (takahashi_move == 'P' and move == 'R') or \\\n           (takahashi_move == 'S' and move == 'P'):\n            takahashi_wins += 1\n        \n        # Update last move\n        last_takahashi_move = takahashi_move\n    \n    return takahashi_wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    # Initialize variables\n    takahashi_wins = 0\n    last_takahashi_move = None\n    \n    # Iterate through Aoki's moves\n    for move in S:\n        if last_takahashi_move is None:\n            # Choose a move that beats Aoki's first move\n            if move == 'R':\n                takahashi_move = 'P'\n            elif move == 'P':\n                takahashi_move = 'S'\n            else:\n                takahashi_move = 'R'\n        else:\n            # Alternate between the remaining two moves\n            if last_takahashi_move == 'R':\n                takahashi_move = 'P' if move != 'P' else 'S'\n            elif last_takahashi_move == 'P':\n                takahashi_move = 'S' if move != 'S' else 'R'\n            else:\n                takahashi_move = 'R' if move != 'R' else 'P'\n        \n        # Check if Takahashi wins\n        if (takahashi_move == 'R' and move == 'S') or \\\n           (takahashi_move == 'P' and move == 'R') or \\\n           (takahashi_move == 'S' and move == 'P'):\n            takahashi_wins += 1\n        \n        # Update last move\n        last_takahashi_move = takahashi_move\n    \n    return takahashi_wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "abc372_c", "code": "def count_ABC(S):\n    n = len(S)\n    count = 0\n    for i in range(n - 2):\n        if S[i:i+3] == 'ABC':\n            count += 1\n    return count\n\ndef process_queries(N, Q, S, queries):\n    result = []\n    current_count = count_ABC(S)\n    \n    for X, C in queries:\n        X -= 1  # Convert to 0-based index\n        old_char = S[X]\n        \n        # Update the string\n        S = S[:X] + C + S[X+1:]\n        \n        # Adjust the count using the sliding window technique\n        if X > 0 and X < N - 2:\n            if S[X-1:X+2] == 'ABC':\n                current_count -= 1\n            if S[X:X+3] == 'ABC':\n                current_count += 1\n        \n        result.append(current_count)\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[3 + 2 * i]) - 1, data[4 + 2 * i]) for i in range(Q)]\n\n# Process queries and get results\nresults = process_queries(N, Q, S, queries)\n\n# Print results\nfor result in results:\n    print(result)", "passed": false, "raw_code": "```python\ndef count_ABC(S):\n    n = len(S)\n    count = 0\n    for i in range(n - 2):\n        if S[i:i+3] == 'ABC':\n            count += 1\n    return count\n\ndef process_queries(N, Q, S, queries):\n    result = []\n    current_count = count_ABC(S)\n    \n    for X, C in queries:\n        X -= 1  # Convert to 0-based index\n        old_char = S[X]\n        \n        # Update the string\n        S = S[:X] + C + S[X+1:]\n        \n        # Adjust the count using the sliding window technique\n        if X > 0 and X < N - 2:\n            if S[X-1:X+2] == 'ABC':\n                current_count -= 1\n            if S[X:X+3] == 'ABC':\n                current_count += 1\n        \n        result.append(current_count)\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[3 + 2 * i]) - 1, data[4 + 2 * i]) for i in range(Q)]\n\n# Process queries and get results\nresults = process_queries(N, Q, S, queries)\n\n# Print results\nfor result in results:\n    print(result)\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    count_w2 = Counter(word2)\n    count_window = Counter()\n    \n    i, j, result = 0, 0, 0\n    \n    while j < m:\n        count_window[word1[j]] += 1\n        \n        # Check if the current window contains all characters of word2 in the correct order\n        while count_window >= count_w2:\n            if j - i + 1 == n:\n                result += m - j\n            count_window[word1[i]] -= 1\n            if count_window[word1[i]] == 0:\n                del count_window[word1[i]]\n            i += 1\n        \n        j += 1\n    \n    return result", "passed": false, "raw_code": "```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    count_w2 = Counter(word2)\n    count_window = Counter()\n    \n    i, j, result = 0, 0, 0\n    \n    while j < m:\n        count_window[word1[j]] += 1\n        \n        # Check if the current window contains all characters of word2 in the correct order\n        while count_window >= count_w2:\n            if j - i + 1 == n:\n                result += m - j\n            count_window[word1[i]] -= 1\n            if count_window[word1[i]] == 0:\n                del count_window[word1[i]]\n            i += 1\n        \n        j += 1\n    \n    return result\n```"}
{"task_id": "abc370_c", "code": "def min_steps_to_transform(S, T):\n    # Initialize variables\n    n = len(S)\n    steps = []\n    current = S\n    # Iterate through each character position\n    for i in range(n):\n        # Find the first mismatch\n        if current[i] != T[i]:\n            # Determine the target character to replace\n            target_char = T[i]\n            # Replace characters to match the target character up to the mismatch point\n            for j in range(i, n):\n                if current[j] == target_char:\n                    break\n            # Append intermediate states to the steps list\n            while current[:j+1] != T[:j+1]:\n                current = current[:j] + target_char + current[j+1]\n                steps.append(current)\n    return steps\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nS = data[0]\nT = data[1]\n\n# Get the array of strings X\nX = min_steps_to_transform(S, T)\n\n# Print the result\nprint(len(X))\nfor step in X:\n    print(step)", "passed": false, "raw_code": "def min_steps_to_transform(S, T):\n    # Initialize variables\n    n = len(S)\n    steps = []\n    current = S\n    # Iterate through each character position\n    for i in range(n):\n        # Find the first mismatch\n        if current[i] != T[i]:\n            # Determine the target character to replace\n            target_char = T[i]\n            # Replace characters to match the target character up to the mismatch point\n            for j in range(i, n):\n                if current[j] == target_char:\n                    break\n            # Append intermediate states to the steps list\n            while current[:j+1] != T[:j+1]:\n                current = current[:j] + target_char + current[j+1]\n                steps.append(current)\n    return steps\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nS = data[0]\nT = data[1]\n\n# Get the array of strings X\nX = min_steps_to_transform(S, T)\n\n# Print the result\nprint(len(X))\nfor step in X:\n    print(step)"}
{"task_id": "arc183_a", "code": "import itertools\n\ndef find_good_sequence(N, K):\n    # Generate all numbers from 1 to N repeated K times\n    numbers = [num for num in range(1, N + 1) for _ in range(K)]\n    \n    # Generate all unique permutations of the list\n    all_permutations = set(itertools.permutations(numbers))\n    \n    # Convert the set to a sorted list\n    sorted_permutations = sorted(all_permutations)\n    \n    # Calculate the target index\n    S = len(sorted_permutations)\n    target_index = (S + 1) // 2 - 1\n    \n    # Get the target permutation\n    target_sequence = sorted_permutations[target_index]\n    \n    # Print the sequence\n    print(' '.join(map(str, target_sequence)))\n\n# Example usage\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    find_good_sequence(N, K)", "passed": false, "raw_code": "```python\nimport itertools\n\ndef find_good_sequence(N, K):\n    # Generate all numbers from 1 to N repeated K times\n    numbers = [num for num in range(1, N + 1) for _ in range(K)]\n    \n    # Generate all unique permutations of the list\n    all_permutations = set(itertools.permutations(numbers))\n    \n    # Convert the set to a sorted list\n    sorted_permutations = sorted(all_permutations)\n    \n    # Calculate the target index\n    S = len(sorted_permutations)\n    target_index = (S + 1) // 2 - 1\n    \n    # Get the target permutation\n    target_sequence = sorted_permutations[target_index]\n    \n    # Print the sequence\n    print(' '.join(map(str, target_sequence)))\n\n# Example usage\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    find_good_sequence(N, K)\n```"}
{"task_id": "3510", "code": "def maxTowerSum(maximumHeight):\n    # Sort the maximumHeight array in descending order\n    heights = sorted(maximumHeight, reverse=True)\n    \n    # Initialize the set to keep track of used heights\n    used_heights = set()\n    \n    # Iterate through the sorted heights\n    for height in heights:\n        # Find the next available unique height\n        while height in used_heights:\n            height -= 1\n        \n        # If we cannot find a valid height, return -1\n        if height == 0:\n            return -1\n        \n        # Add the height to the set of used heights\n        used_heights.add(height)\n    \n    # Calculate the sum of the assigned heights\n    return sum(used_heights)", "passed": false, "raw_code": "```python\ndef maxTowerSum(maximumHeight):\n    # Sort the maximumHeight array in descending order\n    heights = sorted(maximumHeight, reverse=True)\n    \n    # Initialize the set to keep track of used heights\n    used_heights = set()\n    \n    # Iterate through the sorted heights\n    for height in heights:\n        # Find the next available unique height\n        while height in used_heights:\n            height -= 1\n        \n        # If we cannot find a valid height, return -1\n        if height == 0:\n            return -1\n        \n        # Add the height to the set of used heights\n        used_heights.add(height)\n    \n    # Calculate the sum of the assigned heights\n    return sum(used_heights)\n```"}
{"task_id": "3584", "code": "def findValidSequence(word1, word2):\n    n, m = len(word1), len(word2)\n    diffs = [i for i in range(m) if word1[i] != word2[i]]\n    \n    if len(diffs) > 1:\n        return []\n    \n    if not diffs:\n        return list(range(m))\n    \n    if word1[diffs[0]] == word2[diffs[0] + 1] or (diffs[0] + 1 < m and word1[diffs[0] + 1] == word2[diffs[0]]):\n        return [diffs[0], diffs[0] + 1]\n    \n    return []", "passed": false, "raw_code": "```python\ndef findValidSequence(word1, word2):\n    n, m = len(word1), len(word2)\n    diffs = [i for i in range(m) if word1[i] != word2[i]]\n    \n    if len(diffs) > 1:\n        return []\n    \n    if not diffs:\n        return list(range(m))\n    \n    if word1[diffs[0]] == word2[diffs[0] + 1] or (diffs[0] + 1 < m and word1[diffs[0] + 1] == word2[diffs[0]]):\n        return [diffs[0], diffs[0] + 1]\n    \n    return []\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    walls = {(i, j) for i in range(1, H + 1) for j in range(1, W + 1)}\n    for _ in range(Q):\n        R = int(data[index])\n        C = int(data[index + 1])\n        index += 2\n        if (R, C) in walls:\n            walls.remove((R, C))\n        else:\n            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n            for dr, dc in directions:\n                r, c = R, C\n                while True:\n                    r += dr\n                    c += dc\n                    if 1 <= r <= H and 1 <= c <= W and (r, c) in walls:\n                        walls.remove((r, c))\n                        break\n                    elif not (1 <= r <= H and 1 <= c <= W):\n                        break\n    print(len(walls))\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    walls = {(i, j) for i in range(1, H + 1) for j in range(1, W + 1)}\n    for _ in range(Q):\n        R = int(data[index])\n        C = int(data[index + 1])\n        index += 2\n        if (R, C) in walls:\n            walls.remove((R, C))\n        else:\n            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n            for dr, dc in directions:\n                r, c = R, C\n                while True:\n                    r += dr\n                    c += dc\n                    if 1 <= r <= H and 1 <= c <= W and (r, c) in walls:\n                        walls.remove((r, c))\n                        break\n                    elif not (1 <= r <= H and 1 <= c <= W):\n                        break\n    print(len(walls))\nmain()"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    healths = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while healths:\n        T += 1\n        enemy_health = healths[0]\n        \n        if T % 3 == 0:\n            enemy_health -= 3\n        else:\n            enemy_health -= 1\n        \n        if enemy_health <= 0:\n            healths.pop(0)\n        else:\n            healths[0] = enemy_health\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    healths = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while healths:\n        T += 1\n        enemy_health = healths[0]\n        \n        if T % 3 == 0:\n            enemy_health -= 3\n        else:\n            enemy_health -= 1\n        \n        if enemy_health <= 0:\n            healths.pop(0)\n        else:\n            healths[0] = enemy_health\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "abc371_c", "code": "from itertools import permutations\nimport sys\nimport numpy as np\n\ndef is_isomorphic(g, h, perm):\n    n = len(g)\n    for i in range(n):\n        for j in range(i+1, n):\n            if g[i][j] != h[perm[i]][perm[j]]:\n                return False\n    return True\n\ndef min_cost_to_isomorphic(g, h, costs):\n    n = len(g)\n    min_cost = float('inf')\n    for perm in permutations(range(n)):\n        if is_isomorphic(g, h, perm):\n            cost = sum(costs[i][j] for i in range(n) for j in range(i+1, n) if g[i][j] != h[perm[i]][perm[j]])\n            min_cost = min(min_cost, cost)\n    return min_cost\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    \n    m_g = int(data[index])\n    index += 1\n    g = np.zeros((n, n), dtype=int)\n    for _ in range(m_g):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        g[u][v] = 1\n        g[v][u] = 1\n        index += 2\n    \n    m_h = int(data[index])\n    index += 1\n    h = np.zeros((n, n), dtype=int)\n    for _ in range(m_h):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        h[a][b] = 1\n        h[b][a] = 1\n        index += 2\n    \n    costs = []\n    for _ in range(n-1):\n        row = list(map(int, data[index:index+n-1]))\n        costs.append(row)\n        index += n-1\n    \n    min_cost = min_cost_to_isomorphic(g, h, costs)\n    print(min_cost)\n\nmain()", "passed": false, "raw_code": "```python\nfrom itertools import permutations\nimport sys\nimport numpy as np\n\ndef is_isomorphic(g, h, perm):\n    n = len(g)\n    for i in range(n):\n        for j in range(i+1, n):\n            if g[i][j] != h[perm[i]][perm[j]]:\n                return False\n    return True\n\ndef min_cost_to_isomorphic(g, h, costs):\n    n = len(g)\n    min_cost = float('inf')\n    for perm in permutations(range(n)):\n        if is_isomorphic(g, h, perm):\n            cost = sum(costs[i][j] for i in range(n) for j in range(i+1, n) if g[i][j] != h[perm[i]][perm[j]])\n            min_cost = min(min_cost, cost)\n    return min_cost\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    \n    m_g = int(data[index])\n    index += 1\n    g = np.zeros((n, n), dtype=int)\n    for _ in range(m_g):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        g[u][v] = 1\n        g[v][u] = 1\n        index += 2\n    \n    m_h = int(data[index])\n    index += 1\n    h = np.zeros((n, n), dtype=int)\n    for _ in range(m_h):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        h[a][b] = 1\n        h[b][a] = 1\n        index += 2\n    \n    costs = []\n    for _ in range(n-1):\n        row = list(map(int, data[index:index+n-1]))\n        costs.append(row)\n        index += n-1\n    \n    min_cost = min_cost_to_isomorphic(g, h, costs)\n    print(min_cost)\n\nmain()\n```"}
{"task_id": "3570", "code": "def count_substrings(word, k):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    n = len(word)\n    total_count = 0\n    \n    # Iterate over possible starting points of the substring\n    for start in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        # Iterate over possible ending points of the substring\n        for end in range(start, n):\n            char = word[end]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            else:\n                consonant_count += 1\n            \n            # Check if the current substring contains exactly k consonants and all vowels\n            if consonant_count == k and len(seen_vowels) == 5:\n                total_count += 1\n    \n    return total_count", "passed": true, "raw_code": "```python\ndef count_substrings(word, k):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    n = len(word)\n    total_count = 0\n    \n    # Iterate over possible starting points of the substring\n    for start in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        # Iterate over possible ending points of the substring\n        for end in range(start, n):\n            char = word[end]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            else:\n                consonant_count += 1\n            \n            # Check if the current substring contains exactly k consonants and all vowels\n            if consonant_count == k and len(seen_vowels) == 5:\n                total_count += 1\n    \n    return total_count\n```"}
{"task_id": "abc366_d", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = [[[] for _ in range(N)] for _ in range(N)]\nindex = 1\nfor i in range(N):\n    for j in range(N):\n        A[i][j] = [int(data[index + k]) for k in range(N)]\n        index += N\n\nQ = int(data[index])\nqueries = []\nfor _ in range(Q):\n    Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index + 1:index + 7])\n    queries.append((Lx - 1, Rx - 1, Ly - 1, Ry - 1, Lz - 1, Rz - 1))\n    index += 6\n\n# Preprocess the 3D array with prefix sums\ncum_sum = [[[0 for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            cum_sum[x][y][z] = A[x - 1][y - 1][z - 1] + cum_sum[x - 1][y][z] + cum_sum[x][y - 1][z] + cum_sum[x][y][z - 1] - cum_sum[x - 1][y - 1][z] - cum_sum[x - 1][y][z - 1] - cum_sum[x][y - 1][z - 1] + cum_sum[x - 1][y - 1][z - 1]\n\ndef query(Lx, Rx, Ly, Ry, Lz, Rz):\n    return cum_sum[Rx + 1][Ry + 1][Rz + 1] - cum_sum[Lx][Ry + 1][Rz + 1] - cum_sum[Rx + 1][Ly][Rz + 1] - cum_sum[Rx + 1][Ry + 1][Lz] + cum_sum[Lx][Ly][Rz + 1] + cum_sum[Lx][Ry + 1][Lz] + cum_sum[Rx + 1][Ly][Lz] - cum_sum[Lx][Ly][Lz]\n\n# Process each query and print the result\nfor q in queries:\n    print(query(*q))", "passed": true, "raw_code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = [[[] for _ in range(N)] for _ in range(N)]\nindex = 1\nfor i in range(N):\n    for j in range(N):\n        A[i][j] = [int(data[index + k]) for k in range(N)]\n        index += N\n\nQ = int(data[index])\nqueries = []\nfor _ in range(Q):\n    Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index + 1:index + 7])\n    queries.append((Lx - 1, Rx - 1, Ly - 1, Ry - 1, Lz - 1, Rz - 1))\n    index += 6\n\n# Preprocess the 3D array with prefix sums\ncum_sum = [[[0 for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            cum_sum[x][y][z] = A[x - 1][y - 1][z - 1] + cum_sum[x - 1][y][z] + cum_sum[x][y - 1][z] + cum_sum[x][y][z - 1] - cum_sum[x - 1][y - 1][z] - cum_sum[x - 1][y][z - 1] - cum_sum[x][y - 1][z - 1] + cum_sum[x - 1][y - 1][z - 1]\n\ndef query(Lx, Rx, Ly, Ry, Lz, Rz):\n    return cum_sum[Rx + 1][Ry + 1][Rz + 1] - cum_sum[Lx][Ry + 1][Rz + 1] - cum_sum[Rx + 1][Ly][Rz + 1] - cum_sum[Rx + 1][Ry + 1][Lz] + cum_sum[Lx][Ly][Rz + 1] + cum_sum[Lx][Ry + 1][Lz] + cum_sum[Rx + 1][Ly][Lz] - cum_sum[Lx][Ly][Lz]\n\n# Process each query and print the result\nfor q in queries:\n    print(query(*q))"}
{"final_accuracy": "29.73%"}
