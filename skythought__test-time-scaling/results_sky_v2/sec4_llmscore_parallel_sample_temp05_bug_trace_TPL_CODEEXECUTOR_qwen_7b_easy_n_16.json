{"difficulty": "easy", "num_threads": 32, "temperature": 0.5, "n": 16, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp05_bug_trace_TPL_CODEEXECUTOR_qwen_7b_easy_n_16.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result = input_string.replace('.', '')\n    print(result)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result = input_string.replace('.', '')\n    print(result)\n\nremove_dots()\n```"}
{"task_id": "abc373_a", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()\n```"}
{"task_id": "3606", "code": "def min_digit_sum(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    transformed_nums = [sum_of_digits(num) for num in nums]\n    return min(transformed_nums)", "passed": true, "raw_code": "```python\ndef min_digit_sum(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    transformed_nums = [sum_of_digits(num) for num in nums]\n    return min(transformed_nums)\n```"}
{"task_id": "3555", "code": "def modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] = min_val * multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] = min_val * multiplier\n    return nums\n```"}
{"task_id": "abc368_b", "code": "def count_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\ncount_operations()", "passed": true, "raw_code": "```python\ndef count_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\ncount_operations()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki(A, B, C):\n    # Ensure B < C by swapping if necessary\n    if B > C:\n        B, C = C, B\n    \n    # Check if A is within the interval [B, C)\n    if B <= A < C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki(A, B, C):\n    # Ensure B < C by swapping if necessary\n    if B > C:\n        B, C = C, B\n    \n    # Check if A is within the interval [B, C)\n    if B <= A < C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    max_val = float('-inf')\n    second_max_val = float('-inf')\n    \n    for num in A:\n        if num > max_val:\n            second_max_val = max_val\n            max_val = num\n        elif num > second_max_val:\n            second_max_val = num\n    \n    # Find the index of the second largest element\n    for i, num in enumerate(A):\n        if num == second_max_val:\n            print(i + 1)\n            break\n\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    max_val = float('-inf')\n    second_max_val = float('-inf')\n    \n    for num in A:\n        if num > max_val:\n            second_max_val = max_val\n            max_val = num\n        elif num > second_max_val:\n            second_max_val = num\n    \n    # Find the index of the second largest element\n    for i, num in enumerate(A):\n        if num == second_max_val:\n            print(i + 1)\n            break\n\nfind_second_largest_index()\n```"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    # Calculate the remaining votes\n    remaining_votes = N - (T + A)\n    \n    # Determine if the outcome is decided\n    if abs(T - A) > remaining_votes:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Call the function\ndetermine_election_outcome()", "passed": true, "raw_code": "```python\ndef determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    # Calculate the remaining votes\n    remaining_votes = N - (T + A)\n    \n    # Determine if the outcome is decided\n    if abs(T - A) > remaining_votes:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Call the function\ndetermine_election_outcome()\n```"}
{"task_id": "abc367_b", "code": "def simplify_number():\n    import sys\n    X = float(sys.stdin.read().strip())\n    simplified_X = \"{:.3f}\".format(X).rstrip('0').rstrip('.')\n    print(simplified_X)\n\n# Call the function to execute\nsimplify_number()", "passed": true, "raw_code": "```python\ndef simplify_number():\n    import sys\n    X = float(sys.stdin.read().strip())\n    simplified_X = \"{:.3f}\".format(X).rstrip('0').rstrip('.')\n    print(simplified_X)\n\n# Call the function to execute\nsimplify_number()\n```"}
{"task_id": "3600", "code": "def kthCharacter(k):\n    length = 1\n    current_char = 'a'\n    \n    while length < k:\n        next_char = chr((ord(current_char) - ord('a') + 1) % 26 + ord('a'))\n        if next_char == 'a':\n            length += 1\n        else:\n            length *= 2\n    \n    remaining_length = k - (length // 2)\n    return chr((ord(current_char) - ord('a') + remaining_length) % 26 + ord('a'))", "passed": false, "raw_code": "```python\ndef kthCharacter(k):\n    length = 1\n    current_char = 'a'\n    \n    while length < k:\n        next_char = chr((ord(current_char) - ord('a') + 1) % 26 + ord('a'))\n        if next_char == 'a':\n            length += 1\n        else:\n            length *= 2\n    \n    remaining_length = k - (length // 2)\n    return chr((ord(current_char) - ord('a') + remaining_length) % 26 + ord('a'))\n```"}
{"task_id": "abc368_a", "code": "def rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n    \n    # Extract the last K cards\n    bottom_cards = cards[-K:]\n    \n    # Reconstruct the stack\n    new_stack = bottom_cards + cards[:-K]\n    \n    # Print the result\n    print(' '.join(map(str, new_stack)))\n\n# Call the function\nrearrange_cards()", "passed": true, "raw_code": "```python\ndef rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n    \n    # Extract the last K cards\n    bottom_cards = cards[-K:]\n    \n    # Reconstruct the stack\n    new_stack = bottom_cards + cards[:-K]\n    \n    # Print the result\n    print(' '.join(map(str, new_stack)))\n\n# Call the function\nrearrange_cards()\n```"}
{"task_id": "abc370_a", "code": "def check_hand_raising():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    L = int(data[0])\n    R = int(data[1])\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"Yes\")\n    else:\n        print(\"Invalid\")\n\ncheck_hand_raising()", "passed": false, "raw_code": "```python\ndef check_hand_raising():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    L = int(data[0])\n    R = int(data[1])\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"Yes\")\n    else:\n        print(\"Invalid\")\n\ncheck_hand_raising()\n```"}
{"task_id": "abc370_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    current_element = 1\n    \n    for i in range(2, N + 1):\n        row = list(map(int, data[index:index + i]))\n        index += i\n        \n        if i >= current_element:\n            current_element = row[current_element - 1]\n        else:\n            current_element = row[i - 1]\n    \n    print(current_element)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    current_element = 1\n    \n    for i in range(2, N + 1):\n        row = list(map(int, data[index:index + i]))\n        index += i\n        \n        if i >= current_element:\n            current_element = row[current_element - 1]\n        else:\n            current_element = row[i - 1]\n    \n    print(current_element)\n\nmain()\n```"}
{"task_id": "3567", "code": "def binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    return f\"{bin(year)[2:]}-{bin(month)[2:]}-{bin(day)[2:]}\"", "passed": true, "raw_code": "```python\ndef binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    return f\"{bin(year)[2:]}-{bin(month)[2:]}-{bin(day)[2:]}\"\n```"}
{"task_id": "abc365_a", "code": "def number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\nnumber_of_days_in_year()", "passed": true, "raw_code": "```python\ndef number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\nnumber_of_days_in_year()\n```"}
{"task_id": "abc371_b", "code": "def determine_names():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Initialize a list to keep track of the number of boys born in each family\n    boys_count = [0] * (N + 1)\n    \n    result = []\n    \n    index = 2\n    for _ in range(M):\n        family = int(data[index])\n        gender = data[index + 1]\n        \n        if gender == 'M':\n            if boys_count[family] == 0:\n                result.append(\"Yes\")\n            else:\n                result.append(\"No\")\n            boys_count[family] += 1\n        else:\n            result.append(\"No\")\n        \n        index += 2\n    \n    for r in result:\n        print(r)\n\ndetermine_names()", "passed": true, "raw_code": "```python\ndef determine_names():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Initialize a list to keep track of the number of boys born in each family\n    boys_count = [0] * (N + 1)\n    \n    result = []\n    \n    index = 2\n    for _ in range(M):\n        family = int(data[index])\n        gender = data[index + 1]\n        \n        if gender == 'M':\n            if boys_count[family] == 0:\n                result.append(\"Yes\")\n            else:\n                result.append(\"No\")\n            boys_count[family] += 1\n        else:\n            result.append(\"No\")\n        \n        index += 2\n    \n    for r in result:\n        print(r)\n\ndetermine_names()\n```"}
{"task_id": "abc369_b", "code": "def min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = []\n    S = []\n    for i in range(1, 2*N, 2):\n        A.append(int(data[i]))\n        S.append(data[i+1])\n    \n    # Initial positions of left and right hands\n    left_hand = 0\n    right_hand = 0\n    \n    # Initialize fatigue level\n    fatigue = 0\n    \n    for i in range(N):\n        if S[i] == 'L':\n            if abs(A[i] - left_hand) < abs(A[i] - right_hand):\n                fatigue += abs(A[i] - left_hand)\n                left_hand = A[i]\n            else:\n                fatigue += abs(A[i] - right_hand)\n                right_hand = A[i]\n        else:\n            if abs(A[i] - right_hand) < abs(A[i] - left_hand):\n                fatigue += abs(A[i] - right_hand)\n                right_hand = A[i]\n            else:\n                fatigue += abs(A[i] - left_hand)\n                left_hand = A[i]\n    \n    print(fatigue)\n\nmin_fatigue_level()", "passed": false, "raw_code": "```python\ndef min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = []\n    S = []\n    for i in range(1, 2*N, 2):\n        A.append(int(data[i]))\n        S.append(data[i+1])\n    \n    # Initial positions of left and right hands\n    left_hand = 0\n    right_hand = 0\n    \n    # Initialize fatigue level\n    fatigue = 0\n    \n    for i in range(N):\n        if S[i] == 'L':\n            if abs(A[i] - left_hand) < abs(A[i] - right_hand):\n                fatigue += abs(A[i] - left_hand)\n                left_hand = A[i]\n            else:\n                fatigue += abs(A[i] - right_hand)\n                right_hand = A[i]\n        else:\n            if abs(A[i] - right_hand) < abs(A[i] - left_hand):\n                fatigue += abs(A[i] - right_hand)\n                right_hand = A[i]\n            else:\n                fatigue += abs(A[i] - left_hand)\n                left_hand = A[i]\n    \n    print(fatigue)\n\nmin_fatigue_level()\n```"}
{"task_id": "3553", "code": "def are_squares_same_color(coordinate1, coordinate2):\n    def get_column_index(column):\n        return ord(column) - ord('a') + 1\n    \n    col1, row1 = coordinate1[0], int(coordinate1[1])\n    col2, row2 = coordinate2[0], int(coordinate2[1])\n    \n    color1 = (get_column_index(col1) + row1) % 2 == 0\n    color2 = (get_column_index(col2) + row2) % 2 == 0\n    \n    return color1 == color2", "passed": true, "raw_code": "```python\ndef are_squares_same_color(coordinate1, coordinate2):\n    def get_column_index(column):\n        return ord(column) - ord('a') + 1\n    \n    col1, row1 = coordinate1[0], int(coordinate1[1])\n    col2, row2 = coordinate2[0], int(coordinate2[1])\n    \n    color1 = (get_column_index(col1) + row1) % 2 == 0\n    color2 = (get_column_index(col2) + row2) % 2 == 0\n    \n    return color1 == color2\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    char_to_index = {char: idx for idx, char in enumerate(S)}\n    total_distance = 0\n    for i in range(26):\n        current_char = chr(ord('A') + i)\n        next_char = chr(ord('A') + i + 1)\n        if next_char in char_to_index:\n            total_distance += abs(char_to_index[current_char] - char_to_index[next_char])\n    print(total_distance)\n\nmin_traveled_distance(input().strip())", "passed": true, "raw_code": "```python\ndef min_traveled_distance(S):\n    char_to_index = {char: idx for idx, char in enumerate(S)}\n    total_distance = 0\n    for i in range(26):\n        current_char = chr(ord('A') + i)\n        next_char = chr(ord('A') + i + 1)\n        if next_char in char_to_index:\n            total_distance += abs(char_to_index[current_char] - char_to_index[next_char])\n    print(total_distance)\n\nmin_traveled_distance(input().strip())\n```"}
{"task_id": "abc366_b", "code": "def vertical_text(input):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    strings = data[1:N+1]\n    max_length = max(len(s) for s in strings)\n    vertical = [['*'] * len(strings) for _ in range(max_length)]\n\n    for i, s in enumerate(strings):\n        for j in range(len(s)):\n            vertical[j][N - i - 1] = s[j]\n\n    for row in vertical:\n        while row and row[-1] == '*':\n            row.pop()\n        print(''.join(row).rstrip('*'))\n\nvertical_text(None)", "passed": true, "raw_code": "def vertical_text(input):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    strings = data[1:N+1]\n    max_length = max(len(s) for s in strings)\n    vertical = [['*'] * len(strings) for _ in range(max_length)]\n\n    for i, s in enumerate(strings):\n        for j in range(len(s)):\n            vertical[j][N - i - 1] = s[j]\n\n    for row in vertical:\n        while row and row[-1] == '*':\n            row.pop()\n        print(''.join(row).rstrip('*'))\n\nvertical_text(None)"}
{"task_id": "3568", "code": "def generate_key(num1, num2, num3):\n    # Pad numbers with leading zeros to make them four digits long\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate over each digit position (0-indexed)\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))\n        # Append the minimum digit to the key\n        key += str(min_digit)\n    \n    # Convert the key to an integer and return it\n    return int(key) if key != \"0000\" else 0", "passed": true, "raw_code": "```python\ndef generate_key(num1, num2, num3):\n    # Pad numbers with leading zeros to make them four digits long\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate over each digit position (0-indexed)\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))\n        # Append the minimum digit to the key\n        key += str(min_digit)\n    \n    # Convert the key to an integer and return it\n    return int(key) if key != \"0000\" else 0\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    # Initial position of the snake\n    i, j = 0, 0\n    \n    # Directions mapping\n    directions = {\n        \"UP\": (-1, 0),\n        \"RIGHT\": (0, 1),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1)\n    }\n    \n    # Iterate through each command\n    for command in commands:\n        di, dj = directions[command]\n        ni, nj = i + di, j + dj\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= ni < n and 0 <= nj < n:\n            i, j = ni, nj\n    \n    # Convert the final 2D position to the linear index\n    return i * n + j", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    # Initial position of the snake\n    i, j = 0, 0\n    \n    # Directions mapping\n    directions = {\n        \"UP\": (-1, 0),\n        \"RIGHT\": (0, 1),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1)\n    }\n    \n    # Iterate through each command\n    for command in commands:\n        di, dj = directions[command]\n        ni, nj = i + di, j + dj\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= ni < n and 0 <= nj < n:\n            i, j = ni, nj\n    \n    # Convert the final 2D position to the linear index\n    return i * n + j\n```"}
{"task_id": "abc369_a", "code": "def count_arithmetic_sequences(A, B):\n    count = 0\n    # Check all possible values of x within a reasonable range\n    for x in range(-100, 201):\n        # Check all six possible arrangements\n        if (B - A == x - B) or (x - A == B - x) or (A - B == x - A) or (x - B == A - x) or (B - x == A - B) or (A - x == B - A):\n            count += 1\n    return count\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_arithmetic_sequences(A, B))", "passed": true, "raw_code": "```python\ndef count_arithmetic_sequences(A, B):\n    count = 0\n    # Check all possible values of x within a reasonable range\n    for x in range(-100, 201):\n        # Check all six possible arrangements\n        if (B - A == x - B) or (x - A == B - x) or (A - B == x - A) or (x - B == A - x) or (B - x == A - B) or (A - x == B - A):\n            count += 1\n    return count\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_arithmetic_sequences(A, B))\n```"}
{"task_id": "3519", "code": "def countWinningPlayers(n, pick):\n    player_balls = {i: {} for i in range(n)}\n    \n    for player, color in pick:\n        if color not in player_balls[player]:\n            player_balls[player][color] = 0\n        player_balls[player][color] += 1\n    \n    winning_players = 0\n    \n    for player in range(n):\n        max_picks = player + 1\n        for color, count in player_balls[player].items():\n            if count >= max_picks:\n                winning_players += 1\n                break\n    \n    return winning_players", "passed": true, "raw_code": "```python\ndef countWinningPlayers(n, pick):\n    player_balls = {i: {} for i in range(n)}\n    \n    for player, color in pick:\n        if color not in player_balls[player]:\n            player_balls[player][color] = 0\n        player_balls[player][color] += 1\n    \n    winning_players = 0\n    \n    for player in range(n):\n        max_picks = player + 1\n        for color, count in player_balls[player].items():\n            if count >= max_picks:\n                winning_players += 1\n                break\n    \n    return winning_players\n```"}
{"task_id": "3543", "code": "def count_valid_substrings(s, k):\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zero_count = 0\n        one_count = 0\n        \n        for j in range(i, n):\n            if s[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                count += 1\n            else:\n                break\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_valid_substrings(s, k):\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zero_count = 0\n        one_count = 0\n        \n        for j in range(i, n):\n            if s[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                count += 1\n            else:\n                break\n    \n    return count\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB, S_AC, S_BC = data\n    \n    # Determine the order of ages\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        return 'B'\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        return 'C'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        return 'A'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        return 'B'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        return 'A'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        return 'C'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        return 'B'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        return 'A'\n\n# Call the function\nprint(find_middle_brother())", "passed": false, "raw_code": "```python\ndef find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB, S_AC, S_BC = data\n    \n    # Determine the order of ages\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        return 'B'\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        return 'C'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        return 'A'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        return 'B'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        return 'A'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        return 'C'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        return 'B'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        return 'A'\n\n# Call the function\nprint(find_middle_brother())\n```"}
{"final_accuracy": "76.92%"}
