{"difficulty": "hard", "num_threads": 32, "temperature": 0.2, "n": 1, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp02_bug_trace_TPL_CODEEXECUTOR_qwen_7b_hard_n_1.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc366_f", "code": "d", "passed": false, "raw_code": "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    functions = []\n    index = 2\n    for i in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        functions.append((A, B))\n        index += 2\n    \n    # Sort functions by A in descending order\n    functions.sort(key=lambda x: x[0], reverse=True)\n    \n    # Compute the nested function composition\n    result = 1\n    for i in range(K):\n        A, B = functions[i]\n        result = A * result + B\n    \n    print(result)\n\nmax_nested_function_value()"}
{"task_id": "3532", "code": "def minTimeToMarkNodes(n, edges):\n    from collections import defaultdict, deque\n    \n    # Build the graph\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Initialize variables\n    times = [-1] * n\n    times[0] = 0\n    queue = deque([0])\n    visited = {0}\n    \n    while queue:\n        current_node = queue.popleft()\n        \n        for neighbor in graph[current_node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                if current_node % 2 == 0:\n                    times[neighbor] = times[current_node] + 2\n                else:\n                    times[neighbor] = times[current_node] + 1\n                queue.append(neighbor)\n    \n    return times", "passed": false, "raw_code": "```python\ndef minTimeToMarkNodes(n, edges):\n    from collections import defaultdict, deque\n    \n    # Build the graph\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Initialize variables\n    times = [-1] * n\n    times[0] = 0\n    queue = deque([0])\n    visited = {0}\n    \n    while queue:\n        current_node = queue.popleft()\n        \n        for neighbor in graph[current_node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                if current_node % 2 == 0:\n                    times[neighbor] = times[current_node] + 2\n                else:\n                    times[neighbor] = times[current_node] + 1\n                queue.append(neighbor)\n    \n    return times\n```"}
{"task_id": "abc366_g", "code": "d", "passed": false, "raw_code": "```python\ndef can_assign_numbers(N, M, edges):\n    from collections import defaultdict\n    import sys\n    sys.setrecursionlimit(1000000)\n\n    # Build adjacency list\n    adj = defaultdict(list)\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # Backtracking function\n    def backtrack(node, visited, assignment):\n        if node in visited:\n            return True\n        visited.add(node)\n        for neighbor in adj[node]:\n            if neighbor in visited:\n                continue\n            for num in range(1, 2**60):\n                assignment[neighbor] = num\n                if backtrack(neighbor, visited, assignment):\n                    return True\n                assignment[neighbor] = 0\n        visited.remove(node)\n        return False\n\n    # Initialize assignment\n    assignment = [0] * (N + 1)\n\n    # Start backtracking from the first node\n    if backtrack(1, set(), assignment):\n        return \"Yes\\n\" + \" \".join(map(str, assignment[1:]))\n    else:\n        return \"No\"\n\n# Read input\nN, M = map(int, input().split())\nedges = [tuple(map(int, input().split())) for _ in range(M)]\n\n# Output result\nprint(can_assign_numbers(N, M, edges))"}
{"task_id": "abc373_f", "code": "d", "passed": false, "raw_code": "```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    W = int(data[index + 1])\n    index += 2\n    \n    items = []\n    for _ in range(N):\n        w = int(data[index])\n        v = int(data[index + 1])\n        items.append((w, v))\n        index += 2\n    \n    dp = [0] * (W + 1)\n    \n    for w, v in items:\n        for j in range(W, w - 1, -1):\n            for k in range(1, 10**10 + 1):\n                if j >= k * w:\n                    dp[j] = max(dp[j], dp[j - k * w] + k * v - k ** 2)\n                else:\n                    break\n    \n    print(dp[W])\n\nmax_happiness()"}
{"task_id": "abc371_f", "code": "d", "passed": false, "raw_code": "```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    tasks = []\n    for _ in range(Q):\n        T = int(data[index])\n        G = int(data[index + 1])\n        tasks.append((T, G))\n        index += 2\n    \n    total_movements = 0\n    for T, G in tasks:\n        total_movements += abs(X[T - 1] - G)\n    \n    print(total_movements)\n\nmin_movements()"}
{"task_id": "arc181_b", "code": "d", "passed": false, "raw_code": "```python\ndef f(S, T, X):\n    result = []\n    for char in X:\n        if char == '0':\n            result.append(S)\n        else:\n            result.append(T)\n    return ''.join(result)\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        index += 3\n        \n        len_X = len(X)\n        len_Y = len(Y)\n        \n        if len_X != len_Y:\n            results.append(\"No\")\n            continue\n        \n        if f(S, \"\", X) == f(S, \"\", Y):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nsolve()"}
{"task_id": "abc368_f", "code": "def determine_winner(N, A):\n    count = sum(1 for x in A if x > 1)\n    if count % 2 == 1:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Determine and print the winner\ndetermine_winner(N, A)", "passed": false, "raw_code": "```python\ndef determine_winner(N, A):\n    count = sum(1 for x in A if x > 1)\n    if count % 2 == 1:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Determine and print the winner\ndetermine_winner(N, A)\n```"}
{"task_id": "abc373_e", "code": "def min_additional_votes(N, M, K, A):\n    total_votes = sum(A)\n    remaining_votes = K - total_votes\n    results = []\n\n    for i in range(N):\n        max_votes_other = max(A[j] for j in range(N) if j != i)\n        if A[i] > max_votes_other + remaining_votes:\n            results.append(0)\n        elif A[i] + remaining_votes <= max_votes_other:\n            results.append(-1)\n        else:\n            needed_votes = max_votes_other + 1 - A[i]\n            results.append(needed_votes)\n\n    print(' '.join(map(str, results)))\n\n# Example usage:\n# min_additional_votes(5, 2, 16, [3, 1, 4, 1, 5])\n# min_additional_votes(12, 1, 570, [81, 62, 17, 5, 5, 86, 15, 7, 79, 26, 6, 28])", "passed": false, "raw_code": "```python\ndef min_additional_votes(N, M, K, A):\n    total_votes = sum(A)\n    remaining_votes = K - total_votes\n    results = []\n\n    for i in range(N):\n        max_votes_other = max(A[j] for j in range(N) if j != i)\n        if A[i] > max_votes_other + remaining_votes:\n            results.append(0)\n        elif A[i] + remaining_votes <= max_votes_other:\n            results.append(-1)\n        else:\n            needed_votes = max_votes_other + 1 - A[i]\n            results.append(needed_votes)\n\n    print(' '.join(map(str, results)))\n\n# Example usage:\n# min_additional_votes(5, 2, 16, [3, 1, 4, 1, 5])\n# min_additional_votes(12, 1, 570, [81, 62, 17, 5, 5, 86, 15, 7, 79, 26, 6, 28])\n```"}
{"task_id": "3535", "code": "def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_inc = [[0] * (sum(nums) + 1) for _ in range(n)]\n    dp_dec = [[0] * (sum(nums) + 1) for _ in range(n)]\n    \n    # Base case\n    for j in range(sum(nums) + 1):\n        dp_inc[0][j] = 1\n        dp_dec[0][j] = 1\n    \n    # Fill DP tables\n    for i in range(1, n):\n        prefix_sum = 0\n        for j in range(sum(nums) + 1):\n            prefix_sum += dp_inc[i-1][j]\n            prefix_sum %= MOD\n            dp_inc[i][j] = prefix_sum\n        \n        prefix_sum = 0\n        for j in range(sum(nums) + 1):\n            prefix_sum += dp_dec[i-1][j]\n            prefix_sum %= MOD\n            dp_dec[i][j] = prefix_sum\n    \n    # Combine results\n    result = 0\n    for j in range(sum(nums) + 1):\n        result += dp_inc[-1][j] * dp_dec[-1][j]\n        result %= MOD\n    \n    return result", "passed": false, "raw_code": "```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_inc = [[0] * (sum(nums) + 1) for _ in range(n)]\n    dp_dec = [[0] * (sum(nums) + 1) for _ in range(n)]\n    \n    # Base case\n    for j in range(sum(nums) + 1):\n        dp_inc[0][j] = 1\n        dp_dec[0][j] = 1\n    \n    # Fill DP tables\n    for i in range(1, n):\n        prefix_sum = 0\n        for j in range(sum(nums) + 1):\n            prefix_sum += dp_inc[i-1][j]\n            prefix_sum %= MOD\n            dp_inc[i][j] = prefix_sum\n        \n        prefix_sum = 0\n        for j in range(sum(nums) + 1):\n            prefix_sum += dp_dec[i-1][j]\n            prefix_sum %= MOD\n            dp_dec[i][j] = prefix_sum\n    \n    # Combine results\n    result = 0\n    for j in range(sum(nums) + 1):\n        result += dp_inc[-1][j] * dp_dec[-1][j]\n        result %= MOD\n    \n    return result\n```"}
{"task_id": "abc373_g", "code": "def read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    P = []\n    Q = []\n    \n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        P.append((A, B))\n        index += 2\n    \n    for _ in range(N):\n        C = int(data[index])\n        D = int(data[index + 1])\n        Q.append((C, D))\n        index += 2\n    \n    return N, P, Q\n\ndef find_non_crossing_permutation(N, P, Q):\n    def is_valid_pair(i, j):\n        for k in range(i):\n            if (P[i][1] - P[k][1]) * (Q[j][0] - Q[k][0]) == (Q[j][1] - Q[k][1]) * (P[i][0] - P[k][0]):\n                return False\n        return True\n    \n    def dfs(i, used, perm):\n        if i == N:\n            return True\n        \n        for j in range(N):\n            if not used[j] and is_valid_pair(i, j):\n                used[j] = True\n                perm.append(j + 1)\n                if dfs(i + 1, used, perm):\n                    return True\n                perm.pop()\n                used[j] = False\n        \n        return False\n    \n    used = [False] * N\n    perm = []\n    \n    if dfs(0, used, perm):\n        return ' '.join(map(str, perm))\n    else:\n        return '-1'\n\ndef main():\n    N, P, Q = read_input()\n    result = find_non_crossing_permutation(N, P, Q)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    P = []\n    Q = []\n    \n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        P.append((A, B))\n        index += 2\n    \n    for _ in range(N):\n        C = int(data[index])\n        D = int(data[index + 1])\n        Q.append((C, D))\n        index += 2\n    \n    return N, P, Q\n\ndef find_non_crossing_permutation(N, P, Q):\n    def is_valid_pair(i, j):\n        for k in range(i):\n            if (P[i][1] - P[k][1]) * (Q[j][0] - Q[k][0]) == (Q[j][1] - Q[k][1]) * (P[i][0] - P[k][0]):\n                return False\n        return True\n    \n    def dfs(i, used, perm):\n        if i == N:\n            return True\n        \n        for j in range(N):\n            if not used[j] and is_valid_pair(i, j):\n                used[j] = True\n                perm.append(j + 1)\n                if dfs(i + 1, used, perm):\n                    return True\n                perm.pop()\n                used[j] = False\n        \n        return False\n    \n    used = [False] * N\n    perm = []\n    \n    if dfs(0, used, perm):\n        return ' '.join(map(str, perm))\n    else:\n        return '-1'\n\ndef main():\n    N, P, Q = read_input()\n    result = find_non_crossing_permutation(N, P, Q)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc372_f", "code": "d", "passed": false, "raw_code": "```python\ndef count_ways():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    for i in range(M):\n        X = int(data[3 + 2 * i]) - 1\n        Y = int(data[4 + 2 * i]) - 1\n        edges.append((X, Y))\n    \n    MOD = 998244353\n    \n    # Initialize dp table\n    dp = [[0] * N for _ in range(K + 1)]\n    dp[0][0] = 1\n    \n    # Fill dp table\n    for i in range(1, K + 1):\n        for j in range(N):\n            dp[i][j] = dp[i - 1][j]\n            if j == N - 1:\n                dp[i][0] += dp[i - 1][j]\n            else:\n                dp[i][j + 1] += dp[i - 1][j]\n            for X, Y in edges:\n                if X == j:\n                    dp[i][Y] += dp[i - 1][X]\n                dp[i][Y] %= MOD\n    \n    # Sum up the number of ways to reach any vertex in K moves\n    result = sum(dp[K]) % MOD\n    print(result)\n\ncount_ways()"}
{"task_id": "arc182_e", "code": "d", "passed": false, "raw_code": "```python\ndef calculate_min_mod_sum(N, M, C, K, A):\n    # Precompute the minimum values for each possible remainder\n    min_values = [float('inf')] * M\n    for i in range(M):\n        min_values[i] = min(min_values[i], (C * i + A[j]) % M for j in range(N))\n    \n    # Calculate the frequency of each remainder in the range 0 to K-1\n    remainder_count = [0] * M\n    for k in range(K):\n        remainder_count[(C * k) % M] += 1\n    \n    # Compute the final sum\n    result = 0\n    for i in range(M):\n        if min_values[i] != float('inf'):\n            result += min_values[i] * remainder_count[i]\n    \n    return result\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nC = int(data[2])\nK = int(data[3])\nA = list(map(int, data[4:]))\n\n# Print the result\nprint(calculate_min_mod_sum(N, M, C, K, A))"}
{"task_id": "3563", "code": "def maxScore(grid):\n    for row in grid:\n        row.sort()\n    return sum(max(row[i] for row in grid) for i in range(len(grid[0])))", "passed": false, "raw_code": "```python\ndef maxScore(grid):\n    for row in grid:\n        row.sort()\n    return sum(max(row[i] for row in grid) for i in range(len(grid[0])))\n```"}
{"task_id": "abc366_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    x_points = []\n    y_points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        x_points.append(x)\n        y_points.append(y)\n        index += 2\n    \n    x_points.sort()\n    y_points.sort()\n    \n    def count_valid_pairs(D, points):\n        prefix_sum = [0] * (len(points) + 1)\n        for i in range(len(points)):\n            prefix_sum[i + 1] = prefix_sum[i] + points[i]\n        \n        count = 0\n        for i in range(len(points)):\n            left = max(0, points[i] - D)\n            right = min(points[-1], points[i] + D)\n            idx_left = bisect.bisect_left(points, left)\n            idx_right = bisect.bisect_right(points, right)\n            count += (idx_right - idx_left) * (points[i] - left) - prefix_sum[idx_left] + prefix_sum[idx_right]\n        \n        return count\n    \n    result_x = count_valid_pairs(D, x_points)\n    result_y = count_valid_pairs(D, y_points)\n    \n    print(result_x * result_y)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    x_points = []\n    y_points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        x_points.append(x)\n        y_points.append(y)\n        index += 2\n    \n    x_points.sort()\n    y_points.sort()\n    \n    def count_valid_pairs(D, points):\n        prefix_sum = [0] * (len(points) + 1)\n        for i in range(len(points)):\n            prefix_sum[i + 1] = prefix_sum[i] + points[i]\n        \n        count = 0\n        for i in range(len(points)):\n            left = max(0, points[i] - D)\n            right = min(points[-1], points[i] + D)\n            idx_left = bisect.bisect_left(points, left)\n            idx_right = bisect.bisect_right(points, right)\n            count += (idx_right - idx_left) * (points[i] - left) - prefix_sum[idx_left] + prefix_sum[idx_right]\n        \n        return count\n    \n    result_x = count_valid_pairs(D, x_points)\n    result_y = count_valid_pairs(D, y_points)\n    \n    print(result_x * result_y)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "arc182_d", "code": "def min_operations_to_equalize_sequences(N, M, A, B):\n    operations = 0\n    for i in range(N):\n        if A[i] != B[i]:\n            diff = abs(A[i] - B[i])\n            if diff == 1 or (diff == M - 1 and A[i] != A[(i + 1) % N]):\n                operations += diff\n            else:\n                return -1\n    return operations\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Calculate and print the result\nresult = min_operations_to_equalize_sequences(N, M, A, B)\nprint(result)\n", "passed": false, "raw_code": "def min_operations_to_equalize_sequences(N, M, A, B):\n    operations = 0\n    for i in range(N):\n        if A[i] != B[i]:\n            diff = abs(A[i] - B[i])\n            if diff == 1 or (diff == M - 1 and A[i] != A[(i + 1) % N]):\n                operations += diff\n            else:\n                return -1\n    return operations\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:2*N+2]))\n\n# Calculate and print the result\nresult = min_operations_to_equalize_sequences(N, M, A, B)\nprint(result)\n"}
{"task_id": "3550", "code": "def maxSumOfRooks(board):\n    m, n = len(board), len(board[0])\n    \n    # Calculate row sums\n    row_sums = [sum(row) for row in board]\n    \n    # Calculate column sums\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Sort row sums and column sums\n    row_sums.sort(reverse=True)\n    col_sums.sort(reverse=True)\n    \n    # Select the top three largest sums\n    return row_sums[0] + col_sums[0] + col_sums[1]", "passed": false, "raw_code": "```python\ndef maxSumOfRooks(board):\n    m, n = len(board), len(board[0])\n    \n    # Calculate row sums\n    row_sums = [sum(row) for row in board]\n    \n    # Calculate column sums\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Sort row sums and column sums\n    row_sums.sort(reverse=True)\n    col_sums.sort(reverse=True)\n    \n    # Select the top three largest sums\n    return row_sums[0] + col_sums[0] + col_sums[1]\n```"}
{"task_id": "arc182_a", "code": "def count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(Q):\n        p, v = P[i] - 1, V[i]\n        new_dp = [[0] * (N + 1) for _ in range(N + 1)]\n        \n        for j in range(N + 1):\n            for k in range(N + 1):\n                if dp[j][k] == 0:\n                    continue\n                \n                if k >= v:\n                    new_dp[j][k] = (new_dp[j][k] + dp[j][k]) % MOD\n                if j + 1 <= N:\n                    new_dp[j + 1][max(k, v)] = (new_dp[j + 1][max(k, v)] + dp[j][k]) % MOD\n        \n        dp = new_dp\n    \n    result = sum(dp[N]) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nP = [int(data[2 + 2 * i]) for i in range(Q)]\nV = [int(data[3 + 2 * i]) for i in range(Q)]\n\n# Calculate and print the result\nprint(count_valid_sequences(N, Q, P, V))", "passed": false, "raw_code": "```python\ndef count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    for i in range(Q):\n        p, v = P[i] - 1, V[i]\n        new_dp = [[0] * (N + 1) for _ in range(N + 1)]\n        \n        for j in range(N + 1):\n            for k in range(N + 1):\n                if dp[j][k] == 0:\n                    continue\n                \n                if k >= v:\n                    new_dp[j][k] = (new_dp[j][k] + dp[j][k]) % MOD\n                if j + 1 <= N:\n                    new_dp[j + 1][max(k, v)] = (new_dp[j + 1][max(k, v)] + dp[j][k]) % MOD\n        \n        dp = new_dp\n    \n    result = sum(dp[N]) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nP = [int(data[2 + 2 * i]) for i in range(Q)]\nV = [int(data[3 + 2 * i]) for i in range(Q)]\n\n# Calculate and print the result\nprint(count_valid_sequences(N, Q, P, V))\n```"}
{"task_id": "arc183_c", "code": "d", "passed": false, "raw_code": "```python\ndef count_permutations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    conditions = []\n    for _ in range(M):\n        L = int(data[index]) - 1\n        R = int(data[index + 1]) - 1\n        X = int(data[index + 2]) - 1\n        conditions.append((L, R, X))\n        index += 3\n    \n    MOD = 998244353\n    \n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        dp[i][i] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            dp[i][j] = dp[i][j - 1]\n            if j > i + 1:\n                dp[i][j] += dp[i - 1][j - 1]\n            dp[i][j] %= MOD\n    \n    for L, R, X in conditions:\n        for j in range(X + 1, R + 1):\n            dp[L][R] -= dp[L][j - 1]\n            dp[L][R] %= MOD\n    \n    result = sum(dp[N]) % MOD\n    print(result)\n\ncount_permutations()"}
{"task_id": "3560", "code": "def min_moves(kx, ky, px, py):\n    directions = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.pop(0)\n        if cx == px and cy == py:\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    return float('inf')\n\ndef max_moves(kx, ky, positions, memo):\n    if not positions:\n        return 0\n    \n    pos_tuple = tuple(tuple(pos) for pos in positions)\n    if (kx, ky, pos_tuple) in memo:\n        return memo[(kx, ky, pos_tuple)]\n    \n    alice_max = 0\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves(kx, ky, px, py)\n        remaining_positions = positions[:i] + positions[i+1:]\n        bob_min = min(max_moves(px, py, remaining_positions, memo) for _ in range(moves))\n        alice_max = max(alice_max, moves + bob_min)\n    \n    memo[(kx, ky, pos_tuple)] = alice_max\n    return alice_max\n\ndef knight_pawn_game(kx, ky, positions):\n    memo = {}\n    return max_moves(kx, ky, positions, memo)", "passed": false, "raw_code": "```python\ndef min_moves(kx, ky, px, py):\n    directions = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.pop(0)\n        if cx == px and cy == py:\n            return moves\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    return float('inf')\n\ndef max_moves(kx, ky, positions, memo):\n    if not positions:\n        return 0\n    \n    pos_tuple = tuple(tuple(pos) for pos in positions)\n    if (kx, ky, pos_tuple) in memo:\n        return memo[(kx, ky, pos_tuple)]\n    \n    alice_max = 0\n    for i, (px, py) in enumerate(positions):\n        moves = min_moves(kx, ky, px, py)\n        remaining_positions = positions[:i] + positions[i+1:]\n        bob_min = min(max_moves(px, py, remaining_positions, memo) for _ in range(moves))\n        alice_max = max(alice_max, moves + bob_min)\n    \n    memo[(kx, ky, pos_tuple)] = alice_max\n    return alice_max\n\ndef knight_pawn_game(kx, ky, positions):\n    memo = {}\n    return max_moves(kx, ky, positions, memo)\n```"}
{"task_id": "abc372_g", "code": "d", "passed": false, "raw_code": "```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        \n        A = []\n        B = []\n        C = []\n        \n        for i in range(N):\n            A.append(int(data[index]))\n            B.append(int(data[index + 1]))\n            C.append(int(data[index + 2]))\n            index += 3\n        \n        count = 0\n        max_val = 10**6\n        \n        for x in range(1, max_val + 1):\n            for y in range(1, max_val + 1):\n                if all(A[i] * x + B[i] * y < C[i] for i in range(N)):\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\ncount_valid_pairs()"}
{"task_id": "3531", "code": "def minimum_damage(power, damage, health):\n    n = len(damage)\n    time_to_kill = [(health[i] - 1) // power + 1 for i in range(n)]\n    enemies = sorted(range(n), key=lambda i: time_to_kill[i], reverse=True)\n    \n    total_damage = 0\n    for i in enemies:\n        total_damage += time_to_kill[i] * damage[i]\n    \n    return total_damage", "passed": false, "raw_code": "```python\ndef minimum_damage(power, damage, health):\n    n = len(damage)\n    time_to_kill = [(health[i] - 1) // power + 1 for i in range(n)]\n    enemies = sorted(range(n), key=lambda i: time_to_kill[i], reverse=True)\n    \n    total_damage = 0\n    for i in enemies:\n        total_damage += time_to_kill[i] * damage[i]\n    \n    return total_damage\n```"}
{"task_id": "abc368_e", "code": "d", "passed": false, "raw_code": "```python\ndef min_delays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    X1 = int(data[index + 2])\n    index += 3\n    \n    trains = []\n    for _ in range(M):\n        A = int(data[index])\n        B = int(data[index + 1])\n        S = int(data[index + 2])\n        T = int(data[index + 3])\n        index += 4\n        trains.append((A, B, S, T))\n    \n    # Sort trains by departure time\n    trains.sort(key=lambda x: x[2])\n    \n    # Initialize delays\n    X = [0] * M\n    \n    # Process each train\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        max_delay = 0\n        \n        for j in range(i):\n            A_j, B_j, S_j, T_j = trains[j]\n            if B_i == A_j and T_i <= S_j:\n                delay = S_j - T_i + X[j]\n                if delay > max_delay:\n                    max_delay = delay\n        \n        X[i] = max_delay\n    \n    # Print the result\n    print(' '.join(map(str, X)))\n\nmin_delays()"}
{"task_id": "arc183_d", "code": "f", "passed": false, "raw_code": "```python\nfrom collections import deque, defaultdict\n\ndef find_farthest_leaves(n, edges):\n    graph = defaultdict(list)\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def bfs(start):\n        queue = deque([start])\n        visited = set([start])\n        parent = {start: None}\n        while queue:\n            node = queue.popleft()\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    parent[neighbor] = node\n                    queue.append(neighbor)\n        return parent\n    \n    parent = bfs(1)\n    leaf1 = 1\n    while parent[leaf1] is not None:\n        leaf1 = parent[leaf1]\n    \n    leaf2 = leaf1\n    while parent[leaf2] is not None:\n        leaf2 = parent[leaf2]\n    \n    return leaf1, leaf2\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    edges = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(n-1)]\n    \n    results = []\n    for _ in range(n // 2):\n        leaf1, leaf2 = find_farthest_leaves(n, edges)\n        results.append((leaf1, leaf2))\n        # Remove the leaves from the tree\n        for i in range(len(edges)):\n            if leaf1 in edges[i] and leaf2 in edges[i]:\n                edges.pop(i)\n                break\n        n -= 2\n    \n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "abc370_e", "code": "def count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        prefix_sum = 0\n        for j in range(i, 0, -1):\n            prefix_sum += A[j - 1]\n            if prefix_sum == K:\n                continue\n            dp[i][prefix_sum % (K + 1)] += dp[j - 1][prefix_sum % (K + 1)]\n            dp[i][prefix_sum % (K + 1)] %= MOD\n    \n    # Sum up all valid partitions\n    result = sum(dp[N]) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(count_partitions(N, K, A))", "passed": false, "raw_code": "```python\ndef count_partitions(N, K, A):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        prefix_sum = 0\n        for j in range(i, 0, -1):\n            prefix_sum += A[j - 1]\n            if prefix_sum == K:\n                continue\n            dp[i][prefix_sum % (K + 1)] += dp[j - 1][prefix_sum % (K + 1)]\n            dp[i][prefix_sum % (K + 1)] %= MOD\n    \n    # Sum up all valid partitions\n    result = sum(dp[N]) % MOD\n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(count_partitions(N, K, A))\n```"}
{"task_id": "abc365_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    total_sum = 0\n    \n    # Iterate through each element and count its contribution\n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N + 1):\n            if prefix_xor[j] ^ prefix_xor[i] == A[i]:\n                count += 1\n        total_sum += count * A[i]\n    \n    print(total_sum)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Compute prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    total_sum = 0\n    \n    # Iterate through each element and count its contribution\n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N + 1):\n            if prefix_xor[j] ^ prefix_xor[i] == A[i]:\n                count += 1\n        total_sum += count * A[i]\n    \n    print(total_sum)\n\nmain()\n```"}
{"task_id": "abc371_g", "code": "d", "passed": false, "raw_code": "```python\ndef smallest_array(N, P, A):\n    # Create a list of lists to store cycles\n    cycles = []\n    \n    # Visited array to keep track of visited elements\n    visited = [False] * (N + 1)\n    \n    for i in range(1, N + 1):\n        if not visited[i]:\n            cycle = []\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                cycle.append(x)\n                x = P[x]\n            cycles.append(cycle)\n    \n    # Sort each cycle\n    for cycle in cycles:\n        indices = [i - 1 for i in cycle]\n        values = [A[i] for i in indices]\n        values.sort()\n        \n        for idx, val in zip(indices, values):\n            A[idx] = val\n    \n    # Print the result\n    print(' '.join(map(str, A)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Call the function\nsmallest_array(N, P, A)"}
{"task_id": "abc371_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Function to count distinct elements in the subarray A[left:right+1]\n    def count_distinct(left, right):\n        freq = {}\n        distinct_count = 0\n        for i in range(left, right + 1):\n            if A[i] not in freq:\n                distinct_count += 1\n                freq[A[i]] = 0\n            freq[A[i]] += 1\n        return distinct_count\n    \n    result = 0\n    for i in range(N):\n        for j in range(i, N):\n            result += count_distinct(i, j)\n    \n    print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Function to count distinct elements in the subarray A[left:right+1]\n    def count_distinct(left, right):\n        freq = {}\n        distinct_count = 0\n        for i in range(left, right + 1):\n            if A[i] not in freq:\n                distinct_count += 1\n                freq[A[i]] = 0\n            freq[A[i]] += 1\n        return distinct_count\n    \n    result = 0\n    for i in range(N):\n        for j in range(i, N):\n            result += count_distinct(i, j)\n    \n    print(result)\n\nmain()\n```"}
{"task_id": "abc367_g", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Dictionary to store the count of XOR sums for subsequences of different lengths\n    dp = {0: 1}\n    \n    for num in A:\n        new_dp = {}\n        for xor_sum, count in dp.items():\n            new_xor_sum = xor_sum ^ num\n            new_dp[new_xor_sum] = (new_dp.get(new_xor_sum, 0) + count) % MOD\n            new_dp[xor_sum] = (new_dp.get(xor_sum, 0) + count) % MOD\n        dp = new_dp\n    \n    total_score = 0\n    for length, count in dp.items():\n        if length % M == 0:\n            total_score = (total_score + pow(length, K, MOD) * count) % MOD\n    \n    print(total_score)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    MOD = 998244353\n    \n    # Dictionary to store the count of XOR sums for subsequences of different lengths\n    dp = {0: 1}\n    \n    for num in A:\n        new_dp = {}\n        for xor_sum, count in dp.items():\n            new_xor_sum = xor_sum ^ num\n            new_dp[new_xor_sum] = (new_dp.get(new_xor_sum, 0) + count) % MOD\n            new_dp[xor_sum] = (new_dp.get(xor_sum, 0) + count) % MOD\n        dp = new_dp\n    \n    total_score = 0\n    for length, count in dp.items():\n        if length % M == 0:\n            total_score = (total_score + pow(length, K, MOD) * count) % MOD\n    \n    print(total_score)\n\nmain()\n```"}
{"task_id": "3583", "code": "def minOperations(nums):\n    from collections import defaultdict\n    from math import gcd\n    \n    # Dictionary to store the frequency of each GCD value\n    gcd_freq = defaultdict(int)\n    \n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_freq[g] += 1\n    \n    # List to store the sorted GCD values\n    sorted_gcds = []\n    for g, freq in gcd_freq.items():\n        sorted_gcds.extend([g] * freq)\n    \n    # Function to answer each query\n    def answer_queries(queries):\n        result = []\n        for q in queries:\n            result.append(sorted_gcds[q])\n        return result\n    \n    return answer_queries", "passed": false, "raw_code": "```python\ndef minOperations(nums):\n    from collections import defaultdict\n    from math import gcd\n    \n    # Dictionary to store the frequency of each GCD value\n    gcd_freq = defaultdict(int)\n    \n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_freq[g] += 1\n    \n    # List to store the sorted GCD values\n    sorted_gcds = []\n    for g, freq in gcd_freq.items():\n        sorted_gcds.extend([g] * freq)\n    \n    # Function to answer each query\n    def answer_queries(queries):\n        result = []\n        for q in queries:\n            result.append(sorted_gcds[q])\n        return result\n    \n    return answer_queries\n```"}
{"task_id": "arc181_c", "code": "def generate_grid(N, P, Q):\n    # Initialize the grid with zeros\n    grid = [['0' for _ in range(N)] for _ in range(N)]\n    \n    # Fill the grid based on the permutations P and Q\n    for i in range(N):\n        for j in range(N):\n            if (i + j) % 2 == 0:\n                grid[i][j] = '0'\n            else:\n                grid[i][j] = '1'\n    \n    # Print the grid in the required format\n    for row in grid:\n        print(''.join(row))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:]))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)", "passed": false, "raw_code": "```python\ndef generate_grid(N, P, Q):\n    # Initialize the grid with zeros\n    grid = [['0' for _ in range(N)] for _ in range(N)]\n    \n    # Fill the grid based on the permutations P and Q\n    for i in range(N):\n        for j in range(N):\n            if (i + j) % 2 == 0:\n                grid[i][j] = '0'\n            else:\n                grid[i][j] = '1'\n    \n    # Print the grid in the required format\n    for row in grid:\n        print(''.join(row))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:]))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)\n```"}
{"task_id": "3575", "code": "def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    nums.sort()\n    \n    # Function to calculate XOR of elements in the range [l, r]\n    def xorRange(l, r):\n        return nums[r] if l == 0 else nums[r] ^ nums[l - 1]\n    \n    max_value = 0\n    \n    # Iterate over all possible pairs of segments\n    for i in range(k):\n        left_xor = xorRange(0, i)\n        right_xor = xorRange(n - k + i, n - 1)\n        max_value = max(max_value, left_xor ^ right_xor)\n    \n    return max_value", "passed": false, "raw_code": "```python\ndef maxSubsequenceValue(nums, k):\n    n = len(nums)\n    nums.sort()\n    \n    # Function to calculate XOR of elements in the range [l, r]\n    def xorRange(l, r):\n        return nums[r] if l == 0 else nums[r] ^ nums[l - 1]\n    \n    max_value = 0\n    \n    # Iterate over all possible pairs of segments\n    for i in range(k):\n        left_xor = xorRange(0, i)\n        right_xor = xorRange(n - k + i, n - 1)\n        max_value = max(max_value, left_xor ^ right_xor)\n    \n    return max_value\n```"}
{"task_id": "3552", "code": "def largest_k_palindrome(n, k):\n    def is_divisible_by_k(num):\n        return num % k == 0\n    \n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    max_palindrome = -1\n    \n    # Generate half of the number\n    half_length = (n + 1) // 2\n    for i in range(10**(half_length - 1), 10**half_length):\n        half_str = str(i)\n        if n % 2 == 0:\n            palindrome = int(half_str + half_str[::-1])\n        else:\n            palindrome = int(half_str + half_str[-2::-1])\n        \n        if is_divisible_by_k(palindrome):\n            max_palindrome = max(max_palindrome, palindrome)\n    \n    return str(max_palindrome)", "passed": false, "raw_code": "```python\ndef largest_k_palindrome(n, k):\n    def is_divisible_by_k(num):\n        return num % k == 0\n    \n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    max_palindrome = -1\n    \n    # Generate half of the number\n    half_length = (n + 1) // 2\n    for i in range(10**(half_length - 1), 10**half_length):\n        half_str = str(i)\n        if n % 2 == 0:\n            palindrome = int(half_str + half_str[::-1])\n        else:\n            palindrome = int(half_str + half_str[-2::-1])\n        \n        if is_divisible_by_k(palindrome):\n            max_palindrome = max(max_palindrome, palindrome)\n    \n    return str(max_palindrome)\n```"}
{"task_id": "arc181_d", "code": "import sys\nfrom typing import List\n\nclass FenwickTree:\n    def __init__(self, size: int):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index: int, value: int) -> None:\n        while index <= self.size:\n            self.tree[index] += value\n            index += index & -index\n\n    def query(self, index: int) -> int:\n        result = 0\n        while index > 0:\n            result += self.tree[index]\n            index -= index & -index\n        return result\n\ndef count_inversions(perm: List[int]) -> int:\n    n = len(perm)\n    fenwick_tree = FenwickTree(n)\n    inversions = 0\n    rank = {value: i + 1 for i, value in enumerate(sorted(set(perm)))}\n\n    for num in perm[::-1]:\n        inversions += rank[num] - 1 - fenwick_tree.query(rank[num])\n        fenwick_tree.update(rank[num], 1)\n\n    return inversions\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    perm = list(map(int, data[1:n+1]))\n    m = int(data[n+1])\n    ops = list(map(int, data[n+2:n+m+2]))\n\n    results = []\n    current_perm = perm[:]\n\n    for op in ops:\n        for i in range(op - 1):\n            if current_perm[i] > current_perm[i + 1]:\n                current_perm[i], current_perm[i + 1] = current_perm[i + 1], current_perm[i]\n        results.append(count_inversions(current_perm))\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "import sys\nfrom typing import List\n\nclass FenwickTree:\n    def __init__(self, size: int):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index: int, value: int) -> None:\n        while index <= self.size:\n            self.tree[index] += value\n            index += index & -index\n\n    def query(self, index: int) -> int:\n        result = 0\n        while index > 0:\n            result += self.tree[index]\n            index -= index & -index\n        return result\n\ndef count_inversions(perm: List[int]) -> int:\n    n = len(perm)\n    fenwick_tree = FenwickTree(n)\n    inversions = 0\n    rank = {value: i + 1 for i, value in enumerate(sorted(set(perm)))}\n\n    for num in perm[::-1]:\n        inversions += rank[num] - 1 - fenwick_tree.query(rank[num])\n        fenwick_tree.update(rank[num], 1)\n\n    return inversions\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    perm = list(map(int, data[1:n+1]))\n    m = int(data[n+1])\n    ops = list(map(int, data[n+2:n+m+2]))\n\n    results = []\n    current_perm = perm[:]\n\n    for op in ops:\n        for i in range(op - 1):\n            if current_perm[i] > current_perm[i + 1]:\n                current_perm[i], current_perm[i + 1] = current_perm[i + 1], current_perm[i]\n        results.append(count_inversions(current_perm))\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "abc370_g", "code": "def count_good_sequences(N", "passed": false, "raw_code": "def count_good_sequences(N"}
{"task_id": "abc367_e", "code": "def process_sequence(N, K, X, A):\n    # Create a dictionary to map each element to its current index\n    pos = {a: i for i, a in enumerate(A)}\n    # Create a list to store the new sequence\n    new_A = [0] * N\n    # Perform the operation K times\n    for _ in range(K % N):\n        for i in range(N):\n            new_A[pos[X[i]]] = A[i]\n            pos[A[i]] = pos[X[i]]\n            A[i], X[i] = X[i], A[i]\n    # Print the final sequence\n    print(' '.join(map(str, new_A)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Call the function with the input data\nprocess_sequence(N, K, X, A)\n", "passed": false, "raw_code": "def process_sequence(N, K, X, A):\n    # Create a dictionary to map each element to its current index\n    pos = {a: i for i, a in enumerate(A)}\n    # Create a list to store the new sequence\n    new_A = [0] * N\n    # Perform the operation K times\n    for _ in range(K % N):\n        for i in range(N):\n            new_A[pos[X[i]]] = A[i]\n            pos[A[i]] = pos[X[i]]\n            A[i], X[i] = X[i], A[i]\n    # Print the final sequence\n    print(' '.join(map(str, new_A)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nX = list(map(int, data[2:N+2]))\nA = list(map(int, data[N+2:]))\n\n# Call the function with the input data\nprocess_sequence(N, K, X, A)\n"}
{"task_id": "abc368_g", "code": "import sys\nfrom typing import List\n\ndef build_segment_tree(arr: List[int]) -> List[int]:\n    n = len(arr)\n    tree = [0] * (4 * n)\n    def build(node: int, start: int, end: int) -> None:\n        if start == end:\n            tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            build(2 * node, start, mid)\n            build(2 * node + 1, mid + 1, end)\n            tree[node] = max(tree[2 * node], tree[2 * node + 1])\n    build(1, 0, n - 1)\n    return tree\n\ndef update_segment_tree(tree: List[int], node: int, start: int, end: int, index: int, value: int) -> None:\n    if start == end:\n        tree[node] = value\n    else:\n        mid = (start + end) // 2\n        if start <= index <= mid:\n            update_segment_tree(tree, 2 * node, start, mid, index, value)\n        else:\n            update_segment_tree(tree, 2 * node + 1, mid + 1, end, index, value)\n        tree[node] = max(tree[2 * node], tree[2 * node + 1])\n\ndef query_segment_tree(tree: List[int], node: int, start: int, end: int, left: int, right: int) -> int:\n    if left > end or right < start:\n        return float('-inf')\n    if left <= start and end <= right:\n        return tree[node]\n    mid = (start + end) // 2\n    return max(query_segment_tree(tree, 2 * node, start, mid, left, right), query_segment_tree(tree, 2 * node + 1, mid + 1, end, left, right))\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    A = list(map(int, data[1:n+1]))\n    B = list(map(int, data[n+1:2*n+1]))\n    Q = int(data[2*n+1])\n    queries = data[2*n+2:]\n\n    add_tree = build_segment_tree(A)\n    mul_tree = build_segment_tree(B)\n\n    result = []\n    for i in range(Q):\n        query_type = int(queries[i*3])\n        if query_type == 1:\n            idx = int(queries[i*3+1]) - 1\n            val = int(queries[i*3+2])\n            A[idx] = val\n            update_segment_tree(add_tree, 1, 0, n - 1, idx, val)\n        elif query_type == 2:\n            idx = int(queries[i*3+1]) - 1\n            val = int(queries[i*3+2])\n            B[idx] = val\n            update_segment_tree(mul_tree, 1, 0, n - 1, idx, val)\n        elif query_type == 3:\n            l = int(queries[i*3+1]) - 1\n            r = int(queries[i*3+2]) - 1\n            v = 0\n            for j in range(l, r + 1):\n                v += A[j]\n            v *= query_segment_tree(mul_tree, 1, 0, n - 1, l, r)\n            result.append(v)\n\n    for res in result:\n        print(res)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "import sys\nfrom typing import List\n\ndef build_segment_tree(arr: List[int]) -> List[int]:\n    n = len(arr)\n    tree = [0] * (4 * n)\n    def build(node: int, start: int, end: int) -> None:\n        if start == end:\n            tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            build(2 * node, start, mid)\n            build(2 * node + 1, mid + 1, end)\n            tree[node] = max(tree[2 * node], tree[2 * node + 1])\n    build(1, 0, n - 1)\n    return tree\n\ndef update_segment_tree(tree: List[int], node: int, start: int, end: int, index: int, value: int) -> None:\n    if start == end:\n        tree[node] = value\n    else:\n        mid = (start + end) // 2\n        if start <= index <= mid:\n            update_segment_tree(tree, 2 * node, start, mid, index, value)\n        else:\n            update_segment_tree(tree, 2 * node + 1, mid + 1, end, index, value)\n        tree[node] = max(tree[2 * node], tree[2 * node + 1])\n\ndef query_segment_tree(tree: List[int], node: int, start: int, end: int, left: int, right: int) -> int:\n    if left > end or right < start:\n        return float('-inf')\n    if left <= start and end <= right:\n        return tree[node]\n    mid = (start + end) // 2\n    return max(query_segment_tree(tree, 2 * node, start, mid, left, right), query_segment_tree(tree, 2 * node + 1, mid + 1, end, left, right))\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    A = list(map(int, data[1:n+1]))\n    B = list(map(int, data[n+1:2*n+1]))\n    Q = int(data[2*n+1])\n    queries = data[2*n+2:]\n\n    add_tree = build_segment_tree(A)\n    mul_tree = build_segment_tree(B)\n\n    result = []\n    for i in range(Q):\n        query_type = int(queries[i*3])\n        if query_type == 1:\n            idx = int(queries[i*3+1]) - 1\n            val = int(queries[i*3+2])\n            A[idx] = val\n            update_segment_tree(add_tree, 1, 0, n - 1, idx, val)\n        elif query_type == 2:\n            idx = int(queries[i*3+1]) - 1\n            val = int(queries[i*3+2])\n            B[idx] = val\n            update_segment_tree(mul_tree, 1, 0, n - 1, idx, val)\n        elif query_type == 3:\n            l = int(queries[i*3+1]) - 1\n            r = int(queries[i*3+2]) - 1\n            v = 0\n            for j in range(l, r + 1):\n                v += A[j]\n            v *= query_segment_tree(mul_tree, 1, 0, n - 1, l, r)\n            result.append(v)\n\n    for res in result:\n        print(res)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "abc367_f", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n\n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n\n    results = []\n\n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n\n        sub_A = A[l_i:r_i + 1]\n        sub_B = B[L_i:R_i + 1]\n\n        if sorted(sub_A) == sorted(sub_B):\n            results.append('Yes')\n        else:\n            results.append('No')\n\n    for result in results:\n        print(result)\n\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n\n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n\n    results = []\n\n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n\n        sub_A = A[l_i:r_i + 1]\n        sub_B = B[L_i:R_i + 1]\n\n        if sorted(sub_A) == sorted(sub_B):\n            results.append('Yes')\n        else:\n            results.append('No')\n\n    for result in results:\n        print(result)\n\nmain()"}
{"task_id": "abc368_d", "code": "d", "passed": false, "raw_code": "```python\ndef find_lca(node, parent, depth, target, depth_map, parent_map):\n    depth_map[node] = depth\n    parent_map[node] = parent\n    if node in target:\n        target.remove(node)\n        if not target:\n            return node\n    for neighbor in graph[node]:\n        if neighbor != parent:\n            lca = find_lca(neighbor, node, depth + 1, target, depth_map, parent_map)\n            if lca:\n                return lca\n    return None\n\ndef count_vertices_in_subtree(node, parent, depth_map):\n    if node not in depth_map:\n        return 0\n    count = 1\n    for neighbor in graph[node]:\n        if neighbor != parent:\n            count += count_vertices_in_subtree(neighbor, node, depth_map)\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    edges = data[2:2*N-1]\n    vertices = list(map(int, data[2*N-1:]))\n    \n    graph = [[] for _ in range(N + 1)]\n    for i in range(N - 1):\n        u = int(edges[2 * i])\n        v = int(edges[2 * i + 1])\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    depth_map = {}\n    parent_map = {}\n    lca = find_lca(1, -1, 0, vertices, depth_map, parent_map)\n    \n    result = count_vertices_in_subtree(lca, -1, depth_map)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "abc370_f", "code": "def solve(N, K, A):\n    total_mass = sum(A)\n    target = total_mass // K\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n\n    dp = [[float('inf')] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, N + 1):\n        for k in range(1, K + 1):\n            for j in range(i):\n                if prefix_sum[i] - prefix_sum[j] >= target:\n                    dp[i][k] = min(dp[i][k], max(dp[j][k - 1], prefix_sum[i] - prefix_sum[j]))\n\n    min_weight = dp[N][K]\n\n    # Counting the number of cut lines that are never cut\n    never_cut = 0\n    for i in range(1, N + 1):\n        if A[i - 1] > min_weight:\n            never_cut += 1\n\n    return min_weight, never_cut\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Solve and print result\nresult = solve(N, K, A)\nprint(result[0], result[1])\n", "passed": false, "raw_code": "def solve(N, K, A):\n    total_mass = sum(A)\n    target = total_mass // K\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n\n    dp = [[float('inf')] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, N + 1):\n        for k in range(1, K + 1):\n            for j in range(i):\n                if prefix_sum[i] - prefix_sum[j] >= target:\n                    dp[i][k] = min(dp[i][k], max(dp[j][k - 1], prefix_sum[i] - prefix_sum[j]))\n\n    min_weight = dp[N][K]\n\n    # Counting the number of cut lines that are never cut\n    never_cut = 0\n    for i in range(1, N + 1):\n        if A[i - 1] > min_weight:\n            never_cut += 1\n\n    return min_weight, never_cut\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Solve and print result\nresult = solve(N, K, A)\nprint(result[0], result[1])\n"}
{"task_id": "arc182_c", "code": "def count_divisors(n):\n    MOD = 998244353\n    if n == 1:\n        return 1\n    factors = {}\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n            n //= i\n    if n > 1:\n        factors[n] = 1\n    num_divisors = 1\n    for exp in factors.values():\n        num_divisors *= (exp + 1)\n        num_divisors %= MOD\n    return num_divisors\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (M + 1) for _ in range(N + 1)]\n    dp[0][1] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            dp[i][j] = dp[i - 1][1]\n            for k in range(2, j + 1):\n                dp[i][j] += dp[i - 1][j // k]\n                dp[i][j] %= MOD\n    \n    total_score = 0\n    for j in range(1, M + 1):\n        total_score += dp[N][j] * count_divisors(j)\n        total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef count_divisors(n):\n    MOD = 998244353\n    if n == 1:\n        return 1\n    factors = {}\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n            n //= i\n    if n > 1:\n        factors[n] = 1\n    num_divisors = 1\n    for exp in factors.values():\n        num_divisors *= (exp + 1)\n        num_divisors %= MOD\n    return num_divisors\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (M + 1) for _ in range(N + 1)]\n    dp[0][1] = 1\n    \n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            dp[i][j] = dp[i - 1][1]\n            for k in range(2, j + 1):\n                dp[i][j] += dp[i - 1][j // k]\n                dp[i][j] %= MOD\n    \n    total_score = 0\n    for j in range(1, M + 1):\n        total_score += dp[N][j] * count_divisors(j)\n        total_score %= MOD\n    \n    print(total_score)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "arc183_b", "code": "def can_make_identical(T, cases):\n    results = []\n    for N, K, A, B in cases:\n        A = list(map(int, A.split()))\n        B = list(map(int, B.split()))\n        count = 1\n        for i in range(1, N):\n            if A[i] == A[i-1]:\n                count += 1\n            else:\n                if B.count(A[i-1]) > 0 and count < K:\n                    results.append('No')\n                    break\n                count = 1\n        else:\n            if B.count(A[-1]) > 0 and count < K:\n                results.append('No')\n            else:\n                results.append('Yes')\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    cases = []\n    index = 1\n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = ' '.join(data[index + 2:index + 2 + N])\n        B = ' '.join(data[index + 2 + N:index + 2 + 2 * N])\n        cases.append((N, K, A, B))\n        index += 2 * N\n    results = can_make_identical(T, cases)\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "def can_make_identical(T, cases):\n    results = []\n    for N, K, A, B in cases:\n        A = list(map(int, A.split()))\n        B = list(map(int, B.split()))\n        count = 1\n        for i in range(1, N):\n            if A[i] == A[i-1]:\n                count += 1\n            else:\n                if B.count(A[i-1]) > 0 and count < K:\n                    results.append('No')\n                    break\n                count = 1\n        else:\n            if B.count(A[-1]) > 0 and count < K:\n                results.append('No')\n            else:\n                results.append('Yes')\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    cases = []\n    index = 1\n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = ' '.join(data[index + 2:index + 2 + N])\n        B = ' '.join(data[index + 2 + N:index + 2 + 2 * N])\n        cases.append((N, K, A, B))\n        index += 2 * N\n    results = can_make_identical(T, cases)\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "abc369_g", "code": "import sys\nfrom functools import lru_cache\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize adjacency list and distance matrix\n    adj_list = [[] for _ in range(N + 1)]\n    dist = [[float('inf')] * (N + 1) for _ in range(N + 1)]\n    \n    for _ in range(N - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        l = int(data[index + 2])\n        index += 3\n        \n        adj_list[u].append((v, l))\n        adj_list[v].append((u, l))\n        \n        dist[u][v] = l\n        dist[v][u] = l\n    \n    # Floyd-Warshall algorithm to compute shortest paths\n    for k in range(1, N + 1):\n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    \n    @lru_cache(None)\n    def dp(mask, last):\n        if mask == 0:\n            return 0\n        \n        ans = float('inf')\n        for i in range(1, N + 1):\n            if mask & (1 << (i - 1)):\n                new_mask = mask ^ (1 << (i - 1))\n                ans = min(ans, dist[last][i] + dp(new_mask, i))\n        \n        return ans\n    \n    for K in range(1, N + 1):\n        ans = float('inf')\n        for comb in combinations(range(1, N + 1), K):\n            mask = 0\n            for v in comb:\n                mask |= (1 << (v - 1))\n            \n            ans = min(ans, dp(mask, 1))\n        \n        print(ans)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom functools import lru_cache\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize adjacency list and distance matrix\n    adj_list = [[] for _ in range(N + 1)]\n    dist = [[float('inf')] * (N + 1) for _ in range(N + 1)]\n    \n    for _ in range(N - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        l = int(data[index + 2])\n        index += 3\n        \n        adj_list[u].append((v, l))\n        adj_list[v].append((u, l))\n        \n        dist[u][v] = l\n        dist[v][u] = l\n    \n    # Floyd-Warshall algorithm to compute shortest paths\n    for k in range(1, N + 1):\n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    \n    @lru_cache(None)\n    def dp(mask, last):\n        if mask == 0:\n            return 0\n        \n        ans = float('inf')\n        for i in range(1, N + 1):\n            if mask & (1 << (i - 1)):\n                new_mask = mask ^ (1 << (i - 1))\n                ans = min(ans, dist[last][i] + dp(new_mask, i))\n        \n        return ans\n    \n    for K in range(1, N + 1):\n        ans = float('inf')\n        for comb in combinations(range(1, N + 1), K):\n            mask = 0\n            for v in comb:\n                mask |= (1 << (v - 1))\n            \n            ans = min(ans, dp(mask, 1))\n        \n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc369_e", "code": "import sys\nfrom heapq import heappop, heappush\nfrom collections import defaultdict\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n\n    def dijkstra(start, end, used_bridges):\n        dist = [float('inf')] * (1 << M)\n        dist[used_bridges] = 0\n        pq = [(0, start, used_bridges)]\n\n        while pq:\n            d, node, bridges_used = heappop(pq)\n            if node == end and bridges_used == (1 << M) - 1:\n                return d\n\n            for neighbor, weight in graph[node]:\n                new_bridges_used = bridges_used | (1 << (bridges.index((min(node, neighbor), max(node, neighbor))) if (min(node, neighbor), max(node, neighbor)) in bridges else -1))\n                if dist[new_bridges_used] > d + weight:\n                    dist[new_bridges_used] = d + weight\n                    heappush(pq, (d + weight, neighbor, new_bridges_used))\n\n        return float('inf')\n\n    results = []\n    for K, query in zip(Q, queries):\n        result = dijkstra(1, N, sum(1 << (bridges.index(q) if q in bridges else -1) for q in query))\n        results.append(result)\n\n    return results\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    bridges = []\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        bridges.append((u, v, t))\n\n    Q = int(data[index])\n    index += 1\n    queries = []\n    for _ in range(Q):\n        K = int(data[index])\n        index += 1\n        query = list(map(int, data[index:index + K]))\n        index += K\n        queries.append(query)\n\n    results = min_time_to_travel(N, M, bridges, Q, queries)\n    for result in results:\n        print(result)", "passed": false, "raw_code": "import sys\nfrom heapq import heappop, heappush\nfrom collections import defaultdict\n\ndef min_time_to_travel(N, M, bridges, Q, queries):\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n\n    def dijkstra(start, end, used_bridges):\n        dist = [float('inf')] * (1 << M)\n        dist[used_bridges] = 0\n        pq = [(0, start, used_bridges)]\n\n        while pq:\n            d, node, bridges_used = heappop(pq)\n            if node == end and bridges_used == (1 << M) - 1:\n                return d\n\n            for neighbor, weight in graph[node]:\n                new_bridges_used = bridges_used | (1 << (bridges.index((min(node, neighbor), max(node, neighbor))) if (min(node, neighbor), max(node, neighbor)) in bridges else -1))\n                if dist[new_bridges_used] > d + weight:\n                    dist[new_bridges_used] = d + weight\n                    heappush(pq, (d + weight, neighbor, new_bridges_used))\n\n        return float('inf')\n\n    results = []\n    for K, query in zip(Q, queries):\n        result = dijkstra(1, N, sum(1 << (bridges.index(q) if q in bridges else -1) for q in query))\n        results.append(result)\n\n    return results\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    bridges = []\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        bridges.append((u, v, t))\n\n    Q = int(data[index])\n    index += 1\n    queries = []\n    for _ in range(Q):\n        K = int(data[index])\n        index += 1\n        query = list(map(int, data[index:index + K]))\n        index += K\n        queries.append(query)\n\n    results = min_time_to_travel(N, M, bridges, Q, queries)\n    for result in results:\n        print(result)"}
{"task_id": "3527", "code": "def alternatingGroups(colors, queries):\n    n = len(colors)\n    colors += colors[:2]  # Extend colors to handle circular nature\n    count = {}\n    \n    def add_group(i, j, k):\n        if (i, j) not in count:\n            count[(i, j)] = 0\n        count[(i, j)] += k\n    \n    def remove_group(i, j, k):\n        if (i, j) in count:\n            count[(i, j)] -= k\n            if count[(i, j)] == 0:\n                del count[(i, j)]\n    \n    def get_count(size):\n        result = 0\n        for i in range(n):\n            j = i + size\n            if j >= 2 * n:\n                break\n            if colors[i] != colors[j % n]:\n                result += 1\n        return result\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            size = query[1]\n            result.append(get_count(size))\n        elif query[0] == 2:\n            index, color = query[1], query[2]\n            old_color = colors[index]\n            colors[index] = color\n            \n            # Remove old group\n            remove_group(index, (index + size) % n, 1)\n            \n            # Add new group if valid\n            if index > 0 and index < n and colors[index - 1] != colors[index]:\n                add_group((index - 1) % n, index, 1)\n            if index < n - 1 and index < n and colors[index] != colors[index + 1]:\n                add_group(index, (index + 1) % n, 1)\n    \n    return result", "passed": false, "raw_code": "```python\ndef alternatingGroups(colors, queries):\n    n = len(colors)\n    colors += colors[:2]  # Extend colors to handle circular nature\n    count = {}\n    \n    def add_group(i, j, k):\n        if (i, j) not in count:\n            count[(i, j)] = 0\n        count[(i, j)] += k\n    \n    def remove_group(i, j, k):\n        if (i, j) in count:\n            count[(i, j)] -= k\n            if count[(i, j)] == 0:\n                del count[(i, j)]\n    \n    def get_count(size):\n        result = 0\n        for i in range(n):\n            j = i + size\n            if j >= 2 * n:\n                break\n            if colors[i] != colors[j % n]:\n                result += 1\n        return result\n    \n    result = []\n    for query in queries:\n        if query[0] == 1:\n            size = query[1]\n            result.append(get_count(size))\n        elif query[0] == 2:\n            index, color = query[1], query[2]\n            old_color = colors[index]\n            colors[index] = color\n            \n            # Remove old group\n            remove_group(index, (index + size) % n, 1)\n            \n            # Add new group if valid\n            if index > 0 and index < n and colors[index - 1] != colors[index]:\n                add_group((index - 1) % n, index, 1)\n            if index < n - 1 and index < n and colors[index] != colors[index + 1]:\n                add_group(index, (index + 1) % n, 1)\n    \n    return result\n```"}
{"task_id": "3551", "code": "def max_xor_subarray(nums, queries):\n    def get_max_xor(start, end):\n        xor_val = 0\n        prefix_xors = {0}\n        max_xor = 0\n        \n        for i in range(start, end + 1):\n            xor_val ^= nums[i]\n            max_xor = max(max_xor, xor_val ^ prefix_xors[-prefix_val])\n            prefix_xors.add(xor_val)\n        \n        return max_xor\n    \n    sorted_queries = sorted(enumerate(queries), key=lambda x: x[1][1])\n    result = [0] * len(queries)\n    \n    j = 0\n    for i, (start, end) in sorted_queries:\n        while j < end:\n            if j >= start:\n                result[i] = get_max_xor(start, j)\n            j += 1\n    \n    return result", "passed": false, "raw_code": "```python\ndef max_xor_subarray(nums, queries):\n    def get_max_xor(start, end):\n        xor_val = 0\n        prefix_xors = {0}\n        max_xor = 0\n        \n        for i in range(start, end + 1):\n            xor_val ^= nums[i]\n            max_xor = max(max_xor, xor_val ^ prefix_xors[-prefix_val])\n            prefix_xors.add(xor_val)\n        \n        return max_xor\n    \n    sorted_queries = sorted(enumerate(queries), key=lambda x: x[1][1])\n    result = [0] * len(queries)\n    \n    j = 0\n    for i, (start, end) in sorted_queries:\n        while j < end:\n            if j >= start:\n                result[i] = get_max_xor(start, j)\n            j += 1\n    \n    return result\n```"}
{"task_id": "abc372_e", "code": "import heapq\nfrom sys import stdin, stdout\n\ndef main():\n    input = stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = [[] for _ in range(N + 1)]\n    heap_dict = {i: [] for i in range(1, N + 1)}\n    \n    def add_edge(u, v):\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        \n        # Update heaps\n        heapq.heappush(heap_dict[u], v)\n        heapq.heappush(heap_dict[v], u)\n        \n        # Ensure the heap size does not exceed k\n        while len(heap_dict[u]) > 1:\n            heapq.heappop(heap_dict[u])\n        while len(heap_dict[v]) > 1:\n            heapq.heappop(heap_dict[v])\n    \n    def get_kth_largest(v, k):\n        if len(heap_dict[v]) < k:\n            return -1\n        return heap_dict[v][k - 1]\n    \n    results = []\n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            u = int(data[index])\n            v = int(data[index + 1])\n            index += 2\n            add_edge(u, v)\n        elif query_type == 2:\n            v = int(data[index])\n            k = int(data[index + 1])\n            index += 2\n            result = get_kth_largest(v, k)\n            results.append(result)\n    \n    for result in results:\n        stdout.write(f\"{result}\\n\")\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport heapq\nfrom sys import stdin, stdout\n\ndef main():\n    input = stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = [[] for _ in range(N + 1)]\n    heap_dict = {i: [] for i in range(1, N + 1)}\n    \n    def add_edge(u, v):\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        \n        # Update heaps\n        heapq.heappush(heap_dict[u], v)\n        heapq.heappush(heap_dict[v], u)\n        \n        # Ensure the heap size does not exceed k\n        while len(heap_dict[u]) > 1:\n            heapq.heappop(heap_dict[u])\n        while len(heap_dict[v]) > 1:\n            heapq.heappop(heap_dict[v])\n    \n    def get_kth_largest(v, k):\n        if len(heap_dict[v]) < k:\n            return -1\n        return heap_dict[v][k - 1]\n    \n    results = []\n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            u = int(data[index])\n            v = int(data[index + 1])\n            index += 2\n            add_edge(u, v)\n        elif query_type == 2:\n            v = int(data[index])\n            k = int(data[index + 1])\n            index += 2\n            result = get_kth_largest(v, k)\n            results.append(result)\n    \n    for result in results:\n        stdout.write(f\"{result}\\n\")\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3571", "code": "def longestIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Sort coordinates based on x and y values\n    coordinates.sort()\n    \n    n = len(coordinates)\n    graph = defaultdict(list)\n    in_degree = [0] * n\n    \n    # Build the graph and in-degree array\n    for i in range(n):\n        x1, y1 = coordinates[i]\n        for j in range(i + 1, n):\n            x2, y2 = coordinates[j]\n            if x2 > x1 and y2 > y1:\n                graph[i].append(j)\n                in_degree[j] += 1\n    \n    # Initialize the queue with nodes having zero in-degree\n    queue = deque([i for i in range(n) if in_degree[i] == 0])\n    dp = [1] * n\n    \n    # Perform topological sort\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Return the longest path that contains coordinates[k]\n    return dp[k]", "passed": false, "raw_code": "```python\ndef longestIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Sort coordinates based on x and y values\n    coordinates.sort()\n    \n    n = len(coordinates)\n    graph = defaultdict(list)\n    in_degree = [0] * n\n    \n    # Build the graph and in-degree array\n    for i in range(n):\n        x1, y1 = coordinates[i]\n        for j in range(i + 1, n):\n            x2, y2 = coordinates[j]\n            if x2 > x1 and y2 > y1:\n                graph[i].append(j)\n                in_degree[j] += 1\n    \n    # Initialize the queue with nodes having zero in-degree\n    queue = deque([i for i in range(n) if in_degree[i] == 0])\n    dp = [1] * n\n    \n    # Perform topological sort\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Return the longest path that contains coordinates[k]\n    return dp[k]\n```"}
{"task_id": "3548", "code": "from itertools import combinations_with_replacement, permutations\n\ndef count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def can_form_palindrome(freq):\n        odd_count = sum(1 for v in freq.values() if v % 2 != 0)\n        return odd_count <= 1\n    \n    def count_combinations(digits, length):\n        count = 0\n        for combo in combinations_with_replacement(digits, length):\n            freq = {}\n            for d in combo:\n                if d in freq:\n                    freq[d] += 1\n                else:\n                    freq[d] = 1\n            if can_form_palindrome(freq) and sum(combo) % k == 0:\n                count += len(set(permutations(combo)))\n        return count\n    \n    digits = list(range(1, 10))\n    total_count = 0\n    for i in range(1, n + 1):\n        total_count += count_combinations(digits, i)\n    \n    return total_count", "passed": false, "raw_code": "```python\nfrom itertools import combinations_with_replacement, permutations\n\ndef count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def can_form_palindrome(freq):\n        odd_count = sum(1 for v in freq.values() if v % 2 != 0)\n        return odd_count <= 1\n    \n    def count_combinations(digits, length):\n        count = 0\n        for combo in combinations_with_replacement(digits, length):\n            freq = {}\n            for d in combo:\n                if d in freq:\n                    freq[d] += 1\n                else:\n                    freq[d] = 1\n            if can_form_palindrome(freq) and sum(combo) % k == 0:\n                count += len(set(permutations(combo)))\n        return count\n    \n    digits = list(range(1, 10))\n    total_count = 0\n    for i in range(1, n + 1):\n        total_count += count_combinations(digits, i)\n    \n    return total_count\n```"}
{"task_id": "3580", "code": "def find_almost_equal_substring(s: str, pattern: str) -> int:\n    n = len(s)\n    m = len(pattern)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n            if diff_count > 1:\n                break\n        if diff_count <= 1:\n            return i\n    return -1", "passed": false, "raw_code": "```python\ndef find_almost_equal_substring(s: str, pattern: str) -> int:\n    n = len(s)\n    m = len(pattern)\n    \n    for i in range(n - m + 1):\n        diff_count = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n            if diff_count > 1:\n                break\n        if diff_count <= 1:\n            return i\n    return -1\n```"}
{"final_accuracy": "0.00%"}
