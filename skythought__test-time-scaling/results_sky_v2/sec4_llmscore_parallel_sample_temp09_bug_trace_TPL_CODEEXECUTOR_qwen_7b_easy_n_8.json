{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_CODEEXECUTOR_qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc367_b", "code": "def process_number():\n    import sys\n    X = float(sys.stdin.read().strip())\n    str_X = str(X)\n    if '.' in str_X:\n        str_X = str_X.rstrip('0').rstrip('.')\n    print(str_X)\n\nprocess_number()", "passed": true, "raw_code": "```python\ndef process_number():\n    import sys\n    X = float(sys.stdin.read().strip())\n    str_X = str(X)\n    if '.' in str_X:\n        str_X = str_X.rstrip('0').rstrip('.')\n    print(str_X)\n\nprocess_number()\n```"}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result_string = input_string.replace('.', '')\n    print(result_string)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result_string = input_string.replace('.', '')\n    print(result_string)\n\nremove_dots()\n```"}
{"task_id": "3567", "code": "def binaryDate(date):\n    # Split the date string into year, month, and day\n    year, month, day = date.split('-')\n    \n    # Convert each component to an integer and then to binary without leading zeroes\n    binary_year = format(int(year), 'b')\n    binary_month = format(int(month), 'b')\n    binary_day = format(int(day), 'b')\n    \n    # Concatenate the binary representations with hyphens\n    binary_date = f\"{binary_year}-{binary_month}-{binary_day}\"\n    \n    return binary_date", "passed": true, "raw_code": "```python\ndef binaryDate(date):\n    # Split the date string into year, month, and day\n    year, month, day = date.split('-')\n    \n    # Convert each component to an integer and then to binary without leading zeroes\n    binary_year = format(int(year), 'b')\n    binary_month = format(int(month), 'b')\n    binary_day = format(int(day), 'b')\n    \n    # Concatenate the binary representations with hyphens\n    binary_date = f\"{binary_year}-{binary_month}-{binary_day}\"\n    \n    return binary_date\n```"}
{"task_id": "3555", "code": "def modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        index = nums.index(min_val)\n        nums[index] = min_val * multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        index = nums.index(min_val)\n        nums[index] = min_val * multiplier\n    return nums\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki(A, B, C):\n    # Check if the intervals [B, C) and [A, A+1) overlap\n    if B < C:\n        return \"Yes\" if A + 1 > B else \"No\"\n    else:\n        return \"Yes\" if A + 1 > B or C > A else \"No\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki(A, B, C):\n    # Check if the intervals [B, C) and [A, A+1) overlap\n    if B < C:\n        return \"Yes\" if A + 1 > B else \"No\"\n    else:\n        return \"Yes\" if A + 1 > B or C > A else \"No\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))\n```"}
{"task_id": "3606", "code": "def min_sum_of_digits(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return min(sum_of_digits(num) for num in nums)", "passed": true, "raw_code": "```python\ndef min_sum_of_digits(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return min(sum_of_digits(num) for num in nums)\n```"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    majority = (N + 1) // 2\n    \n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()", "passed": true, "raw_code": "```python\ndef determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    majority = (N + 1) // 2\n    \n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()\n```"}
{"task_id": "abc370_a", "code": "def takoyaki_eating(L, R):\n    if L == 1 and R == 0:\n        return \"Yes\"\n    elif L == 0 and R == 1:\n        return \"Yes\"\n    else:\n        return \"Invalid\"\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\n# Print the result\nprint(takoyaki_eating(L, R))", "passed": false, "raw_code": "```python\ndef takoyaki_eating(L, R):\n    if L == 1 and R == 0:\n        return \"Yes\"\n    elif L == 0 and R == 1:\n        return \"Yes\"\n    else:\n        return \"Invalid\"\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\n# Print the result\nprint(takoyaki_eating(L, R))\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    # Define the standard keyboard layout positions for A-Z\n    standard_positions = {chr(i + ord('A')): i for i in range(26)}\n    \n    # Initialize the current position at 'A'\n    current_position = standard_positions['A']\n    total_distance = 0\n    \n    # Iterate through each character in the input string S\n    for char in S:\n        # Get the standard position of the current character\n        target_position = standard_positions[char]\n        \n        # Calculate the absolute distance to the target position\n        distance = abs(current_position - target_position)\n        \n        # Update the total distance\n        total_distance += distance\n        \n        # Update the current position\n        current_position = target_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with the input from stdin\nimport sys\ninput_string = sys.stdin.read().strip()\nmin_traveled_distance(input_string)", "passed": false, "raw_code": "```python\ndef min_traveled_distance(S):\n    # Define the standard keyboard layout positions for A-Z\n    standard_positions = {chr(i + ord('A')): i for i in range(26)}\n    \n    # Initialize the current position at 'A'\n    current_position = standard_positions['A']\n    total_distance = 0\n    \n    # Iterate through each character in the input string S\n    for char in S:\n        # Get the standard position of the current character\n        target_position = standard_positions[char]\n        \n        # Calculate the absolute distance to the target position\n        distance = abs(current_position - target_position)\n        \n        # Update the total distance\n        total_distance += distance\n        \n        # Update the current position\n        current_position = target_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with the input from stdin\nimport sys\ninput_string = sys.stdin.read().strip()\nmin_traveled_distance(input_string)\n```"}
{"task_id": "abc365_a", "code": "def calculate_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\ncalculate_days_in_year()", "passed": true, "raw_code": "```python\ndef calculate_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\ncalculate_days_in_year()\n```"}
{"task_id": "abc368_a", "code": "def rearrange_cards(N, K, A):\n    # Extract the last K elements\n    bottom_part = A[-K:]\n    # Extract the elements before the last K\n    top_part = A[:-K]\n    # Concatenate the two parts in reversed order\n    result = bottom_part + top_part\n    # Print the result\n    print(' '.join(map(str, result)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function with the provided input\nrearrange_cards(N, K, A)", "passed": true, "raw_code": "def rearrange_cards(N, K, A):\n    # Extract the last K elements\n    bottom_part = A[-K:]\n    # Extract the elements before the last K\n    top_part = A[:-K]\n    # Concatenate the two parts in reversed order\n    result = bottom_part + top_part\n    # Print the result\n    print(' '.join(map(str, result)))\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function with the provided input\nrearrange_cards(N, K, A)"}
{"task_id": "abc371_b", "code": "def determine_names(N, M, babies):\n    earliest_male = [-1] * (N + 1)\n    results = []\n\n    for family, gender in babies:\n        if gender == 'M':\n            if earliest_male[family] == -1:\n                earliest_male[family] = len(results) + 1\n            results.append(\"Yes\" if earliest_male[family] == len(results) + 1 else \"No\")\n        else:\n            results.append(\"No\")\n\n    for result in results:\n        print(result)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbabies = []\nfor i in range(M):\n    family = int(data[2 + 2 * i])\n    gender = data[3 + 2 * i]\n    babies.append((family, gender))\n\n# Determine names and print results\ndetermine_names(N, M, babies)", "passed": true, "raw_code": "```python\ndef determine_names(N, M, babies):\n    earliest_male = [-1] * (N + 1)\n    results = []\n\n    for family, gender in babies:\n        if gender == 'M':\n            if earliest_male[family] == -1:\n                earliest_male[family] = len(results) + 1\n            results.append(\"Yes\" if earliest_male[family] == len(results) + 1 else \"No\")\n        else:\n            results.append(\"No\")\n\n    for result in results:\n        print(result)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbabies = []\nfor i in range(M):\n    family = int(data[2 + 2 * i])\n    gender = data[3 + 2 * i]\n    babies.append((family, gender))\n\n# Determine names and print results\ndetermine_names(N, M, babies)\n```"}
{"task_id": "3600", "code": "def findKthCharacter(k):\n    initial_word = \"a\"\n    cycle_length = len(initial_word)  # Since the initial word is \"a\", the cycle length is 1\n    \n    # Calculate the number of complete cycles and the remainder\n    full_cycles = k // cycle_length\n    remaining_chars = k % cycle_length\n    \n    # Since the initial word is \"a\", the first character remains \"a\" even after any number of cycles\n    if remaining_chars == 0:\n        return initial_word[full_cycles - 1]\n    else:\n        return chr(ord('a') + remaining_chars - 1)", "passed": false, "raw_code": "```python\ndef findKthCharacter(k):\n    initial_word = \"a\"\n    cycle_length = len(initial_word)  # Since the initial word is \"a\", the cycle length is 1\n    \n    # Calculate the number of complete cycles and the remainder\n    full_cycles = k // cycle_length\n    remaining_chars = k % cycle_length\n    \n    # Since the initial word is \"a\", the first character remains \"a\" even after any number of cycles\n    if remaining_chars == 0:\n        return initial_word[full_cycles - 1]\n    else:\n        return chr(ord('a') + remaining_chars - 1)\n```"}
{"task_id": "abc366_b", "code": "def convert_to_vertical(input_string):\n    # Split the input string into lines\n    lines = input_string.strip().split('\\n')\n    \n    # Get the number of strings and the maximum length\n    N = int(lines[0])\n    max_length = max(len(line) for line in lines[1:])\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over each column index\n    for col in range(max_length):\n        # Construct the current vertical string\n        vertical_string = ''\n        for row in range(N):\n            if col < len(lines[row + 1]):\n                vertical_string += lines[row + 1][col]\n            else:\n                vertical_string += '*'\n        \n        # Add the constructed string to the result list\n        result.append(vertical_string)\n    \n    # Print each vertical string\n    for s in result:\n        print(s)\n\n# Call the function with standard input\nconvert_to_vertical(input())", "passed": false, "raw_code": "```python\ndef convert_to_vertical(input_string):\n    # Split the input string into lines\n    lines = input_string.strip().split('\\n')\n    \n    # Get the number of strings and the maximum length\n    N = int(lines[0])\n    max_length = max(len(line) for line in lines[1:])\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over each column index\n    for col in range(max_length):\n        # Construct the current vertical string\n        vertical_string = ''\n        for row in range(N):\n            if col < len(lines[row + 1]):\n                vertical_string += lines[row + 1][col]\n            else:\n                vertical_string += '*'\n        \n        # Add the constructed string to the result list\n        result.append(vertical_string)\n    \n    # Print each vertical string\n    for s in result:\n        print(s)\n\n# Call the function with standard input\nconvert_to_vertical(input())\n```"}
{"task_id": "abc373_a", "code": "def count_matching_strings():\n    # Read 12 strings from standard input\n    strings = [input().strip() for _ in range(12)]\n    \n    # Initialize counter\n    count = 0\n    \n    # Iterate through the list of strings\n    for i, s in enumerate(strings):\n        # Check if the length of the string is equal to its index + 1\n        if len(s) == i + 1:\n            count += 1\n    \n    # Print the counter\n    print(count)\n\n# Call the function\ncount_matching_strings()", "passed": true, "raw_code": "```python\ndef count_matching_strings():\n    # Read 12 strings from standard input\n    strings = [input().strip() for _ in range(12)]\n    \n    # Initialize counter\n    count = 0\n    \n    # Iterate through the list of strings\n    for i, s in enumerate(strings):\n        # Check if the length of the string is equal to its index + 1\n        if len(s) == i + 1:\n            count += 1\n    \n    # Print the counter\n    print(count)\n\n# Call the function\ncount_matching_strings()\n```"}
{"task_id": "abc370_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    idx = 1\n\n    current_element = 1\n\n    for i in range(1, N + 1):\n        row = [int(data[idx + j]) for j in range(i)]\n        idx += i\n\n        for j in range(i):\n            if i >= j + 1:\n                current_element = row[j]\n            else:\n                current_element = row[i - j - 1]\n\n    print(current_element)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    idx = 1\n\n    current_element = 1\n\n    for i in range(1, N + 1):\n        row = [int(data[idx + j]) for j in range(i)]\n        idx += i\n\n        for j in range(i):\n            if i >= j + 1:\n                current_element = row[j]\n            else:\n                current_element = row[i - j - 1]\n\n    print(current_element)\n\nmain()\n```"}
{"task_id": "abc369_a", "code": "def find_arithmetic_sequences(A, B):\n    count = 0\n    # Check all possible arrangements of A, B, and x\n    for x in range(-100, 101):  # x is within a reasonable range for the given constraints\n        if (B - A == x - B) or (A - B == x - A) or (A - x == B - A) or (B - x == A - B) or (x - A == B - x) or (x - B == A - x):\n            count += 1\n    return count\n\n# Read input\nA, B = map(int, input().split())\n\n# Output the result\nprint(find_arithmetic_sequences(A, B))", "passed": false, "raw_code": "```python\ndef find_arithmetic_sequences(A, B):\n    count = 0\n    # Check all possible arrangements of A, B, and x\n    for x in range(-100, 101):  # x is within a reasonable range for the given constraints\n        if (B - A == x - B) or (A - B == x - A) or (A - x == B - A) or (B - x == A - B) or (x - A == B - x) or (x - B == A - x):\n            count += 1\n    return count\n\n# Read input\nA, B = map(int, input().split())\n\n# Output the result\nprint(find_arithmetic_sequences(A, B))\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    max_value = float('-inf')\n    second_max_value = float('-inf')\n    \n    for num in A:\n        if num > max_value:\n            second_max_value = max_value\n            max_value = num\n        elif num > second_max_value:\n            second_max_value = num\n    \n    # Find the index of the second largest value (1-based)\n    for i in range(N):\n        if A[i] == second_max_value:\n            print(i + 1)\n            break\n\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    max_value = float('-inf')\n    second_max_value = float('-inf')\n    \n    for num in A:\n        if num > max_value:\n            second_max_value = max_value\n            max_value = num\n        elif num > second_max_value:\n            second_max_value = num\n    \n    # Find the index of the second largest value (1-based)\n    for i in range(N):\n        if A[i] == second_max_value:\n            print(i + 1)\n            break\n\nfind_second_largest_index()\n```"}
{"task_id": "abc369_b", "code": "d", "passed": false, "raw_code": "```python\ndef min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    left_hand = 0\n    right_hand = 0\n    fatigue = 0\n    \n    for i in range(1, 2 * N, 2):\n        key = int(data[i])\n        hand = data[i + 1]\n        \n        if hand == 'L':\n            if left_hand < key:\n                fatigue += key - left_hand\n                left_hand = key\n            elif right_hand < key:\n                fatigue += key - right_hand\n                right_hand = key\n        elif hand == 'R':\n            if right_hand < key:\n                fatigue += key - right_hand\n                right_hand = key\n            elif left_hand < key:\n                fatigue += key - left_hand\n                left_hand = key\n                \n    print(fatigue)\n\nmin_fatigue_level()"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    current_position = 0\n    rows, cols = n, n\n    row, col = current_position // cols, current_position % cols\n    \n    for command in commands:\n        if command == \"RIGHT\":\n            if col < cols - 1:\n                col += 1\n        elif command == \"LEFT\":\n            if col > 0:\n                col -= 1\n        elif command == \"DOWN\":\n            if row < rows - 1:\n                row += 1\n        elif command == \"UP\":\n            if row > 0:\n                row -= 1\n        \n        current_position = row * cols + col\n    \n    return current_position", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    current_position = 0\n    rows, cols = n, n\n    row, col = current_position // cols, current_position % cols\n    \n    for command in commands:\n        if command == \"RIGHT\":\n            if col < cols - 1:\n                col += 1\n        elif command == \"LEFT\":\n            if col > 0:\n                col -= 1\n        elif command == \"DOWN\":\n            if row < rows - 1:\n                row += 1\n        elif command == \"UP\":\n            if row > 0:\n                row -= 1\n        \n        current_position = row * cols + col\n    \n    return current_position\n```"}
{"task_id": "3553", "code": "def is_same_color(coordinate1, coordinate2):\n    col_sum1 = ord(coordinate1[0]) + int(coordinate1[1])\n    col_sum2 = ord(coordinate2[0]) + int(coordinate2[1])\n    return col_sum1 % 2 == col_sum2 % 2", "passed": true, "raw_code": "```python\ndef is_same_color(coordinate1, coordinate2):\n    col_sum1 = ord(coordinate1[0]) + int(coordinate1[1])\n    col_sum2 = ord(coordinate2[0]) + int(coordinate2[1])\n    return col_sum1 % 2 == col_sum2 % 2\n```"}
{"task_id": "3568", "code": "def generate_key(num1, num2, num3):\n    # Pad the numbers with leading zeros to ensure they have at least four digits\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Initialize the key as an empty list\n    key_digits = []\n    \n    # Iterate through each digit position (0 to 3 for four digits)\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))\n        key_digits.append(min_digit)\n    \n    # Join the digits to form the key as a string\n    key_str = ''.join(map(str, key_digits))\n    \n    # Convert the key string to an integer\n    key_int = int(key_str)\n    \n    # Return the key or 0 if it is all zeros\n    return key_int if key_int != 0 else 0", "passed": true, "raw_code": "```python\ndef generate_key(num1, num2, num3):\n    # Pad the numbers with leading zeros to ensure they have at least four digits\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Initialize the key as an empty list\n    key_digits = []\n    \n    # Iterate through each digit position (0 to 3 for four digits)\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))\n        key_digits.append(min_digit)\n    \n    # Join the digits to form the key as a string\n    key_str = ''.join(map(str, key_digits))\n    \n    # Convert the key string to an integer\n    key_int = int(key_str)\n    \n    # Return the key or 0 if it is all zeros\n    return key_int if key_int != 0 else 0\n```"}
{"task_id": "3519", "code": "def countWinningPlayers(n, pick):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of balls picked by each player for each color\n    player_ball_count = defaultdict(lambda: defaultdict(int))\n    \n    # Update the count of balls picked by each player for each color\n    for player, color in pick:\n        player_ball_count[player][color] += 1\n    \n    # Function to check if a player wins\n    def player_wins(player):\n        return any(count >= player + 1 for count in player_ball_count[player].values())\n    \n    # Count the number of players who win\n    winning_players = sum(1 for player in range(n) if player_wins(player))\n    \n    return winning_players", "passed": true, "raw_code": "```python\ndef countWinningPlayers(n, pick):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of balls picked by each player for each color\n    player_ball_count = defaultdict(lambda: defaultdict(int))\n    \n    # Update the count of balls picked by each player for each color\n    for player, color in pick:\n        player_ball_count[player][color] += 1\n    \n    # Function to check if a player wins\n    def player_wins(player):\n        return any(count >= player + 1 for count in player_ball_count[player].values())\n    \n    # Count the number of players who win\n    winning_players = sum(1 for player in range(n) if player_wins(player))\n    \n    return winning_players\n```"}
{"task_id": "abc368_b", "code": "def count_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations_count = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations_count += 1\n    \n    print(operations_count)\n\ncount_operations()", "passed": true, "raw_code": "```python\ndef count_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations_count = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations_count += 1\n    \n    print(operations_count)\n\ncount_operations()\n```"}
{"task_id": "3543", "code": "def count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    left = 0\n    zero_count = 0\n    one_count = 0\n    \n    for right in range(n):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > k and one_count > k:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        count += (right - left + 1)\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    left = 0\n    zero_count = 0\n    one_count = 0\n    \n    for right in range(n):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > k and one_count > k:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        count += (right - left + 1)\n    \n    return count\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB, S_AC, S_BC = data\n    \n    # Initialize age relationships\n    ages = {'A': None, 'B': None, 'C': None}\n    \n    # Determine ages based on the given relationships\n    if S_AB == '<':\n        ages['A'] = -1\n        ages['B'] = 1\n    elif S_AB == '>':\n        ages['A'] = 1\n        ages['B'] = -1\n    \n    if S_AC == '<':\n        ages['A'] = -1\n        ages['C'] = 1\n    elif S_AC == '>':\n        ages['A'] = 1\n        ages['C'] = -1\n    \n    if S_BC == '<':\n        ages['B'] = -1\n        ages['C'] = 1\n    elif S_BC == '>':\n        ages['B'] = 1\n        ages['C'] = -1\n    \n    # Sort the ages to find the middle brother\n    sorted_ages = sorted(ages.items(), key=lambda x: x[1])\n    middle_brother = sorted_ages[1][0]\n    \n    print(middle_brother)\n\nfind_middle_brother()", "passed": false, "raw_code": "```python\ndef find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB, S_AC, S_BC = data\n    \n    # Initialize age relationships\n    ages = {'A': None, 'B': None, 'C': None}\n    \n    # Determine ages based on the given relationships\n    if S_AB == '<':\n        ages['A'] = -1\n        ages['B'] = 1\n    elif S_AB == '>':\n        ages['A'] = 1\n        ages['B'] = -1\n    \n    if S_AC == '<':\n        ages['A'] = -1\n        ages['C'] = 1\n    elif S_AC == '>':\n        ages['A'] = 1\n        ages['C'] = -1\n    \n    if S_BC == '<':\n        ages['B'] = -1\n        ages['C'] = 1\n    elif S_BC == '>':\n        ages['B'] = 1\n        ages['C'] = -1\n    \n    # Sort the ages to find the middle brother\n    sorted_ages = sorted(ages.items(), key=lambda x: x[1])\n    middle_brother = sorted_ages[1][0]\n    \n    print(middle_brother)\n\nfind_middle_brother()\n```"}
{"final_accuracy": "65.38%"}
