{"difficulty": "medium", "num_threads": 32, "temperature": 0.7, "n": 32, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_CONCISETRACE_qwen_7b_medium_n_32.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3518", "code": "def maxScore(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by multiplying corresponding elements of a and the sorted b\n    score = sum(x * y for x, y in zip(a, b_sorted))\n    \n    return score", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by multiplying corresponding elements of a and the sorted b\n    score = sum(x * y for x, y in zip(a, b_sorted))\n    \n    return score\n```"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    # Adjust the endpoints of each interval\n    points = sorted([x + d for x in start] + [x for x in start])\n    \n    # Calculate the maximum difference between consecutive elements\n    max_diff = 0\n    for i in range(1, len(points)):\n        max_diff = max(max_diff, points[i] - points[i - 1])\n    \n    return max_diff", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    # Adjust the endpoints of each interval\n    points = sorted([x + d for x in start] + [x for x in start])\n    \n    # Calculate the maximum difference between consecutive elements\n    max_diff = 0\n    for i in range(1, len(points)):\n        max_diff = max(max_diff, points[i] - points[i - 1])\n    \n    return max_diff\n```"}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    unique_banned_words = set()\n    \n    for word in message:\n        if word in banned_set:\n            unique_banned_words.add(word)\n            if len(unique_banned_words) >= 2:\n                return True\n    \n    return False", "passed": false, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    unique_banned_words = set()\n    \n    for word in message:\n        if word in banned_set:\n            unique_banned_words.add(word)\n            if len(unique_banned_words) >= 2:\n                return True\n    \n    return False\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_pairs()", "passed": true, "raw_code": "```python\ndef max_sum_of_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_pairs()\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    n = len(s)\n    for i in range(0, n, k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashedChar = char_sum % 26\n        result += chr(ord('a') + hashedChar)\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    n = len(s)\n    for i in range(0, n, k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashedChar = char_sum % 26\n        result += chr(ord('a') + hashedChar)\n    return result\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag_count = {}\n    unique_balls = set()\n    \n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            if x not in bag_count:\n                unique_balls.add(x)\n            bag_count[x] = bag_count.get(x, 0) + 1\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag_count[x] -= 1\n            if bag_count[x] == 0:\n                unique_balls.remove(x)\n        elif query_type == 3:\n            results.append(len(unique_balls))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag_count = {}\n    unique_balls = set()\n    \n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            if x not in bag_count:\n                unique_balls.add(x)\n            bag_count[x] = bag_count.get(x, 0) + 1\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag_count[x] -= 1\n            if bag_count[x] == 0:\n                unique_balls.remove(x)\n        elif query_type == 3:\n            results.append(len(unique_balls))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3534", "code": "def count_almost_equal_pairs(nums):\n    count = 0\n    n = len(nums)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            if num1 == num2:\n                count += 1\n                continue\n            \n            # Generate all possible swapped pairs of digits\n            for k in range(len(num1)):\n                for l in range(k + 1, len(num1)):\n                    swapped_num1 = num1[:k] + num1[l] + num1[k + 1:l] + num1[k] + num1[l + 1:]\n                    swapped_num2 = num2[:k] + num2[l] + num2[k + 1:l] + num2[k] + num2[l + 1:]\n                    \n                    if swapped_num1 == swapped_num2:\n                        count += 1\n                        break\n                if swapped_num1 == swapped_num2:\n                    break\n    \n    return count", "passed": false, "raw_code": "```python\ndef count_almost_equal_pairs(nums):\n    count = 0\n    n = len(nums)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            if num1 == num2:\n                count += 1\n                continue\n            \n            # Generate all possible swapped pairs of digits\n            for k in range(len(num1)):\n                for l in range(k + 1, len(num1)):\n                    swapped_num1 = num1[:k] + num1[l] + num1[k + 1:l] + num1[k] + num1[l + 1:]\n                    swapped_num2 = num2[:k] + num2[l] + num2[k + 1:l] + num2[k] + num2[l + 1:]\n                    \n                    if swapped_num1 == swapped_num2:\n                        count += 1\n                        break\n                if swapped_num1 == swapped_num2:\n                    break\n    \n    return count\n```"}
{"task_id": "3495", "code": "def kthSmallestObstacleDistance(queries, k):\n    import bisect\n    \n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        bisect.insort(distances, distance)\n        \n        if len(distances) < k:\n            results.append(-1)\n        else:\n            results.append(distances[k-1])\n    \n    return results", "passed": true, "raw_code": "```python\ndef kthSmallestObstacleDistance(queries, k):\n    import bisect\n    \n    distances = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        bisect.insort(distances, distance)\n        \n        if len(distances) < k:\n            results.append(-1)\n        else:\n            results.append(distances[k-1])\n    \n    return results\n```"}
{"task_id": "3526", "code": "def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_needed(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_needed(row) for row in grid)\n    col_flips = sum(flips_needed([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)", "passed": true, "raw_code": "```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_needed(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_needed(row) for row in grid)\n    col_flips = sum(flips_needed([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort()\n    \n    total_experience = 0\n    \n    for i in range(N):\n        # If the index is even (0-based), add twice the strength\n        if i % 2 == 0:\n            total_experience += 2 * A[i]\n        else:\n            # If the index is odd, add the strength once\n            total_experience += A[i]\n    \n    print(total_experience)\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort()\n    \n    total_experience = 0\n    \n    for i in range(N):\n        # If the index is even (0-based), add twice the strength\n        if i % 2 == 0:\n            total_experience += 2 * A[i]\n        else:\n            # If the index is odd, add the strength once\n            total_experience += A[i]\n    \n    print(total_experience)\n\nmax_experience_points()\n```"}
{"task_id": "abc372_d", "code": "def count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        stack = []\n        \n        for j in range(i + 1, N):\n            while stack and heights[j] >= heights[stack[-1]]:\n                stack.pop()\n            \n            if not stack or heights[j] <= heights[i]:\n                count += 1\n            \n            stack.append(j)\n        \n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()", "passed": false, "raw_code": "```python\ndef count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        stack = []\n        \n        for j in range(i + 1, N):\n            while stack and heights[j] >= heights[stack[-1]]:\n                stack.pop()\n            \n            if not stack or heights[j] <= heights[i]:\n                count += 1\n            \n            stack.append(j)\n        \n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()\n```"}
{"task_id": "3558", "code": "from collections import deque\n\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    queue = deque([(0, 0, health)])\n    visited = set()\n    \n    while queue:\n        x, y, current_health = queue.popleft()\n        \n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if current_health <= 0:\n            continue\n        \n        if x == m - 1 and y == n - 1:\n            return True\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n:\n                new_health = current_health - grid[nx][ny]\n                queue.append((nx, ny, new_health))\n    \n    return False", "passed": false, "raw_code": "```python\nfrom collections import deque\n\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    queue = deque([(0, 0, health)])\n    visited = set()\n    \n    while queue:\n        x, y, current_health = queue.popleft()\n        \n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if current_health <= 0:\n            continue\n        \n        if x == m - 1 and y == n - 1:\n            return True\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n:\n                new_health = current_health - grid[nx][ny]\n                queue.append((nx, ny, new_health))\n    \n    return False\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[-1]\n```"}
{"task_id": "3522", "code": "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if is_consecutive_and_sorted(subarray):\n            results[i] = max(subarray)\n    \n    return results\n\ndef is_consecutive_and_sorted(subarray):\n    return sorted(subarray) == list(range(subarray[0], subarray[0] + len(subarray)))", "passed": true, "raw_code": "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if is_consecutive_and_sorted(subarray):\n            results[i] = max(subarray)\n    \n    return results\n\ndef is_consecutive_and_sorted(subarray):\n    return sorted(subarray) == list(range(subarray[0], subarray[0] + len(subarray)))\n```"}
{"task_id": "3496", "code": "def minimumTime(mountainHeight, workerTimes):\n    def timeToReduceHeight(workerTime, height):\n        total_time = 0\n        for i in range(1, height + 1):\n            total_time += workerTime * i\n        return total_time\n\n    max_time = 0\n    for workerTime in workerTimes:\n        max_time = max(max_time, timeToReduceHeight(workerTime, mountainHeight))\n    \n    return max_time", "passed": false, "raw_code": "```python\ndef minimumTime(mountainHeight, workerTimes):\n    def timeToReduceHeight(workerTime, height):\n        total_time = 0\n        for i in range(1, height + 1):\n            total_time += workerTime * i\n        return total_time\n\n    max_time = 0\n    for workerTime in workerTimes:\n        max_time = max(max_time, timeToReduceHeight(workerTime, mountainHeight))\n    \n    return max_time\n```"}
{"task_id": "3559", "code": "def minimumNumberOfStringConcatenations(words, target):\n    from collections import defaultdict\n    \n    # Create a dictionary to store the prefixes of each word\n    prefix_dict = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefix_dict[word[:i]].append(word)\n    \n    # Initialize the DP array\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Iterate through each character of the target\n    for i in range(1, len(target) + 1):\n        for prefix in prefix_dict:\n            if target[i-1] == prefix[-1] and i >= len(prefix):\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef minimumNumberOfStringConcatenations(words, target):\n    from collections import defaultdict\n    \n    # Create a dictionary to store the prefixes of each word\n    prefix_dict = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefix_dict[word[:i]].append(word)\n    \n    # Initialize the DP array\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Iterate through each character of the target\n    for i in range(1, len(target) + 1):\n        for prefix in prefix_dict:\n            if target[i-1] == prefix[-1] and i >= len(prefix):\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for i in range(N):\n        diff_count = {}\n        for j in range(i, N):\n            if j > i:\n                diff = A[j] - A[i]\n                if diff not in diff_count:\n                    diff_count[diff] = 1\n                else:\n                    diff_count[diff] += 1\n                    count += diff_count[diff] - 1\n            else:\n                count += 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for i in range(N):\n        diff_count = {}\n        for j in range(i, N):\n            if j > i:\n                diff = A[j] - A[i]\n                if diff not in diff_count:\n                    diff_count[diff] = 1\n                else:\n                    diff_count[diff] += 1\n                    count += diff_count[diff] - 1\n            else:\n                count += 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = energyDrinkA[0]\n    dp_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B), max(dp_B + energyDrinkB[i], dp_A)\n    \n    return max(dp_A, dp_B)", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = energyDrinkA[0]\n    dp_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B), max(dp_B + energyDrinkB[i], dp_A)\n    \n    return max(dp_A, dp_B)\n```"}
{"task_id": "abc367_c", "code": "def generate_sequences(N, K, R, current, index, current_sum):\n    if index == N:\n        if current_sum % K == 0:\n            print(' '.join(map(str, current)))\n        return\n    for i in range(1, R[index] + 1):\n        current.append(i)\n        generate_sequences(N, K, R, current, index + 1, current_sum + i)\n        current.pop()\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n\n    generate_sequences(N, K, R, [], 0, 0)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef generate_sequences(N, K, R, current, index, current_sum):\n    if index == N:\n        if current_sum % K == 0:\n            print(' '.join(map(str, current)))\n        return\n    for i in range(1, R[index] + 1):\n        current.append(i)\n        generate_sequences(N, K, R, current, index + 1, current_sum + i)\n        current.pop()\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n\n    generate_sequences(N, K, R, [], 0, 0)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc367_d", "code": "def count_pairs(N, M, A):\n    from collections import defaultdict\n\n    # Calculate cumulative sum\n    cumulative_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        cumulative_sum[i] = cumulative_sum[i - 1] + A[i - 1]\n\n    # Dictionary to store the frequency of cumulative sums modulo M\n    sum_mod_dict = defaultdict(int)\n    sum_mod_dict[0] = 1  # Initialize with sum 0\n    count = 0\n\n    for i in range(1, N + 1):\n        current_mod = cumulative_sum[i] % M\n        count += sum_mod_dict[(current_mod - M) % M]\n        count += sum_mod_dict[(current_mod + M) % M]\n        sum_mod_dict[current_mod] += 1\n\n    print(count)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function with the input data\ncount_pairs(N, M, A)", "passed": false, "raw_code": "```python\ndef count_pairs(N, M, A):\n    from collections import defaultdict\n\n    # Calculate cumulative sum\n    cumulative_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        cumulative_sum[i] = cumulative_sum[i - 1] + A[i - 1]\n\n    # Dictionary to store the frequency of cumulative sums modulo M\n    sum_mod_dict = defaultdict(int)\n    sum_mod_dict[0] = 1  # Initialize with sum 0\n    count = 0\n\n    for i in range(1, N + 1):\n        current_mod = cumulative_sum[i] % M\n        count += sum_mod_dict[(current_mod - M) % M]\n        count += sum_mod_dict[(current_mod + M) % M]\n        sum_mod_dict[current_mod] += 1\n\n    print(count)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function with the input data\ncount_pairs(N, M, A)\n```"}
{"task_id": "abc371_d", "code": "import sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read input\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    P = list(map(int, data[index:index + N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n    \n    # Create a list of tuples (X_i, P_i) and sort by X_i\n    villages = [(X[i], P[i]) for i in range(N)]\n    villages.sort()\n    \n    # Calculate prefix sum array\n    prefix_sum = [0]\n    for _, p in villages:\n        prefix_sum.append(prefix_sum[-1] + p)\n    \n    # Process each query\n    for L, R in queries:\n        # Find the indices using binary search\n        left_index = bisect_left(villages, (L, float('-inf')))\n        right_index = bisect_right(villages, (R, float('inf')))\n        \n        # Calculate the number of villagers in the interval [L, R]\n        if left_index == len(villages) or villages[left_index][0] > R:\n            result = 0\n        else:\n            result = prefix_sum[right_index] - prefix_sum[left_index]\n        \n        print(result)\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\nimport sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read input\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    P = list(map(int, data[index:index + N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n    \n    # Create a list of tuples (X_i, P_i) and sort by X_i\n    villages = [(X[i], P[i]) for i in range(N)]\n    villages.sort()\n    \n    # Calculate prefix sum array\n    prefix_sum = [0]\n    for _, p in villages:\n        prefix_sum.append(prefix_sum[-1] + p)\n    \n    # Process each query\n    for L, R in queries:\n        # Find the indices using binary search\n        left_index = bisect_left(villages, (L, float('-inf')))\n        right_index = bisect_right(villages, (R, float('inf')))\n        \n        # Calculate the number of villagers in the interval [L, R]\n        if left_index == len(villages) or villages[left_index][0] > R:\n            result = 0\n        else:\n            result = prefix_sum[right_index] - prefix_sum[left_index]\n        \n        print(result)\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortest_path_after_queries(n, queries):\n    # Initialize the graph with direct connections\n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n        graph[i + 1][i] = 1\n\n    def dijkstra(start, end):\n        dist = {node: float('inf') for node in graph}\n        dist[start] = 0\n        pq = [(0, start)]\n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            if current_dist > dist[current_node]:\n                continue\n            for neighbor, weight in graph[current_node].items():\n                distance = current_dist + weight\n                if distance < dist[neighbor]:\n                    dist[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        return dist[end]\n\n    result = []\n    for query in queries:\n        u, v = query\n        graph[u][v] = 1\n        graph[v][u] = 1\n        result.append(dijkstra(0, n - 1))\n\n    return result", "passed": false, "raw_code": "import heapq\n\ndef shortest_path_after_queries(n, queries):\n    # Initialize the graph with direct connections\n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n        graph[i + 1][i] = 1\n\n    def dijkstra(start, end):\n        dist = {node: float('inf') for node in graph}\n        dist[start] = 0\n        pq = [(0, start)]\n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            if current_dist > dist[current_node]:\n                continue\n            for neighbor, weight in graph[current_node].items():\n                distance = current_dist + weight\n                if distance < dist[neighbor]:\n                    dist[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        return dist[end]\n\n    result = []\n    for query in queries:\n        u, v = query\n        graph[u][v] = 1\n        graph[v][u] = 1\n        result.append(dijkstra(0, n - 1))\n\n    return result"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    # Initialize the count of wins\n    wins = 0\n    \n    # Initialize the last move of Takahashi\n    last_takahashi_move = None\n    \n    for move in S:\n        if last_takahashi_move is None:\n            # Start with a move that doesn't immediately lose\n            if move == 'R':\n                last_takahashi_move = 'P'\n            elif move == 'P':\n                last_takahashi_move = 'S'\n            else:\n                last_takahashi_move = 'R'\n        else:\n            # Choose a move that beats or draws Aoki's move\n            if move == 'R':\n                last_takahashi_move = 'P' if last_takahashi_move != 'P' else 'R'\n            elif move == 'P':\n                last_takahashi_move = 'S' if last_takahashi_move != 'S' else 'P'\n            else:\n                last_takahashi_move = 'R' if last_takahashi_move != 'R' else 'S'\n        \n        # Check if Takahashi wins the current game\n        if (move == 'R' and last_takahashi_move == 'P') or \\\n           (move == 'P' and last_takahashi_move == 'S') or \\\n           (move == 'S' and last_takahashi_move == 'R'):\n            wins += 1\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    # Initialize the count of wins\n    wins = 0\n    \n    # Initialize the last move of Takahashi\n    last_takahashi_move = None\n    \n    for move in S:\n        if last_takahashi_move is None:\n            # Start with a move that doesn't immediately lose\n            if move == 'R':\n                last_takahashi_move = 'P'\n            elif move == 'P':\n                last_takahashi_move = 'S'\n            else:\n                last_takahashi_move = 'R'\n        else:\n            # Choose a move that beats or draws Aoki's move\n            if move == 'R':\n                last_takahashi_move = 'P' if last_takahashi_move != 'P' else 'R'\n            elif move == 'P':\n                last_takahashi_move = 'S' if last_takahashi_move != 'S' else 'P'\n            else:\n                last_takahashi_move = 'R' if last_takahashi_move != 'R' else 'S'\n        \n        # Check if Takahashi wins the current game\n        if (move == 'R' and last_takahashi_move == 'P') or \\\n           (move == 'P' and last_takahashi_move == 'S') or \\\n           (move == 'S' and last_takahashi_move == 'R'):\n            wins += 1\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    A.sort()\n    \n    def can_subsidize(limit):\n        total_cost = sum(min(limit, ai) for ai in A)\n        return total_cost <= M\n    \n    left, right = 0, M\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_subsidize(mid):\n            left = mid\n        else:\n            right = mid - 1\n    \n    if left == M:\n        return \"infinite\"\n    return left\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nresult = max_subsidy_limit(N, M, A)\nprint(result)", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    A.sort()\n    \n    def can_subsidize(limit):\n        total_cost = sum(min(limit, ai) for ai in A)\n        return total_cost <= M\n    \n    left, right = 0, M\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_subsidize(mid):\n            left = mid\n        else:\n            right = mid - 1\n    \n    if left == M:\n        return \"infinite\"\n    return left\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nresult = max_subsidy_limit(N, M, A)\nprint(result)\n```"}
{"task_id": "abc372_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    queries = [(int(data[3 + 2 * i]), data[4 + 2 * i]) for i in range(Q)]\n\n    def count_ABC(s):\n        return s.count('ABC')\n\n    current_count = count_ABC(S)\n    results = []\n\n    for X, C in queries:\n        current_count -= S[X - 1] == 'A' and S[X - 2:X] == 'BC'\n        S = S[:X - 1] + C + S[X:]\n        current_count += S[X - 1] == 'A' and S[X - 2:X] == 'BC'\n        results.append(current_count)\n\n    for result in results:\n        print(result)\n\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    queries = [(int(data[3 + 2 * i]), data[4 + 2 * i]) for i in range(Q)]\n\n    def count_ABC(s):\n        return s.count('ABC')\n\n    current_count = count_ABC(S)\n    results = []\n\n    for X, C in queries:\n        current_count -= S[X - 1] == 'A' and S[X - 2:X] == 'BC'\n        S = S[:X - 1] + C + S[X:]\n        current_count += S[X - 1] == 'A' and S[X - 2:X] == 'BC'\n        results.append(current_count)\n\n    for result in results:\n        print(result)\n\nmain()"}
{"task_id": "abc370_c", "code": "def transform_string(S, T):\n    X = []\n    while S != T:\n        min_changes = float('inf')\n        best_change_index = -1\n        best_new_S = None\n        \n        for i in range(len(S)):\n            if S[i] != T[i]:\n                # Find the lexicographically smallest character to replace S[i]\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    new_S = S[:i] + c + S[i+1:]\n                    changes = sum(1 for x, y in zip(new_S, T) if x != y)\n                    if changes < min_changes or (changes == min_changes and new_S < best_new_S):\n                        min_changes = changes\n                        best_change_index = i\n                        best_new_S = new_S\n        \n        if best_change_index != -1:\n            S = best_new_S\n            X.append(S)\n    \n    return X\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nS = data[0]\nT = data[1]\n\n# Get the transformed array\nresult = transform_string(S, T)\n\n# Output the result\nprint(len(result))\nfor s in result:\n    print(s)", "passed": true, "raw_code": "```python\ndef transform_string(S, T):\n    X = []\n    while S != T:\n        min_changes = float('inf')\n        best_change_index = -1\n        best_new_S = None\n        \n        for i in range(len(S)):\n            if S[i] != T[i]:\n                # Find the lexicographically smallest character to replace S[i]\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    new_S = S[:i] + c + S[i+1:]\n                    changes = sum(1 for x, y in zip(new_S, T) if x != y)\n                    if changes < min_changes or (changes == min_changes and new_S < best_new_S):\n                        min_changes = changes\n                        best_change_index = i\n                        best_new_S = new_S\n        \n        if best_change_index != -1:\n            S = best_new_S\n            X.append(S)\n    \n    return X\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nS = data[0]\nT = data[1]\n\n# Get the transformed array\nresult = transform_string(S, T)\n\n# Output the result\nprint(len(result))\nfor s in result:\n    print(s)\n```"}
{"task_id": "arc181_a", "code": "def min_operations_to_identity(N, P):\n    # Initialize the count of operations\n    operations = 0\n    \n    # Iterate over each element in the permutation\n    for i in range(N):\n        # Find the index where the current element should be\n        target_index = P[i] - 1\n        \n        # If the current element is not in its correct position\n        if i != target_index:\n            # Calculate the number of elements to be moved\n            num_elements_to_move = target_index - i + 1\n            \n            # Increment the operation count\n            operations += 1\n            \n            # Sort the segment [i, i+num_elements_to_move-1]\n            P[i:i+num_elements_to_move] = sorted(P[i:i+num_elements_to_move])\n    \n    return operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Number of test cases\nT = int(data[0])\n\n# Process each test case\nresults = []\nindex = 1\nfor _ in range(T):\n    N = int(data[index])\n    P = list(map(int, data[index+1:index+N+1]))\n    index += N + 1\n    results.append(min_operations_to_identity(N, P))\n\n# Print results\nfor result in results:\n    print(result)", "passed": false, "raw_code": "def min_operations_to_identity(N, P):\n    # Initialize the count of operations\n    operations = 0\n    \n    # Iterate over each element in the permutation\n    for i in range(N):\n        # Find the index where the current element should be\n        target_index = P[i] - 1\n        \n        # If the current element is not in its correct position\n        if i != target_index:\n            # Calculate the number of elements to be moved\n            num_elements_to_move = target_index - i + 1\n            \n            # Increment the operation count\n            operations += 1\n            \n            # Sort the segment [i, i+num_elements_to_move-1]\n            P[i:i+num_elements_to_move] = sorted(P[i:i+num_elements_to_move])\n    \n    return operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Number of test cases\nT = int(data[0])\n\n# Process each test case\nresults = []\nindex = 1\nfor _ in range(T):\n    N = int(data[index])\n    P = list(map(int, data[index+1:index+N+1]))\n    index += N + 1\n    results.append(min_operations_to_identity(N, P))\n\n# Print results\nfor result in results:\n    print(result)"}
{"task_id": "3579", "code": "from itertools import permutations\n\ndef largestNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = permutations(binary_nums)\n    \n    # Initialize the maximum number\n    max_number = 0\n    \n    # Iterate through all permutations and find the maximum number\n    for perm in perms:\n        concatenated_binary = ''.join(perm)\n        number = int(concatenated_binary, 2)\n        if number > max_number:\n            max_number = number\n    \n    return max_number", "passed": true, "raw_code": "```python\nfrom itertools import permutations\n\ndef largestNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = permutations(binary_nums)\n    \n    # Initialize the maximum number\n    max_number = 0\n    \n    # Iterate through all permutations and find the maximum number\n    for perm in perms:\n        concatenated_binary = ''.join(perm)\n        number = int(concatenated_binary, 2)\n        if number > max_number:\n            max_number = number\n    \n    return max_number\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    grid = [[True] * W for _ in range(H)]\n    remaining_walls = H * W\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C]:\n            grid[R][C] = False\n            remaining_walls -= 1\n        else:\n            # Look up\n            for i in range(R - 1, -1, -1):\n                if grid[i][C]:\n                    grid[i][C] = False\n                    remaining_walls -= 1\n                    break\n            \n            # Look down\n            for i in range(R + 1, H):\n                if grid[i][C]:\n                    grid[i][C] = False\n                    remaining_walls -= 1\n                    break\n            \n            # Look left\n            for j in range(C - 1, -1, -1):\n                if grid[R][j]:\n                    grid[R][j] = False\n                    remaining_walls -= 1\n                    break\n            \n            # Look right\n            for j in range(C + 1, W):\n                if grid[R][j]:\n                    grid[R][j] = False\n                    remaining_walls -= 1\n                    break\n    \n    print(remaining_walls)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    grid = [[True] * W for _ in range(H)]\n    remaining_walls = H * W\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C]:\n            grid[R][C] = False\n            remaining_walls -= 1\n        else:\n            # Look up\n            for i in range(R - 1, -1, -1):\n                if grid[i][C]:\n                    grid[i][C] = False\n                    remaining_walls -= 1\n                    break\n            \n            # Look down\n            for i in range(R + 1, H):\n                if grid[i][C]:\n                    grid[i][C] = False\n                    remaining_walls -= 1\n                    break\n            \n            # Look left\n            for j in range(C - 1, -1, -1):\n                if grid[R][j]:\n                    grid[R][j] = False\n                    remaining_walls -= 1\n                    break\n            \n            # Look right\n            for j in range(C + 1, W):\n                if grid[R][j]:\n                    grid[R][j] = False\n                    remaining_walls -= 1\n                    break\n    \n    print(remaining_walls)\n\nmain()\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    if m < n:\n        return 0\n    \n    target_count = Counter(word2)\n    current_count = Counter()\n    \n    i, j = 0, 0\n    valid_substrings = 0\n    \n    while j < m:\n        current_count[word1[j]] += 1\n        \n        # Check if the current window contains all required characters in the correct order\n        while i <= j and all(current_count[char] >= target_count[char] for char in target_count):\n            valid_substrings += m - j  # All substrings ending at j are valid\n            current_count[word1[i]] -= 1\n            i += 1\n    \n        j += 1\n    \n    return valid_substrings", "passed": true, "raw_code": "```python\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    if m < n:\n        return 0\n    \n    target_count = Counter(word2)\n    current_count = Counter()\n    \n    i, j = 0, 0\n    valid_substrings = 0\n    \n    while j < m:\n        current_count[word1[j]] += 1\n        \n        # Check if the current window contains all required characters in the correct order\n        while i <= j and all(current_count[char] >= target_count[char] for char in target_count):\n            valid_substrings += m - j  # All substrings ending at j are valid\n            current_count[word1[i]] -= 1\n            i += 1\n    \n        j += 1\n    \n    return valid_substrings\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for height in maximumHeight:\n        current_height = height\n        while current_height in used_heights:\n            current_height -= 1\n            if current_height == 0:\n                return -1\n        used_heights.add(current_height)\n        total_sum += current_height\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for height in maximumHeight:\n        current_height = height\n        while current_height in used_heights:\n            current_height -= 1\n            if current_height == 0:\n                return -1\n        used_heights.add(current_height)\n        total_sum += current_height\n    \n    return total_sum\n```"}
{"task_id": "3584", "code": "def findAlmostEqualSequence(word1, word2):\n    m, n = len(word1), len(word2)\n    seq = []\n    j = 0\n    changes = 0\n    \n    for i in range(m):\n        if j < n and word1[i] == word2[j]:\n            seq.append(i)\n            j += 1\n        elif changes == 0 and j < n:\n            seq.append(i)\n            word1 = word1[:i] + word2[j] + word1[i+1:]\n            j += 1\n            changes += 1\n    \n    if j == n:\n        return seq\n    else:\n        return []", "passed": false, "raw_code": "```python\ndef findAlmostEqualSequence(word1, word2):\n    m, n = len(word1), len(word2)\n    seq = []\n    j = 0\n    changes = 0\n    \n    for i in range(m):\n        if j < n and word1[i] == word2[j]:\n            seq.append(i)\n            j += 1\n        elif changes == 0 and j < n:\n            seq.append(i)\n            word1 = word1[:i] + word2[j] + word1[i+1:]\n            j += 1\n            changes += 1\n    \n    if j == n:\n        return seq\n    else:\n        return []\n```"}
{"task_id": "arc183_a", "code": "import itertools\n\ndef find_good_sequence(N, K):\n    # Create the sequence [1]*K + [2]*K + ... + [N]*K\n    sequence = []\n    for i in range(1, N + 1):\n        sequence.extend([i] * K)\n    \n    # Generate all permutations and sort them lexicographically\n    permutations = sorted(itertools.permutations(sequence))\n    \n    # Calculate the index of the desired sequence\n    index = (len(permutations) + 1) // 2 - 1\n    \n    # Print the desired sequence\n    print(' '.join(map(str, permutations[index])))\n\n# Call the function with stdin as input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nfind_good_sequence(N, K)", "passed": false, "raw_code": "```python\nimport itertools\n\ndef find_good_sequence(N, K):\n    # Create the sequence [1]*K + [2]*K + ... + [N]*K\n    sequence = []\n    for i in range(1, N + 1):\n        sequence.extend([i] * K)\n    \n    # Generate all permutations and sort them lexicographically\n    permutations = sorted(itertools.permutations(sequence))\n    \n    # Calculate the index of the desired sequence\n    index = (len(permutations) + 1) // 2 - 1\n    \n    # Print the desired sequence\n    print(' '.join(map(str, permutations[index])))\n\n# Call the function with stdin as input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nfind_good_sequence(N, K)\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while H:\n        T += 1\n        if T % 3 == 0:\n            H[0] -= 3\n        else:\n            H[0] -= 1\n        \n        if H[0] <= 0:\n            H.pop(0)\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while H:\n        T += 1\n        if T % 3 == 0:\n            H[0] -= 3\n        else:\n            H[0] -= 1\n        \n        if H[0] <= 0:\n            H.pop(0)\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "3570", "code": "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    result = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        vowel_set = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                vowel_set.add(char)\n            else:\n                consonant_count += 1\n            \n            if len(vowel_set) == 5 and consonant_count == k:\n                result += 1\n    \n    return result", "passed": true, "raw_code": "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    result = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        vowel_set = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                vowel_set.add(char)\n            else:\n                consonant_count += 1\n            \n            if len(vowel_set) == 5 and consonant_count == k:\n                result += 1\n    \n    return result\n```"}
{"task_id": "abc371_c", "code": "i", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict\n\ndef min_cost_to_isomorphic(G, H, A):\n    N = len(G)\n    \n    def dfs(i, j, mask):\n        if i == N:\n            return 0\n        \n        if (i, j, mask) in dp:\n            return dp[(i, j, mask)]\n        \n        ans = float('inf')\n        for k in range(N):\n            if mask & (1 << k):\n                new_mask = mask ^ (1 << k)\n                if G[i][k] != H[j][k]:\n                    cost = A[i + 1][k + 1]\n                    ans = min(ans, cost + dfs(i + 1, j + 1, new_mask))\n                else:\n                    ans = min(ans, dfs(i + 1, j + 1, new_mask))\n        \n        dp[(i, j, mask)] = ans\n        return ans\n    \n    dp = {}\n    result = dfs(0, 0, (1 << N) - 1)\n    print(result)\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM_G = int(data[1])\n\nG = [[False] * N for _ in range(N)]\nindex = 2\nfor _ in range(M_G):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    G[u][v] = True\n    G[v][u] = True\n    index += 2\n\nM_H = int(data[index])\nH = [[False] * N for _ in range(N)]\nindex += 1\nfor _ in range(M_H):\n    a = int(data[index]) - 1\n    b = int(data[index + 1]) - 1\n    H[a][b] = True\n    H[b][a] = True\n    index += 2\n\nA = []\nfor _ in range(N - 1):\n    row = list(map(int, data[index:index + N]))\n    A.append(row)\n    index += N\n\nmin_cost_to_isomorphic(G, H, A)"}
{"task_id": "abc366_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize the 3D array and prefix sum array\n    A = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    prefix_sum = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    \n    # Fill the 3D array and compute the prefix sums\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                A[x][y][z] = int(data[index])\n                index += 1\n                prefix_sum[x][y][z] = (prefix_sum[x-1][y][z] + prefix_sum[x][y-1][z] + prefix_sum[x][y][z-1]\n                                      - prefix_sum[x-1][y-1][z] - prefix_sum[x-1][y][z-1] - prefix_sum[x][y-1][z-1]\n                                      + prefix_sum[x-1][y-1][z-1]) + A[x][y][z]\n    \n    # Process the queries\n    Q = int(data[index])\n    index += 1\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        result = (prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx-1][Ry][Rz] - prefix_sum[Rx][Ly-1][Rz] - prefix_sum[Rx][Ry][Lz-1]\n                  + prefix_sum[Lx-1][Ly-1][Rz] + prefix_sum[Lx-1][Ry][Lz-1] + prefix_sum[Rx][Ly-1][Lz-1]\n                  - prefix_sum[Lx-1][Ly-1][Lz-1])\n        results.append(result)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize the 3D array and prefix sum array\n    A = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    prefix_sum = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    \n    # Fill the 3D array and compute the prefix sums\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                A[x][y][z] = int(data[index])\n                index += 1\n                prefix_sum[x][y][z] = (prefix_sum[x-1][y][z] + prefix_sum[x][y-1][z] + prefix_sum[x][y][z-1]\n                                      - prefix_sum[x-1][y-1][z] - prefix_sum[x-1][y][z-1] - prefix_sum[x][y-1][z-1]\n                                      + prefix_sum[x-1][y-1][z-1]) + A[x][y][z]\n    \n    # Process the queries\n    Q = int(data[index])\n    index += 1\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        result = (prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx-1][Ry][Rz] - prefix_sum[Rx][Ly-1][Rz] - prefix_sum[Rx][Ry][Lz-1]\n                  + prefix_sum[Lx-1][Ly-1][Rz] + prefix_sum[Lx-1][Ry][Lz-1] + prefix_sum[Rx][Ly-1][Lz-1]\n                  - prefix_sum[Lx-1][Ly-1][Lz-1])\n        results.append(result)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"final_accuracy": "37.84%"}
