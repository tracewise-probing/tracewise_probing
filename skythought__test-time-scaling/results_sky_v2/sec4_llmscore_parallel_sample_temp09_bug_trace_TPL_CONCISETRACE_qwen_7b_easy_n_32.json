{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 32, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_CONCISETRACE_qwen_7b_easy_n_32.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    # Read the input string from standard input\n    s = sys.stdin.read().strip()\n    \n    # Remove all occurrences of '.'\n    result = s.replace('.', '')\n    \n    # Print the resulting string\n    print(result)\n\n# Call the function\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    import sys\n    # Read the input string from standard input\n    s = sys.stdin.read().strip()\n    \n    # Remove all occurrences of '.'\n    result = s.replace('.', '')\n    \n    # Print the resulting string\n    print(result)\n\n# Call the function\nremove_dots()\n```"}
{"task_id": "3606", "code": "def min_sum_of_digits(nums):\n    return min(sum(int(digit) for digit in str(num)) for num in nums)", "passed": true, "raw_code": "```python\ndef min_sum_of_digits(nums):\n    return min(sum(int(digit) for digit in str(num)) for num in nums)\n```"}
{"task_id": "abc373_a", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()\n```"}
{"task_id": "abc366_a", "code": "import sys\n\ndef is_election_decided():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    max_T = T + 1\n    max_A = A + 1\n    \n    if max_T > (N + 1) // 2 or max_A > (N + 1) // 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nis_election_decided()", "passed": true, "raw_code": "```python\nimport sys\n\ndef is_election_decided():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    max_T = T + 1\n    max_A = A + 1\n    \n    if max_T > (N + 1) // 2 or max_A > (N + 1) // 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nis_election_decided()\n```"}
{"task_id": "3555", "code": "def apply_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_value = min(nums)\n        min_index = nums.index(min_value)\n        nums[min_index] = min_value * multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef apply_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_value = min(nums)\n        min_index = nums.index(min_value)\n        nums[min_index] = min_value * multiplier\n    return nums\n```"}
{"task_id": "abc367_b", "code": "def main():\n    import sys\n    X = float(input())\n    formatted_X = \"{:.{}f}\".format(X, 3).rstrip('0').rstrip('.')\n    print(formatted_X)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    X = float(input())\n    formatted_X = \"{:.{}f}\".format(X, 3).rstrip('0').rstrip('.')\n    print(formatted_X)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n    \n    # Calculate the number of hours Takahashi is awake\n    awake_hours = (B - C) % 24\n    \n    # Check if A o'clock is within the awake hours\n    if (C <= A < C + awake_hours) or (C + awake_hours > 24 and (A >= C or A < C + awake_hours - 24)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncan_shout_takoyaki()", "passed": true, "raw_code": "```python\ndef can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n    \n    # Calculate the number of hours Takahashi is awake\n    awake_hours = (B - C) % 24\n    \n    # Check if A o'clock is within the awake hours\n    if (C <= A < C + awake_hours) or (C + awake_hours > 24 and (A >= C or A < C + awake_hours - 24)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncan_shout_takoyaki()\n```"}
{"task_id": "abc370_a", "code": "def check_takoyaki(L, R):\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"Yes\")\n    else:\n        print(\"Invalid\")\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read().strip()\nL, R = map(int, input.split())\n\ncheck_takoyaki(L, R)", "passed": false, "raw_code": "```python\ndef check_takoyaki(L, R):\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"Yes\")\n    else:\n        print(\"Invalid\")\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read().strip()\nL, R = map(int, input.split())\n\ncheck_takoyaki(L, R)\n```"}
{"task_id": "3567", "code": "def binary_date(date: str) -> str:\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"", "passed": true, "raw_code": "```python\ndef binary_date(date: str) -> str:\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n```"}
{"task_id": "abc368_a", "code": "def rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n    \n    rotated_cards = cards[-K:] + cards[:-K]\n    print(' '.join(map(str, rotated_cards)))\n\nrotate_cards()", "passed": true, "raw_code": "```python\ndef rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n    \n    rotated_cards = cards[-K:] + cards[:-K]\n    print(' '.join(map(str, rotated_cards)))\n\nrotate_cards()\n```"}
{"task_id": "abc368_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        if A[0] > 0 and A[1] > 0:\n            A[0] -= 1\n            A[1] -= 1\n            operations += 1\n    \n    print(operations)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        if A[0] > 0 and A[1] > 0:\n            A[0] -= 1\n            A[1] -= 1\n            operations += 1\n    \n    print(operations)\n\nmain()\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    max_val = -float('inf')\n    second_max_val = -float('inf')\n    max_index = -1\n    second_max_index = -1\n    \n    for i in range(N):\n        if A[i] > max_val:\n            second_max_val = max_val\n            second_max_index = max_index\n            max_val = A[i]\n            max_index = i\n        elif A[i] > second_max_val:\n            second_max_val = A[i]\n            second_max_index = i\n    \n    print(second_max_index + 1)\n\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    max_val = -float('inf')\n    second_max_val = -float('inf')\n    max_index = -1\n    second_max_index = -1\n    \n    for i in range(N):\n        if A[i] > max_val:\n            second_max_val = max_val\n            second_max_index = max_index\n            max_val = A[i]\n            max_index = i\n        elif A[i] > second_max_val:\n            second_max_val = A[i]\n            second_max_index = i\n    \n    print(second_max_index + 1)\n\nfind_second_largest_index()\n```"}
{"task_id": "abc366_b", "code": "d", "passed": false, "raw_code": "```python\ndef convert_to_vertical_text():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    strings = data[1:]\n    \n    max_length = max(len(s) for s in strings)\n    \n    vertical_text = [[''] * N for _ in range(max_length)]\n    \n    for i in range(N):\n        string = strings[i]\n        for j in range(max_length):\n            if j < len(string):\n                vertical_text[j][N - i - 1] = string[j]\n            else:\n                vertical_text[j][N - i - 1] = '*'\n    \n    for row in vertical_text:\n        while row[-1] == '*':\n            row.pop()\n        print(''.join(row))\n\nconvert_to_vertical_text()"}
{"task_id": "abc365_a", "code": "def number_of_days_in_year(year):\n    if (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0):\n        print(366)\n    else:\n        print(365)\n\n# Call the function with stdin as input\nimport sys\nnumber_of_days_in_year(int(sys.stdin.read().strip()))", "passed": true, "raw_code": "```python\ndef number_of_days_in_year(year):\n    if (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0):\n        print(366)\n    else:\n        print(365)\n\n# Call the function with stdin as input\nimport sys\nnumber_of_days_in_year(int(sys.stdin.read().strip()))\n```"}
{"task_id": "3600", "code": "def find_kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        new_word = ''.join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n        word += new_word\n    return word[k - 1]", "passed": true, "raw_code": "```python\ndef find_kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        new_word = ''.join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n        word += new_word\n    return word[k - 1]\n```"}
{"task_id": "3553", "code": "def are_squares_same_color(coordinate1: str, coordinate2: str) -> bool:\n    col1, row1 = ord(coordinate1[0]) - ord('a') + 1, int(coordinate1[1])\n    col2, row2 = ord(coordinate2[0]) - ord('a') + 1, int(coordinate2[1])\n    return (col1 + row1) % 2 == (col2 + row2) % 2", "passed": true, "raw_code": "```python\ndef are_squares_same_color(coordinate1: str, coordinate2: str) -> bool:\n    col1, row1 = ord(coordinate1[0]) - ord('a') + 1, int(coordinate1[1])\n    col2, row2 = ord(coordinate2[0]) - ord('a') + 1, int(coordinate2[1])\n    return (col1 + row1) % 2 == (col2 + row2) % 2\n```"}
{"task_id": "3519", "code": "def countWinningPlayers(n, pick):\n    # Dictionary to store the number of balls each player has picked for each color\n    player_balls = {i: {} for i in range(n)}\n    \n    # Update the dictionary with the picks\n    for p in pick:\n        player_id, ball_color = p\n        if ball_color in player_balls[player_id]:\n            player_balls[player_id][ball_color] += 1\n        else:\n            player_balls[player_id][ball_color] = 1\n    \n    # Count the number of players who win the game\n    winning_players = 0\n    for i in range(n):\n        if any(count >= i + 1 for count in player_balls[i].values()):\n            winning_players += 1\n    \n    return winning_players", "passed": true, "raw_code": "```python\ndef countWinningPlayers(n, pick):\n    # Dictionary to store the number of balls each player has picked for each color\n    player_balls = {i: {} for i in range(n)}\n    \n    # Update the dictionary with the picks\n    for p in pick:\n        player_id, ball_color = p\n        if ball_color in player_balls[player_id]:\n            player_balls[player_id][ball_color] += 1\n        else:\n            player_balls[player_id][ball_color] = 1\n    \n    # Count the number of players who win the game\n    winning_players = 0\n    for i in range(n):\n        if any(count >= i + 1 for count in player_balls[i].values()):\n            winning_players += 1\n    \n    return winning_players\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    # Create a dictionary to map each character to its index in the string S (0-based)\n    char_to_index = {char: idx for idx, char in enumerate(S)}\n    \n    # Initialize the current position at the index of 'A'\n    current_position = char_to_index['A']\n    total_distance = 0\n    \n    # Calculate the distance for each character from 'A' to 'Z'\n    for char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        next_position = char_to_index[char]\n        distance = abs(next_position - current_position)\n        total_distance += distance\n        current_position = next_position\n    \n    print(total_distance)\n\n# Call the function with input from stdin\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    S = input().strip()\n    min_traveled_distance(S)", "passed": true, "raw_code": "```python\ndef min_traveled_distance(S):\n    # Create a dictionary to map each character to its index in the string S (0-based)\n    char_to_index = {char: idx for idx, char in enumerate(S)}\n    \n    # Initialize the current position at the index of 'A'\n    current_position = char_to_index['A']\n    total_distance = 0\n    \n    # Calculate the distance for each character from 'A' to 'Z'\n    for char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        next_position = char_to_index[char]\n        distance = abs(next_position - current_position)\n        total_distance += distance\n        current_position = next_position\n    \n    print(total_distance)\n\n# Call the function with input from stdin\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    S = input().strip()\n    min_traveled_distance(S)\n```"}
{"task_id": "abc370_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1):\n            A[i][j] = int(data[index])\n            index += 1\n    \n    current_element = 1\n    for i in range(1, N):\n        if current_element >= i + 1:\n            current_element = A[current_element - 1][i]\n        else:\n            current_element = A[i][current_element - 1]\n    \n    print(current_element)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1):\n            A[i][j] = int(data[index])\n            index += 1\n    \n    current_element = 1\n    for i in range(1, N):\n        if current_element >= i + 1:\n            current_element = A[current_element - 1][i]\n        else:\n            current_element = A[i][current_element - 1]\n    \n    print(current_element)\n\nmain()\n```"}
{"task_id": "abc371_b", "code": "def determine_taro_name():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Dictionary to store the earliest-born male child in each family\n    family_info = {}\n    \n    result = []\n    for i in range(M):\n        family = int(data[2 + 2 * i]) - 1\n        gender = data[3 + 2 * i]\n        \n        if gender == 'M':\n            if family not in family_info or family_info[family][0] > i:\n                family_info[family] = (i, True)\n            elif family_info[family][1]:\n                family_info[family] = (i, False)\n        \n        if family in family_info and family_info[family][1]:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n    \n    for r in result:\n        print(r)\n\ndetermine_taro_name()", "passed": false, "raw_code": "```python\ndef determine_taro_name():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Dictionary to store the earliest-born male child in each family\n    family_info = {}\n    \n    result = []\n    for i in range(M):\n        family = int(data[2 + 2 * i]) - 1\n        gender = data[3 + 2 * i]\n        \n        if gender == 'M':\n            if family not in family_info or family_info[family][0] > i:\n                family_info[family] = (i, True)\n            elif family_info[family][1]:\n                family_info[family] = (i, False)\n        \n        if family in family_info and family_info[family][1]:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n    \n    for r in result:\n        print(r)\n\ndetermine_taro_name()\n```"}
{"task_id": "abc369_b", "code": "def min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    left_hand = -1\n    right_hand = -1\n    fatigue = 0\n    \n    index = 1\n    for _ in range(N):\n        A_i = int(data[index])\n        S_i = data[index + 1]\n        index += 2\n        \n        if S_i == 'L':\n            if left_hand != -1:\n                fatigue += abs(A_i - left_hand)\n            left_hand = A_i\n        elif S_i == 'R':\n            if right_hand != -1:\n                fatigue += abs(A_i - right_hand)\n            right_hand = A_i\n    \n    print(fatigue)\n\nmin_fatigue_level()", "passed": true, "raw_code": "```python\ndef min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    left_hand = -1\n    right_hand = -1\n    fatigue = 0\n    \n    index = 1\n    for _ in range(N):\n        A_i = int(data[index])\n        S_i = data[index + 1]\n        index += 2\n        \n        if S_i == 'L':\n            if left_hand != -1:\n                fatigue += abs(A_i - left_hand)\n            left_hand = A_i\n        elif S_i == 'R':\n            if right_hand != -1:\n                fatigue += abs(A_i - right_hand)\n            right_hand = A_i\n    \n    print(fatigue)\n\nmin_fatigue_level()\n```"}
{"task_id": "3543", "code": "def count_substrings_with_k_constraint(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    left = 0\n    zero_count = 0\n    one_count = 0\n    \n    for right in range(n):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > k and one_count > k:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        count += right - left + 1\n    \n    return count\n\ndef number_of_substrings_with_k_constraint(s: str, k: int) -> int:\n    return count_substrings_with_k_constraint(s, k)", "passed": true, "raw_code": "```python\ndef count_substrings_with_k_constraint(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    left = 0\n    zero_count = 0\n    one_count = 0\n    \n    for right in range(n):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > k and one_count > k:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        count += right - left + 1\n    \n    return count\n\ndef number_of_substrings_with_k_constraint(s: str, k: int) -> int:\n    return count_substrings_with_k_constraint(s, k)\n```"}
{"task_id": "3568", "code": "def getKey(num1, num2, num3):\n    # Convert numbers to strings and pad with leading zeros\n    str1 = f\"{num1:04d}\"\n    str2 = f\"{num2:04d}\"\n    str3 = f\"{num3:04d}\"\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(str1[i], str2[i], str3[i])\n        key += min_digit\n    \n    # Convert the key to an integer and return\n    return int(key) if key != \"0\" else 0", "passed": true, "raw_code": "```python\ndef getKey(num1, num2, num3):\n    # Convert numbers to strings and pad with leading zeros\n    str1 = f\"{num1:04d}\"\n    str2 = f\"{num2:04d}\"\n    str3 = f\"{num3:04d}\"\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(str1[i], str2[i], str3[i])\n        key += min_digit\n    \n    # Convert the key to an integer and return\n    return int(key) if key != \"0\" else 0\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    # Initial position of the snake (top-left corner)\n    i, j = 0, 0\n    \n    # Directions mapping\n    directions = {\n        \"UP\": (-1, 0),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1),\n        \"RIGHT\": (0, 1)\n    }\n    \n    # Iterate through each command\n    for command in commands:\n        di, dj = directions[command]\n        new_i, new_j = i + di, j + dj\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= new_i < n and 0 <= new_j < n:\n            i, j = new_i, new_j\n    \n    # Convert the 2D coordinates to a single index\n    return (i * n) + j", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    # Initial position of the snake (top-left corner)\n    i, j = 0, 0\n    \n    # Directions mapping\n    directions = {\n        \"UP\": (-1, 0),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1),\n        \"RIGHT\": (0, 1)\n    }\n    \n    # Iterate through each command\n    for command in commands:\n        di, dj = directions[command]\n        new_i, new_j = i + di, j + dj\n        \n        # Check if the new position is within the grid boundaries\n        if 0 <= new_i < n and 0 <= new_j < n:\n            i, j = new_i, new_j\n    \n    # Convert the 2D coordinates to a single index\n    return (i * n) + j\n```"}
{"task_id": "abc369_a", "code": "def count_arithmetic_sequences(A, B):\n    # Possible values for x range from min(A, B) - abs(A - B) to max(A, B) + abs(A - B)\n    x_min = min(A, B) - abs(A - B)\n    x_max = max(A, B) + abs(A - B)\n    \n    count = 0\n    \n    for x in range(x_min, x_max + 1):\n        if (2 * A == B + x) or (2 * B == A + x) or (2 * x == A + B):\n            count += 1\n    \n    return count\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_arithmetic_sequences(A, B))", "passed": true, "raw_code": "```python\ndef count_arithmetic_sequences(A, B):\n    # Possible values for x range from min(A, B) - abs(A - B) to max(A, B) + abs(A - B)\n    x_min = min(A, B) - abs(A - B)\n    x_max = max(A, B) + abs(A - B)\n    \n    count = 0\n    \n    for x in range(x_min, x_max + 1):\n        if (2 * A == B + x) or (2 * B == A + x) or (2 * x == A + B):\n            count += 1\n    \n    return count\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_arithmetic_sequences(A, B))\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input_data = sys.stdin.read().strip()\n    S_AB, S_AC, S_BC = input_data.split()\n\n    # Initialize the relative positions\n    A_pos = 0\n    B_pos = 0\n    C_pos = 0\n\n    # Determine positions based on the relationships\n    if S_AB == '<':\n        A_pos += 1\n        B_pos += -1\n    elif S_AB == '>':\n        A_pos += -1\n        B_pos += 1\n\n    if S_AC == '<':\n        A_pos += 1\n        C_pos += -1\n    elif S_AC == '>':\n        A_pos += -1\n        C_pos += 1\n\n    if S_BC == '<':\n        B_pos += 1\n        C_pos += -1\n    elif S_BC == '>':\n        B_pos += -1\n        C_pos += 1\n\n    # Sort the positions to find the middle one\n    positions = {'A': A_pos, 'B': B_pos, 'C': C_pos}\n    sorted_positions = sorted(positions.items(), key=lambda x: x[1])\n\n    # The middle brother is the one with the second highest position\n    middle_brother = sorted_positions[1][0]\n    print(middle_brother)\n\n# Call the function to execute\nfind_middle_brother()", "passed": true, "raw_code": "```python\ndef find_middle_brother():\n    import sys\n    input_data = sys.stdin.read().strip()\n    S_AB, S_AC, S_BC = input_data.split()\n\n    # Initialize the relative positions\n    A_pos = 0\n    B_pos = 0\n    C_pos = 0\n\n    # Determine positions based on the relationships\n    if S_AB == '<':\n        A_pos += 1\n        B_pos += -1\n    elif S_AB == '>':\n        A_pos += -1\n        B_pos += 1\n\n    if S_AC == '<':\n        A_pos += 1\n        C_pos += -1\n    elif S_AC == '>':\n        A_pos += -1\n        C_pos += 1\n\n    if S_BC == '<':\n        B_pos += 1\n        C_pos += -1\n    elif S_BC == '>':\n        B_pos += -1\n        C_pos += 1\n\n    # Sort the positions to find the middle one\n    positions = {'A': A_pos, 'B': B_pos, 'C': C_pos}\n    sorted_positions = sorted(positions.items(), key=lambda x: x[1])\n\n    # The middle brother is the one with the second highest position\n    middle_brother = sorted_positions[1][0]\n    print(middle_brother)\n\n# Call the function to execute\nfind_middle_brother()\n```"}
{"final_accuracy": "84.62%"}
