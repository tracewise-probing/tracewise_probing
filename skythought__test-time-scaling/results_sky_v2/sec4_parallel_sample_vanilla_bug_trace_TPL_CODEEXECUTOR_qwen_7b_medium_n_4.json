"{\"difficulty\": \"medium\", \"num_threads\": 32, \"temperature\": 0.7, \"n\": 4, \"context\": \"all\", \"selection\": \"oracle\", \"num_round\": 1, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/sec4_parallel_sample_vanilla_bug_trace_TPL_CODEEXECUTOR_qwen_7b_medium_n_4.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"openai/gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"api_base\": \"http://127.0.0.1:8001/8001/v1\", \"no_refine\": true, \"no_dspy_gen\": false, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42}"
{"task_id": "3573", "codes": ["from collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    m, n = len(word2), len(word1)\n    count_w2 = Counter(word2)\n    valid_count = 0\n    \n    for i in range(m - 1, n):\n        window = word1[i - m + 1:i + 1]\n        count_window = Counter(window)\n        \n        if all(count_window[char] >= count_w2[char] for char in count_w2):\n            valid_count += 1\n            \n    return valid_count", "def countValidSubstrings(word1: str, word2: str) -> int:\n    n, m = len(word1), len(word2)\n    if m > n:\n        return 0\n    \n    count_w2 = [0] * 26\n    for char in word2:\n        count_w2[ord(char) - ord('a')] += 1\n    \n    def can_form(s):\n        count_s = [0] * 26\n        for char in s:\n            count_s[ord(char) - ord('a')] += 1\n        for i in range(26):\n            if count_s[i] < count_w2[i]:\n                return False\n        return True\n    \n    count = 0\n    for i in range(n - m + 1):\n        if word1[i:i+m] == word2[:m] and can_form(word1[i+m:]):\n            count += 1\n    \n    return count", "def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    # Count characters in word2\n    target_count = Counter(word2)\n    \n    n = len(word1)\n    m = len(word2)\n    result = 0\n    \n    # Sliding window approach\n    current_count = Counter()\n    for i in range(n):\n        # Add the current character to the window\n        current_count[word1[i]] += 1\n        \n        # Remove the character that is out of the window\n        if i >= m:\n            if current_count[word1[i - m]] == 1:\n                del current_count[word1[i - m]]\n            else:\n                current_count[word1[i - m]] -= 1\n        \n        # Check if the current window matches the target count\n        if current_count >= target_count:\n            result += 1\n    \n    return result", "def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    # Count characters in word2\n    target_count = Counter(word2)\n    \n    n = len(word1)\n    m = len(word2)\n    valid_count = 0\n    \n    for i in range(n - m + 1):\n        # Extract substring of length m starting at index i\n        substring = word1[i:i + m]\n        \n        # Count characters in the current substring\n        current_count = Counter(substring)\n        \n        # Check if current substring matches the target prefix\n        if current_count == target_count:\n            valid_count += 1\n    \n    return valid_count"], "passed": [false, false, false, false], "raw_code": ["```python\nfrom collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    m, n = len(word2), len(word1)\n    count_w2 = Counter(word2)\n    valid_count = 0\n    \n    for i in range(m - 1, n):\n        window = word1[i - m + 1:i + 1]\n        count_window = Counter(window)\n        \n        if all(count_window[char] >= count_w2[char] for char in count_w2):\n            valid_count += 1\n            \n    return valid_count\n```", "```python\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    n, m = len(word1), len(word2)\n    if m > n:\n        return 0\n    \n    count_w2 = [0] * 26\n    for char in word2:\n        count_w2[ord(char) - ord('a')] += 1\n    \n    def can_form(s):\n        count_s = [0] * 26\n        for char in s:\n            count_s[ord(char) - ord('a')] += 1\n        for i in range(26):\n            if count_s[i] < count_w2[i]:\n                return False\n        return True\n    \n    count = 0\n    for i in range(n - m + 1):\n        if word1[i:i+m] == word2[:m] and can_form(word1[i+m:]):\n            count += 1\n    \n    return count\n```", "```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    # Count characters in word2\n    target_count = Counter(word2)\n    \n    n = len(word1)\n    m = len(word2)\n    result = 0\n    \n    # Sliding window approach\n    current_count = Counter()\n    for i in range(n):\n        # Add the current character to the window\n        current_count[word1[i]] += 1\n        \n        # Remove the character that is out of the window\n        if i >= m:\n            if current_count[word1[i - m]] == 1:\n                del current_count[word1[i - m]]\n            else:\n                current_count[word1[i - m]] -= 1\n        \n        # Check if the current window matches the target count\n        if current_count >= target_count:\n            result += 1\n    \n    return result\n```", "```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    # Count characters in word2\n    target_count = Counter(word2)\n    \n    n = len(word1)\n    m = len(word2)\n    valid_count = 0\n    \n    for i in range(n - m + 1):\n        # Extract substring of length m starting at index i\n        substring = word1[i:i + m]\n        \n        # Count characters in the current substring\n        current_count = Counter(substring)\n        \n        # Check if current substring matches the target prefix\n        if current_count == target_count:\n            valid_count += 1\n    \n    return valid_count\n```"]}
{"task_id": "3584", "codes": ["def smallest_sequence(word1: str, word2: str) -> List[int]:\n    n, m = len(word1), len(word2)\n    diff_indices = []\n\n    # Identify mismatch indices\n    for i in range(m):\n        if word1[i] != word2[i]:\n            diff_indices.append(i)\n\n    # Check if the sequence is valid\n    if len(diff_indices) > 1:\n        return []\n\n    return diff_indices", "def find_lexicographically_smallest_sequence(word1, word2):\n    diff_indices = []\n    changes_count = 0\n    \n    for i in range(len(word2)):\n        if word1[i] != word2[i]:\n            diff_indices.append(i)\n            changes_count += 1\n            if changes_count > 1:\n                return []\n    \n    return diff_indices", "def smallestSequence(word1, word2):\n    m, n = len(word1), len(word2)\n    mismatches = []\n    \n    # Identify all mismatched positions\n    for i in range(n):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n    \n    # Check if there is any valid sequence\n    if not mismatches:\n        return []\n    \n    # Try changing each mismatched character and check validity\n    def is_valid(seq):\n        temp = list(word1)\n        for i in seq:\n            temp[i] = word2[i]\n        return sum(temp[j] != word2[j] for j in range(n)) <= 1\n    \n    # Generate all possible sequences of indices\n    from itertools import combinations\n    valid_sequences = []\n    for r in range(1, len(mismatches) + 1):\n        for seq in combinations(mismatches, r):\n            if is_valid(seq):\n                valid_sequences.append(seq)\n    \n    # Find the lexicographically smallest valid sequence\n    if valid_sequences:\n        return min(valid_sequences)\n    else:\n        return []", "def almost_equal_sequence(word1, word2):\n    m, n = len(word1), len(word2)\n    i, j = 0, 0\n    changes = []\n\n    while j < n:\n        if i >= m or word1[i] != word2[j]:\n            # Check if changing word1[i] to word2[j] would make them almost equal\n            if i + 1 < m and word1[i+1] == word2[j]:\n                changes.append(i)\n                i += 2\n            elif i < m and word1[i] == word2[j+1]:\n                changes.append(i)\n                i += 1\n                j += 2\n            else:\n                return []\n        else:\n            changes.append(i)\n            i += 1\n            j += 1\n\n    return changes"], "passed": [false, false, false, false], "raw_code": ["```python\ndef smallest_sequence(word1: str, word2: str) -> List[int]:\n    n, m = len(word1), len(word2)\n    diff_indices = []\n\n    # Identify mismatch indices\n    for i in range(m):\n        if word1[i] != word2[i]:\n            diff_indices.append(i)\n\n    # Check if the sequence is valid\n    if len(diff_indices) > 1:\n        return []\n\n    return diff_indices\n```", "```python\ndef find_lexicographically_smallest_sequence(word1, word2):\n    diff_indices = []\n    changes_count = 0\n    \n    for i in range(len(word2)):\n        if word1[i] != word2[i]:\n            diff_indices.append(i)\n            changes_count += 1\n            if changes_count > 1:\n                return []\n    \n    return diff_indices\n```", "```python\ndef smallestSequence(word1, word2):\n    m, n = len(word1), len(word2)\n    mismatches = []\n    \n    # Identify all mismatched positions\n    for i in range(n):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n    \n    # Check if there is any valid sequence\n    if not mismatches:\n        return []\n    \n    # Try changing each mismatched character and check validity\n    def is_valid(seq):\n        temp = list(word1)\n        for i in seq:\n            temp[i] = word2[i]\n        return sum(temp[j] != word2[j] for j in range(n)) <= 1\n    \n    # Generate all possible sequences of indices\n    from itertools import combinations\n    valid_sequences = []\n    for r in range(1, len(mismatches) + 1):\n        for seq in combinations(mismatches, r):\n            if is_valid(seq):\n                valid_sequences.append(seq)\n    \n    # Find the lexicographically smallest valid sequence\n    if valid_sequences:\n        return min(valid_sequences)\n    else:\n        return []\n```", "```python\ndef almost_equal_sequence(word1, word2):\n    m, n = len(word1), len(word2)\n    i, j = 0, 0\n    changes = []\n\n    while j < n:\n        if i >= m or word1[i] != word2[j]:\n            # Check if changing word1[i] to word2[j] would make them almost equal\n            if i + 1 < m and word1[i+1] == word2[j]:\n                changes.append(i)\n                i += 2\n            elif i < m and word1[i] == word2[j+1]:\n                changes.append(i)\n                i += 1\n                j += 2\n            else:\n                return []\n        else:\n            changes.append(i)\n            i += 1\n            j += 1\n\n    return changes\n```"]}
{"task_id": "3518", "codes": ["def maxScore(a, b):\n    # Sort array b\n    sorted_b = sorted(b)\n    \n    # Calculate the score using the largest 4 elements of b paired with a\n    score = a[0] * sorted_b[0] + a[1] * sorted_b[1] + a[2] * sorted_b[2] + a[3] * sorted_b[3]\n    \n    return score", "def maxScore(a, b):\n    # Sort both arrays\n    a.sort()\n    b.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate through the sorted arrays and calculate the score\n    for i in range(4):\n        score += a[i] * b[-(i + 1)]\n    \n    return score", "def maxScore(a, b):\n    # Sort array b in ascending order\n    b.sort()\n    \n    # Multiply the largest elements of a with the largest elements of b\n    return sum(x * y for x, y in zip(sorted(a, reverse=True), b[-4:]))", "def maxScore(a, b):\n    # Sort array b based on the absolute values of its elements in descending order\n    sorted_b = sorted(b, key=abs, reverse=True)\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate through each element in a and pair it with the next four elements in sorted_b\n    for i in range(4):\n        score += a[i] * sorted_b[i]\n    \n    return score"], "passed": [false, false, false, false], "raw_code": ["```python\ndef maxScore(a, b):\n    # Sort array b\n    sorted_b = sorted(b)\n    \n    # Calculate the score using the largest 4 elements of b paired with a\n    score = a[0] * sorted_b[0] + a[1] * sorted_b[1] + a[2] * sorted_b[2] + a[3] * sorted_b[3]\n    \n    return score\n```", "```python\ndef maxScore(a, b):\n    # Sort both arrays\n    a.sort()\n    b.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate through the sorted arrays and calculate the score\n    for i in range(4):\n        score += a[i] * b[-(i + 1)]\n    \n    return score\n```", "```python\ndef maxScore(a, b):\n    # Sort array b in ascending order\n    b.sort()\n    \n    # Multiply the largest elements of a with the largest elements of b\n    return sum(x * y for x, y in zip(sorted(a, reverse=True), b[-4:]))\n```", "```python\ndef maxScore(a, b):\n    # Sort array b based on the absolute values of its elements in descending order\n    sorted_b = sorted(b, key=abs, reverse=True)\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate through each element in a and pair it with the next four elements in sorted_b\n    for i in range(4):\n        score += a[i] * sorted_b[i]\n    \n    return score\n```"]}
{"task_id": "3485", "codes": ["def max_score(start, d):\n    # Select the largest value from each interval\n    selected_values = [s + d for s in start]\n    # Sort the selected values\n    selected_values.sort()\n    # Calculate the differences between consecutive values\n    max_diff = max(selected_values[i] - selected_values[i-1] for i in range(1, len(selected_values)))\n    return max_diff", "def maxScore(start, d):\n    # Sort the intervals based on their starting points\n    start.sort()\n    \n    max_diff = 0\n    \n    # Iterate through the sorted intervals\n    for i in range(1, len(start)):\n        # Calculate the potential chosen integers at both bounds\n        diff1 = abs((start[i-1] + d) - (start[i] - d))\n        diff2 = abs((start[i-1] - d) - (start[i] + d))\n        \n        # Update the maximum difference found\n        max_diff = max(max_diff, diff1, diff2)\n    \n    return max_diff", "def maxScore(start, d):\n    # Calculate the largest possible number for each interval\n    largest_numbers = [s + d for s in start]\n    \n    # Sort the largest numbers\n    largest_numbers.sort()\n    \n    # Calculate the differences between consecutive numbers\n    differences = [largest_numbers[i] - largest_numbers[i-1] for i in range(1, len(largest_numbers))]\n    \n    # The maximum difference is the answer\n    return max(differences)", "def maxScore(start, d):\n    # Sort the start array to facilitate finding the minimum differences\n    start.sort()\n    \n    # Initialize the maximum score to a very small number\n    max_score = float('-inf')\n    \n    # Iterate through the sorted array and calculate the differences\n    for i in range(1, len(start)):\n        # Calculate the difference between the current and previous selected values\n        diff = start[i] - (start[i-1] + d)\n        # Update the maximum score if the current difference is greater\n        max_score = max(max_score, diff)\n    \n    return max_score"], "passed": [false, false, false, false], "raw_code": ["```python\ndef max_score(start, d):\n    # Select the largest value from each interval\n    selected_values = [s + d for s in start]\n    # Sort the selected values\n    selected_values.sort()\n    # Calculate the differences between consecutive values\n    max_diff = max(selected_values[i] - selected_values[i-1] for i in range(1, len(selected_values)))\n    return max_diff\n```", "```python\ndef maxScore(start, d):\n    # Sort the intervals based on their starting points\n    start.sort()\n    \n    max_diff = 0\n    \n    # Iterate through the sorted intervals\n    for i in range(1, len(start)):\n        # Calculate the potential chosen integers at both bounds\n        diff1 = abs((start[i-1] + d) - (start[i] - d))\n        diff2 = abs((start[i-1] - d) - (start[i] + d))\n        \n        # Update the maximum difference found\n        max_diff = max(max_diff, diff1, diff2)\n    \n    return max_diff\n```", "```python\ndef maxScore(start, d):\n    # Calculate the largest possible number for each interval\n    largest_numbers = [s + d for s in start]\n    \n    # Sort the largest numbers\n    largest_numbers.sort()\n    \n    # Calculate the differences between consecutive numbers\n    differences = [largest_numbers[i] - largest_numbers[i-1] for i in range(1, len(largest_numbers))]\n    \n    # The maximum difference is the answer\n    return max(differences)\n```", "```python\ndef maxScore(start, d):\n    # Sort the start array to facilitate finding the minimum differences\n    start.sort()\n    \n    # Initialize the maximum score to a very small number\n    max_score = float('-inf')\n    \n    # Iterate through the sorted array and calculate the differences\n    for i in range(1, len(start)):\n        # Calculate the difference between the current and previous selected values\n        diff = start[i] - (start[i-1] + d)\n        # Update the maximum score if the current difference is greater\n        max_score = max(max_score, diff)\n    \n    return max_score\n```"]}
{"task_id": "3579", "codes": ["def maxNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order\n    binary_nums.sort(reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "from itertools import permutations\n\ndef max_concatenated_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    bin_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    permuted_bins = permutations(bin_nums)\n    \n    # Initialize the maximum value\n    max_value = 0\n    \n    # Iterate through each permutation and calculate the concatenated value\n    for perm in permuted_bins:\n        concatenated_bin = ''.join(perm)\n        concatenated_num = int(concatenated_bin, 2)\n        if concatenated_num > max_value:\n            max_value = concatenated_num\n    \n    return max_value", "def max_binary_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_strings = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their numerical value\n    binary_strings.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_strings)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "def max_concatenated_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings based on their numerical value in descending order\n    binary_nums.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)"], "passed": [false, true, false, false], "raw_code": ["```python\ndef maxNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order\n    binary_nums.sort(reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```", "```python\nfrom itertools import permutations\n\ndef max_concatenated_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    bin_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    permuted_bins = permutations(bin_nums)\n    \n    # Initialize the maximum value\n    max_value = 0\n    \n    # Iterate through each permutation and calculate the concatenated value\n    for perm in permuted_bins:\n        concatenated_bin = ''.join(perm)\n        concatenated_num = int(concatenated_bin, 2)\n        if concatenated_num > max_value:\n            max_value = concatenated_num\n    \n    return max_value\n```", "```python\ndef max_binary_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_strings = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their numerical value\n    binary_strings.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_strings)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```", "```python\ndef max_concatenated_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings based on their numerical value in descending order\n    binary_nums.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```"]}
{"task_id": "3534", "codes": ["def count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def can_be_equal_by_one_swap(a, b):\n        str_a, str_b = str(a), str(b)\n        if len(str_a) != len(str_b):\n            return False\n        \n        diff_indices = []\n        for i in range(len(str_a)):\n            if str_a[i] != str_b[i]:\n                diff_indices.append(i)\n                if len(diff_indices) > 2:\n                    return False\n        \n        if len(diff_indices) == 0:\n            return True\n        \n        if len(diff_indices) == 2:\n            i, j = diff_indices\n            return str_a[:i] + str_b[i] + str_a[i+1:j] + str_b[j] + str_a[j+1:] == str_b or \\\n                   str_b[:i] + str_a[i] + str_b[i+1:j] + str_a[j] + str_b[j+1:] == str_a\n        \n        return False\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if can_be_equal_by_one_swap(nums[i], nums[j]):\n                count += 1\n                \n    return count", "def count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def get_swapped_numbers(num_str):\n        num_list = list(num_str)\n        swapped_numbers = set()\n        \n        for i in range(len(num_list)):\n            for j in range(i + 1, len(num_list)):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                swapped_number = ''.join(num_list)\n                swapped_numbers.add(int(swapped_number))\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n        \n        return swapped_numbers\n    \n    nums_str = [str(num) for num in nums]\n    index_map = {}\n    \n    for i, num_str in enumerate(nums_str):\n        if num_str not in index_map:\n            index_map[num_str] = []\n        index_map[num_str].append(i)\n    \n    for i in range(n):\n        for swapped_num in get_swapped_numbers(nums_str[i]):\n            if str(swapped_num) in index_map:\n                for j in index_map[str(swapped_num)]:\n                    if i != j:\n                        count += 1\n    \n    return count // 2", "def count_almost_equal_pairs(nums):\n    def generate_swapped_numbers(num_str):\n        swapped_numbers = set()\n        n = len(num_str)\n        for i in range(n):\n            for j in range(i + 1, n):\n                swapped_num_str = num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:]\n                swapped_numbers.add(int(swapped_num_str))\n        return swapped_numbers\n    \n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            num1_str = str(nums[i])\n            num2_str = str(nums[j])\n            swapped_nums1 = generate_swapped_numbers(num1_str)\n            swapped_nums2 = generate_swapped_numbers(num2_str)\n            if nums[j] in swapped_nums1 or nums[i] in swapped_nums2:\n                count += 1\n    return count", "def countAlmostEqualPairs(nums):\n    def generate_almost_equal_numbers(num):\n        num_str = str(num)\n        almost_equal_set = {num}\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swapped_num_str = list(num_str)\n                swapped_num_str[i], swapped_num_str[j] = swapped_num_str[j], swapped_num_str[i]\n                swapped_num = int(''.join(swapped_num_str))\n                almost_equal_set.add(swapped_num)\n        return almost_equal_set\n    \n    almost_equal_dict = {}\n    for num in nums:\n        almost_equal_dict[num] = generate_almost_equal_numbers(num)\n    \n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if any(x in almost_equal_dict[nums[j]] for x in almost_equal_dict[nums[i]]):\n                count += 1\n    \n    return count"], "passed": [false, false, false, false], "raw_code": ["```python\ndef count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def can_be_equal_by_one_swap(a, b):\n        str_a, str_b = str(a), str(b)\n        if len(str_a) != len(str_b):\n            return False\n        \n        diff_indices = []\n        for i in range(len(str_a)):\n            if str_a[i] != str_b[i]:\n                diff_indices.append(i)\n                if len(diff_indices) > 2:\n                    return False\n        \n        if len(diff_indices) == 0:\n            return True\n        \n        if len(diff_indices) == 2:\n            i, j = diff_indices\n            return str_a[:i] + str_b[i] + str_a[i+1:j] + str_b[j] + str_a[j+1:] == str_b or \\\n                   str_b[:i] + str_a[i] + str_b[i+1:j] + str_a[j] + str_b[j+1:] == str_a\n        \n        return False\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if can_be_equal_by_one_swap(nums[i], nums[j]):\n                count += 1\n                \n    return count\n```", "```python\ndef count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def get_swapped_numbers(num_str):\n        num_list = list(num_str)\n        swapped_numbers = set()\n        \n        for i in range(len(num_list)):\n            for j in range(i + 1, len(num_list)):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                swapped_number = ''.join(num_list)\n                swapped_numbers.add(int(swapped_number))\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n        \n        return swapped_numbers\n    \n    nums_str = [str(num) for num in nums]\n    index_map = {}\n    \n    for i, num_str in enumerate(nums_str):\n        if num_str not in index_map:\n            index_map[num_str] = []\n        index_map[num_str].append(i)\n    \n    for i in range(n):\n        for swapped_num in get_swapped_numbers(nums_str[i]):\n            if str(swapped_num) in index_map:\n                for j in index_map[str(swapped_num)]:\n                    if i != j:\n                        count += 1\n    \n    return count // 2\n```", "```python\ndef count_almost_equal_pairs(nums):\n    def generate_swapped_numbers(num_str):\n        swapped_numbers = set()\n        n = len(num_str)\n        for i in range(n):\n            for j in range(i + 1, n):\n                swapped_num_str = num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:]\n                swapped_numbers.add(int(swapped_num_str))\n        return swapped_numbers\n    \n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            num1_str = str(nums[i])\n            num2_str = str(nums[j])\n            swapped_nums1 = generate_swapped_numbers(num1_str)\n            swapped_nums2 = generate_swapped_numbers(num2_str)\n            if nums[j] in swapped_nums1 or nums[i] in swapped_nums2:\n                count += 1\n    return count\n```", "```python\ndef countAlmostEqualPairs(nums):\n    def generate_almost_equal_numbers(num):\n        num_str = str(num)\n        almost_equal_set = {num}\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swapped_num_str = list(num_str)\n                swapped_num_str[i], swapped_num_str[j] = swapped_num_str[j], swapped_num_str[i]\n                swapped_num = int(''.join(swapped_num_str))\n                almost_equal_set.add(swapped_num)\n        return almost_equal_set\n    \n    almost_equal_dict = {}\n    for num in nums:\n        almost_equal_dict[num] = generate_almost_equal_numbers(num)\n    \n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if any(x in almost_equal_dict[nums[j]] for x in almost_equal_dict[nums[i]]):\n                count += 1\n    \n    return count\n```"]}
{"task_id": "3517", "codes": ["import heapq\n\ndef shortest_path_after_queries(n, queries):\n    # Initialize the graph with the baseline roads\n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    # Function to perform Dijkstra's algorithm\n    def dijkstra(start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_distance, current_node = heapq.heappop(pq)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return distances[end]\n    \n    # Process each query and store the result\n    results = []\n    for u, v in queries:\n        graph[u][v] = 1\n        results.append(dijkstra(0, n - 1))\n    \n    return results", "import heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            if u == end:\n                return current_dist\n            for v, weight in graph[u]:\n                distance = current_dist + weight\n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return float('inf')\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    result = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "def shortest_path_after_queries(n, queries):\n    parent = list(range(n))\n    \n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    \n    def union(x, y):\n        rootX = find(x)\n        rootY = find(y)\n        if rootX != rootY:\n            parent[rootX] = rootY\n    \n    result = []\n    current_min_path = n - 1\n    \n    for u, v in queries:\n        union(u, v)\n        root_n_minus_1 = find(n - 1)\n        if root_n_minus_1 == 0:\n            current_min_path = min(current_min_path, v - u)\n        result.append(current_min_path)\n    \n    return result", "def shortest_path(n, queries):\n    dist = [float('inf')] * n\n    dist[0] = 0\n    \n    result = []\n    \n    for u, v in queries:\n        if dist[u] != float('inf'):\n            dist[v] = min(dist[v], dist[u] + 1)\n        \n        current_min = float('inf')\n        for d in dist:\n            current_min = min(current_min, d)\n        \n        result.append(current_min)\n    \n    return result"], "passed": [false, false, false, false], "raw_code": ["```python\nimport heapq\n\ndef shortest_path_after_queries(n, queries):\n    # Initialize the graph with the baseline roads\n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    # Function to perform Dijkstra's algorithm\n    def dijkstra(start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_distance, current_node = heapq.heappop(pq)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return distances[end]\n    \n    # Process each query and store the result\n    results = []\n    for u, v in queries:\n        graph[u][v] = 1\n        results.append(dijkstra(0, n - 1))\n    \n    return results\n```", "```python\nimport heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            if u == end:\n                return current_dist\n            for v, weight in graph[u]:\n                distance = current_dist + weight\n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return float('inf')\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    result = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```", "```python\ndef shortest_path_after_queries(n, queries):\n    parent = list(range(n))\n    \n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    \n    def union(x, y):\n        rootX = find(x)\n        rootY = find(y)\n        if rootX != rootY:\n            parent[rootX] = rootY\n    \n    result = []\n    current_min_path = n - 1\n    \n    for u, v in queries:\n        union(u, v)\n        root_n_minus_1 = find(n - 1)\n        if root_n_minus_1 == 0:\n            current_min_path = min(current_min_path, v - u)\n        result.append(current_min_path)\n    \n    return result\n```", "```python\ndef shortest_path(n, queries):\n    dist = [float('inf')] * n\n    dist[0] = 0\n    \n    result = []\n    \n    for u, v in queries:\n        if dist[u] != float('inf'):\n            dist[v] = min(dist[v], dist[u] + 1)\n        \n        current_min = float('inf')\n        for d in dist:\n            current_min = min(current_min, d)\n        \n        result.append(current_min)\n    \n    return result\n```"]}
{"task_id": "3496", "codes": ["def min_seconds_to_reduce_mountain(mountainHeight, workerTimes):\n    def total_time(height):\n        return sum(worker * (height * (height + 1)) // 2 for worker in workerTimes)\n    \n    left, right = 0, mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if total_time(mid) >= mountainHeight:\n            right = mid\n        else:\n            left = mid + 1\n    return total_time(left)", "def minTime(mountainHeight, workerTimes):\n    def canReduce(height, targetTime):\n        totalWork = 0\n        for time in workerTimes:\n            x = 1\n            while time * x <= targetTime:\n                totalWork += time * x\n                if totalWork >= height:\n                    return True\n                x += 1\n        return False\n    \n    left, right = 1, max(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def minTime(mountainHeight, workerTimes):\n    def canReduce(height, maxTime):\n        return sum(worker * (x * (x + 1) // 2) for worker, x in zip(sorted(workerTimes), range(1, height + 1))) <= maxTime\n    \n    left, right = 0, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def minMountainReductionTime(mountainHeight, workerTimes):\n    def canReduce(height, workerTimes):\n        total_time = 0\n        for time in workerTimes:\n            x = 1\n            while True:\n                current_time = time * (x * (x + 1)) // 2\n                if current_time > height:\n                    break\n                total_time += current_time\n                x += 1\n            if total_time >= height:\n                return True\n        return False\n    \n    left, right = 0, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mid, workerTimes):\n            right = mid\n        else:\n            left = mid + 1\n    return left"], "passed": [false, false, false, false], "raw_code": ["```python\ndef min_seconds_to_reduce_mountain(mountainHeight, workerTimes):\n    def total_time(height):\n        return sum(worker * (height * (height + 1)) // 2 for worker in workerTimes)\n    \n    left, right = 0, mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if total_time(mid) >= mountainHeight:\n            right = mid\n        else:\n            left = mid + 1\n    return total_time(left)\n```", "```python\ndef minTime(mountainHeight, workerTimes):\n    def canReduce(height, targetTime):\n        totalWork = 0\n        for time in workerTimes:\n            x = 1\n            while time * x <= targetTime:\n                totalWork += time * x\n                if totalWork >= height:\n                    return True\n                x += 1\n        return False\n    \n    left, right = 1, max(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef minTime(mountainHeight, workerTimes):\n    def canReduce(height, maxTime):\n        return sum(worker * (x * (x + 1) // 2) for worker, x in zip(sorted(workerTimes), range(1, height + 1))) <= maxTime\n    \n    left, right = 0, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef minMountainReductionTime(mountainHeight, workerTimes):\n    def canReduce(height, workerTimes):\n        total_time = 0\n        for time in workerTimes:\n            x = 1\n            while True:\n                current_time = time * (x * (x + 1)) // 2\n                if current_time > height:\n                    break\n                total_time += current_time\n                x += 1\n            if total_time >= height:\n                return True\n        return False\n    \n    left, right = 0, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mid, workerTimes):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"]}
{"task_id": "3559", "codes": ["def minValidStrings(words, target):\n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for word in words:\n            if i >= len(word) and target[i - len(word):i] == word:\n                dp[i] = min(dp[i], dp[i - len(word)] + 1)\n    \n    return dp[n] if dp[n] != float('inf') else -1", "def minValidStrings(words, target):\n    n = len(target)\n    dp = [i + 1 for i in range(n + 1)]\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for word in words:\n            if i >= len(word) and target[i - len(word):i] == word:\n                dp[i] = min(dp[i], dp[i - len(word)] + 1)\n    \n    return dp[n] if dp[n] < n + 1 else -1", "def minValidStrings(words, target):\n    words.sort(key=len)\n    dp = [float('inf')] * len(target)\n    dp[0] = 1 if target[0] in {word[0] for word in words} else float('inf')\n    \n    for i in range(1, len(target)):\n        if dp[i-1] == float('inf'):\n            continue\n        for word in words:\n            if i + 1 >= len(word) and target[i-len(word)+1:i+1] == word:\n                dp[i] = min(dp[i], dp[i-len(word)] + 1)\n                \n    return dp[-1] if dp[-1] != float('inf') else -1", "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word_index = -1\n\nclass Solution:\n    def minConcatenatedWordsForTarget(self, words: List[str], target: str) -> int:\n        # Build the Trie\n        root = TrieNode()\n        for i, word in enumerate(words):\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.word_index = i\n        \n        n = len(target)\n        dp = [-1] * n\n        dp[0] = 0\n        \n        for i in range(n):\n            if dp[i] == -1:\n                continue\n            node = root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.word_index != -1:\n                    if j == n - 1:\n                        dp[j] = dp[i] + 1\n                    elif dp[j + 1] == -1 or dp[j + 1] > dp[i] + 1:\n                        dp[j + 1] = dp[i] + 1\n        \n        return dp[n - 1]"], "passed": [false, false, false, false], "raw_code": ["```python\ndef minValidStrings(words, target):\n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for word in words:\n            if i >= len(word) and target[i - len(word):i] == word:\n                dp[i] = min(dp[i], dp[i - len(word)] + 1)\n    \n    return dp[n] if dp[n] != float('inf') else -1\n```", "```python\ndef minValidStrings(words, target):\n    n = len(target)\n    dp = [i + 1 for i in range(n + 1)]\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for word in words:\n            if i >= len(word) and target[i - len(word):i] == word:\n                dp[i] = min(dp[i], dp[i - len(word)] + 1)\n    \n    return dp[n] if dp[n] < n + 1 else -1\n```", "```python\ndef minValidStrings(words, target):\n    words.sort(key=len)\n    dp = [float('inf')] * len(target)\n    dp[0] = 1 if target[0] in {word[0] for word in words} else float('inf')\n    \n    for i in range(1, len(target)):\n        if dp[i-1] == float('inf'):\n            continue\n        for word in words:\n            if i + 1 >= len(word) and target[i-len(word)+1:i+1] == word:\n                dp[i] = min(dp[i], dp[i-len(word)] + 1)\n                \n    return dp[-1] if dp[-1] != float('inf') else -1\n```", "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word_index = -1\n\nclass Solution:\n    def minConcatenatedWordsForTarget(self, words: List[str], target: str) -> int:\n        # Build the Trie\n        root = TrieNode()\n        for i, word in enumerate(words):\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.word_index = i\n        \n        n = len(target)\n        dp = [-1] * n\n        dp[0] = 0\n        \n        for i in range(n):\n            if dp[i] == -1:\n                continue\n            node = root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.word_index != -1:\n                    if j == n - 1:\n                        dp[j] = dp[i] + 1\n                    elif dp[j + 1] == -1 or dp[j + 1] > dp[i] + 1:\n                        dp[j + 1] = dp[i] + 1\n        \n        return dp[n - 1]\n```"]}
{"task_id": "3526", "codes": ["def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(x != y for x, y in zip(arr, arr[::-1]))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[i][j] for i in range(m)]) for j in range(n))\n    \n    return min(row_flips, col_flips)", "def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_needed(arr):\n        return sum(1 for i in range(len(arr) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_needed(row) for row in grid)\n    col_flips = sum(flips_needed([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)", "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(1 for i in range(len(arr) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome(col) for col in zip(*grid))\n    \n    return min(row_flips, col_flips)", "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[-i-1] for i in range((len(arr) + 1) // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)"], "passed": [false, true, true, true], "raw_code": ["```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(x != y for x, y in zip(arr, arr[::-1]))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[i][j] for i in range(m)]) for j in range(n))\n    \n    return min(row_flips, col_flips)\n```", "```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_needed(arr):\n        return sum(1 for i in range(len(arr) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_needed(row) for row in grid)\n    col_flips = sum(flips_needed([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)\n```", "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(1 for i in range(len(arr) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome(col) for col in zip(*grid))\n    \n    return min(row_flips, col_flips)\n```", "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[-i-1] for i in range((len(arr) + 1) // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)\n```"]}
{"task_id": "3541", "codes": ["def is_spam(message: List[str], bannedWords: List[str]) -> bool:\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "def is_spam(message, banned_words):\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False", "def is_spam(message: list[str], banned_words: list[str]) -> bool:\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False", "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False"], "passed": [false, false, false, false], "raw_code": ["```python\ndef is_spam(message: List[str], bannedWords: List[str]) -> bool:\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```", "```python\ndef is_spam(message, banned_words):\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False\n```", "```python\ndef is_spam(message: list[str], banned_words: list[str]) -> bool:\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False\n```", "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False\n```"]}
{"task_id": "3540", "codes": ["def hash_string(s, k):\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)", "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)", "def hash_string(s, k):\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result", "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)"], "passed": [false, false, false, false], "raw_code": ["```python\ndef hash_string(s, k):\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)\n```", "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)\n```", "```python\ndef hash_string(s, k):\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result\n```", "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)\n```"]}
{"task_id": "3528", "codes": ["def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[j] = max(dp[j], (j - i) * nums[i] + dp[i])\n    \n    return dp[-1]"], "passed": [false, false, false, false], "raw_code": ["```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```", "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```", "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```", "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[j] = max(dp[j], (j - i) * nums[i] + dp[i])\n    \n    return dp[-1]\n```"]}
{"task_id": "3495", "codes": ["def kthObstacleDistance(queries, k):\n    import heapq\n    \n    # Min-heap to store distances\n    min_heap = []\n    \n    # List to store results\n    results = []\n    \n    for x, y in queries:\n        # Calculate Manhattan distance from the origin\n        distance = abs(x) + abs(y)\n        \n        # Add the distance to the heap\n        heapq.heappush(min_heap, distance)\n        \n        # If the heap size exceeds k, remove the largest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        # If there are at least k elements, get the k-th smallest distance\n        if len(min_heap) >= k:\n            results.append(min_heap[k-1])\n        else:\n            results.append(-1)\n    \n    return results", "import heapq\n\ndef getKthDistances(queries, k):\n    min_heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(min_heap, distance)\n        \n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        if len(min_heap) < k:\n            results.append(-1)\n        else:\n            results.append(min_heap[0])\n    \n    return results", "def kthObstacleDistance(queries, k):\n    import heapq\n    \n    distances = []\n    results = []\n    \n    for x, y in queries:\n        dist = abs(x) + abs(y)\n        heapq.heappush(distances, dist)\n        \n        if len(distances) < k:\n            results.append(-1)\n        else:\n            results.append(heapq.nsmallest(k, distances)[-1])\n    \n    return results", "import heapq\n\ndef kthNearestObstacle(queries, k):\n    heap = []\n    results = []\n\n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(heap, distance)\n        \n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    while len(heap) < k:\n        results.append(-1)\n    \n    for _ in range(k):\n        results.append(heapq.heappop(heap))\n    \n    return results"], "passed": [false, false, false, false], "raw_code": ["```python\ndef kthObstacleDistance(queries, k):\n    import heapq\n    \n    # Min-heap to store distances\n    min_heap = []\n    \n    # List to store results\n    results = []\n    \n    for x, y in queries:\n        # Calculate Manhattan distance from the origin\n        distance = abs(x) + abs(y)\n        \n        # Add the distance to the heap\n        heapq.heappush(min_heap, distance)\n        \n        # If the heap size exceeds k, remove the largest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        # If there are at least k elements, get the k-th smallest distance\n        if len(min_heap) >= k:\n            results.append(min_heap[k-1])\n        else:\n            results.append(-1)\n    \n    return results\n```", "```python\nimport heapq\n\ndef getKthDistances(queries, k):\n    min_heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(min_heap, distance)\n        \n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        if len(min_heap) < k:\n            results.append(-1)\n        else:\n            results.append(min_heap[0])\n    \n    return results\n```", "```python\ndef kthObstacleDistance(queries, k):\n    import heapq\n    \n    distances = []\n    results = []\n    \n    for x, y in queries:\n        dist = abs(x) + abs(y)\n        heapq.heappush(distances, dist)\n        \n        if len(distances) < k:\n            results.append(-1)\n        else:\n            results.append(heapq.nsmallest(k, distances)[-1])\n    \n    return results\n```", "```python\nimport heapq\n\ndef kthNearestObstacle(queries, k):\n    heap = []\n    results = []\n\n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(heap, distance)\n        \n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    while len(heap) < k:\n        results.append(-1)\n    \n    for _ in range(k):\n        results.append(heapq.heappop(heap))\n    \n    return results\n```"]}
{"task_id": "3558", "codes": ["def hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        grid[x][y] = -1  # Mark as visited\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy, health - grid[x][y]):\n                return True\n        grid[x][y] = 0  # Unmark as visited\n        return False\n    \n    return dfs(0, 0, health)", "def can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        original_health = health\n        health -= grid[x][y]\n        grid[x][y] = -1  # Mark as visited\n        if dfs(x + 1, y, health) or dfs(x - 1, y, health) or dfs(x, y + 1, health) or dfs(x, y - 1, health):\n            return True\n        grid[x][y] = original_health  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)", "def hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(i, j, health):\n        if i < 0 or i >= m or j < 0 or j >= n or health <= 0:\n            return False\n        if i == m - 1 and j == n - 1:\n            return health >= 1\n        temp = grid[i][j]\n        grid[i][j] = -1  # Mark as visited\n        result = dfs(i + 1, j, health - temp) or \\\n                 dfs(i - 1, j, health - temp) or \\\n                 dfs(i, j + 1, health - temp) or \\\n                 dfs(i, j - 1, health - temp)\n        grid[i][j] = temp  # Unmark\n        return result\n    \n    return dfs(0, 0, health)", "def can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 1  # Mark the cell as visited by making it unsafe\n        if temp == 1:\n            health -= 1\n        \n        if dfs(x + 1, y, health) or dfs(x - 1, y, health) or dfs(x, y + 1, health) or dfs(x, y - 1, health):\n            return True\n        \n        grid[x][y] = temp  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)"], "passed": [false, false, false, false], "raw_code": ["```python\ndef hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        grid[x][y] = -1  # Mark as visited\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy, health - grid[x][y]):\n                return True\n        grid[x][y] = 0  # Unmark as visited\n        return False\n    \n    return dfs(0, 0, health)\n```", "```python\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        original_health = health\n        health -= grid[x][y]\n        grid[x][y] = -1  # Mark as visited\n        if dfs(x + 1, y, health) or dfs(x - 1, y, health) or dfs(x, y + 1, health) or dfs(x, y - 1, health):\n            return True\n        grid[x][y] = original_health  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)\n```", "```python\ndef hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(i, j, health):\n        if i < 0 or i >= m or j < 0 or j >= n or health <= 0:\n            return False\n        if i == m - 1 and j == n - 1:\n            return health >= 1\n        temp = grid[i][j]\n        grid[i][j] = -1  # Mark as visited\n        result = dfs(i + 1, j, health - temp) or \\\n                 dfs(i - 1, j, health - temp) or \\\n                 dfs(i, j + 1, health - temp) or \\\n                 dfs(i, j - 1, health - temp)\n        grid[i][j] = temp  # Unmark\n        return result\n    \n    return dfs(0, 0, health)\n```", "```python\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 1  # Mark the cell as visited by making it unsafe\n        if temp == 1:\n            health -= 1\n        \n        if dfs(x + 1, y, health) or dfs(x - 1, y, health) or dfs(x, y + 1, health) or dfs(x, y - 1, health):\n            return True\n        \n        grid[x][y] = temp  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)\n```"]}
{"task_id": "3522", "codes": ["def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if all(subarray[j] < subarray[j + 1] for j in range(k - 1)) and len(set(subarray)) == k:\n            results[i] = max(subarray)\n    \n    return results", "def findPowerOfSubarrays(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j] < subarray[j+1] for j in range(k-1)) and all(subarray[j] == subarray[j+1] or subarray[j] + 1 == subarray[j+1] for j in range(k-1)):\n            results[i] = max(subarray)\n    \n    return results", "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        sorted_subarray = sorted(subarray)\n        \n        if sorted_subarray == subarray and len(set(sorted_subarray)) == k:\n            results[i] = max(subarray)\n    \n    return results", "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        sorted_subarray = sorted(subarray)\n        \n        if subarray == sorted_subarray and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results"], "passed": [false, true, false, false], "raw_code": ["```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if all(subarray[j] < subarray[j + 1] for j in range(k - 1)) and len(set(subarray)) == k:\n            results[i] = max(subarray)\n    \n    return results\n```", "```python\ndef findPowerOfSubarrays(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j] < subarray[j+1] for j in range(k-1)) and all(subarray[j] == subarray[j+1] or subarray[j] + 1 == subarray[j+1] for j in range(k-1)):\n            results[i] = max(subarray)\n    \n    return results\n```", "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        sorted_subarray = sorted(subarray)\n        \n        if sorted_subarray == subarray and len(set(sorted_subarray)) == k:\n            results[i] = max(subarray)\n    \n    return results\n```", "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        sorted_subarray = sorted(subarray)\n        \n        if subarray == sorted_subarray and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```"]}
{"task_id": "3570", "codes": ["def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    vowel_positions = {v: [] for v in vowels}\n    consonant_positions = []\n    \n    # Identify positions of vowels and consonants\n    for i, char in enumerate(word):\n        if char in vowels:\n            vowel_positions[char].append(i)\n        else:\n            consonant_positions.append(i)\n    \n    if len(vowel_positions['a']) == 0 or len(vowel_positions['e']) == 0 or len(vowel_positions['i']) == 0 or len(vowel_positions['o']) == 0 or len(vowel_positions['u']) == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(consonant_positions) - k):\n        left = consonant_positions[i]\n        right = consonant_positions[i + k]\n        \n        min_vowel_index = float('inf')\n        for v in vowels:\n            min_vowel_index = min(min_vowel_index, vowel_positions[v][0])\n        \n        max_vowel_index = 0\n        for v in vowels:\n            max_vowel_index = max(max_vowel_index, vowel_positions[v][-1])\n        \n        if left < min_vowel_index and right > max_vowel_index:\n            count += 1\n    \n    return count", "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    left = 0\n    vowel_count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    consonant_count = 0\n\n    for right in range(n):\n        char = word[right]\n        if char in vowels:\n            vowel_count[char] += 1\n        elif char.isalpha():\n            consonant_count += 1\n\n        while consonant_count > k or any(vowel_count[v] == 0 for v in vowels):\n            if word[left] in vowels:\n                vowel_count[word[left]] -= 1\n            elif word[left].isalpha():\n                consonant_count -= 1\n            left += 1\n\n        if consonant_count == k and all(vowel_count[v] > 0 for v in vowels):\n            count += left + 1\n\n    return count", "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = [0] * 26\n    vowel_count = 0\n    consonant_count = 0\n    result = 0\n    \n    def is_valid():\n        return vowel_count == 5 and consonant_count == k\n    \n    left = 0\n    for right in range(n):\n        char = word[right]\n        if char in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n        \n        while is_valid():\n            if word[left] in vowels:\n                vowel_count -= 1\n            else:\n                consonant_count -= 1\n            left += 1\n            if is_valid():\n                result += 1\n    \n    return result", "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Function to check if a substring has all vowels and exactly k consonants\n    def is_valid(substring):\n        char_count = [0] * 26\n        vowel_count = 0\n        consonant_count = 0\n        for char in substring:\n            char_count[ord(char) - ord('a')] += 1\n            if char in vowels:\n                vowel_count += 1\n            else:\n                consonant_count += 1\n        return vowel_count == 5 and consonant_count == k\n    \n    # Sliding window approach\n    for i in range(n):\n        for j in range(i + 5, n + 1):\n            if is_valid(word[i:j]):\n                count += 1\n                \n    return count"], "passed": [false, false, false, false], "raw_code": ["```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    vowel_positions = {v: [] for v in vowels}\n    consonant_positions = []\n    \n    # Identify positions of vowels and consonants\n    for i, char in enumerate(word):\n        if char in vowels:\n            vowel_positions[char].append(i)\n        else:\n            consonant_positions.append(i)\n    \n    if len(vowel_positions['a']) == 0 or len(vowel_positions['e']) == 0 or len(vowel_positions['i']) == 0 or len(vowel_positions['o']) == 0 or len(vowel_positions['u']) == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(consonant_positions) - k):\n        left = consonant_positions[i]\n        right = consonant_positions[i + k]\n        \n        min_vowel_index = float('inf')\n        for v in vowels:\n            min_vowel_index = min(min_vowel_index, vowel_positions[v][0])\n        \n        max_vowel_index = 0\n        for v in vowels:\n            max_vowel_index = max(max_vowel_index, vowel_positions[v][-1])\n        \n        if left < min_vowel_index and right > max_vowel_index:\n            count += 1\n    \n    return count\n```", "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    left = 0\n    vowel_count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    consonant_count = 0\n\n    for right in range(n):\n        char = word[right]\n        if char in vowels:\n            vowel_count[char] += 1\n        elif char.isalpha():\n            consonant_count += 1\n\n        while consonant_count > k or any(vowel_count[v] == 0 for v in vowels):\n            if word[left] in vowels:\n                vowel_count[word[left]] -= 1\n            elif word[left].isalpha():\n                consonant_count -= 1\n            left += 1\n\n        if consonant_count == k and all(vowel_count[v] > 0 for v in vowels):\n            count += left + 1\n\n    return count", "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = [0] * 26\n    vowel_count = 0\n    consonant_count = 0\n    result = 0\n    \n    def is_valid():\n        return vowel_count == 5 and consonant_count == k\n    \n    left = 0\n    for right in range(n):\n        char = word[right]\n        if char in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n        \n        while is_valid():\n            if word[left] in vowels:\n                vowel_count -= 1\n            else:\n                consonant_count -= 1\n            left += 1\n            if is_valid():\n                result += 1\n    \n    return result\n```", "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Function to check if a substring has all vowels and exactly k consonants\n    def is_valid(substring):\n        char_count = [0] * 26\n        vowel_count = 0\n        consonant_count = 0\n        for char in substring:\n            char_count[ord(char) - ord('a')] += 1\n            if char in vowels:\n                vowel_count += 1\n            else:\n                consonant_count += 1\n        return vowel_count == 5 and consonant_count == k\n    \n    # Sliding window approach\n    for i in range(n):\n        for j in range(i + 5, n + 1):\n            if is_valid(word[i:j]):\n                count += 1\n                \n    return count\n```"]}
{"task_id": "3525", "codes": ["def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = energyDrinkA[0]\n    dp_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B), max(dp_B + energyDrinkB[i], dp_A)\n    \n    return max(dp_A, dp_B)", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    if n > 1:\n        dp_A[1] = max(energyDrinkA[0], energyDrinkA[1])\n        dp_B[1] = max(energyDrinkB[0], energyDrinkB[1])\n    \n    for i in range(2, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkB[i])\n    \n    return max(dp_A[-1], dp_B[-1])", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1], dp_B[i-1]) + energyDrinkA[i]\n        dp_B[i] = max(dp_A[i-1], dp_B[i-1]) + energyDrinkB[i]\n    \n    return max(dp_A[-1], dp_B[-1])", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    max_energy = float('-inf')\n    current_energy_A = 0\n    current_energy_B = 0\n    switch_energy_A = 0\n    switch_energy_B = 0\n    \n    for i in range(n):\n        current_energy_A += energyDrinkA[i]\n        current_energy_B += energyDrinkB[i]\n        \n        switch_energy_A = max(switch_energy_A + energyDrinkB[i], current_energy_A)\n        switch_energy_B = max(switch_energy_B + energyDrinkA[i], current_energy_B)\n        \n        max_energy = max(max_energy, current_energy_A, current_energy_B, switch_energy_A, switch_energy_B)\n    \n    return max_energy"], "passed": [false, false, false, false], "raw_code": ["```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = energyDrinkA[0]\n    dp_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B), max(dp_B + energyDrinkB[i], dp_A)\n    \n    return max(dp_A, dp_B)\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    if n > 1:\n        dp_A[1] = max(energyDrinkA[0], energyDrinkA[1])\n        dp_B[1] = max(energyDrinkB[0], energyDrinkB[1])\n    \n    for i in range(2, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkB[i])\n    \n    return max(dp_A[-1], dp_B[-1])\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1], dp_B[i-1]) + energyDrinkA[i]\n        dp_B[i] = max(dp_A[i-1], dp_B[i-1]) + energyDrinkB[i]\n    \n    return max(dp_A[-1], dp_B[-1])\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    max_energy = float('-inf')\n    current_energy_A = 0\n    current_energy_B = 0\n    switch_energy_A = 0\n    switch_energy_B = 0\n    \n    for i in range(n):\n        current_energy_A += energyDrinkA[i]\n        current_energy_B += energyDrinkB[i]\n        \n        switch_energy_A = max(switch_energy_A + energyDrinkB[i], current_energy_A)\n        switch_energy_B = max(switch_energy_B + energyDrinkA[i], current_energy_B)\n        \n        max_energy = max(max_energy, current_energy_A, current_energy_B, switch_energy_A, switch_energy_B)\n    \n    return max_energy\n```"]}
{"difficulty": "medium", "num_threads": 32, "temperature": 0.7, "n": 4, "context": "all", "selection": "oracle", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_parallel_sample_vanilla_bug_trace_TPL_CODEEXECUTOR_qwen_7b_medium_n_4.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_d", "codes": ["", "d", "", "def count_visible_buildings(N, heights):\n    stack = []\n    result = [0] * N\n    for i in range(N - 1, -1, -1):\n        while stack and heights[i] >= heights[stack[-1]]:\n            stack.pop()\n        if stack:\n            result[i] = len(stack)\n        stack.append(i)\n    return result\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nheights = list(map(int, data[1:]))\ncounts = count_visible_buildings(N, heights)\nprint(' '.join(map(str, counts)))"], "passed": [false, false, false, false], "raw_code": ["", "```python\ndef count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    \n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N):\n            if heights[j] <= heights[i]:\n                count += 1\n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()", "", "def count_visible_buildings(N, heights):\n    stack = []\n    result = [0] * N\n    for i in range(N - 1, -1, -1):\n        while stack and heights[i] >= heights[stack[-1]]:\n            stack.pop()\n        if stack:\n            result[i] = len(stack)\n        stack.append(i)\n    return result\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nheights = list(map(int, data[1:]))\ncounts = count_visible_buildings(N, heights)\nprint(' '.join(map(str, counts)))"]}
{"task_id": "abc373_c", "codes": ["d", "d", "d", "def max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    A.sort()\n    B.sort(reverse=True)\n    \n    max_sum = A[0] + B[0]\n    print(max_sum)\n\nmax_sum_of_sequences()"], "passed": [false, false, false, false], "raw_code": ["```python\ndef maximize_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmaximize_sum()", "```python\ndef max_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\n# Call the function\nmax_sum()", "```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()", "```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    A.sort()\n    B.sort(reverse=True)\n    \n    max_sum = A[0] + B[0]\n    print(max_sum)\n\nmax_sum_of_sequences()\n```"]}
{"task_id": "arc181_a", "codes": ["def min_operations(permutation):\n    n = len(permutation)\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if permutation[i] > permutation[j]:\n                inversions += 1\n    return inversions\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    index = 1\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        permutation = list(map(int, data[index:index + n]))\n        index += n\n        result = min_operations(permutation)\n        results.append(result)\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "", "", ""], "passed": [false, false, false, false], "raw_code": ["def min_operations(permutation):\n    n = len(permutation)\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if permutation[i] > permutation[j]:\n                inversions += 1\n    return inversions\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    index = 1\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        permutation = list(map(int, data[index:index + n]))\n        index += n\n        result = min_operations(permutation)\n        results.append(result)\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "", "", ""]}
{"task_id": "abc365_c", "codes": ["def max_subsidy_limit(N, M, A):\n    def can_subsidize(x):\n        return sum(min(x, a) for a in A) <= M\n    \n    left, right = 0, max(A)\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_subsidize(mid):\n            left = mid\n        else:\n            right = mid - 1\n    \n    if can_subsidize(left):\n        return left\n    else:\n        return \"infinite\"\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nresult = max_subsidy_limit(N, M, A)\nprint(result)", "def max_subsidy_limit(N, M, A):\n    low = 0\n    high = max(A)\n    while low < high:\n        mid = (low + high) // 2\n        total = sum(min(mid, a) for a in A)\n        if total > M:\n            high = mid\n        else:\n            low = mid + 1\n    if sum(min(low, a) for a in A) <= M:\n        return low\n    else:\n        return 'infinite'\n\n# Example usage:\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n# print(max_subsidy_limit(N, M, A))", "", ""], "passed": [false, false, false, false], "raw_code": ["```python\ndef max_subsidy_limit(N, M, A):\n    def can_subsidize(x):\n        return sum(min(x, a) for a in A) <= M\n    \n    left, right = 0, max(A)\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_subsidize(mid):\n            left = mid\n        else:\n            right = mid - 1\n    \n    if can_subsidize(left):\n        return left\n    else:\n        return \"infinite\"\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nresult = max_subsidy_limit(N, M, A)\nprint(result)\n```", "def max_subsidy_limit(N, M, A):\n    low = 0\n    high = max(A)\n    while low < high:\n        mid = (low + high) // 2\n        total = sum(min(mid, a) for a in A)\n        if total > M:\n            high = mid\n        else:\n            low = mid + 1\n    if sum(min(low, a) for a in A) <= M:\n        return low\n    else:\n        return 'infinite'\n\n# Example usage:\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n# print(max_subsidy_limit(N, M, A))", "", ""]}
{"task_id": "abc367_c", "codes": ["import sys\nfrom itertools import product\n\ndef generate_sequences(N, K, R):\n    sequences = product(range(1, r + 1) for r in R)\n    valid_sequences = [seq for seq in sequences if sum(seq) % K == 0]\n    valid_sequences.sort()\n    return valid_sequences\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    sequences = generate_sequences(N, K, R)\n    print(len(sequences))\n    for seq in sequences:\n        print(' '.join(map(str, seq)))", "def find_sequences(N, K, R, current_sequence, current_sum, index):\n    if index == N:\n        if current_sum % K == 0:\n            result.append(current_sequence[:])\n        return\n    \n    for num in range(1, R[index] + 1):\n        current_sequence[index] = num\n        current_sum += num\n        find_sequences(N, K, R, current_sequence, current_sum, index + 1)\n        current_sum -= num\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    \n    result = []\n    current_sequence = [0] * N\n    find_sequences(N, K, R, current_sequence, 0, 0)\n    \n    result.sort()\n    \n    if not result:\n        print(\"\")\n    else:\n        print(len(result))\n        for seq in result:\n            print(\" \".join(map(str, seq)))\n\nif __name__ == \"__main__\":\n    main()", "def generate_sequences(N, K, R):\n    def backtrack(index, current, current_sum):\n        if index == N:\n            if current_sum % K == 0:\n                result.append(current)\n            return\n        for i in range(1, R[index] + 1):\n            if not current or i >= current[-1]:\n                backtrack(index + 1, current + [i], current_sum + i)\n\n    result = []\n    backtrack(0, [], 0)\n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    sequences = generate_sequences(N, K, R)\n    for seq in sequences:\n        print(' '.join(map(str, seq)))\n\nif __name__ == '__main__':\n    main()", "d"], "passed": [false, false, false, false], "raw_code": ["import sys\nfrom itertools import product\n\ndef generate_sequences(N, K, R):\n    sequences = product(range(1, r + 1) for r in R)\n    valid_sequences = [seq for seq in sequences if sum(seq) % K == 0]\n    valid_sequences.sort()\n    return valid_sequences\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    sequences = generate_sequences(N, K, R)\n    print(len(sequences))\n    for seq in sequences:\n        print(' '.join(map(str, seq)))", "```python\ndef find_sequences(N, K, R, current_sequence, current_sum, index):\n    if index == N:\n        if current_sum % K == 0:\n            result.append(current_sequence[:])\n        return\n    \n    for num in range(1, R[index] + 1):\n        current_sequence[index] = num\n        current_sum += num\n        find_sequences(N, K, R, current_sequence, current_sum, index + 1)\n        current_sum -= num\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    \n    result = []\n    current_sequence = [0] * N\n    find_sequences(N, K, R, current_sequence, 0, 0)\n    \n    result.sort()\n    \n    if not result:\n        print(\"\")\n    else:\n        print(len(result))\n        for seq in result:\n            print(\" \".join(map(str, seq)))\n\nif __name__ == \"__main__\":\n    main()\n```", "def generate_sequences(N, K, R):\n    def backtrack(index, current, current_sum):\n        if index == N:\n            if current_sum % K == 0:\n                result.append(current)\n            return\n        for i in range(1, R[index] + 1):\n            if not current or i >= current[-1]:\n                backtrack(index + 1, current + [i], current_sum + i)\n\n    result = []\n    backtrack(0, [], 0)\n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    sequences = generate_sequences(N, K, R)\n    for seq in sequences:\n        print(' '.join(map(str, seq)))\n\nif __name__ == '__main__':\n    main()", "```python\ndef find_sequences(N, K, R, current_sum, current_seq):\n    if len(current_seq) == N:\n        if current_sum % K == 0:\n            sequences.append(current_seq[:])\n        return\n    \n    for i in range(1, R[len(current_seq)] + 1):\n        current_seq.append(i)\n        find_sequences(N, K, R, current_sum + i, current_seq)\n        current_seq.pop()\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    \n    sequences = []\n    find_sequences(N, K, R, 0, [])\n    \n    if not sequences:\n        print()\n        return\n    \n    sequences.sort()\n    \n    print(len(sequences))\n    for seq in sequences:\n        print(' '.join(map(str, seq)))\n\nif __name__ == \"__main__\":\n    main()"]}
{"task_id": "abc370_c", "codes": ["def transform_string(S, T):\n    X = [S]\n    while S != T:\n        for i in range(len(S)):\n            for char in 'abcdefghijklmnopqrstuvwxyz':\n                if char != S[i]:\n                    new_S = S[:i] + char + S[i+1:]\n                    if new_S not in X:\n                        X.append(new_S)\n                        S = new_S\n                        break\n        else:\n            break\n    return X\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    S = data[0]\n    T = data[1]\n    X = transform_string(S, T)\n    print(len(X))\n    for s in X:\n        print(s)\n\nmain()", "", "def transform_strings(S, T):\n    n = len(S)\n    X = [S]\n    for i in range(n):\n        if S[i] != T[i]:\n            min_char = chr(ord('a'))\n            min_index = i\n            for j in range(i, n):\n                if ord(T[j]) < ord(min_char):\n                    min_char = T[j]\n                    min_index = j\n            S = S[:min_index] + min_char + S[min_index+1:]\n            X.append(S)\n    return X\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    S = data[0]\n    T = data[1]\n    X = transform_strings(S, T)\n    print(len(X) - 1)\n    for s in X:\n        print(s)", "d"], "passed": [false, false, false, false], "raw_code": ["def transform_string(S, T):\n    X = [S]\n    while S != T:\n        for i in range(len(S)):\n            for char in 'abcdefghijklmnopqrstuvwxyz':\n                if char != S[i]:\n                    new_S = S[:i] + char + S[i+1:]\n                    if new_S not in X:\n                        X.append(new_S)\n                        S = new_S\n                        break\n        else:\n            break\n    return X\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    S = data[0]\n    T = data[1]\n    X = transform_string(S, T)\n    print(len(X))\n    for s in X:\n        print(s)\n\nmain()", "", "def transform_strings(S, T):\n    n = len(S)\n    X = [S]\n    for i in range(n):\n        if S[i] != T[i]:\n            min_char = chr(ord('a'))\n            min_index = i\n            for j in range(i, n):\n                if ord(T[j]) < ord(min_char):\n                    min_char = T[j]\n                    min_index = j\n            S = S[:min_index] + min_char + S[min_index+1:]\n            X.append(S)\n    return X\n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    S = data[0]\n    T = data[1]\n    X = transform_strings(S, T)\n    print(len(X) - 1)\n    for s in X:\n        print(s)", "```python\ndef min_transformations(S, T):\n    n = len(S)\n    X = [S]\n    \n    for i in range(n):\n        if S[i] != T[i]:\n            # Find the next lexicographically smallest character to replace\n            for char in sorted('abcdefghijklmnopqrstuvwxyz'):\n                if char >= S[i]:\n                    new_S = S[:i] + char + S[i+1:]\n                    if new_S <= T:\n                        S = new_S\n                        break\n            X.append(S)\n    \n    return X\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nS = data[0]\nT = data[1]\n\n# Get the result\nresult = min_transformations(S, T)\n\n# Print the result\nprint(len(result))\nfor s in result:\n    print(s)"]}
{"task_id": "abc371_d", "codes": ["d", "d", "import sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Read input data\ndef main():\n    N = int(data[0])\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = [(int(data[2*N+2 + 2*i]), int(data[2*N+3 + 2*i])) for i in range(Q)]\n\n    # Calculate prefix sum of villagers\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + P[i]\n\n    # Process each query\n    for L, R in queries:\n        index_L = bisect_left(X, L)\n        index_R = bisect_right(X, R) - 1\n        if index_L <= index_R:\n            result = prefix_sum[index_R + 1] - prefix_sum[index_L]\n        else:\n            result = 0\n        print(result)\n\nif __name__ == '__main__':\n    import bisect\n    main()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input values\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index+N]))\n    index += N\n    P = list(map(int, data[index:index+N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = [(int(data[index]), int(data[index+1])) for _ in range(Q)]\n    index += 2\n\n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i+1] = prefix_sum[i] + P[i]\n\n    # Process each query\n    for L, R in queries:\n        result = prefix_sum[R] - prefix_sum[L-1]\n        print(result)\n\nif __name__ == '__main__':\n    main()"], "passed": [false, false, false, false], "raw_code": ["```python\ndef handle_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    P = list(map(int, data[index:index + N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n\n    # Create prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + P[i]\n\n    # Process queries\n    for L, R in queries:\n        result = prefix_sum[bisect_right(X, R)] - prefix_sum[bisect_left(X, L)]\n        print(result)\n\nhandle_queries()", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    X = [int(data[index + i]) for i in range(N)]\n    index += N\n\n    P = [int(data[index + i]) for i in range(N)]\n    index += N\n\n    Q = int(data[index])\n    index += 1\n\n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n\n    # Create a list of (X_i, P_i) tuples\n    villages = list(zip(X, P))\n\n    # Sort villages by their X coordinate\n    villages.sort()\n\n    # Calculate prefix sums of P_i\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + villages[i][1]\n\n    # Process each query\n    for L, R in queries:\n        # Find the indices for L and R using binary search\n        left = bisect_left(villages, (L, 0))\n        right = bisect_right(villages, (R, float('inf')))\n\n        # Calculate the sum of villagers in the range [L, R]\n        result = prefix_sum[right] - prefix_sum[left]\n        print(result)\n\n# Import bisect for binary search\nimport bisect\n# Call the main function\nmain()", "import sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Read input data\ndef main():\n    N = int(data[0])\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = [(int(data[2*N+2 + 2*i]), int(data[2*N+3 + 2*i])) for i in range(Q)]\n\n    # Calculate prefix sum of villagers\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + P[i]\n\n    # Process each query\n    for L, R in queries:\n        index_L = bisect_left(X, L)\n        index_R = bisect_right(X, R) - 1\n        if index_L <= index_R:\n            result = prefix_sum[index_R + 1] - prefix_sum[index_L]\n        else:\n            result = 0\n        print(result)\n\nif __name__ == '__main__':\n    import bisect\n    main()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input values\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index+N]))\n    index += N\n    P = list(map(int, data[index:index+N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = [(int(data[index]), int(data[index+1])) for _ in range(Q)]\n    index += 2\n\n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i+1] = prefix_sum[i] + P[i]\n\n    # Process each query\n    for L, R in queries:\n        result = prefix_sum[R] - prefix_sum[L-1]\n        print(result)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc366_c", "codes": ["def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        if queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n        elif queries[index] == '3':\n            results.append(str(len(bag)))\n            index += 1\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    result = []\n    \n    index = 0\n    for _ in range(Q):\n        if queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n        elif queries[index] == '3':\n            result.append(str(len(bag)))\n            index += 1\n    \n    for r in result:\n        print(r)\n\nprocess_queries()", "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    index = 1\n    result = []\n    \n    unique_balls = set()\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            x = int(data[index + 1])\n            unique_balls.add(x)\n        elif query_type == 2:\n            x = int(data[index + 1])\n            unique_balls.remove(x)\n        elif query_type == 3:\n            result.append(str(len(unique_balls)))\n        \n        index += 2\n    \n    for r in result:\n        print(r)\n\nprocess_queries()", "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    unique_integers = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            unique_integers.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            unique_integers.remove(x)\n        elif query_type == 3:\n            results.append(len(unique_integers))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()"], "passed": [false, false, false, false], "raw_code": ["```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        if queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n        elif queries[index] == '3':\n            results.append(str(len(bag)))\n            index += 1\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```", "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    result = []\n    \n    index = 0\n    for _ in range(Q):\n        if queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n        elif queries[index] == '3':\n            result.append(str(len(bag)))\n            index += 1\n    \n    for r in result:\n        print(r)\n\nprocess_queries()\n```", "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    index = 1\n    result = []\n    \n    unique_balls = set()\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            x = int(data[index + 1])\n            unique_balls.add(x)\n        elif query_type == 2:\n            x = int(data[index + 1])\n            unique_balls.remove(x)\n        elif query_type == 3:\n            result.append(str(len(unique_balls)))\n        \n        index += 2\n    \n    for r in result:\n        print(r)\n\nprocess_queries()\n```", "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    unique_integers = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            unique_integers.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            unique_integers.remove(x)\n        elif query_type == 3:\n            results.append(len(unique_integers))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"]}
{"task_id": "abc369_c", "codes": ["def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for i in range(N):\n        diff_count = {}\n        for j in range(i, N):\n            if j > i:\n                diff = A[j] - A[i]\n            else:\n                diff = None\n            \n            if diff is not None:\n                if diff in diff_count:\n                    count += diff_count[diff]\n                diff_count[diff] = diff_count.get(diff, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for i in range(N):\n        diff_count = {}\n        \n        for j in range(i, -1, -1):\n            if j == i:\n                count += 1\n            elif i - j > 1:\n                d = A[i] - A[j]\n                if d in diff_count:\n                    count += diff_count[d]\n                \n            if j > 0:\n                diff_count[A[j] - A[j-1]] = diff_count.get(A[j] - A[j-1], 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        for r in range(l, N):\n            if r == l:\n                count += 1\n                continue\n            diff = A[r] - A[l]\n            if diff in diff_count:\n                count += diff_count[diff]\n            diff_count[diff] = diff_count.get(diff, 0) + 1\n    \n    print(count)\n\n# Call the function\ncount_arithmetic_progressions()", "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for end in range(N):\n        diff_map = {}\n        for start in range(end - 1, -1, -1):\n            diff = A[end] - A[start]\n            if diff in diff_map:\n                count += diff_map[diff]\n            diff_map[diff] = diff_map.get(diff, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()"], "passed": [false, false, false, false], "raw_code": ["```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for i in range(N):\n        diff_count = {}\n        for j in range(i, N):\n            if j > i:\n                diff = A[j] - A[i]\n            else:\n                diff = None\n            \n            if diff is not None:\n                if diff in diff_count:\n                    count += diff_count[diff]\n                diff_count[diff] = diff_count.get(diff, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```", "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for i in range(N):\n        diff_count = {}\n        \n        for j in range(i, -1, -1):\n            if j == i:\n                count += 1\n            elif i - j > 1:\n                d = A[i] - A[j]\n                if d in diff_count:\n                    count += diff_count[d]\n                \n            if j > 0:\n                diff_count[A[j] - A[j-1]] = diff_count.get(A[j] - A[j-1], 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```", "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        for r in range(l, N):\n            if r == l:\n                count += 1\n                continue\n            diff = A[r] - A[l]\n            if diff in diff_count:\n                count += diff_count[diff]\n            diff_count[diff] = diff_count.get(diff, 0) + 1\n    \n    print(count)\n\n# Call the function\ncount_arithmetic_progressions()\n```", "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for end in range(N):\n        diff_map = {}\n        for start in range(end - 1, -1, -1):\n            diff = A[end] - A[start]\n            if diff in diff_map:\n                count += diff_map[diff]\n            diff_map[diff] = diff_map.get(diff, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```"]}
{"task_id": "abc372_c", "codes": ["d", "d", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    queries = [(int(data[2 + 2 * i]), data[3 + 2 * i]) for i in range(Q)]\n\n    def count_ABC(s):\n        return s.count('ABC')\n\n    result = []\n    current_count = count_ABC(S)\n    result.append(current_count)\n\n    for x, c in queries:\n        if S[x - 1] != c:\n            current_count -= count_ABC(S[:x - 1] + c + S[x:])\n            current_count += count_ABC(S[:x - 1] + c + S[x:])\n            S = S[:x - 1] + c + S[x:]\n            result.append(current_count)\n\n    for r in result:\n        print(r)\n\nmain()", "d"], "passed": [false, false, false, false], "raw_code": ["```python\ndef count_abc(s):\n    count = 0\n    n = len(s)\n    for i in range(n - 2):\n        if s[i:i+3] == \"ABC\":\n            count += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    queries = [(int(data[2 + 2 * i]), data[3 + 2 * i]) for i in range(Q)]\n    \n    current_count = count_abc(S)\n    print(current_count)\n    \n    for X, C in queries:\n        X -= 1  # Convert to 0-indexed\n        old_char = S[X]\n        S = S[:X] + C + S[X+1:]\n        \n        # Check if the new character forms \"ABC\" with its neighbors\n        if X > 0 and S[X-1] == \"A\" and C == \"B\":\n            current_count += 1\n        if X < N - 2 and C == \"B\" and S[X+1] == \"C\":\n            current_count += 1\n        if X > 0 and S[X-1] == \"A\" and old_char == \"B\":\n            current_count -= 1\n        if X < N - 2 and old_char == \"B\" and S[X+1] == \"C\":\n            current_count -= 1\n        \n        print(current_count)\n\n# Call the function to solve the problem\nsolve()", "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    \n    def count_ABC(s):\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i+3] == 'ABC':\n                count += 1\n        return count\n    \n    abc_count = count_ABC(S)\n    index = 3\n    \n    for _ in range(Q):\n        X = int(data[index]) - 1\n        C = data[index + 1]\n        index += 2\n        \n        # Update the string S\n        S = S[:X] + C + S[X+1:]\n        \n        # Adjust the count of \"ABC\" substrings\n        if X > 0 and X < len(S) - 2:\n            if S[X-1:X+2] == 'ABC':\n                abc_count -= 1\n            if S[X:X+3] == 'ABC':\n                abc_count += 1\n        elif X == 0 and len(S) >= 3:\n            if S[:3] == 'ABC':\n                abc_count += 1\n        elif X == len(S) - 2 and X > 0:\n            if S[-3:] == 'ABC':\n                abc_count += 1\n        \n        print(abc_count)\n\nprocess_queries()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    queries = [(int(data[2 + 2 * i]), data[3 + 2 * i]) for i in range(Q)]\n\n    def count_ABC(s):\n        return s.count('ABC')\n\n    result = []\n    current_count = count_ABC(S)\n    result.append(current_count)\n\n    for x, c in queries:\n        if S[x - 1] != c:\n            current_count -= count_ABC(S[:x - 1] + c + S[x:])\n            current_count += count_ABC(S[:x - 1] + c + S[x:])\n            S = S[:x - 1] + c + S[x:]\n            result.append(current_count)\n\n    for r in result:\n        print(r)\n\nmain()", "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    \n    # Initial count of 'ABC' substrings\n    count_ABC = 0\n    for i in range(N - 2):\n        if S[i:i+3] == 'ABC':\n            count_ABC += 1\n    \n    results = []\n    \n    index = 6  # Start index for reading queries\n    for _ in range(Q):\n        X = int(data[index]) - 1\n        C = data[index + 1]\n        \n        # Replace character at position X\n        old_char = S[X]\n        S = S[:X] + C + S[X+1:]\n        \n        # Adjust the count of 'ABC' substrings\n        if X > 0 and S[X-1:X+2] == 'ABC':\n            count_ABC += 1\n        if X < N - 2 and S[X:X+3] == 'ABC':\n            count_ABC += 1\n        if X > 1 and S[X-2:X+1] == 'ABC':\n            count_ABC -= 1\n        if X < N - 3 and S[X-1:X+2] == 'ABC':\n            count_ABC -= 1\n        \n        results.append(count_ABC)\n        \n        index += 2\n    \n    for result in results:\n        print(result)\n\n# Call the function to execute the code\nprocess_queries()"]}
{"task_id": "abc368_c", "codes": ["d", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while any(h > 0 for h in H):\n        T += 1\n        for i in range(N):\n            if H[i] > 0:\n                if T % 3 == 0:\n                    H[i] -= 3\n                else:\n                    H[i] -= 1\n                break\n    \n    print(T)\n\nif __name__ == \"__main__\":\n    main()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while True:\n        # Find the first enemy with health > 0\n        found = False\n        for i in range(N):\n            if H[i] > 0:\n                found = True\n                break\n        \n        if not found:\n            break\n        \n        T += 1\n        if T % 3 == 0:\n            H[i] -= 3\n        else:\n            H[i] -= 1\n    \n    print(T)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            H[0] -= 3\n        else:\n            H[0] -= 1\n        \n        if H[0] <= 0:\n            H.pop(0)\n    \n    print(T)\n\nmain()"], "passed": [false, false, false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            H[0] -= 3\n        else:\n            H[0] -= 1\n        if H[0] <= 0:\n            H.pop(0)\n    \n    print(T)\n\nif __name__ == \"__main__\":\n    main()", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while any(h > 0 for h in H):\n        T += 1\n        for i in range(N):\n            if H[i] > 0:\n                if T % 3 == 0:\n                    H[i] -= 3\n                else:\n                    H[i] -= 1\n                break\n    \n    print(T)\n\nif __name__ == \"__main__\":\n    main()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while True:\n        # Find the first enemy with health > 0\n        found = False\n        for i in range(N):\n            if H[i] > 0:\n                found = True\n                break\n        \n        if not found:\n            break\n        \n        T += 1\n        if T % 3 == 0:\n            H[i] -= 3\n        else:\n            H[i] -= 1\n    \n    print(T)\n\nmain()\n```", "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    \n    while any(h > 0 for h in H):\n        T += 1\n        if T % 3 == 0:\n            H[0] -= 3\n        else:\n            H[0] -= 1\n        \n        if H[0] <= 0:\n            H.pop(0)\n    \n    print(T)\n\nmain()\n```"]}
{"task_id": "abc369_d", "codes": ["d", "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_experience = sum(A)\n    num_defeated = N\n    \n    if num_defeated % 2 != 0:\n        total_experience -= min(A)\n    \n    print(total_experience)\n\nmax_experience_points()", "d", "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort()\n    \n    max_points = 0\n    current_points = 0\n    \n    for i, strength in enumerate(A):\n        if i % 2 == 0:\n            # Even-indexed (odd-numbered in human terms) - let it go\n            max_points = max(max_points, current_points)\n        else:\n            # Odd-indexed (even-numbered in human terms) - defeat it\n            current_points += strength * 2\n    \n    # Final check for the last monster\n    max_points = max(max_points, current_points)\n    \n    print(max_points)\n\nmax_experience_points()"], "passed": [false, false, false, false], "raw_code": ["```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    A.sort()\n    total_experience = 0\n    \n    for i in range(N):\n        if (i + 1) % 2 == 0:\n            total_experience += 2 * A[i]\n        else:\n            total_experience += A[i]\n    \n    print(total_experience)\n\nmax_experience_points()", "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_experience = sum(A)\n    num_defeated = N\n    \n    if num_defeated % 2 != 0:\n        total_experience -= min(A)\n    \n    print(total_experience)\n\nmax_experience_points()\n```", "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    skip = 0\n    defeat = 0\n    \n    for i in range(N):\n        new_skip = max(skip, defeat)\n        new_defeat = skip + A[i]\n        if (i + 1) % 2 == 0:\n            new_defeat += A[i]\n        \n        skip = new_skip\n        defeat = new_defeat\n    \n    print(max(skip, defeat))\n\nmax_experience_points()", "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort()\n    \n    max_points = 0\n    current_points = 0\n    \n    for i, strength in enumerate(A):\n        if i % 2 == 0:\n            # Even-indexed (odd-numbered in human terms) - let it go\n            max_points = max(max_points, current_points)\n        else:\n            # Odd-indexed (even-numbered in human terms) - defeat it\n            current_points += strength * 2\n    \n    # Final check for the last monster\n    max_points = max(max_points, current_points)\n    \n    print(max_points)\n\nmax_experience_points()\n```"]}
{"task_id": "abc371_c", "codes": ["import sys\nfrom itertools import permutations\n\ndef min_cost_to_isomorphic(G, H, costs):\n    N = len(G)\n    \n    def isomorphic_permutation(G, H, perm):\n        return all((G[i][j] == H[perm[i]-1][perm[j]-1]) for i in range(N) for j in range(i+1, N))\n    \n    def toggle_edges(H, perm, cost_matrix):\n        for i in range(N):\n            for j in range(i+1, N):\n                if H[i][j] != G[perm[i]-1][perm[j]-1]:\n                    H[i][j], H[perm[i]-1][perm[j]-1] = 1 - H[i][j], 1 - H[perm[i]-1][perm[j]-1]\n                    yield cost_matrix[i][j]\n    \n    min_cost = float('inf')\n    \n    for perm in permutations(range(1, N+1)):\n        if isomorphic_permutation(G, H, perm):\n            current_cost = sum(toggle_edges(H, perm, costs))\n            min_cost = min(min_cost, current_cost)\n    \n    return min_cost\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    M_G = int(data[index])\n    index += 1\n    G = [[0]*N for _ in range(N)]\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G[u][v] = 1\n        G[v][u] = 1\n        index += 2\n    \n    M_H = int(data[index])\n    index += 1\n    H = [[0]*N for _ in range(N)]\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H[a][b] = 1\n        H[b][a] = 1\n        index += 2\n    \n    costs = []\n    for i in range(N-1):\n        row = list(map(int, data[index:index+N-i]))\n        costs.append(row)\n        index += N-i\n    \n    result = min_cost_to_isomorphic(G, H, costs)\n    print(result)", "d", "", "d"], "passed": [false, false, false, false], "raw_code": ["```python\nimport sys\nfrom itertools import permutations\n\ndef min_cost_to_isomorphic(G, H, costs):\n    N = len(G)\n    \n    def isomorphic_permutation(G, H, perm):\n        return all((G[i][j] == H[perm[i]-1][perm[j]-1]) for i in range(N) for j in range(i+1, N))\n    \n    def toggle_edges(H, perm, cost_matrix):\n        for i in range(N):\n            for j in range(i+1, N):\n                if H[i][j] != G[perm[i]-1][perm[j]-1]:\n                    H[i][j], H[perm[i]-1][perm[j]-1] = 1 - H[i][j], 1 - H[perm[i]-1][perm[j]-1]\n                    yield cost_matrix[i][j]\n    \n    min_cost = float('inf')\n    \n    for perm in permutations(range(1, N+1)):\n        if isomorphic_permutation(G, H, perm):\n            current_cost = sum(toggle_edges(H, perm, costs))\n            min_cost = min(min_cost, current_cost)\n    \n    return min_cost\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    M_G = int(data[index])\n    index += 1\n    G = [[0]*N for _ in range(N)]\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G[u][v] = 1\n        G[v][u] = 1\n        index += 2\n    \n    M_H = int(data[index])\n    index += 1\n    H = [[0]*N for _ in range(N)]\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H[a][b] = 1\n        H[b][a] = 1\n        index += 2\n    \n    costs = []\n    for i in range(N-1):\n        row = list(map(int, data[index:index+N-i]))\n        costs.append(row)\n        index += N-i\n    \n    result = min_cost_to_isomorphic(G, H, costs)\n    print(result)\n```", "```python\ndef min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    def read_int():\n        nonlocal index\n        result = int(data[index])\n        index += 1\n        return result\n    \n    N = read_int()\n    M_G = read_int()\n    edges_G = []\n    for _ in range(M_G):\n        u = read_int() - 1\n        v = read_int() - 1\n        edges_G.append((u, v))\n    \n    M_H = read_int()\n    edges_H = []\n    for _ in range(M_H):\n        a = read_int() - 1\n        b = read_int() - 1\n        edges_H.append((a, b))\n    \n    A = [[read_int() for _ in range(N)] for _ in range(N)]\n    \n    # Create adjacency lists for both graphs\n    adj_G = [[] for _ in range(N)]\n    for u, v in edges_G:\n        adj_G[u].append(v)\n        adj_G[v].append(u)\n    \n    adj_H = [[] for _ in range(N)]\n    for a, b in edges_H:\n        adj_H[a].append(b)\n        adj_H[b].append(a)\n    \n    # Calculate initial costs\n    initial_costs = [0] * (1 << N)\n    for mask in range(1 << N):\n        for i in range(N):\n            if mask & (1 << i):\n                for j in range(i + 1, N):\n                    if mask & (1 << j):\n                        if (i, j) not in edges_H and (j, i) not in edges_H:\n                            initial_costs[mask] += A[i][j]\n                        elif (i, j) in edges_H or (j, i) in edges_H:\n                            initial_costs[mask] -= A[i][j]\n    \n    # Dynamic programming to find minimum cost to make H isomorphic to G\n    dp = [float('inf')] * (1 << N)\n    dp[0] = 0\n    \n    for mask in range(1 << N):\n        for i in range(N):\n            if mask & (1 << i):\n                new_mask = mask ^ (1 << i)\n                for j in range(i + 1, N):\n                    if mask & (1 << j):\n                        new_new_mask = new_mask ^ (1 << j)\n                        if (i, j) not in edges_H and (j, i) not in edges_H:\n                            dp[new_new_mask] = min(dp[new_new_mask], dp[new_mask] + A[i][j])\n                        elif (i, j) in edges_H or (j, i) in edges_H:\n                            dp[new_new_mask] = min(dp[new_new_mask], dp[new_mask] - A[i][j])\n    \n    print(dp[(1 << N) - 1])\n\nmin_cost_to_isomorphic()", "", "```python\ndef min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    def next_int():\n        nonlocal index\n        value = int(data[index])\n        index += 1\n        return value\n\n    N = next_int()\n    M_G = next_int()\n    G_edges = [(next_int(), next_int()) for _ in range(M_G)]\n    M_H = next_int()\n    H_edges = [(next_int(), next_int()) for _ in range(M_H)]\n    A = [[next_int() for _ in range(N)] for _ in range(N)]\n\n    # Create adjacency lists for G and H\n    adj_G = [[] for _ in range(N + 1)]\n    adj_H = [[] for _ in range(N + 1)]\n    for u, v in G_edges:\n        adj_G[u].append(v)\n        adj_G[v].append(u)\n    for a, b in H_edges:\n        adj_H[a].append(b)\n        adj_H[b].append(a)\n\n    # Calculate differences\n    diff = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            if (j in adj_G[i]) != (j in adj_H[i]):\n                diff[i][j] = A[i][j]\n                diff[j][i] = A[i][j]\n\n    # Dynamic programming to find minimum cost\n    dp = [float('inf')] * (1 << N)\n    dp[0] = 0\n\n    for mask in range(1 << N):\n        count = bin(mask).count('1')\n        if count > 1:\n            for i in range(1, N + 1):\n                if mask & (1 << (i - 1)):\n                    for j in range(i + 1, N + 1):\n                        if mask & (1 << (j - 1)):\n                            new_mask = mask ^ (1 << (i - 1)) ^ (1 << (j - 1))\n                            dp[new_mask] = min(dp[new_mask], dp[mask] + diff[i][j])\n\n    print(dp[(1 << N) - 1])\n\nmin_cost_to_isomorphic()"]}
{"task_id": "arc183_a", "codes": ["from itertools import permutations\nimport math\n\ndef find_good_sequence(N, K):\n    # Generate all good integer sequences\n    sequences = set()\n    for seq in permutations(range(1, N + 1), repeat=N * K):\n        count = [seq.count(i) for i in range(1, N + 1)]\n        if count == [K] * N:\n            sequences.add(seq)\n    \n    # Sort the sequences lexicographically\n    sorted_sequences = sorted(sequences)\n    \n    # Find the floor((S+1)/2)-th sequence\n    S = len(sorted_sequences)\n    target_index = math.floor((S + 1) / 2) - 1\n    \n    return ' '.join(map(str, sorted_sequences[target_index]))\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\n\n# Print the result\nprint(find_good_sequence(N, K))", "import math\nfrom itertools import combinations_with_replacement\n\ndef nth_good_sequence(N, K):\n    # Calculate the total number of good sequences\n    S = math.factorial(N * K)\n    for i in range(1, N + 1):\n        S //= math.factorial(K)\n    \n    # Determine the target index\n    target_index = (S + 1) // 2\n    \n    # Generate the sequence using combinatorial methods\n    sequence = []\n    for i in range(1, N + 1):\n        seq = list(combinations_with_replacement(range(1, i + 1), K))\n        for perm in seq:\n            sequence.append(sorted(perm))\n    \n    # Flatten the list and sort it to get lexicographical order\n    flat_list = sorted([item for sublist in sequence for item in sublist])\n    \n    # Get the target sequence\n    result = flat_list[target_index - 1]\n    \n    # Print the result\n    print(' '.join(map(str, result)))\n\n# Call the function with stdin as input\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    nth_good_sequence(N, K)", "i", "import itertools\n\ndef generate_good_sequences(N, K):\n    elements = [i for i in range(1, N+1) for _ in range(K)]\n    return list(itertools.permutations(elements))\n\ndef find_middle_sequence(N, K):\n    sequences = generate_good_sequences(N, K)\n    sorted_sequences = sorted(sequences)\n    middle_index = (len(sorted_sequences) + 1) // 2\n    return sorted_sequences[middle_index - 1]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    result = find_middle_sequence(N, K)\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false, false, false, false], "raw_code": ["```python\nfrom itertools import permutations\nimport math\n\ndef find_good_sequence(N, K):\n    # Generate all good integer sequences\n    sequences = set()\n    for seq in permutations(range(1, N + 1), repeat=N * K):\n        count = [seq.count(i) for i in range(1, N + 1)]\n        if count == [K] * N:\n            sequences.add(seq)\n    \n    # Sort the sequences lexicographically\n    sorted_sequences = sorted(sequences)\n    \n    # Find the floor((S+1)/2)-th sequence\n    S = len(sorted_sequences)\n    target_index = math.floor((S + 1) / 2) - 1\n    \n    return ' '.join(map(str, sorted_sequences[target_index]))\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nK = int(data[1])\n\n# Print the result\nprint(find_good_sequence(N, K))\n```", "```python\nimport math\nfrom itertools import combinations_with_replacement\n\ndef nth_good_sequence(N, K):\n    # Calculate the total number of good sequences\n    S = math.factorial(N * K)\n    for i in range(1, N + 1):\n        S //= math.factorial(K)\n    \n    # Determine the target index\n    target_index = (S + 1) // 2\n    \n    # Generate the sequence using combinatorial methods\n    sequence = []\n    for i in range(1, N + 1):\n        seq = list(combinations_with_replacement(range(1, i + 1), K))\n        for perm in seq:\n            sequence.append(sorted(perm))\n    \n    # Flatten the list and sort it to get lexicographical order\n    flat_list = sorted([item for sublist in sequence for item in sublist])\n    \n    # Get the target sequence\n    result = flat_list[target_index - 1]\n    \n    # Print the result\n    print(' '.join(map(str, result)))\n\n# Call the function with stdin as input\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    nth_good_sequence(N, K)\n```", "```python\nimport itertools\nimport math\n\ndef find_kth_sequence(N, K):\n    # Generate all possible good integer sequences\n    elements = [i for i in range(1, N+1)] * K\n    all_sequences = set(itertools.permutations(elements))\n    \n    # Sort the sequences lexicographically\n    sorted_sequences = sorted(all_sequences)\n    \n    # Calculate the index of the desired sequence\n    index = math.floor((len(sorted_sequences) + 1) / 2) - 1\n    \n    # Print the desired sequence\n    print(' '.join(map(str, sorted_sequences[index])))\n\n# Read input from stdin\nN, K = map(int, input().split())\n\n# Call the function\nfind_kth_sequence(N, K)", "```python\nimport itertools\n\ndef generate_good_sequences(N, K):\n    elements = [i for i in range(1, N+1) for _ in range(K)]\n    return list(itertools.permutations(elements))\n\ndef find_middle_sequence(N, K):\n    sequences = generate_good_sequences(N, K)\n    sorted_sequences = sorted(sequences)\n    middle_index = (len(sorted_sequences) + 1) // 2\n    return sorted_sequences[middle_index - 1]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    result = find_middle_sequence(N, K)\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc367_d", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate prefix sums modulo M\n    prefix_sums = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + A[i - 1]) % M\n\n    # Count occurrences of each prefix sum modulo M\n    count = [0] * M\n    count[0] = 1\n    result = 0\n\n    for i in range(1, N + 1):\n        result += count[prefix_sums[i]]\n        count[prefix_sums[i]] += 1\n\n    print(result)\n\nmain()", "d", "d", "d"], "passed": [false, false, false, false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate prefix sums modulo M\n    prefix_sums = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + A[i - 1]) % M\n\n    # Count occurrences of each prefix sum modulo M\n    count = [0] * M\n    count[0] = 1\n    result = 0\n\n    for i in range(1, N + 1):\n        result += count[prefix_sums[i]]\n        count[prefix_sums[i]] += 1\n\n    print(result)\n\nmain()", "```python\ndef count_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    P = [0] * (N + 1)\n    for i in range(1, N + 1):\n        P[i] = P[i - 1] + A[i - 1]\n    \n    count = 0\n    prefix_count = {}\n    prefix_count[0] = 1\n    \n    for i in range(N):\n        prefix_sum_i = P[i + 1]\n        if prefix_sum_i % M in prefix_count:\n            count += prefix_count[prefix_sum_i % M]\n        prefix_count[prefix_sum_i % M] += 1\n    \n    for i in range(N):\n        prefix_sum_i = (P[N] + P[i + 1] - P[0]) % M\n        if prefix_sum_i in prefix_count:\n            count += prefix_count[prefix_sum_i]\n        prefix_count[prefix_sum_i] += 1\n    \n    print(count)\n\ncount_pairs()", "```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sums modulo M\n    prefix_sums_mod_M = [0]\n    current_sum = 0\n    for a in A:\n        current_sum += a\n        prefix_sums_mod_M.append(current_sum % M)\n    \n    # Count occurrences of each remainder\n    remainder_count = {}\n    for remainder in prefix_sums_mod_M:\n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n    \n    # Calculate the number of valid pairs\n    valid_pairs = 0\n    for count in remainder_count.values():\n        valid_pairs += count * (count - 1) // 2\n    \n    # Check if the entire path is a multiple of M\n    if prefix_sums_mod_M[-1] == 0:\n        valid_pairs += N - 1\n    \n    print(valid_pairs)\n\n# Call the function to execute\ncount_valid_pairs()", "```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sums\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Dictionary to store the count of each remainder when prefix sums are divided by M\n    remainder_count = {}\n    for i in range(N):\n        remainder = prefix_sum[i] % M\n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n    \n    # Calculate the number of valid pairs\n    valid_pairs = 0\n    for count in remainder_count.values():\n        valid_pairs += count * (count - 1) // 2\n    \n    print(valid_pairs)\n\n# Call the function\ncount_valid_pairs()"]}
{"task_id": "abc366_d", "codes": ["d", "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nindex = 1\narray = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n\n# Fill the prefix sum array\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            array[x][y][z] = array[x - 1][y][z] + array[x][y - 1][z] + array[x][y][z - 1] - array[x - 1][y - 1][z - 1] + int(data[index])\n            index += 1\n\nQ = int(data[index])\nindex += 1\nresults = []\n\n# Process each query\nfor _ in range(Q):\n    Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n    index += 6\n    result = array[Rx][Ry][Rz] - array[Lx - 1][Ry][Rz] - array[Rx][Ly - 1][Rz] - array[Rx][Ry][Lz - 1] + array[Lx - 1][Ly - 1][Rz] + array[Lx - 1][Ry][Lz - 1] + array[Rx][Ly - 1][Lz - 1] - array[Lx - 1][Ly - 1][Lz - 1]\n    results.append(result)\n\n# Print all results\nfor result in results:\n    print(result)", "d", ""], "passed": [false, false, false, false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    # Initialize the 3D grid\n    grid = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n\n    # Fill the 3D grid\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                grid[x][y][z] = int(data[index])\n                index += 1\n\n    # Initialize the prefix sum 4D array\n    prefix_sum = [[[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n\n    # Fill the prefix sum 4D array\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z][0] = prefix_sum[x][y][z-1][0] + grid[x][y][z]\n                prefix_sum[x][y][0][z] = prefix_sum[x][y-1][0][z] + grid[x][y][z]\n                prefix_sum[0][y][z][x] = prefix_sum[0][y][z-1][x] + grid[x][y][z]\n                prefix_sum[x][y][z][0] = prefix_sum[x][y][z-1][0] + prefix_sum[x][y-1][0][z] + prefix_sum[0][y][z-1][x] - prefix_sum[0][y-1][z-1][x] + grid[x][y][z]\n\n    Q = int(data[index])\n    index += 1\n\n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n\n        result = (prefix_sum[Rx][Ry][Rz][0] -\n                  prefix_sum[Lx-1][Ry][Rz][0] -\n                  prefix_sum[Rx][Ly-1][Rz][0] -\n                  prefix_sum[Rx][Ry][Lz-1][0] +", "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nindex = 1\narray = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n\n# Fill the prefix sum array\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            array[x][y][z] = array[x - 1][y][z] + array[x][y - 1][z] + array[x][y][z - 1] - array[x - 1][y - 1][z - 1] + int(data[index])\n            index += 1\n\nQ = int(data[index])\nindex += 1\nresults = []\n\n# Process each query\nfor _ in range(Q):\n    Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n    index += 6\n    result = array[Rx][Ry][Rz] - array[Lx - 1][Ry][Rz] - array[Rx][Ly - 1][Rz] - array[Rx][Ry][Lz - 1] + array[Lx - 1][Ly - 1][Rz] + array[Lx - 1][Ry][Lz - 1] + array[Rx][Ly - 1][Lz - 1] - array[Lx - 1][Ly - 1][Lz - 1]\n    results.append(result)\n\n# Print all results\nfor result in results:\n    print(result)", "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Create the 3D array A\n    A = [[[0] * N for _ in range(N)] for _ in range(N)]\n    for x in range(N):\n        for y in range(N):\n            A[x][y] = list(map(int, data[index:index+N]))\n            index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    # Create the 4D prefix sum array\n    prefix_sum = [[[[0] * (N+1) for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z][0] = A[x-1][y-1][z-1] + prefix_sum[x-1][y-1][z-1][0]\n    \n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        \n        result = (\n            prefix_sum[Rx][Ry][Rz][0] -\n            prefix_sum[Lx-1][Ry][Rz][0] -\n            prefix_sum[Rx][Ly-1][Rz][0] -\n            prefix_sum[Rx][Ry][Lz-1][0] +\n            prefix_sum[Lx-1][Ly-1][Rz][0] +\n            prefix_sum[Lx-1][Ry][Lz-1][0] +\n            prefix_sum[Rx][Ly-1][Lz-1][0] -\n            prefix_sum[Lx-1][Ly-1][Lz-1][0]\n        )\n        \n        results.append(result)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\nprocess_queries()", ""]}
{"task_id": "abc370_d", "codes": ["def main():\\n    import sys\\n    input = sys.stdin.read\\n    data = input().split()\\n    H = int(data[0])\\n    W = int(data[1])\\n    Q = int(data[2])\\n    queries = [(int(data[3 + 2 * i]), int(data[4 + 2 * i])) for i in range(Q)]\\n    walls = {(i, j) for i in range(H) for j in range(W)}\\n    for r, c in queries:\\n        if (r - 1, c - 1) in walls:\\n            walls.remove((r - 1, c - 1))\\n        else:\\n            # Find the first wall above\\n            for i in range(r - 2, -1, -1):\\n                if (i, c - 1) in walls:\\n                    walls.remove((i, c - 1))\\n                    break\\n            # Find the first wall below\\n            for i in range(r, H):\\n                if (i, c - 1) in walls:\\n                    walls.remove((i, c - 1))\\n                    break\\n            # Find the first wall to the left\\n            for j in range(c - 2, -1, -1):\\n                if (r - 1, j) in walls:\\n                    walls.remove((r - 1, j))\\n                    break\\n            # Find the first wall to the right\\n            for j in range(c, W):\\n                if (r - 1, j) in walls:\\n                    walls.remove((r - 1, j))\\n                    break\\n    print(len(walls))\\n\\nmain()", "def main():\\n    import sys\\n    input = sys.stdin.read\\n    data = input().split()\\n\\n    H = int(data[0])\\n    W = int(data[1])\\n    Q = int(data[2])\\n\\n    grid = [[True] * W for _ in range(H)]\\n\\n    index = 3\\n    for _ in range(Q):\\n        r = int(data[index]) - 1\\n        c = int(data[index + 1]) - 1\\n        index += 2\\n\\n        if grid[r][c]:\\n            grid[r][c] = False\\n        else:\\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\\n                i, j = r, c\\n                while True:\\n                    ni, nj = i + dr, j + dc\\n                    if not (0 <= ni < H and 0 <= nj < W):\\n                        break\\n                    if grid[ni][nj]:\\n                        grid[ni][nj] = False\\n                        break\\n                    i, j = ni, nj\\n\\n    remaining_walls = sum(sum(row) for row in grid)\\n    print(remaining_walls)\\n\\nif __name__ == '__main__':\\n    main()", "d", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n\n    # Initialize the set of walls\n    walls = set()\n    for i in range(H):\n        for j in range(W):\n            walls.add((i, j))\n\n    index = 3\n    for _ in range(Q):\n        R_q = int(data[index]) - 1\n        C_q = int(data[index + 1]) - 1\n        index += 2\n\n        if (R_q, C_q) in walls:\n            walls.remove((R_q, C_q))\n        else:\n            # Find and destroy the first walls in the specified directions\n            for i in range(R_q - 1, -1, -1):\n                if (i, C_q) in walls:\n                    walls.remove((i, C_q))\n                    break\n            for i in range(R_q + 1, H):\n                if (i, C_q) in walls:\n                    walls.remove((i, C_q))\n                    break\n            for j in range(C_q - 1, -1, -1):\n                if (R_q, j) in walls:\n                    walls.remove((R_q, j))\n                    break\n            for j in range(C_q + 1, W):\n                if (R_q, j) in walls:\n                    walls.remove((R_q, j))\n                    break\n\n    print(H * W - len(walls))\n\nmain()"], "passed": [false, false, false, false], "raw_code": ["def main():\\n    import sys\\n    input = sys.stdin.read\\n    data = input().split()\\n    H = int(data[0])\\n    W = int(data[1])\\n    Q = int(data[2])\\n    queries = [(int(data[3 + 2 * i]), int(data[4 + 2 * i])) for i in range(Q)]\\n    walls = {(i, j) for i in range(H) for j in range(W)}\\n    for r, c in queries:\\n        if (r - 1, c - 1) in walls:\\n            walls.remove((r - 1, c - 1))\\n        else:\\n            # Find the first wall above\\n            for i in range(r - 2, -1, -1):\\n                if (i, c - 1) in walls:\\n                    walls.remove((i, c - 1))\\n                    break\\n            # Find the first wall below\\n            for i in range(r, H):\\n                if (i, c - 1) in walls:\\n                    walls.remove((i, c - 1))\\n                    break\\n            # Find the first wall to the left\\n            for j in range(c - 2, -1, -1):\\n                if (r - 1, j) in walls:\\n                    walls.remove((r - 1, j))\\n                    break\\n            # Find the first wall to the right\\n            for j in range(c, W):\\n                if (r - 1, j) in walls:\\n                    walls.remove((r - 1, j))\\n                    break\\n    print(len(walls))\\n\\nmain()", "def main():\\n    import sys\\n    input = sys.stdin.read\\n    data = input().split()\\n\\n    H = int(data[0])\\n    W = int(data[1])\\n    Q = int(data[2])\\n\\n    grid = [[True] * W for _ in range(H)]\\n\\n    index = 3\\n    for _ in range(Q):\\n        r = int(data[index]) - 1\\n        c = int(data[index + 1]) - 1\\n        index += 2\\n\\n        if grid[r][c]:\\n            grid[r][c] = False\\n        else:\\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\\n                i, j = r, c\\n                while True:\\n                    ni, nj = i + dr, j + dc\\n                    if not (0 <= ni < H and 0 <= nj < W):\\n                        break\\n                    if grid[ni][nj]:\\n                        grid[ni][nj] = False\\n                        break\\n                    i, j = ni, nj\\n\\n    remaining_walls = sum(sum(row) for row in grid)\\n    print(remaining_walls)\\n\\nif __name__ == '__main__':\\n    main()", "```python\ndef destroy_walls():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    \n    grid = [[1] * W for _ in range(H)]\n    index = 3\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C] == 1:\n            grid[R][C] = 0\n        else:\n            for i in range(R - 1, -1, -1):\n                if grid[i][C] == 1:\n                    grid[i][C] = 0\n                    break\n            for i in range(R + 1, H):\n                if grid[i][C] == 1:\n                    grid[i][C] = 0\n                    break\n            for j in range(C - 1, -1, -1):\n                if grid[R][j] == 1:\n                    grid[R][j] = 0\n                    break\n            for j in range(C + 1, W):\n                if grid[R][j] == 1:\n                    grid[R][j] = 0\n                    break\n    \n    remaining_walls = sum(row.count(1) for row in grid)\n    print(remaining_walls)\n\ndestroy_walls()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n\n    # Initialize the set of walls\n    walls = set()\n    for i in range(H):\n        for j in range(W):\n            walls.add((i, j))\n\n    index = 3\n    for _ in range(Q):\n        R_q = int(data[index]) - 1\n        C_q = int(data[index + 1]) - 1\n        index += 2\n\n        if (R_q, C_q) in walls:\n            walls.remove((R_q, C_q))\n        else:\n            # Find and destroy the first walls in the specified directions\n            for i in range(R_q - 1, -1, -1):\n                if (i, C_q) in walls:\n                    walls.remove((i, C_q))\n                    break\n            for i in range(R_q + 1, H):\n                if (i, C_q) in walls:\n                    walls.remove((i, C_q))\n                    break\n            for j in range(C_q - 1, -1, -1):\n                if (R_q, j) in walls:\n                    walls.remove((R_q, j))\n                    break\n            for j in range(C_q + 1, W):\n                if (R_q, j) in walls:\n                    walls.remove((R_q, j))\n                    break\n\n    print(H * W - len(walls))\n\nmain()"]}
{"task_id": "abc365_d", "codes": ["def max_wins(N, S):\n    # Initialize variables\n    takahashi_wins = 0\n    previous_move = None\n    \n    for move in S:\n        if move == 'R':\n            if previous_move != 'P':\n                takahashi_wins += 1\n                previous_move = 'P'\n            elif previous_move != 'S':\n                takahashi_wins += 1\n                previous_move = 'S'\n        elif move == 'P':\n            if previous_move != 'S':\n                takahashi_wins += 1\n                previous_move = 'S'\n            elif previous_move != 'R':\n                takahashi_wins += 1\n                previous_move = 'R'\n        elif move == 'S':\n            if previous_move != 'R':\n                takahashi_wins += 1\n                previous_move = 'R'\n            elif previous_move != 'P':\n                takahashi_wins += 1\n                previous_move = 'P'\n    \n    return takahashi_wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "def max_wins(N, S):\n    wins = 0\n    prev_move = None\n    \n    for move in S:\n        if move == 'R':\n            if prev_move != 'S':\n                wins += 1\n                prev_move = 'S'\n            elif prev_move == 'S':\n                prev_move = 'P'\n        elif move == 'P':\n            if prev_move != 'R':\n                wins += 1\n                prev_move = 'R'\n            elif prev_move == 'R':\n                prev_move = 'S'\n        elif move == 'S':\n            if prev_move != 'P':\n                wins += 1\n                prev_move = 'P'\n            elif prev_move == 'P':\n                prev_move = 'R'\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Calculate and print the result\nprint(max_wins(N, S))", "", "def max_wins(N, S):\n    # Initialize variables\n    takahashi_wins = 0\n    previous_takahashi_move = None\n\n    # Iterate through Aoki's moves\n    for move in S:\n        if move == 'R':\n            # If Aoki plays Rock, Takahashi should play Paper or Scissors\n            takahashi_move = 'P' if previous_takahashi_move != 'P' else 'S'\n        elif move == 'P':\n            # If Aoki plays Paper, Takahashi should play Rock or Scissors\n            takahashi_move = 'R' if previous_takahashi_move != 'R' else 'S'\n        else:\n            # If Aoki plays Scissors, Takahashi should play Rock or Paper\n            takahashi_move = 'R' if previous_takahashi_move != 'R' else 'P'\n\n        # Check if Takahashi wins\n        if takahashi_move == move:\n            takahashi_wins += 1\n\n        # Update the previous move for Takahashi\n        previous_takahashi_move = takahashi_move\n\n    return takahashi_wins\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\nN, S = input().split()\nN = int(N)\nprint(max_wins(N, S))"], "passed": [false, false, false, false], "raw_code": ["```python\ndef max_wins(N, S):\n    # Initialize variables\n    takahashi_wins = 0\n    previous_move = None\n    \n    for move in S:\n        if move == 'R':\n            if previous_move != 'P':\n                takahashi_wins += 1\n                previous_move = 'P'\n            elif previous_move != 'S':\n                takahashi_wins += 1\n                previous_move = 'S'\n        elif move == 'P':\n            if previous_move != 'S':\n                takahashi_wins += 1\n                previous_move = 'S'\n            elif previous_move != 'R':\n                takahashi_wins += 1\n                previous_move = 'R'\n        elif move == 'S':\n            if previous_move != 'R':\n                takahashi_wins += 1\n                previous_move = 'R'\n            elif previous_move != 'P':\n                takahashi_wins += 1\n                previous_move = 'P'\n    \n    return takahashi_wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```", "```python\ndef max_wins(N, S):\n    wins = 0\n    prev_move = None\n    \n    for move in S:\n        if move == 'R':\n            if prev_move != 'S':\n                wins += 1\n                prev_move = 'S'\n            elif prev_move == 'S':\n                prev_move = 'P'\n        elif move == 'P':\n            if prev_move != 'R':\n                wins += 1\n                prev_move = 'R'\n            elif prev_move == 'R':\n                prev_move = 'S'\n        elif move == 'S':\n            if prev_move != 'P':\n                wins += 1\n                prev_move = 'P'\n            elif prev_move == 'P':\n                prev_move = 'R'\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Calculate and print the result\nprint(max_wins(N, S))\n```", "", "def max_wins(N, S):\n    # Initialize variables\n    takahashi_wins = 0\n    previous_takahashi_move = None\n\n    # Iterate through Aoki's moves\n    for move in S:\n        if move == 'R':\n            # If Aoki plays Rock, Takahashi should play Paper or Scissors\n            takahashi_move = 'P' if previous_takahashi_move != 'P' else 'S'\n        elif move == 'P':\n            # If Aoki plays Paper, Takahashi should play Rock or Scissors\n            takahashi_move = 'R' if previous_takahashi_move != 'R' else 'S'\n        else:\n            # If Aoki plays Scissors, Takahashi should play Rock or Paper\n            takahashi_move = 'R' if previous_takahashi_move != 'R' else 'P'\n\n        # Check if Takahashi wins\n        if takahashi_move == move:\n            takahashi_wins += 1\n\n        # Update the previous move for Takahashi\n        previous_takahashi_move = takahashi_move\n\n    return takahashi_wins\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\nN, S = input().split()\nN = int(N)\nprint(max_wins(N, S))"]}
{"task_id": "3510", "codes": ["def maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    n = len(maximumHeight)\n    total_sum = 0\n    \n    for i in range(n):\n        if i + 1 > maximumHeight[i]:\n            return -1\n        total_sum += i + 1\n    \n    return total_sum", "def maxTowerHeight(maximumHeight):\n    n = len(maximumHeight)\n    total_sum = n * (n + 1) // 2\n    \n    if total_sum > sum(maximumHeight):\n        return -1\n    \n    maximumHeight.sort()\n    height = 1\n    assigned_heights = [0] * n\n    \n    for i in range(n):\n        if height <= maximumHeight[i]:\n            assigned_heights[i] = height\n            height += 1\n        else:\n            return -1\n    \n    return sum(assigned_heights)", "def maxTowerHeight(maximumHeight):\n    # Sort the maximumHeight array in ascending order\n    maximumHeight.sort()\n    \n    # Set to keep track of assigned heights\n    assigned_heights = set()\n    \n    # Variable to store the total sum of assigned heights\n    total_sum = 0\n    \n    # Iterate through the sorted maximumHeight array\n    for height in maximumHeight:\n        # Find the smallest available height that is less than or equal to the current height and not already assigned\n        assigned = False\n        for h in range(1, height + 1):\n            if h not in assigned_heights:\n                assigned_heights.add(h)\n                total_sum += h\n                assigned = True\n                break\n        \n        # If no valid height was found, return -1\n        if not assigned:\n            return -1\n    \n    return total_sum", "def maxTowerHeight(maximumHeight):\n    # Sort the maximumHeight array in descending order\n    sorted_heights = sorted(maximumHeight, reverse=True)\n    \n    # Initialize variables to keep track of the current height and the sum\n    current_height = 1\n    total_sum = 0\n    \n    # Iterate through the sorted heights\n    for mh in sorted_heights:\n        if current_height > mh:\n            return -1\n        total_sum += current_height\n        current_height += 1\n    \n    return total_sum"], "passed": [false, false, false, false], "raw_code": ["```python\ndef maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    n = len(maximumHeight)\n    total_sum = 0\n    \n    for i in range(n):\n        if i + 1 > maximumHeight[i]:\n            return -1\n        total_sum += i + 1\n    \n    return total_sum\n```", "```python\ndef maxTowerHeight(maximumHeight):\n    n = len(maximumHeight)\n    total_sum = n * (n + 1) // 2\n    \n    if total_sum > sum(maximumHeight):\n        return -1\n    \n    maximumHeight.sort()\n    height = 1\n    assigned_heights = [0] * n\n    \n    for i in range(n):\n        if height <= maximumHeight[i]:\n            assigned_heights[i] = height\n            height += 1\n        else:\n            return -1\n    \n    return sum(assigned_heights)\n```", "```python\ndef maxTowerHeight(maximumHeight):\n    # Sort the maximumHeight array in ascending order\n    maximumHeight.sort()\n    \n    # Set to keep track of assigned heights\n    assigned_heights = set()\n    \n    # Variable to store the total sum of assigned heights\n    total_sum = 0\n    \n    # Iterate through the sorted maximumHeight array\n    for height in maximumHeight:\n        # Find the smallest available height that is less than or equal to the current height and not already assigned\n        assigned = False\n        for h in range(1, height + 1):\n            if h not in assigned_heights:\n                assigned_heights.add(h)\n                total_sum += h\n                assigned = True\n                break\n        \n        # If no valid height was found, return -1\n        if not assigned:\n            return -1\n    \n    return total_sum\n```", "```python\ndef maxTowerHeight(maximumHeight):\n    # Sort the maximumHeight array in descending order\n    sorted_heights = sorted(maximumHeight, reverse=True)\n    \n    # Initialize variables to keep track of the current height and the sum\n    current_height = 1\n    total_sum = 0\n    \n    # Iterate through the sorted heights\n    for mh in sorted_heights:\n        if current_height > mh:\n            return -1\n        total_sum += current_height\n        current_height += 1\n    \n    return total_sum\n```"]}
{"final_accuracy": "0.00%"}
{"difficulty": "medium", "num_threads": 32, "temperature": 0.7, "n": 4, "context": "all", "selection": "oracle", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_parallel_sample_vanilla_bug_trace_TPL_CODEEXECUTOR_qwen_7b_medium_n_4.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"final_accuracy": "0.00%"}
