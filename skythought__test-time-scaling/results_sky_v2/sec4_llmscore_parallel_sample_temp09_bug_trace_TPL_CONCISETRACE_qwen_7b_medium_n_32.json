{"difficulty": "medium", "num_threads": 32, "temperature": 0.9, "n": 32, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_CONCISETRACE_qwen_7b_medium_n_32.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3485", "code": "def max_score(start, d):\n    return 2 * d", "passed": false, "raw_code": "```python\ndef max_score(start, d):\n    return 2 * d\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()", "passed": true, "raw_code": "```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_sequences()\n```"}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```"}
{"task_id": "3518", "code": "def max_score(a, b):\n    # Pair each element in a with its corresponding absolute value in b\n    paired = [(a[i], abs(b[i])) for i in range(4)]\n    \n    # Sort pairs based on the product of the pair\n    paired.sort(key=lambda x: x[0] * x[1])\n    \n    # Select the top 4 pairs and calculate the sum of their products\n    max_sum = sum(a[i] * b[i] for i in range(4))\n    \n    return max_sum", "passed": false, "raw_code": "```python\ndef max_score(a, b):\n    # Pair each element in a with its corresponding absolute value in b\n    paired = [(a[i], abs(b[i])) for i in range(4)]\n    \n    # Sort pairs based on the product of the pair\n    paired.sort(key=lambda x: x[0] * x[1])\n    \n    # Select the top 4 pairs and calculate the sum of their products\n    max_sum = sum(a[i] * b[i] for i in range(4))\n    \n    return max_sum\n```"}
{"task_id": "abc366_c", "code": "def solve():\n    Q = int(input())\n    queries = [input().split() for _ in range(Q)]\n\n    bag = set()\n    count_map = {}\n    result = []\n\n    for query in queries:\n        if query[0] == '1':\n            x = int(query[1])\n            bag.add(x)\n            if x in count_map:\n                count_map[x] += 1\n            else:\n                count_map[x] = 1\n        elif query[0] == '2':\n            x = int(query[1])\n            bag.remove(x)\n            count_map[x] -= 1\n            if count_map[x] == 0:\n                del count_map[x]\n        elif query[0] == '3':\n            result.append(len(bag))\n\n    for r in result:\n        print(r)\n\nsolve()", "passed": false, "raw_code": "```python\ndef solve():\n    Q = int(input())\n    queries = [input().split() for _ in range(Q)]\n\n    bag = set()\n    count_map = {}\n    result = []\n\n    for query in queries:\n        if query[0] == '1':\n            x = int(query[1])\n            bag.add(x)\n            if x in count_map:\n                count_map[x] += 1\n            else:\n                count_map[x] = 1\n        elif query[0] == '2':\n            x = int(query[1])\n            bag.remove(x)\n            count_map[x] -= 1\n            if count_map[x] == 0:\n                del count_map[x]\n        elif query[0] == '3':\n            result.append(len(bag))\n\n    for r in result:\n        print(r)\n\nsolve()\n```"}
{"task_id": "3496", "code": "def minTime(mountainHeight, workerTimes):\n    def canReduce(height, t):\n        total_time = 0\n        for time in workerTimes:\n            x = 0\n            while time * (x * (x + 1)) // 2 <= t:\n                x += 1\n            x -= 1\n            total_time += time * (x * (x + 1)) // 2\n            height -= x\n            if height <= 0:\n                return True\n        return False\n\n    left, right = 0, mountainHeight * workerTimes[0]\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minTime(mountainHeight, workerTimes):\n    def canReduce(height, t):\n        total_time = 0\n        for time in workerTimes:\n            x = 0\n            while time * (x * (x + 1)) // 2 <= t:\n                x += 1\n            x -= 1\n            total_time += time * (x * (x + 1)) // 2\n            height -= x\n            if height <= 0:\n                return True\n        return False\n\n    left, right = 0, mountainHeight * workerTimes[0]\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "abc372_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    results = []\n    \n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N):\n            if max(heights[i:j]) <= heights[j]:\n                count += 1\n        results.append(count)\n    \n    print(' '.join(map(str, results)))\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    results = []\n    \n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N):\n            if max(heights[i:j]) <= heights[j]:\n                count += 1\n        results.append(count)\n    \n    print(' '.join(map(str, results)))\n\nmain()\n```"}
{"task_id": "3526", "code": "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flip_row(row):\n        flips = 0\n        for i in range(n // 2):\n            if row[i] != row[n - 1 - i]:\n                flips += 1\n        return flips\n    \n    def flip_col(col):\n        flips = 0\n        for i in range(m // 2):\n            if grid[i][col] != grid[m - 1 - i][col]:\n                flips += 1\n        return flips\n    \n    total_flips_row = sum(flip_row(grid[i]) for i in range(m))\n    total_flips_col = sum(flip_col(j) for j in range(n))\n    \n    return min(total_flips_row, total_flips_col)", "passed": true, "raw_code": "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flip_row(row):\n        flips = 0\n        for i in range(n // 2):\n            if row[i] != row[n - 1 - i]:\n                flips += 1\n        return flips\n    \n    def flip_col(col):\n        flips = 0\n        for i in range(m // 2):\n            if grid[i][col] != grid[m - 1 - i][col]:\n                flips += 1\n        return flips\n    \n    total_flips_row = sum(flip_row(grid[i]) for i in range(m))\n    total_flips_col = sum(flip_col(j) for j in range(n))\n    \n    return min(total_flips_row, total_flips_col)\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        substring_sum = sum(ord(char) - ord('a') for char in substring)\n        hashedChar = substring_sum % 26\n        result += chr(hashedChar + ord('a'))\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        substring_sum = sum(ord(char) - ord('a') for char in substring)\n        hashedChar = substring_sum % 26\n        result += chr(hashedChar + ord('a'))\n    return result\n```"}
{"task_id": "3534", "code": "def almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        str1 = str(nums[i])\n        for j in range(i + 1, n):\n            str2 = str(nums[j])\n            for k in range(len(str1)):\n                for l in range(k + 1, len(str1)):\n                    swapped_str1 = str1[:k] + str1[l] + str1[k + 1:l] + str1[k] + str1[l + 1:]\n                    if swapped_str1 == str2:\n                        count += 1\n                    swapped_str2 = str2[:k] + str2[l] + str2[k + 1:l] + str2[k] + str2[l + 1:]\n                    if swapped_str2 == str1:\n                        count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        str1 = str(nums[i])\n        for j in range(i + 1, n):\n            str2 = str(nums[j])\n            for k in range(len(str1)):\n                for l in range(k + 1, len(str1)):\n                    swapped_str1 = str1[:k] + str1[l] + str1[k + 1:l] + str1[k] + str1[l + 1:]\n                    if swapped_str1 == str2:\n                        count += 1\n                    swapped_str2 = str2[:k] + str2[l] + str2[k + 1:l] + str2[k] + str2[l + 1:]\n                    if swapped_str2 == str1:\n                        count += 1\n    \n    return count\n```"}
{"task_id": "3495", "code": "from sortedcontainers import SortedList\n\ndef kthSmallestDistance(queries, k):\n    distances = SortedList()\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        distances.add(distance)\n        \n        if len(distances) < k:\n            results.append(-1)\n        else:\n            results.append(distances[k - 1])\n    \n    return results", "passed": true, "raw_code": "```python\nfrom sortedcontainers import SortedList\n\ndef kthSmallestDistance(queries, k):\n    distances = SortedList()\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        distances.add(distance)\n        \n        if len(distances) < k:\n            results.append(-1)\n        else:\n            results.append(distances[k - 1])\n    \n    return results\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1] - energyDrinkB[i-1] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1] - energyDrinkA[i-1] + energyDrinkB[i])\n    \n    return max(dp_A[n-1], dp_B[n-1])", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1] - energyDrinkB[i-1] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1] - energyDrinkA[i-1] + energyDrinkB[i])\n    \n    return max(dp_A[n-1], dp_B[n-1])\n```"}
{"task_id": "3522", "code": "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if is_consecutive_sorted(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n\ndef is_consecutive_sorted(arr):\n    return arr == sorted(arr) and all(arr[j] - arr[j - 1] == 1 for j in range(1, len(arr)))", "passed": true, "raw_code": "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if is_consecutive_sorted(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n\ndef is_consecutive_sorted(arr):\n    return arr == sorted(arr) and all(arr[j] - arr[j - 1] == 1 for j in range(1, len(arr)))\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by strength in descending order\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    for i in range(N):\n        if (i + 1) % 2 == 0:\n            # Even-indexed monster (1-based index), get extra strength\n            total_experience += A[i] * 2\n        else:\n            # Odd-indexed monster (1-based index), get normal strength\n            total_experience += A[i]\n    \n    print(total_experience)\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by strength in descending order\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    for i in range(N):\n        if (i + 1) % 2 == 0:\n            # Even-indexed monster (1-based index), get extra strength\n            total_experience += A[i] * 2\n        else:\n            # Odd-indexed monster (1-based index), get normal strength\n            total_experience += A[i]\n    \n    print(total_experience)\n\nmax_experience_points()\n```"}
{"task_id": "abc367_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (prefix_sum[j] - prefix_sum[i]) % M == 0:\n                count += 1\n            if (prefix_sum[i] - prefix_sum[j]) % M == 0:\n                count += 1\n\n    print(count)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n\n    # Calculate prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (prefix_sum[j] - prefix_sum[i]) % M == 0:\n                count += 1\n            if (prefix_sum[i] - prefix_sum[j]) % M == 0:\n                count += 1\n\n    print(count)\n\nmain()\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions(N, A):\n    count = 0\n    for l in range(N):\n        for r in range(l, N):\n            if r - l == 0:\n                count += 1\n                continue\n            d = A[l+1] - A[l]\n            valid = True\n            for i in range(l + 1, r):\n                if A[i+1] - A[i] != d:\n                    valid = False\n                    break\n            if valid:\n                count += 1\n    print(count)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:]))\n\ncount_arithmetic_progressions(N, A)", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions(N, A):\n    count = 0\n    for l in range(N):\n        for r in range(l, N):\n            if r - l == 0:\n                count += 1\n                continue\n            d = A[l+1] - A[l]\n            valid = True\n            for i in range(l + 1, r):\n                if A[i+1] - A[i] != d:\n                    valid = False\n                    break\n            if valid:\n                count += 1\n    print(count)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:]))\n\ncount_arithmetic_progressions(N, A)\n```"}
{"task_id": "abc367_c", "code": "import sys\n\ndef print_sequences(N, K, R):\n    def backtrack(pos, current_sum, sequence):\n        if pos == N:\n            if current_sum % K == 0:\n                print(' '.join(map(str, sequence)))\n            return\n        for i in range(1, R[pos] + 1):\n            if current_sum + i <= K * 10:  # A heuristic to avoid unnecessary work\n                backtrack(pos + 1, current_sum + i, sequence + [i])\n\n    backtrack(0, 0, [])\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    print_sequences(N, K, R)", "passed": false, "raw_code": "```python\nimport sys\n\ndef print_sequences(N, K, R):\n    def backtrack(pos, current_sum, sequence):\n        if pos == N:\n            if current_sum % K == 0:\n                print(' '.join(map(str, sequence)))\n            return\n        for i in range(1, R[pos] + 1):\n            if current_sum + i <= K * 10:  # A heuristic to avoid unnecessary work\n                backtrack(pos + 1, current_sum + i, sequence + [i])\n\n    backtrack(0, 0, [])\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    print_sequences(N, K, R)\n```"}
{"task_id": "3517", "code": "import networkx as nx\n\ndef shortest_path_after_queries(n, queries):\n    # Create a directed graph\n    G = nx.DiGraph()\n    \n    # Add initial roads from city i to city i + 1 for all 0 <= i < n - 1\n    for i in range(n - 1):\n        G.add_edge(i, i + 1, weight=1)\n    \n    # Function to calculate the shortest path from city 0 to city n - 1\n    def shortest_path():\n        return nx.shortest_path_length(G, source=0, target=n-1, weight='weight')\n    \n    # List to store the result\n    result = []\n    \n    # Process each query\n    for u, v in queries:\n        # Add the new road to the graph\n        G.add_edge(u, v, weight=1)\n        # Calculate the shortest path and store it\n        result.append(shortest_path())\n    \n    return result", "passed": true, "raw_code": "```python\nimport networkx as nx\n\ndef shortest_path_after_queries(n, queries):\n    # Create a directed graph\n    G = nx.DiGraph()\n    \n    # Add initial roads from city i to city i + 1 for all 0 <= i < n - 1\n    for i in range(n - 1):\n        G.add_edge(i, i + 1, weight=1)\n    \n    # Function to calculate the shortest path from city 0 to city n - 1\n    def shortest_path():\n        return nx.shortest_path_length(G, source=0, target=n-1, weight='weight')\n    \n    # List to store the result\n    result = []\n    \n    # Process each query\n    for u, v in queries:\n        # Add the new road to the graph\n        G.add_edge(u, v, weight=1)\n        # Calculate the shortest path and store it\n        result.append(shortest_path())\n    \n    return result\n```"}
{"task_id": "3559", "code": "def minimumConcatenations(words, target):\n    from collections import defaultdict\n    \n    word_lengths = defaultdict(list)\n    for word in words:\n        for length in range(1, len(word) + 1):\n            word_lengths[word[:length]].append(len(word))\n    \n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for prefix in word_lengths:\n            if i >= len(prefix) and target[i - len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    return dp[n] if dp[n] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef minimumConcatenations(words, target):\n    from collections import defaultdict\n    \n    word_lengths = defaultdict(list)\n    for word in words:\n        for length in range(1, len(word) + 1):\n            word_lengths[word[:length]].append(len(word))\n    \n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for prefix in word_lengths:\n            if i >= len(prefix) and target[i - len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    return dp[n] if dp[n] != float('inf') else -1\n```"}
{"task_id": "abc371_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input values\n    N = int(data[0])\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = [(int(data[2*N+2 + 2*i]), int(data[2*N+3 + 2*i])) for i in range(Q)]\n\n    # Create prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + P[i]\n\n    # Answer each query\n    for L, R in queries:\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input values\n    N = int(data[0])\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = [(int(data[2*N+2 + 2*i]), int(data[2*N+3 + 2*i])) for i in range(Q)]\n\n    # Create prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + P[i]\n\n    # Answer each query\n    for L, R in queries:\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "3558", "code": "def can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 1  # Mark as visited\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy, health - temp):\n                return True\n        \n        grid[x][y] = temp  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 1  # Mark as visited\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy, health - temp):\n                return True\n        \n        grid[x][y] = temp  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    # Initialize the count of wins\n    wins = 0\n    \n    # Iterate through Aoki's moves\n    for i in range(N):\n        if i % 2 == 0:\n            # If it's Takahashi's turn to win (even index)\n            if S[i] == 'R':\n                wins += 1\n            elif S[i] == 'P':\n                wins += 1\n            elif S[i] == 'S':\n                wins += 1\n        else:\n            # If it's Aoki's turn to play (odd index)\n            if S[i] == 'R' and S[i-1] == 'P':\n                wins += 1\n            elif S[i] == 'P' and S[i-1] == 'S':\n                wins += 1\n            elif S[i] == 'S' and S[i-1] == 'R':\n                wins += 1\n    \n    return wins\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    # Initialize the count of wins\n    wins = 0\n    \n    # Iterate through Aoki's moves\n    for i in range(N):\n        if i % 2 == 0:\n            # If it's Takahashi's turn to win (even index)\n            if S[i] == 'R':\n                wins += 1\n            elif S[i] == 'P':\n                wins += 1\n            elif S[i] == 'S':\n                wins += 1\n        else:\n            # If it's Aoki's turn to play (odd index)\n            if S[i] == 'R' and S[i-1] == 'P':\n                wins += 1\n            elif S[i] == 'P' and S[i-1] == 'S':\n                wins += 1\n            elif S[i] == 'S' and S[i-1] == 'R':\n                wins += 1\n    \n    return wins\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(n, m, a):\n    if sum(a) <= m:\n        return \"infinite\"\n    \n    left, right = 0, max(a)\n    while left < right:\n        mid = (left + right + 1) // 2\n        total_cost = sum(min(mid, ai) for ai in a)\n        if total_cost <= m:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nm = int(data[1])\na = list(map(int, data[2:]))\n\nprint(max_subsidy_limit(n, m, a))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(n, m, a):\n    if sum(a) <= m:\n        return \"infinite\"\n    \n    left, right = 0, max(a)\n    while left < right:\n        mid = (left + right + 1) // 2\n        total_cost = sum(min(mid, ai) for ai in a)\n        if total_cost <= m:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nm = int(data[1])\na = list(map(int, data[2:]))\n\nprint(max_subsidy_limit(n, m, a))\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    target = Counter(word2)\n    current = Counter()\n    start = 0\n    count = 0\n    \n    for end in range(m):\n        current[word1[end]] += 1\n        \n        while current >= target:\n            count += m - end\n            current[word1[start]] -= 1\n            if current[word1[start]] == 0:\n                del current[word1[start]]\n            start += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    target = Counter(word2)\n    current = Counter()\n    start = 0\n    count = 0\n    \n    for end in range(m):\n        current[word1[end]] += 1\n        \n        while current >= target:\n            count += m - end\n            current[word1[start]] -= 1\n            if current[word1[start]] == 0:\n                del current[word1[start]]\n            start += 1\n    \n    return count\n```"}
{"task_id": "3579", "code": "from itertools import permutations\n\ndef max_concatenated_binary(nums):\n    # Convert each number to its binary representation\n    binary_representations = [format(num, 'b') for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = permutations(binary_representations)\n    \n    # Convert each permutation to a decimal number and find the maximum\n    max_num = max(int(''.join(p), 2) for p in perms)\n    \n    return max_num", "passed": true, "raw_code": "```python\nfrom itertools import permutations\n\ndef max_concatenated_binary(nums):\n    # Convert each number to its binary representation\n    binary_representations = [format(num, 'b') for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = permutations(binary_representations)\n    \n    # Convert each permutation to a decimal number and find the maximum\n    max_num = max(int(''.join(p), 2) for p in perms)\n    \n    return max_num\n```"}
{"task_id": "abc370_c", "code": "def min_transformations(S, T):\n    M = len(S)\n    X = []\n    current = S\n    while current != T:\n        # Find the position where the current string differs from T\n        diff_pos = next(i for i in range(M) if current[i] != T[i])\n        # Generate the next state by changing the differing character to match T\n        next_state = current[:diff_pos] + T[diff_pos] + current[diff_pos+1:]\n        X.append(next_state)\n        current = next_state\n    return len(X), X\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read().splitlines()\nS = input[0]\nT = input[1]\n\n# Get the result\nM, X = min_transformations(S, T)\n\n# Print the result\nprint(M)\nfor s in X:\n    print(s)", "passed": false, "raw_code": "def min_transformations(S, T):\n    M = len(S)\n    X = []\n    current = S\n    while current != T:\n        # Find the position where the current string differs from T\n        diff_pos = next(i for i in range(M) if current[i] != T[i])\n        # Generate the next state by changing the differing character to match T\n        next_state = current[:diff_pos] + T[diff_pos] + current[diff_pos+1:]\n        X.append(next_state)\n        current = next_state\n    return len(X), X\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read().splitlines()\nS = input[0]\nT = input[1]\n\n# Get the result\nM, X = min_transformations(S, T)\n\n# Print the result\nprint(M)\nfor s in X:\n    print(s)"}
{"task_id": "abc372_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    \n    def count_ABC(s):\n        count = 0\n        n = len(s)\n        for i in range(n - 2):\n            if s[i:i+3] == 'ABC':\n                count += 1\n        return count\n    \n    current_count = count_ABC(S)\n    results = []\n    \n    index = 3\n    for _ in range(Q):\n        X = int(data[index]) - 1\n        C = data[index + 1]\n        index += 2\n        \n        # Update the string\n        original_char = S[X]\n        S = S[:X] + C + S[X+1:]\n        \n        # Adjust the count of \"ABC\"\n        if X > 0 and X < N - 2:\n            if original_char == 'A' and S[X-1:X+3] == 'ABC':\n                current_count -= 1\n            if C == 'A' and S[X-1:X+3] == 'ABC':\n                current_count += 1\n            if original_char == 'C' and S[X-2:X+1] == 'ABC':\n                current_count -= 1\n            if C == 'C' and S[X-2:X+1] == 'ABC':\n                current_count += 1\n            if original_char == 'B' and S[X-1:X+2] == 'ABC':\n                current_count -= 1\n            if C == 'B' and S[X-1:X+2] == 'ABC':\n                current_count += 1\n        elif X == 0:\n            if original_char == 'A' and S[:3] == 'ABC':\n                current_count -= 1\n            if C == 'A' and S[:3] == 'ABC':\n                current_count += 1\n            if original_char == 'B' and S[:2] == 'AB':\n                current_count -= 1\n            if C == 'B' and S[:2] == 'AB':\n                current_count += 1\n        elif X == N - 1:\n            if original_char == 'C' and S[-3:] == 'ABC':\n                current_count -= 1\n            if C == 'C' and S[-3:] == 'ABC':\n                current_count += 1\n            if original_char == 'B' and S[-2:] == 'BC':\n                current_count -= 1\n            if C == 'B' and S[-2:] == 'BC':\n                current_count += 1\n        \n        results.append(current_count)\n    \n    for result in results:\n        print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    \n    def count_ABC(s):\n        count = 0\n        n = len(s)\n        for i in range(n - 2):\n            if s[i:i+3] == 'ABC':\n                count += 1\n        return count\n    \n    current_count = count_ABC(S)\n    results = []\n    \n    index = 3\n    for _ in range(Q):\n        X = int(data[index]) - 1\n        C = data[index + 1]\n        index += 2\n        \n        # Update the string\n        original_char = S[X]\n        S = S[:X] + C + S[X+1:]\n        \n        # Adjust the count of \"ABC\"\n        if X > 0 and X < N - 2:\n            if original_char == 'A' and S[X-1:X+3] == 'ABC':\n                current_count -= 1\n            if C == 'A' and S[X-1:X+3] == 'ABC':\n                current_count += 1\n            if original_char == 'C' and S[X-2:X+1] == 'ABC':\n                current_count -= 1\n            if C == 'C' and S[X-2:X+1] == 'ABC':\n                current_count += 1\n            if original_char == 'B' and S[X-1:X+2] == 'ABC':\n                current_count -= 1\n            if C == 'B' and S[X-1:X+2] == 'ABC':\n                current_count += 1\n        elif X == 0:\n            if original_char == 'A' and S[:3] == 'ABC':\n                current_count -= 1\n            if C == 'A' and S[:3] == 'ABC':\n                current_count += 1\n            if original_char == 'B' and S[:2] == 'AB':\n                current_count -= 1\n            if C == 'B' and S[:2] == 'AB':\n                current_count += 1\n        elif X == N - 1:\n            if original_char == 'C' and S[-3:] == 'ABC':\n                current_count -= 1\n            if C == 'C' and S[-3:] == 'ABC':\n                current_count += 1\n            if original_char == 'B' and S[-2:] == 'BC':\n                current_count -= 1\n            if C == 'B' and S[-2:] == 'BC':\n                current_count += 1\n        \n        results.append(current_count)\n    \n    for result in results:\n        print(result)\n\nmain()\n```"}
{"task_id": "arc183_a", "code": "import itertools\n\ndef get_good_sequence(N, K):\n    # Generate all good integer sequences\n    elements = [i for i in range(1, N + 1) for _ in range(K)]\n    all_sequences = set(itertools.permutations(elements))\n    \n    # Sort the sequences lexicographically\n    sorted_sequences = sorted(all_sequences)\n    \n    # Calculate the target index\n    target_index = (len(sorted_sequences) + 1) // 2 - 1\n    \n    # Get the target sequence\n    target_sequence = sorted_sequences[target_index]\n    \n    # Print the sequence\n    print(' '.join(map(str, target_sequence)))\n\n# Example usage\nN, K = map(int, input().split())\nget_good_sequence(N, K)", "passed": false, "raw_code": "```python\nimport itertools\n\ndef get_good_sequence(N, K):\n    # Generate all good integer sequences\n    elements = [i for i in range(1, N + 1) for _ in range(K)]\n    all_sequences = set(itertools.permutations(elements))\n    \n    # Sort the sequences lexicographically\n    sorted_sequences = sorted(all_sequences)\n    \n    # Calculate the target index\n    target_index = (len(sorted_sequences) + 1) // 2 - 1\n    \n    # Get the target sequence\n    target_sequence = sorted_sequences[target_index]\n    \n    # Print the sequence\n    print(' '.join(map(str, target_sequence)))\n\n# Example usage\nN, K = map(int, input().split())\nget_good_sequence(N, K)\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        for height in range(mh, 0, -1):\n            if height not in used_heights:\n                used_heights.add(height)\n                total_sum += height\n                break\n        else:\n            return -1\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        for height in range(mh, 0, -1):\n            if height not in used_heights:\n                used_heights.add(height)\n                total_sum += height\n                break\n        else:\n            return -1\n    \n    return total_sum\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    queries = [(int(data[3 + 2 * i]), int(data[4 + 2 * i])) for i in range(Q)]\n    walls = set((i, j) for i in range(H) for j in range(W))\n    for r, c in queries:\n        if (r - 1, c - 1) in walls:\n            walls.remove((r - 1, c - 1))\n        else:\n            for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                ni, nj = r - 1, c - 1\n                while 0 <= ni < H and 0 <= nj < W:\n                    if (ni, nj) in walls:\n                        walls.remove((ni, nj))\n                        break\n                    ni += di\n                    nj += dj\n    print(len(walls))\n\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    queries = [(int(data[3 + 2 * i]), int(data[4 + 2 * i])) for i in range(Q)]\n    walls = set((i, j) for i in range(H) for j in range(W))\n    for r, c in queries:\n        if (r - 1, c - 1) in walls:\n            walls.remove((r - 1, c - 1))\n        else:\n            for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                ni, nj = r - 1, c - 1\n                while 0 <= ni < H and 0 <= nj < W:\n                    if (ni, nj) in walls:\n                        walls.remove((ni, nj))\n                        break\n                    ni += di\n                    nj += dj\n    print(len(walls))\n\nmain()"}
{"task_id": "3584", "code": "def smallest_sequence(word1, word2):\n    m, n = len(word1), len(word2)\n    i, j = 0, 0\n    result = []\n\n    while i < m and j < n:\n        if word1[i] == word2[j]:\n            result.append(j)\n            j += 1\n        elif i + 1 < m and word1[i+1] == word2[j]:\n            result.append(j)\n            i += 2\n        else:\n            return []\n\n        i += 1\n\n    if j < n:\n        return []\n\n    return result", "passed": false, "raw_code": "```python\ndef smallest_sequence(word1, word2):\n    m, n = len(word1), len(word2)\n    i, j = 0, 0\n    result = []\n\n    while i < m and j < n:\n        if word1[i] == word2[j]:\n            result.append(j)\n            j += 1\n        elif i + 1 < m and word1[i+1] == word2[j]:\n            result.append(j)\n            i += 2\n        else:\n            return []\n\n        i += 1\n\n    if j < n:\n        return []\n\n    return result\n```"}
{"task_id": "arc181_a", "code": "def min_operations_to_identity_permutation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        count = 0\n        i = 0\n\n        while i < N:\n            if P[i] != i + 1:\n                j = i + 1\n                while j < N and P[j] != i + 1:\n                    j += 1\n                # Sort the segment [i:j]\n                P[i:j] = sorted(P[i:j])\n                count += 1\n            i += 1\n\n        results.append(str(count))\n\n    print('\\n'.join(results))\n\nmin_operations_to_identity_permutation()", "passed": false, "raw_code": "def min_operations_to_identity_permutation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        count = 0\n        i = 0\n\n        while i < N:\n            if P[i] != i + 1:\n                j = i + 1\n                while j < N and P[j] != i + 1:\n                    j += 1\n                # Sort the segment [i:j]\n                P[i:j] = sorted(P[i:j])\n                count += 1\n            i += 1\n\n        results.append(str(count))\n\n    print('\\n'.join(results))\n\nmin_operations_to_identity_permutation()"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    enemies = list(map(int, data[1:]))\n    \n    T = 0\n    while enemies:\n        T += 1\n        if enemies[0] > 0:\n            if T % 3 == 0:\n                enemies[0] -= 3\n            else:\n                enemies[0] -= 1\n            if enemies[0] <= 0:\n                enemies.pop(0)\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    enemies = list(map(int, data[1:]))\n    \n    T = 0\n    while enemies:\n        T += 1\n        if enemies[0] > 0:\n            if T % 3 == 0:\n                enemies[0] -= 3\n            else:\n                enemies[0] -= 1\n            if enemies[0] <= 0:\n                enemies.pop(0)\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "3570", "code": "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    result = 0\n    \n    def has_all_vowels(counts):\n        return all(counts[vowel] > 0 for vowel in vowels)\n    \n    for i in range(n):\n        counts = {vowel: 0 for vowel in vowels}\n        consonant_count = 0\n        \n        for j in range(i, n):\n            if word[j] in vowels:\n                counts[word[j]] += 1\n            else:\n                consonant_count += 1\n            \n            if consonant_count == k and has_all_vowels(counts):\n                result += 1\n    \n    return result", "passed": true, "raw_code": "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    result = 0\n    \n    def has_all_vowels(counts):\n        return all(counts[vowel] > 0 for vowel in vowels)\n    \n    for i in range(n):\n        counts = {vowel: 0 for vowel in vowels}\n        consonant_count = 0\n        \n        for j in range(i, n):\n            if word[j] in vowels:\n                counts[word[j]] += 1\n            else:\n                consonant_count += 1\n            \n            if consonant_count == k and has_all_vowels(counts):\n                result += 1\n    \n    return result\n```"}
{"task_id": "abc366_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    # Initialize the 4D prefix sum array\n    prefix = [[[0 for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n\n    # Read the 3D array and build the prefix sum array\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix[x][y][z] = int(data[index]) + prefix[x-1][y][z] + prefix[x][y-1][z] + prefix[x][y][z-1] - prefix[x-1][y-1][z] - prefix[x-1][y][z-1] - prefix[x][y-1][z-1] + prefix[x-1][y-1][z-1]\n                index += 1\n\n    Q = int(data[index])\n    index += 1\n\n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n\n        result = (\n            prefix[Rx][Ry][Rz] -\n            prefix[Lx-1][Ry][Rz] -\n            prefix[Rx][Ly-1][Rz] -\n            prefix[Rx][Ry][Lz-1] +\n            prefix[Lx-1][Ly-1][Rz] +\n            prefix[Lx-1][Ry][Lz-1] +\n            prefix[Rx][Ly-1][Lz-1] -\n            prefix[Lx-1][Ly-1][Lz-1]\n        )\n        results.append(result)\n\n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    # Initialize the 4D prefix sum array\n    prefix = [[[0 for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n\n    # Read the 3D array and build the prefix sum array\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix[x][y][z] = int(data[index]) + prefix[x-1][y][z] + prefix[x][y-1][z] + prefix[x][y][z-1] - prefix[x-1][y-1][z] - prefix[x-1][y][z-1] - prefix[x][y-1][z-1] + prefix[x-1][y-1][z-1]\n                index += 1\n\n    Q = int(data[index])\n    index += 1\n\n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n\n        result = (\n            prefix[Rx][Ry][Rz] -\n            prefix[Lx-1][Ry][Rz] -\n            prefix[Rx][Ly-1][Rz] -\n            prefix[Rx][Ry][Lz-1] +\n            prefix[Lx-1][Ly-1][Rz] +\n            prefix[Lx-1][Ry][Lz-1] +\n            prefix[Rx][Ly-1][Lz-1] -\n            prefix[Lx-1][Ly-1][Lz-1]\n        )\n        results.append(result)\n\n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc371_c", "code": "def min_cost_to_isomorphize():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read N\n    N = int(data[index])\n    index += 1\n    \n    # Read M_G and edges for graph G\n    M_G = int(data[index])\n    index += 1\n    G_edges = []\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G_edges.append((u, v))\n        index += 2\n    \n    # Read M_H and edges for graph H\n    M_H = int(data[index])\n    index += 1\n    H_edges = []\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H_edges.append((a, b))\n        index += 2\n    \n    # Read edge costs\n    A = [[0] * N for _ in range(N)]\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            A[i][j] = int(data[index])\n            A[j][i] = A[i][j]\n            index += 1\n    \n    # Create adjacency matrices\n    G_adj = [[0] * N for _ in range(N)]\n    for u, v in G_edges:\n        G_adj[u][v] = 1\n        G_adj[v][u] = 1\n    \n    H_adj = [[0] * N for _ in range(N)]\n    for a, b in H_edges:\n        H_adj[a][b] = 1\n        H_adj[b][a] = 1\n    \n    # Calculate the cost to make H isomorphic to G\n    cost = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G_adj[i][j] != H_adj[i][j]:\n                if G_adj[i][j] == 0:\n                    cost += A[i][j]\n                else:\n                    cost += A[i][j]\n    \n    print(cost)\n\n# Call the function\nmin_cost_to_isomorphize()", "passed": false, "raw_code": "```python\ndef min_cost_to_isomorphize():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read N\n    N = int(data[index])\n    index += 1\n    \n    # Read M_G and edges for graph G\n    M_G = int(data[index])\n    index += 1\n    G_edges = []\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G_edges.append((u, v))\n        index += 2\n    \n    # Read M_H and edges for graph H\n    M_H = int(data[index])\n    index += 1\n    H_edges = []\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H_edges.append((a, b))\n        index += 2\n    \n    # Read edge costs\n    A = [[0] * N for _ in range(N)]\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            A[i][j] = int(data[index])\n            A[j][i] = A[i][j]\n            index += 1\n    \n    # Create adjacency matrices\n    G_adj = [[0] * N for _ in range(N)]\n    for u, v in G_edges:\n        G_adj[u][v] = 1\n        G_adj[v][u] = 1\n    \n    H_adj = [[0] * N for _ in range(N)]\n    for a, b in H_edges:\n        H_adj[a][b] = 1\n        H_adj[b][a] = 1\n    \n    # Calculate the cost to make H isomorphic to G\n    cost = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if G_adj[i][j] != H_adj[i][j]:\n                if G_adj[i][j] == 0:\n                    cost += A[i][j]\n                else:\n                    cost += A[i][j]\n    \n    print(cost)\n\n# Call the function\nmin_cost_to_isomorphize()\n```"}
{"final_accuracy": "35.14%"}
