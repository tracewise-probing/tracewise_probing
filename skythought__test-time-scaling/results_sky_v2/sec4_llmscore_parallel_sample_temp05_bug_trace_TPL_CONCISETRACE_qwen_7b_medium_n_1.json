{"difficulty": "medium", "num_threads": 32, "temperature": 0.5, "n": 1, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp05_bug_trace_TPL_CONCISETRACE_qwen_7b_medium_n_1.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3485", "code": "def maxScore(start, d):\n    # Choose the integer d units away from the start of each interval\n    chosen = [s + d for s in start]\n    # Sort the chosen integers\n    chosen.sort()\n    # Calculate the minimum absolute difference between consecutive integers\n    min_diff = min(chosen[i] - chosen[i - 1] for i in range(1, len(chosen)))\n    return min_diff", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    # Choose the integer d units away from the start of each interval\n    chosen = [s + d for s in start]\n    # Sort the chosen integers\n    chosen.sort()\n    # Calculate the minimum absolute difference between consecutive integers\n    min_diff = min(chosen[i] - chosen[i - 1] for i in range(1, len(chosen)))\n    return min_diff\n```"}
{"task_id": "abc372_d", "code": "d", "passed": false, "raw_code": "```python\ndef count_visible_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            if max(heights[i + 1:j]) < heights[j]:\n                result[i] += 1\n            else:\n                break\n    \n    print(' '.join(map(str, result)))\n\ncount_visible_buildings()"}
{"task_id": "3541", "code": "def isSpam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef isSpam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    # Sort array b in ascending order\n    b.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate over the sorted array b and multiply with corresponding elements in a\n    for i in range(4):\n        score += a[i] * b[len(b) - 1 - i]\n    \n    return score", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    # Sort array b in ascending order\n    b.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate over the sorted array b and multiply with corresponding elements in a\n    for i in range(4):\n        score += a[i] * b[len(b) - 1 - i]\n    \n    return score\n```"}
{"task_id": "3496", "code": "def minimumTime(mountainHeight, workerTimes):\n    def canReduce(height, workerTimes):\n        totalWork = 0\n        for time in workerTimes:\n            x = 1\n            while time * x * (x + 1) // 2 <= height:\n                x += 1\n            totalWork = max(totalWork, time * x * (x + 1) // 2)\n        return totalWork >= height\n\n    left, right = 1, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mid, workerTimes):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minimumTime(mountainHeight, workerTimes):\n    def canReduce(height, workerTimes):\n        totalWork = 0\n        for time in workerTimes:\n            x = 1\n            while time * x * (x + 1) // 2 <= height:\n                x += 1\n            totalWork = max(totalWork, time * x * (x + 1) // 2)\n        return totalWork >= height\n\n    left, right = 1, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mid, workerTimes):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3517", "code": "from collections import deque\n\ndef shortest_path_after_queries(n, queries):\n    graph = {i: [i + 1] for i in range(n - 1)}\n    result = []\n    \n    def bfs():\n        queue = deque([0])\n        visited = set([0])\n        distance = 0\n        while queue:\n            for _ in range(len(queue)):\n                current = queue.popleft()\n                if current == n - 1:\n                    return distance\n                for neighbor in graph[current]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n            distance += 1\n        return float('inf')\n    \n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs())\n    \n    return result", "passed": true, "raw_code": "```python\nfrom collections import deque\n\ndef shortest_path_after_queries(n, queries):\n    graph = {i: [i + 1] for i in range(n - 1)}\n    result = []\n    \n    def bfs():\n        queue = deque([0])\n        visited = set([0])\n        distance = 0\n        while queue:\n            for _ in range(len(queue)):\n                current = queue.popleft()\n                if current == n - 1:\n                    return distance\n                for neighbor in graph[current]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n            distance += 1\n        return float('inf')\n    \n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs())\n    \n    return result\n```"}
{"task_id": "abc372_c", "code": "def count_abc_substrings(S):\n    n = len(S)\n    count = 0\n    for i in range(1, n-1):\n        if S[i-1:i+2] == \"ABC\":\n            count += 1\n    return count\n\ndef process_queries(N, Q, S, queries):\n    for X, C in queries:\n        X -= 1  # Convert to 0-based index\n        if S[X] != C:\n            # Adjust the counter based on the characters that are added and removed\n            if X > 0 and S[X-1:X+2] == \"ABC\":\n                count -= 1\n            if X < N-2 and S[X+1:X+4] == \"ABC\":\n                count -= 1\n            S = S[:X] + C + S[X+1:]\n            if X > 0 and S[X-1:X+2] == \"ABC\":\n                count += 1\n            if X < N-2 and S[X+1:X+4] == \"ABC\":\n                count += 1\n            print(count)\n\n# Read input\nN, Q = map(int, input().split())\nS = input().strip()\nqueries = [tuple(map(int, input().split())) for _ in range(Q)]\n\n# Process queries\nprocess_queries(N, Q, S, queries)", "passed": false, "raw_code": "```python\ndef count_abc_substrings(S):\n    n = len(S)\n    count = 0\n    for i in range(1, n-1):\n        if S[i-1:i+2] == \"ABC\":\n            count += 1\n    return count\n\ndef process_queries(N, Q, S, queries):\n    for X, C in queries:\n        X -= 1  # Convert to 0-based index\n        if S[X] != C:\n            # Adjust the counter based on the characters that are added and removed\n            if X > 0 and S[X-1:X+2] == \"ABC\":\n                count -= 1\n            if X < N-2 and S[X+1:X+4] == \"ABC\":\n                count -= 1\n            S = S[:X] + C + S[X+1:]\n            if X > 0 and S[X-1:X+2] == \"ABC\":\n                count += 1\n            if X < N-2 and S[X+1:X+4] == \"ABC\":\n                count += 1\n            print(count)\n\n# Read input\nN, Q = map(int, input().split())\nS = input().strip()\nqueries = [tuple(map(int, input().split())) for _ in range(Q)]\n\n# Process queries\nprocess_queries(N, Q, S, queries)\n```"}
{"task_id": "3534", "code": "def almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            \n            for k in range(len(num1)):\n                for l in range(k + 1, len(num1)):\n                    swapped_num1 = num1[:k] + num1[l] + num1[k + 1:l] + num1[k] + num1[l + 1:]\n                    if swapped_num1 == num2:\n                        count += 1\n                        break\n                else:\n                    continue\n                break\n    \n    return count", "passed": false, "raw_code": "```python\ndef almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            \n            for k in range(len(num1)):\n                for l in range(k + 1, len(num1)):\n                    swapped_num1 = num1[:k] + num1[l] + num1[k + 1:l] + num1[k] + num1[l + 1:]\n                    if swapped_num1 == num2:\n                        count += 1\n                        break\n                else:\n                    continue\n                break\n    \n    return count\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dpA = [0] * n\n    dpB = [0] * n\n    \n    dpA[0] = energyDrinkA[0]\n    dpB[0] = energyDrinkB[0]\n    \n    dpA[1] = max(energyDrinkA[0], energyDrinkA[1])\n    dpB[1] = max(energyDrinkB[0], energyDrinkB[1])\n    \n    for i in range(2, n):\n        dpA[i] = max(dpA[i-1], dpB[i-1]) + energyDrinkA[i]\n        dpB[i] = dpA[i-2] + energyDrinkB[i]\n    \n    return max(dpA[n-1], dpB[n-1])", "passed": false, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dpA = [0] * n\n    dpB = [0] * n\n    \n    dpA[0] = energyDrinkA[0]\n    dpB[0] = energyDrinkB[0]\n    \n    dpA[1] = max(energyDrinkA[0], energyDrinkA[1])\n    dpB[1] = max(energyDrinkB[0], energyDrinkB[1])\n    \n    for i in range(2, n):\n        dpA[i] = max(dpA[i-1], dpB[i-1]) + energyDrinkA[i]\n        dpB[i] = dpA[i-2] + energyDrinkB[i]\n    \n    return max(dpA[n-1], dpB[n-1])\n```"}
{"task_id": "3526", "code": "def minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[~i] for i in range((len(arr) + 1) // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[i][j] for i in range(m)]) for j in range(n))\n    \n    return min(row_flips, col_flips)", "passed": true, "raw_code": "```python\ndef minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[~i] for i in range((len(arr) + 1) // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[i][j] for i in range(m)]) for j in range(n))\n    \n    return min(row_flips, col_flips)\n```"}
{"task_id": "abc373_c", "code": "d", "passed": false, "raw_code": "```python\ndef max_sum_of_arrays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    max_A = max(A)\n    max_B = max(B)\n    \n    print(max_A + max_B)\n\nmax_sum_of_arrays()"}
{"task_id": "arc181_a", "code": "def min_operations(P):\n    N = len(P)\n    operations = 0\n    i = 0\n    while i < N:\n        if P[i] == i + 1:\n            i += 1\n        else:\n            # Find the smallest k such that performing the operation with k will move P[i] to its correct position\n            k = i + 1\n            while k < N and P[k] != P[i]:\n                k += 1\n            # Perform the operation with k\n            P[:k] = sorted(P[:k])\n            P[k+1:N] = sorted(P[k+1:N])\n            operations += 1\n    return operations\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        result = min_operations(P)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef min_operations(P):\n    N = len(P)\n    operations = 0\n    i = 0\n    while i < N:\n        if P[i] == i + 1:\n            i += 1\n        else:\n            # Find the smallest k such that performing the operation with k will move P[i] to its correct position\n            k = i + 1\n            while k < N and P[k] != P[i]:\n                k += 1\n            # Perform the operation with k\n            P[:k] = sorted(P[:k])\n            P[k+1:N] = sorted(P[k+1:N])\n            operations += 1\n    return operations\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        result = min_operations(P)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3579", "code": "def largestNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Custom sorting function to compare two binary strings\n    def compare(x, y):\n        return (x + y > y + x) - (x + y < y + x)\n    \n    # Sort the binary numbers based on the custom comparison function\n    binary_nums.sort(key=functools.cmp_to_key(compare), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    largest_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(largest_binary, 2)", "passed": false, "raw_code": "```python\ndef largestNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Custom sorting function to compare two binary strings\n    def compare(x, y):\n        return (x + y > y + x) - (x + y < y + x)\n    \n    # Sort the binary numbers based on the custom comparison function\n    binary_nums.sort(key=functools.cmp_to_key(compare), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    largest_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(largest_binary, 2)\n```"}
{"task_id": "abc366_d", "code": "d", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Initialize the 4D prefix sum array\n    prefix_sum = [[[[-0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    \n    # Fill the prefix sum array\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z][0] = prefix_sum[x-1][y][z][0] + prefix_sum[x][y-1][z][0] - prefix_sum[x-1][y-1][z][0] + int(data[index])\n                index += 1\n    \n    # Process the queries\n    Q = int(data[index])\n    index += 1\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        \n        result = (\n            prefix_sum[Rx][Ry][Rz][0] -\n            prefix_sum[Lx-1][Ry][Rz][0] -\n            prefix_sum[Rx][Ly-1][Rz][0] -\n            prefix_sum[Rx][Ry][Lz-1][0] +\n            prefix_sum[Lx-1][Ly-1][Rz][0] +\n            prefix_sum[Lx-1][Ry][Lz-1][0] +\n            prefix_sum[Rx][Ly-1][Lz-1][0] -\n            prefix_sum[Lx-1][Ly-1][Lz-1][0]\n        )\n        \n        results.append(result)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\n# Call the function to process queries\nprocess_queries()"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    unique_values = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        if query_type == 1:\n            x = int(queries[index + 1])\n            unique_values.add(x)\n            index += 2\n        elif query_type == 2:\n            x = int(queries[index + 1])\n            unique_values.remove(x)\n            index += 2\n        elif query_type == 3:\n            results.append(str(len(unique_values)))\n            index += 1\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    unique_values = set()\n    results = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        if query_type == 1:\n            x = int(queries[index + 1])\n            unique_values.add(x)\n            index += 2\n        elif query_type == 2:\n            x = int(queries[index + 1])\n            unique_values.remove(x)\n            index += 2\n        elif query_type == 3:\n            results.append(str(len(unique_values)))\n            index += 1\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result\n```"}
{"task_id": "abc367_c", "code": "def find_sequences(N, K, R, current_sequence, index):\n    if index == N:\n        if sum(current_sequence) % K == 0:\n            results.append(list(current_sequence))\n        return\n    \n    for value in range(1, R[index] + 1):\n        current_sequence[index] = value\n        find_sequences(N, K, R, current_sequence, index + 1)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    \n    results = []\n    find_sequences(N, K, R, [0] * N, 0)\n    \n    print(len(results))\n    for seq in results:\n        print(' '.join(map(str, seq)))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef find_sequences(N, K, R, current_sequence, index):\n    if index == N:\n        if sum(current_sequence) % K == 0:\n            results.append(list(current_sequence))\n        return\n    \n    for value in range(1, R[index] + 1):\n        current_sequence[index] = value\n        find_sequences(N, K, R, current_sequence, index + 1)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    \n    results = []\n    find_sequences(N, K, R, [0] * N, 0)\n    \n    print(len(results))\n    for seq in results:\n        print(' '.join(map(str, seq)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc365_d", "code": "d", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    # Initialize counters for each type of move\n    takahashi_moves = [''] * N\n    \n    # Determine Takahashi's moves\n    for i in range(N):\n        if S[i] == 'R':\n            takahashi_moves[i] = 'P'\n        elif S[i] == 'P':\n            takahashi_moves[i] = 'S'\n        elif S[i] == 'S':\n            takahashi_moves[i] = 'R'\n    \n    # Ensure alternating moves\n    for i in range(1, N):\n        if takahashi_moves[i] == takahashi_moves[i-1]:\n            if takahashi_moves[i] == 'P':\n                takahashi_moves[i] = 'S'\n            elif takahashi_moves[i] == 'S':\n                takahashi_moves[i] = 'R'\n            elif takahashi_moves[i] == 'R':\n                takahashi_moves[i] = 'P'\n    \n    # Count the number of wins\n    wins = sum(takahashi_moves[i] != S[i] for i in range(N))\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))"}
{"task_id": "3522", "code": "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        sorted_subarray = sorted(subarray)\n        \n        if subarray == sorted_subarray and all(subarray[j] + 1 == subarray[j+1] for j in range(k-1)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "passed": true, "raw_code": "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        sorted_subarray = sorted(subarray)\n        \n        if subarray == sorted_subarray and all(subarray[j] + 1 == subarray[j+1] for j in range(k-1)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the strengths in descending order\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    for i in range(N):\n        if i % 2 == 0:\n            total_experience += A[i]\n        else:\n            total_experience += 2 * A[i]\n    \n    print(total_experience)\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the strengths in descending order\n    A.sort(reverse=True)\n    \n    total_experience = 0\n    \n    for i in range(N):\n        if i % 2 == 0:\n            total_experience += A[i]\n        else:\n            total_experience += 2 * A[i]\n    \n    print(total_experience)\n\nmax_experience_points()\n```"}
{"task_id": "arc183_a", "code": "d", "passed": false, "raw_code": "```python\ndef generate_sequences(N, K):\n    def backtrack(path):\n        if len(path) == NK:\n            sequences.append(path[:])\n            return\n        for i in range(1, N + 1):\n            if count[i] < K:\n                path.append(i)\n                count[i] += 1\n                backtrack(path)\n                path.pop()\n                count[i] -= 1\n    \n    NK = N * K\n    sequences = []\n    count = [0] * (N + 1)\n    backtrack([])\n    return sequences\n\ndef find_kth_sequence(N, K, k):\n    sequences = generate_sequences(N, K)\n    sequences.sort()\n    return sequences[k - 1]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\n\n# Calculate the target index\nk = (NK + 1) // 2\n\n# Find and print the k-th sequence\nresult = find_kth_sequence(N, K, k)\nprint(' '.join(map(str, result)))"}
{"task_id": "3584", "code": "def smallestSequenceIndices(word1, word2):\n    mismatches = []\n    for i in range(len(word2)):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n    \n    if len(mismatches) > 1:\n        return []\n    \n    return mismatches", "passed": false, "raw_code": "```python\ndef smallestSequenceIndices(word1, word2):\n    mismatches = []\n    for i in range(len(word2)):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n    \n    if len(mismatches) > 1:\n        return []\n    \n    return mismatches\n```"}
{"task_id": "3570", "code": "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = [0] * 5\n        consonant_count = 0\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count[vowels.index(char)] += 1\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if min(vowel_count) > 0 and consonant_count == k:\n                count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = [0] * 5\n        consonant_count = 0\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count[vowels.index(char)] += 1\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if min(vowel_count) > 0 and consonant_count == k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc367_d", "code": "from collections import defaultdict\nimport sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Dictionary to store indices with the same remainder when divided by M\n    remainder_indices = defaultdict(list)\n    for i in range(N):\n        remainder_indices[prefix_sum[i] % M].append(i)\n    \n    # Count valid pairs\n    result = 0\n    for indices in remainder_indices.values():\n        k = len(indices)\n        result += k * (k - 1) // 2\n    \n    print(result)\n\nmain()", "passed": false, "raw_code": "```python\nfrom collections import defaultdict\nimport sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Dictionary to store indices with the same remainder when divided by M\n    remainder_indices = defaultdict(list)\n    for i in range(N):\n        remainder_indices[prefix_sum[i] % M].append(i)\n    \n    # Count valid pairs\n    result = 0\n    for indices in remainder_indices.values():\n        k = len(indices)\n        result += k * (k - 1) // 2\n    \n    print(result)\n\nmain()\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    A.sort()\n    \n    def total_subsidy(x):\n        return sum(min(x, ai) for ai in A)\n    \n    low, high = 0, max(A)\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if total_subsidy(mid) <= M:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if high == 0:\n        return \"infinite\"\n    else:\n        return high\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nresult = max_subsidy_limit(N, M, A)\nprint(result)", "passed": false, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    A.sort()\n    \n    def total_subsidy(x):\n        return sum(min(x, ai) for ai in A)\n    \n    low, high = 0, max(A)\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if total_subsidy(mid) <= M:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if high == 0:\n        return \"infinite\"\n    else:\n        return high\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nresult = max_subsidy_limit(N, M, A)\nprint(result)\n```"}
{"task_id": "3559", "code": "def minValidStrings(words, target):\n    n = len(target)\n    dp = [float('inf')] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for word in words:\n            if i + 1 >= len(word) and target[i + 1 - len(word):i + 1] == word:\n                dp[i] = min(dp[i], dp[i - len(word)] + 1)\n    \n    return dp[n - 1] if dp[n - 1] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef minValidStrings(words, target):\n    n = len(target)\n    dp = [float('inf')] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for word in words:\n            if i + 1 >= len(word) and target[i + 1 - len(word):i + 1] == word:\n                dp[i] = min(dp[i], dp[i - len(word)] + 1)\n    \n    return dp[n - 1] if dp[n - 1] != float('inf') else -1\n```"}
{"task_id": "abc371_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read input values\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = []\n    P = []\n    for _ in range(N):\n        X.append(int(data[index]))\n        P.append(int(data[index + 1]))\n        index += 2\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n    \n    # Calculate prefix sum array\n    prefix_sum = [0]\n    current_population = 0\n    for p in P:\n        current_population += p\n        prefix_sum.append(current_population)\n    \n    # Process each query\n    results = []\n    for L, R in queries:\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        if left_index == len(X) or X[left_index] > R:\n            left_index -= 1\n        if right_index == 0 or X[right_index - 1] < L:\n            right_index += 1\n        \n        if left_index >= 0 and right_index <= len(X):\n            result = prefix_sum[right_index] - prefix_sum[left_index]\n            results.append(result)\n    \n    # Print results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read input values\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = []\n    P = []\n    for _ in range(N):\n        X.append(int(data[index]))\n        P.append(int(data[index + 1]))\n        index += 2\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n    \n    # Calculate prefix sum array\n    prefix_sum = [0]\n    current_population = 0\n    for p in P:\n        current_population += p\n        prefix_sum.append(current_population)\n    \n    # Process each query\n    results = []\n    for L, R in queries:\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        if left_index == len(X) or X[left_index] > R:\n            left_index -= 1\n        if right_index == 0 or X[right_index - 1] < L:\n            right_index += 1\n        \n        if left_index >= 0 and right_index <= len(X):\n            result = prefix_sum[right_index] - prefix_sum[left_index]\n            results.append(result)\n    \n    # Print results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    prefix_counter = Counter(word2)\n    current_counter = Counter()\n    result = 0\n    \n    for i in range(m):\n        current_counter[word1[i]] += 1\n        \n        # Check if the current substring matches the prefix counter\n        if i >= n - 1:\n            if current_counter & prefix_counter == prefix_counter:\n                result += m - i\n            \n            current_counter[word1[i - n + 1]] -= 1\n            if current_counter[word1[i - n + 1]] == 0:\n                del current_counter[word1[i - n + 1]]\n    \n    return result", "passed": false, "raw_code": "```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    prefix_counter = Counter(word2)\n    current_counter = Counter()\n    result = 0\n    \n    for i in range(m):\n        current_counter[word1[i]] += 1\n        \n        # Check if the current substring matches the prefix counter\n        if i >= n - 1:\n            if current_counter & prefix_counter == prefix_counter:\n                result += m - i\n            \n            current_counter[word1[i - n + 1]] -= 1\n            if current_counter[word1[i - n + 1]] == 0:\n                del current_counter[word1[i - n + 1]]\n    \n    return result\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        for r in range(l, N):\n            if r == l:\n                diff_count[0] = diff_count.get(0, 0) + 1\n            else:\n                diff = A[r] - A[r-1]\n                if diff in diff_count:\n                    count += diff_count[diff]\n                diff_count[diff] = diff_count.get(diff, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        for r in range(l, N):\n            if r == l:\n                diff_count[0] = diff_count.get(0, 0) + 1\n            else:\n                diff = A[r] - A[r-1]\n                if diff in diff_count:\n                    count += diff_count[diff]\n                diff_count[diff] = diff_count.get(diff, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    queries = [(int(data[3 + 2 * i]), int(data[4 + 2 * i])) for i in range(Q)]\n    grid = [[True] * W for _ in range(H)]\n\n    def destroy_wall(r, c):\n        if r < 0 or r >= H or c < 0 or c >= W:\n            return\n        if not grid[r][c]:\n            return\n        grid[r][c] = False\n        destroy_wall(r - 1, c)\n        destroy_wall(r + 1, c)\n        destroy_wall(r, c - 1)\n        destroy_wall(r, c + 1)\n\n    for r, c in queries:\n        if grid[r - 1][c - 1]:\n            destroy_wall(r - 1, c - 1)\n\n    remaining_walls = sum(sum(row) for row in grid)\n    print(remaining_walls)\n\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    queries = [(int(data[3 + 2 * i]), int(data[4 + 2 * i])) for i in range(Q)]\n    grid = [[True] * W for _ in range(H)]\n\n    def destroy_wall(r, c):\n        if r < 0 or r >= H or c < 0 or c >= W:\n            return\n        if not grid[r][c]:\n            return\n        grid[r][c] = False\n        destroy_wall(r - 1, c)\n        destroy_wall(r + 1, c)\n        destroy_wall(r, c - 1)\n        destroy_wall(r, c + 1)\n\n    for r, c in queries:\n        if grid[r - 1][c - 1]:\n            destroy_wall(r - 1, c - 1)\n\n    remaining_walls = sum(sum(row) for row in grid)\n    print(remaining_walls)\n\nmain()"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        for i in range(N):\n            if H[i] > 0:\n                if T % 3 == 0:\n                    H[i] -= 3\n                else:\n                    H[i] -= 1\n                T += 1\n                break\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        for i in range(N):\n            if H[i] > 0:\n                if T % 3 == 0:\n                    H[i] -= 3\n                else:\n                    H[i] -= 1\n                T += 1\n                break\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "abc370_c", "code": "def min_operations(S, T):\n    n = len(S)\n    if S == T:\n        return 0, []\n\n    X = [S]\n    for i in range(n):\n        for j in range(26):\n            char = chr(ord('a') + j)\n            if char != S[i]:\n                new_S = S[:i] + char + S[i+1:]\n                if new_S <= T:\n                    X.append(new_S)\n                    break\n    return len(X) - 1, X[1:]\n\nimport sys\ninput = sys.stdin.read\nS, T = input().split()\nm, X = min_operations(S, T)\nprint(m)\nfor s in X:\n    print(s)", "passed": false, "raw_code": "def min_operations(S, T):\n    n = len(S)\n    if S == T:\n        return 0, []\n\n    X = [S]\n    for i in range(n):\n        for j in range(26):\n            char = chr(ord('a') + j)\n            if char != S[i]:\n                new_S = S[:i] + char + S[i+1:]\n                if new_S <= T:\n                    X.append(new_S)\n                    break\n    return len(X) - 1, X[1:]\n\nimport sys\ninput = sys.stdin.read\nS, T = input().split()\nm, X = min_operations(S, T)\nprint(m)\nfor s in X:\n    print(s)"}
{"task_id": "abc371_c", "code": "import sys\nfrom collections import defaultdict\n\ndef min_cost_to_isomorphize(n, m_g, edges_g, m_h, edges_h, costs):\n    # Create adjacency lists for both graphs\n    adj_g = defaultdict(list)\n    for u, v in edges_g:\n        adj_g[u].append(v)\n        adj_g[v].append(u)\n\n    adj_h = defaultdict(list)\n    for a, b in edges_h:\n        adj_h[a].append(b)\n        adj_h[b].append(a)\n\n    # Initialize DP table\n    dp = [[float('inf')] * (1 << n) for _ in range(1 << n)]\n    dp[0][0] = 0\n\n    # Fill DP table\n    for mask in range(1 << n):\n        for i in range(n):\n            if mask & (1 << i):\n                new_mask = mask ^ (1 << i)\n                for j in range(i + 1, n):\n                    if new_mask & (1 << j):\n                        cost = costs[i][j]\n                        if not (mask & (1 << j)) and (i + 1 in adj_g[j + 1]):\n                            dp[new_mask][mask] = min(dp[new_mask][mask], dp[mask][new_mask] + cost)\n                        elif (mask & (1 << j)) and (i + 1 not in adj_g[j + 1]):\n                            dp[new_mask][mask] = min(dp[new_mask][mask], dp[mask][new_mask] + cost)\n\n    # Find the minimum cost to make H isomorphic to G\n    min_cost = float('inf')\n    for mask in range(1 << n):\n        if all(len(adj_h[i + 1]) == len(adj_g[i + 1]) for i in range(n)):\n            min_cost = min(min_cost, dp[mask][0])\n\n    return min_cost\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    n = int(data[index])\n    index += 1\n    m_g = int(data[index])\n    index += 1\n    edges_g = []\n    for _ in range(m_g):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        edges_g.append((u, v))\n\n    m_h = int(data[index])\n    index += 1\n    edges_h = []\n    for _ in range(m_h):\n        a = int(data[index]) - 1\n        index += 1\n        b = int(data[index]) - 1\n        index += 1\n        edges_h.append((a, b))\n\n    costs = []\n    for i in range(n - 1):\n        row = []\n        for j in range(i + 1, n):\n            row.append(int(data[index]))\n            index += 1\n        costs.append(row)\n\n    result = min_cost_to_isomorphize(n, m_g, edges_g, m_h, edges_h, costs)\n    print(result)", "passed": false, "raw_code": "import sys\nfrom collections import defaultdict\n\ndef min_cost_to_isomorphize(n, m_g, edges_g, m_h, edges_h, costs):\n    # Create adjacency lists for both graphs\n    adj_g = defaultdict(list)\n    for u, v in edges_g:\n        adj_g[u].append(v)\n        adj_g[v].append(u)\n\n    adj_h = defaultdict(list)\n    for a, b in edges_h:\n        adj_h[a].append(b)\n        adj_h[b].append(a)\n\n    # Initialize DP table\n    dp = [[float('inf')] * (1 << n) for _ in range(1 << n)]\n    dp[0][0] = 0\n\n    # Fill DP table\n    for mask in range(1 << n):\n        for i in range(n):\n            if mask & (1 << i):\n                new_mask = mask ^ (1 << i)\n                for j in range(i + 1, n):\n                    if new_mask & (1 << j):\n                        cost = costs[i][j]\n                        if not (mask & (1 << j)) and (i + 1 in adj_g[j + 1]):\n                            dp[new_mask][mask] = min(dp[new_mask][mask], dp[mask][new_mask] + cost)\n                        elif (mask & (1 << j)) and (i + 1 not in adj_g[j + 1]):\n                            dp[new_mask][mask] = min(dp[new_mask][mask], dp[mask][new_mask] + cost)\n\n    # Find the minimum cost to make H isomorphic to G\n    min_cost = float('inf')\n    for mask in range(1 << n):\n        if all(len(adj_h[i + 1]) == len(adj_g[i + 1]) for i in range(n)):\n            min_cost = min(min_cost, dp[mask][0])\n\n    return min_cost\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    n = int(data[index])\n    index += 1\n    m_g = int(data[index])\n    index += 1\n    edges_g = []\n    for _ in range(m_g):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        edges_g.append((u, v))\n\n    m_h = int(data[index])\n    index += 1\n    edges_h = []\n    for _ in range(m_h):\n        a = int(data[index]) - 1\n        index += 1\n        b = int(data[index]) - 1\n        index += 1\n        edges_h.append((a, b))\n\n    costs = []\n    for i in range(n - 1):\n        row = []\n        for j in range(i + 1, n):\n            row.append(int(data[index]))\n            index += 1\n        costs.append(row)\n\n    result = min_cost_to_isomorphize(n, m_g, edges_g, m_h, edges_h, costs)\n    print(result)"}
{"task_id": "3495", "code": "import heapq\n\ndef kthSmallestDistance(queries, k):\n    min_heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, distance)\n        else:\n            if distance < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, distance)\n    \n    if len(min_heap) < k:\n        results.extend([-1] * (len(queries) - len(min_heap)))\n        results.extend(min_heap)\n    else:\n        results.extend([heapq.heappop(min_heap) for _ in range(len(queries))])\n    \n    return results", "passed": false, "raw_code": "```python\nimport heapq\n\ndef kthSmallestDistance(queries, k):\n    min_heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, distance)\n        else:\n            if distance < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, distance)\n    \n    if len(min_heap) < k:\n        results.extend([-1] * (len(queries) - len(min_heap)))\n        results.extend(min_heap)\n    else:\n        results.extend([heapq.heappop(min_heap) for _ in range(len(queries))])\n    \n    return results\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[n-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[n-1]\n```"}
{"task_id": "3558", "code": "def hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(i, j, health):\n        if health <= 0:\n            return False\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if i == m - 1 and j == n - 1:\n            return health >= 1\n        \n        temp = grid[i][j]\n        grid[i][j] = 2  # Mark as visited\n        \n        if (dfs(i + 1, j, health - temp) or\n            dfs(i - 1, j, health - temp) or\n            dfs(i, j + 1, health - temp) or\n            dfs(i, j - 1, health - temp)):\n            return True\n        \n        grid[i][j] = temp  # Unmark\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(i, j, health):\n        if health <= 0:\n            return False\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if i == m - 1 and j == n - 1:\n            return health >= 1\n        \n        temp = grid[i][j]\n        grid[i][j] = 2  # Mark as visited\n        \n        if (dfs(i + 1, j, health - temp) or\n            dfs(i - 1, j, health - temp) or\n            dfs(i, j + 1, health - temp) or\n            dfs(i, j - 1, health - temp)):\n            return True\n        \n        grid[i][j] = temp  # Unmark\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    current_height = 1\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        while current_height in used_heights or current_height > mh:\n            if current_height == 1:\n                return -1\n            current_height -= 1\n        used_heights.add(current_height)\n        total_sum += current_height\n        current_height += 1\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    current_height = 1\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        while current_height in used_heights or current_height > mh:\n            if current_height == 1:\n                return -1\n            current_height -= 1\n        used_heights.add(current_height)\n        total_sum += current_height\n        current_height += 1\n    \n    return total_sum\n```"}
{"final_accuracy": "13.51%"}
