"{\"difficulty\": \"easy\", \"num_threads\": 16, \"temperature\": 0.7, \"n\": 16, \"context\": \"all\", \"selection\": \"generated_tests_majority_no_public_tests\", \"num_round\": 1, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"microsoft/phi-4\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/majoritybug_trace_TPL_NEXT_phi4_n_16_easy.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"microsoft/phi-4\", \"api_base\": \"http://10.96.183.224:63019/8001/v1\", \"no_refine\": false, \"no_dspy_gen\": true, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42}"
{"task_id": "3555", "code": "def transform_array(nums, k, multiplier):\n    for _ in range(k):\n        # Find the index of the minimum value in nums\n        min_index = nums.index(min(nums))\n        # Replace the minimum value with its multiplied result\n        nums[min_index] *= multiplier\n    return nums\n", "passed": true, "raw_code": "def transform_array(nums, k, multiplier):\n    for _ in range(k):\n        # Find the index of the minimum value in nums\n        min_index = nums.index(min(nums))\n        # Replace the minimum value with its multiplied result\n        nums[min_index] *= multiplier\n    return nums\n"}
{"task_id": "3606", "code": "def min_digit_sum(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return min(sum_of_digits(num) for num in nums)\n", "passed": true, "raw_code": "def min_digit_sum(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return min(sum_of_digits(num) for num in nums)\n"}
{"task_id": "3567", "code": "def date_to_binary(date: str) -> str:\n    # Split the input date string into year, month, and day components.\n    year, month, day = date.split('-')\n    \n    # Convert each component to its binary representation\n    year_binary = bin(int(year))[2:]  # Remove the '0b' prefix added by bin()\n    month_binary = bin(int(month))[2:]\n    day_binary = bin(int(day))[2:]\n    \n    # Join the binary representations with hyphens as specified in the prompt\n    binary_representation = f\"{year_binary}-{month_binary}-{day_binary}\"\n    \n    return binary_representation\n", "passed": true, "raw_code": "def date_to_binary(date: str) -> str:\n    # Split the input date string into year, month, and day components.\n    year, month, day = date.split('-')\n    \n    # Convert each component to its binary representation\n    year_binary = bin(int(year))[2:]  # Remove the '0b' prefix added by bin()\n    month_binary = bin(int(month))[2:]\n    day_binary = bin(int(day))[2:]\n    \n    # Join the binary representations with hyphens as specified in the prompt\n    binary_representation = f\"{year_binary}-{month_binary}-{day_binary}\"\n    \n    return binary_representation\n"}
{"task_id": "3519", "code": "from collections import defaultdict\n\ndef count_winning_players(n, pick):\n    # Dictionary to count the number of balls of each color picked by each player\n    player_balls = defaultdict(lambda: defaultdict(int))\n    \n    # Populate the dictionary with the pick data\n    for player, color in pick:\n        player_balls[player][color] += 1\n    \n    # Count the number of winning players\n    winning_players = 0\n    for player in range(n):\n        # Check if the player has picked at least i + 1 balls of any color\n        if any(count >= player + 1 for count in player_balls[player].values()):\n            winning_players += 1\n    \n    return winning_players\n", "passed": true, "raw_code": "from collections import defaultdict\n\ndef count_winning_players(n, pick):\n    # Dictionary to count the number of balls of each color picked by each player\n    player_balls = defaultdict(lambda: defaultdict(int))\n    \n    # Populate the dictionary with the pick data\n    for player, color in pick:\n        player_balls[player][color] += 1\n    \n    # Count the number of winning players\n    winning_players = 0\n    for player in range(n):\n        # Check if the player has picked at least i + 1 balls of any color\n        if any(count >= player + 1 for count in player_balls[player].values()):\n            winning_players += 1\n    \n    return winning_players\n"}
{"task_id": "3553", "code": "def same_color_squares(coordinate1: str, coordinate2: str) -> bool:\n    def get_square_color(coordinate):\n        column, row = coordinate\n        # Calculate the sum of the column and row indices\n        # A1 is black, so we start with a black offset\n        sum_indices = (ord(column) - ord('a')) + (int(row) - 1)\n        # A black square is where the sum is even\n        return sum_indices % 2\n\n    return get_square_color(coordinate1) == get_square_color(coordinate2)\n", "passed": true, "raw_code": "def same_color_squares(coordinate1: str, coordinate2: str) -> bool:\n    def get_square_color(coordinate):\n        column, row = coordinate\n        # Calculate the sum of the column and row indices\n        # A1 is black, so we start with a black offset\n        sum_indices = (ord(column) - ord('a')) + (int(row) - 1)\n        # A black square is where the sum is even\n        return sum_indices % 2\n\n    return get_square_color(coordinate1) == get_square_color(coordinate2)\n"}
{"task_id": "3533", "code": "def final_snake_position(n, commands):\n    # Initial position of the snake\n    position = 0\n    \n    for command in commands:\n        row = position // n\n        col = position % n\n        \n        if command == \"UP\":\n            row = max(0, row - 1)\n        elif command == \"DOWN\":\n            row = min(n - 1, row + 1)\n        elif command == \"LEFT\":\n            col = max(0, col - 1)\n        elif command == \"RIGHT\":\n            col = min(n - 1, col + 1)\n        \n        position = row * n + col\n    \n    return position\n", "passed": true, "raw_code": "def final_snake_position(n, commands):\n    # Initial position of the snake\n    position = 0\n    \n    for command in commands:\n        row = position // n\n        col = position % n\n        \n        if command == \"UP\":\n            row = max(0, row - 1)\n        elif command == \"DOWN\":\n            row = min(n - 1, row + 1)\n        elif command == \"LEFT\":\n            col = max(0, col - 1)\n        elif command == \"RIGHT\":\n            col = min(n - 1, col + 1)\n        \n        position = row * n + col\n    \n    return position\n"}
{"task_id": "3568", "code": "def generate_key(num1, num2, num3):\n    # Convert numbers to zero-padded strings with 4 digits\n    num1_str = f\"{num1:04}\"\n    num2_str = f\"{num2:04}\"\n    num3_str = f\"{num3:04}\"\n\n    # Generate the key by taking the smallest digit at each position\n    key = ''.join(str(min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))) for i in range(4))\n\n    # Convert key to an integer to remove any leading zeros and return\n    return int(key)\n", "passed": true, "raw_code": "def generate_key(num1, num2, num3):\n    # Convert numbers to zero-padded strings with 4 digits\n    num1_str = f\"{num1:04}\"\n    num2_str = f\"{num2:04}\"\n    num3_str = f\"{num3:04}\"\n\n    # Generate the key by taking the smallest digit at each position\n    key = ''.join(str(min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))) for i in range(4))\n\n    # Convert key to an integer to remove any leading zeros and return\n    return int(key)\n"}
{"task_id": "3543", "code": "def count_k_constraint_substrings(s, k):\n    n = len(s)\n    count = 0\n\n    # Iterate over all possible starting indices\n    for start in range(n):\n        # Iterate over all possible ending indices starting from 'start'\n        for end in range(start, n):\n            # Extract substring from `start` to `end`\n            substring = s[start:end+1]\n            \n            # Count zeros and ones in the current substring\n            zero_count = substring.count('0')\n            one_count = substring.count('1')\n            \n            # Check if the substring satisfies the k-constraint\n            if zero_count <= k or one_count <= k:\n                count += 1\n\n    return count\n", "passed": true, "raw_code": "def count_k_constraint_substrings(s, k):\n    n = len(s)\n    count = 0\n\n    # Iterate over all possible starting indices\n    for start in range(n):\n        # Iterate over all possible ending indices starting from 'start'\n        for end in range(start, n):\n            # Extract substring from `start` to `end`\n            substring = s[start:end+1]\n            \n            # Count zeros and ones in the current substring\n            zero_count = substring.count('0')\n            one_count = substring.count('1')\n            \n            # Check if the substring satisfies the k-constraint\n            if zero_count <= k or one_count <= k:\n                count += 1\n\n    return count\n"}
{"difficulty": "easy", "num_threads": 16, "temperature": 0.7, "n": 16, "context": "all", "selection": "generated_tests_majority_no_public_tests", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "microsoft/phi-4", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/majoritybug_trace_TPL_NEXT_phi4_n_16_easy.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "gpt-4o-mini", "num_test_suites": 1, "api_name": "microsoft/phi-4", "api_base": "http://127.0.0.1:8002/v1", "no_refine": false, "no_dspy_gen": true, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "import sys\n\ndef remove_dots():\n    # Read the input string from standard input\n    S = sys.stdin.read().strip()\n    # Remove all periods from the string\n    result = S.replace('.', '')\n    # Print the result\n    print(result)\n\n# Call the function\nremove_dots()\n", "passed": true, "raw_code": "import sys\n\ndef remove_dots():\n    # Read the input string from standard input\n    S = sys.stdin.read().strip()\n    # Remove all periods from the string\n    result = S.replace('.', '')\n    # Print the result\n    print(result)\n\n# Call the function\nremove_dots()\n"}
{"task_id": "abc373_a", "code": "def count_strings_matching_length():\n    import sys\n    input = sys.stdin.read\n    strings = input().strip().split('\\n')\n    \n    count = 0\n    for i in range(1, 13):\n        if len(strings[i - 1]) == i:\n            count += 1\n    \n    print(count)\n\n# Call the function\ncount_strings_matching_length()\n", "passed": true, "raw_code": "def count_strings_matching_length():\n    import sys\n    input = sys.stdin.read\n    strings = input().strip().split('\\n')\n    \n    count = 0\n    for i in range(1, 13):\n        if len(strings[i - 1]) == i:\n            count += 1\n    \n    print(count)\n\n# Call the function\ncount_strings_matching_length()\n"}
{"task_id": "abc365_a", "code": "def find_days_in_year():\n    import sys\n    input = sys.stdin.read\n    Y = int(input().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Call the function\nfind_days_in_year()\n", "passed": true, "raw_code": "def find_days_in_year():\n    import sys\n    input = sys.stdin.read\n    Y = int(input().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Call the function\nfind_days_in_year()\n"}
{"task_id": "abc370_a", "code": "def takoyaki_decision():\n    import sys\n    input = sys.stdin.read\n    data = input().strip()\n    L, R = map(int, data.split())\n\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\n# Call the function\ntakoyaki_decision()\n", "passed": true, "raw_code": "def takoyaki_decision():\n    import sys\n    input = sys.stdin.read\n    data = input().strip()\n    L, R = map(int, data.split())\n\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\n# Call the function\ntakoyaki_decision()\n"}
{"task_id": "abc368_a", "code": "def rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:2+N]))\n    \n    # Move the last K elements to the front while maintaining order\n    B = A[-K:] + A[:-K]\n    \n    # Print the result\n    print(\" \".join(map(str, B)))\n\n# Call the function\nrearrange_cards()\n", "passed": true, "raw_code": "def rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:2+N]))\n    \n    # Move the last K elements to the front while maintaining order\n    B = A[-K:] + A[:-K]\n    \n    # Print the result\n    print(\" \".join(map(str, B)))\n\n# Call the function\nrearrange_cards()\n"}
{"task_id": "abc368_b", "code": "def process_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operation_count = 0\n    \n    while len(A) > 1 and all(x > 0 for x in A):\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        A = [x for x in A if x > 0]  # Remove non-positive elements\n        operation_count += 1\n    \n    print(operation_count)\n\n# Call the function\nprocess_sequence()\n", "passed": true, "raw_code": "def process_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operation_count = 0\n    \n    while len(A) > 1 and all(x > 0 for x in A):\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        A = [x for x in A if x > 0]  # Remove non-positive elements\n        operation_count += 1\n    \n    print(operation_count)\n\n# Call the function\nprocess_sequence()\n"}
{"task_id": "abc366_a", "code": "def mayoral_election():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    # Calculate the majority needed to win\n    majority = N // 2 + 1\n    \n    # Check if either candidate has already surpassed the majority\n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Call the function\nmayoral_election()\n", "passed": true, "raw_code": "def mayoral_election():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    # Calculate the majority needed to win\n    majority = N // 2 + 1\n    \n    # Check if either candidate has already surpassed the majority\n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Call the function\nmayoral_election()\n"}
{"task_id": "abc367_b", "code": "def format_real_number():\n    import sys\n    input = sys.stdin.read\n    import decimal\n\n    X = input().strip()\n    # Convert the input into a Decimal object to accurately handle fixed-point numbers\n    x_decimal = decimal.Decimal(X)\n\n    # Create a string representation of the Decimal object without trailing zeros\n    formatted_x = format(x_decimal, '.3f').rstrip('0').rstrip('.')\n\n    # Print the result\n    print(formatted_x)\n\n# Calling the function\nformat_real_number()\n", "passed": true, "raw_code": "def format_real_number():\n    import sys\n    input = sys.stdin.read\n    import decimal\n\n    X = input().strip()\n    # Convert the input into a Decimal object to accurately handle fixed-point numbers\n    x_decimal = decimal.Decimal(X)\n\n    # Create a string representation of the Decimal object without trailing zeros\n    formatted_x = format(x_decimal, '.3f').rstrip('0').rstrip('.')\n\n    # Print the result\n    print(formatted_x)\n\n# Calling the function\nformat_real_number()\n"}
{"task_id": "abc367_a", "code": "def can_shout_love_for_takoyaki(a, b, c):\n    # Normalize cases by ensuring a < b and b < c\n    if a <= b <= c:\n        awake_period = (c - b) + a\n    elif b < a < c:\n        awake_period = c - a\n    elif c < a < b:\n        awake_period = b - a\n    else:  # a < c < b\n        awake_period = (b - a) + c\n\n    # Takahashi can shout his love for takoyaki every day if A falls within his awake period\n    if awake_period == 24:\n        print(\"Yes\")\n    else:\n        if (b <= a < c) or (c < a <= b) or (a < b and b < c):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n# Read input from stdin\na, b, c = map(int, input().split())\n\n# Call the function\ncan_shout_love_for_takoyaki(a, b, c)\n", "passed": false, "raw_code": "def can_shout_love_for_takoyaki(a, b, c):\n    # Normalize cases by ensuring a < b and b < c\n    if a <= b <= c:\n        awake_period = (c - b) + a\n    elif b < a < c:\n        awake_period = c - a\n    elif c < a < b:\n        awake_period = b - a\n    else:  # a < c < b\n        awake_period = (b - a) + c\n\n    # Takahashi can shout his love for takoyaki every day if A falls within his awake period\n    if awake_period == 24:\n        print(\"Yes\")\n    else:\n        if (b <= a < c) or (c < a <= b) or (a < b and b < c):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n# Read input from stdin\na, b, c = map(int, input().split())\n\n# Call the function\ncan_shout_love_for_takoyaki(a, b, c)\n"}
{"task_id": "abc365_b", "code": "def find_second_largest():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # The first element is the length of the sequence\n    N = int(data[0])\n    \n    # Convert the rest of the data into a list of integers\n    A = list(map(int, data[1:]))\n    \n    # Find the maximum and second maximum in the list\n    max1 = max2 = float('-inf')\n    \n    for num in A:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    \n    # Find the index of the second largest element and print it (1-based index)\n    index_of_second_largest = A.index(max2) + 1\n    print(index_of_second_largest)\n\n# Call the function\nfind_second_largest()\n", "passed": true, "raw_code": "def find_second_largest():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # The first element is the length of the sequence\n    N = int(data[0])\n    \n    # Convert the rest of the data into a list of integers\n    A = list(map(int, data[1:]))\n    \n    # Find the maximum and second maximum in the list\n    max1 = max2 = float('-inf')\n    \n    for num in A:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    \n    # Find the index of the second largest element and print it (1-based index)\n    index_of_second_largest = A.index(max2) + 1\n    print(index_of_second_largest)\n\n# Call the function\nfind_second_largest()\n"}
{"task_id": "abc370_b", "code": "def final_element():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    index = 1\n    A = []\n    \n    for i in range(N):\n        A.append(list(map(int, data[index:index + N - i])))\n        index += N - i\n    \n    current_element = 1\n    for j in range(1, N + 1):\n        if current_element >= j:\n            current_element = A[j - 1][current_element - 1]\n        else:\n            current_element = A[current_element - 1][j - 1]\n    \n    print(current_element)\n\n# Call the function\nfinal_element()\n", "passed": false, "raw_code": "def final_element():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    index = 1\n    A = []\n    \n    for i in range(N):\n        A.append(list(map(int, data[index:index + N - i])))\n        index += N - i\n    \n    current_element = 1\n    for j in range(1, N + 1):\n        if current_element >= j:\n            current_element = A[j - 1][current_element - 1]\n        else:\n            current_element = A[current_element - 1][j - 1]\n    \n    print(current_element)\n\n# Call the function\nfinal_element()\n"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read().strip().split()\n    S_AB, S_AC, S_BC = input\n\n    # Determine the order based on comparisons\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        # A < B < C\n        middle = 'B'\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        # A < C < B\n        middle = 'C'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        # B < A < C\n        middle = 'A'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        # B < C < A\n        middle = 'C'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        # C < A < B\n        middle = 'A'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        # C < B < A\n        middle = 'B'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        # A < C < B\n        middle = 'C'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        # A < B < C\n        middle = 'B'\n\n    print(middle)\n\n# Call the function\nfind_middle_brother()\n", "passed": false, "raw_code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read().strip().split()\n    S_AB, S_AC, S_BC = input\n\n    # Determine the order based on comparisons\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        # A < B < C\n        middle = 'B'\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        # A < C < B\n        middle = 'C'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        # B < A < C\n        middle = 'A'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        # B < C < A\n        middle = 'C'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        # C < A < B\n        middle = 'A'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        # C < B < A\n        middle = 'B'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        # A < C < B\n        middle = 'C'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        # A < B < C\n        middle = 'B'\n\n    print(middle)\n\n# Call the function\nfind_middle_brother()\n"}
{"task_id": "abc371_b", "code": "def determine_taros():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    family_males = {i: -1 for i in range(1, N + 1)}\n    index = 2\n    \n    results = []\n    \n    for _ in range(M):\n        A = int(data[index])\n        B = data[index + 1]\n        index += 2\n        \n        if B == 'M':\n            if family_males[A] == -1:\n                results.append(\"Yes\")\n                family_males[A] = _  # Record the index of this baby as the eldest male\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n# Call the function\ndetermine_taros()\n", "passed": true, "raw_code": "def determine_taros():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    family_males = {i: -1 for i in range(1, N + 1)}\n    index = 2\n    \n    results = []\n    \n    for _ in range(M):\n        A = int(data[index])\n        B = data[index + 1]\n        index += 2\n        \n        if B == 'M':\n            if family_males[A] == -1:\n                results.append(\"Yes\")\n                family_males[A] = _  # Record the index of this baby as the eldest male\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n# Call the function\ndetermine_taros()\n"}
{"task_id": "abc366_b", "code": "def convert_to_vertical():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    S = data[1:N+1]\n    \n    # Determine the maximum length of the strings\n    M = max(len(s) for s in S)\n    \n    # Initialize the result list with '*'\n    T = [['*'] * M for _ in range(M)]\n    \n    # Fill the result list based on the conditions\n    for i in range(N):\n        for j in range(len(S[i])):\n            # Calculate the position in T for the current character\n            T[M-j-1][N-i-1] = S[i][j]\n    \n    # Convert each list of characters to a string and print\n    for line in T:\n        print(''.join(line).rstrip('*'))\n\n# Call the function\nconvert_to_vertical()\n", "passed": false, "raw_code": "def convert_to_vertical():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    S = data[1:N+1]\n    \n    # Determine the maximum length of the strings\n    M = max(len(s) for s in S)\n    \n    # Initialize the result list with '*'\n    T = [['*'] * M for _ in range(M)]\n    \n    # Fill the result list based on the conditions\n    for i in range(N):\n        for j in range(len(S[i])):\n            # Calculate the position in T for the current character\n            T[M-j-1][N-i-1] = S[i][j]\n    \n    # Convert each list of characters to a string and print\n    for line in T:\n        print(''.join(line).rstrip('*'))\n\n# Call the function\nconvert_to_vertical()\n"}
{"task_id": "abc369_a", "code": "def count_arithmetic_sequences():\n    import sys\n    input = sys.stdin.read\n    A, B = map(int, input().split())\n    \n    possible_x = set()\n    \n    # Calculate possible values for x\n    x1 = 2 * B - A\n    x2 = 2 * A - B\n    if (A + B) % 2 == 0:\n        x3 = (A + B) // 2\n    \n    # Add to set to ensure uniqueness\n    possible_x.add(x1)\n    possible_x.add(x2)\n    if (A + B) % 2 == 0:\n        possible_x.add(x3)\n    \n    # Print the number of unique x values\n    print(len(possible_x))\n\n# Call the function\ncount_arithmetic_sequences()\n", "passed": true, "raw_code": "def count_arithmetic_sequences():\n    import sys\n    input = sys.stdin.read\n    A, B = map(int, input().split())\n    \n    possible_x = set()\n    \n    # Calculate possible values for x\n    x1 = 2 * B - A\n    x2 = 2 * A - B\n    if (A + B) % 2 == 0:\n        x3 = (A + B) // 2\n    \n    # Add to set to ensure uniqueness\n    possible_x.add(x1)\n    possible_x.add(x2)\n    if (A + B) % 2 == 0:\n        possible_x.add(x3)\n    \n    # Print the number of unique x values\n    print(len(possible_x))\n\n# Call the function\ncount_arithmetic_sequences()\n"}
{"task_id": "abc373_b", "code": "def minimal_traveled_distance():\n    import sys\n    input = sys.stdin.read().strip()\n    \n    # Create a mapping from each character to its position\n    position_map = {char: idx + 1 for idx, char in enumerate(input)}\n    \n    # Initial position is the position of 'A'\n    current_position = position_map['A']\n    total_distance = 0\n    \n    # Iterate over the alphabet from 'A' to 'Z'\n    for char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        target_position = position_map[char]\n        total_distance += abs(target_position - current_position)\n        current_position = target_position\n    \n    # Print the total distance\n    print(total_distance)\n\n# Call the function\nminimal_traveled_distance()\n", "passed": true, "raw_code": "def minimal_traveled_distance():\n    import sys\n    input = sys.stdin.read().strip()\n    \n    # Create a mapping from each character to its position\n    position_map = {char: idx + 1 for idx, char in enumerate(input)}\n    \n    # Initial position is the position of 'A'\n    current_position = position_map['A']\n    total_distance = 0\n    \n    # Iterate over the alphabet from 'A' to 'Z'\n    for char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        target_position = position_map[char]\n        total_distance += abs(target_position - current_position)\n        current_position = target_position\n    \n    # Print the total distance\n    print(total_distance)\n\n# Call the function\nminimal_traveled_distance()\n"}
{"task_id": "3600", "code": "def find_kth_character(k):\n    word = \"a\"\n    total_length = 1  # Initial length of word\n\n    while total_length < k:\n        next_word = \"\"\n        for char in word:\n            next_word += chr(((ord(char) - ord('a') + 1) % 26) + ord('a'))\n        word += next_word\n        total_length += len(next_word)\n\n    return word[k-1]\n", "passed": true, "raw_code": "def find_kth_character(k):\n    word = \"a\"\n    total_length = 1  # Initial length of word\n\n    while total_length < k:\n        next_word = \"\"\n        for char in word:\n            next_word += chr(((ord(char) - ord('a') + 1) % 26) + ord('a'))\n        word += next_word\n        total_length += len(next_word)\n\n    return word[k-1]\n"}
{"task_id": "abc369_b", "code": "def min_fatigue():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = []\n    S = []\n    \n    index = 1\n    for i in range(N):\n        A.append(int(data[index]))\n        S.append(data[index + 1])\n        index += 2\n    \n    # Initialize the left and right hand positions\n    left_hand = A[0]\n    right_hand = A[0]\n    fatigue = 0\n    \n    for i in range(1, N):\n        if S[i] == 'L':\n            # Move left hand to A[i]\n            fatigue += abs(A[i] - left_hand)\n            left_hand = A[i]\n            # Ensure right_hand >= left_hand for future operations\n            if right_hand < left_hand:\n                fatigue += right_hand - left_hand\n                right_hand = left_hand\n        else:\n            # Move right hand to A[i]\n            fatigue += abs(A[i] - right_hand)\n            right_hand = A[i]\n            # Ensure left_hand <= right_hand for future operations\n            if left_hand > right_hand:\n                fatigue += left_hand - right_hand\n                left_hand = right_hand\n    \n    print(fatigue)\n\n# Call the function\nmin_fatigue()\n", "passed": false, "raw_code": "def min_fatigue():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = []\n    S = []\n    \n    index = 1\n    for i in range(N):\n        A.append(int(data[index]))\n        S.append(data[index + 1])\n        index += 2\n    \n    # Initialize the left and right hand positions\n    left_hand = A[0]\n    right_hand = A[0]\n    fatigue = 0\n    \n    for i in range(1, N):\n        if S[i] == 'L':\n            # Move left hand to A[i]\n            fatigue += abs(A[i] - left_hand)\n            left_hand = A[i]\n            # Ensure right_hand >= left_hand for future operations\n            if right_hand < left_hand:\n                fatigue += right_hand - left_hand\n                right_hand = left_hand\n        else:\n            # Move right hand to A[i]\n            fatigue += abs(A[i] - right_hand)\n            right_hand = A[i]\n            # Ensure left_hand <= right_hand for future operations\n            if left_hand > right_hand:\n                fatigue += left_hand - right_hand\n                left_hand = right_hand\n    \n    print(fatigue)\n\n# Call the function\nmin_fatigue()\n"}
{"final_accuracy": "80.77%"}
