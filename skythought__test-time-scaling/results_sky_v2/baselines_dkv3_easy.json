{"difficulty": "easy", "num_threads": 16, "temperature": 0.7, "n": 16, "context": "all", "selection": "first", "num_round": 3, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "deepseek-chat", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/baselines_dkv3_easy.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "naive_nodspy", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "deepseek-chat", "api_base": "https://api.deepseek.com", "no_refine": false, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc367_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc365_b", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc366_b", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3519", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc368_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc368_b", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc370_b", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc370_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc365_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc369_b", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc371_b", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc369_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3533", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc367_b", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc371_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc366_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc372_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc373_b", "code": "", "passed": false, "raw_code": ""}
{"task_id": "abc373_a", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3600", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3567", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3553", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3568", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3606", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3543", "code": "", "passed": false, "raw_code": ""}
{"task_id": "3555", "code": "", "passed": false, "raw_code": ""}
{"final_accuracy": "0.00%"}
{"difficulty": "easy", "num_threads": 16, "temperature": 0.7, "n": 16, "context": "all", "selection": "first", "num_round": 3, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "deepseek-chat", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/baselines_dkv3_easy.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "naive_nodspy", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "deepseek-chat", "api_base": "https://api.deepseek.com", "no_refine": false, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc365_a", "code": "def calculate_days_in_year():\n    Y = int(input())\n    if Y % 4 != 0:\n        print(365)\n    elif Y % 100 != 0:\n        print(366)\n    elif Y % 400 != 0:\n        print(365)\n    else:\n        print(366)\n\ncalculate_days_in_year()\n", "passed": true, "raw_code": "def calculate_days_in_year():\n    Y = int(input())\n    if Y % 4 != 0:\n        print(365)\n    elif Y % 100 != 0:\n        print(366)\n    elif Y % 400 != 0:\n        print(365)\n    else:\n        print(366)\n\ncalculate_days_in_year()\n"}
{"task_id": "3533", "code": "def final_snake_position(n, commands):\n    # Initialize the starting position (cell 0)\n    i, j = 0, 0\n    \n    # Process each command\n    for cmd in commands:\n        if cmd == \"UP\":\n            i -= 1\n        elif cmd == \"DOWN\":\n            i += 1\n        elif cmd == \"LEFT\":\n            j -= 1\n        elif cmd == \"RIGHT\":\n            j += 1\n    \n    # Calculate the final cell position\n    return (i * n) + j\n", "passed": true, "raw_code": "def final_snake_position(n, commands):\n    # Initialize the starting position (cell 0)\n    i, j = 0, 0\n    \n    # Process each command\n    for cmd in commands:\n        if cmd == \"UP\":\n            i -= 1\n        elif cmd == \"DOWN\":\n            i += 1\n        elif cmd == \"LEFT\":\n            j -= 1\n        elif cmd == \"RIGHT\":\n            j += 1\n    \n    # Calculate the final cell position\n    return (i * n) + j\n"}
{"task_id": "abc367_b", "code": "def format_real_number():\n    X = input().strip()\n    if '.' in X:\n        integer_part, decimal_part = X.split('.')\n        decimal_part = decimal_part.rstrip('0')\n        if decimal_part:\n            print(f\"{integer_part}.{decimal_part}\")\n        else:\n            print(integer_part)\n    else:\n        print(X)\n\nformat_real_number()\n", "passed": true, "raw_code": "def format_real_number():\n    X = input().strip()\n    if '.' in X:\n        integer_part, decimal_part = X.split('.')\n        decimal_part = decimal_part.rstrip('0')\n        if decimal_part:\n            print(f\"{integer_part}.{decimal_part}\")\n        else:\n            print(integer_part)\n    else:\n        print(X)\n\nformat_real_number()\n"}
{"task_id": "abc372_a", "code": "def remove_dots():\n    S = input().strip()\n    result = S.replace('.', '')\n    print(result)\n\nremove_dots()\n", "passed": true, "raw_code": "def remove_dots():\n    S = input().strip()\n    result = S.replace('.', '')\n    print(result)\n\nremove_dots()\n"}
{"task_id": "abc370_a", "code": "def determine_takoyaki():\n    import sys\n    L, R = map(int, sys.stdin.readline().split())\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\ndetermine_takoyaki()\n", "passed": true, "raw_code": "def determine_takoyaki():\n    import sys\n    L, R = map(int, sys.stdin.readline().split())\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\ndetermine_takoyaki()\n"}
{"task_id": "3519", "code": "def count_winners(n, pick):\n    # Initialize a dictionary to keep track of each player's color counts\n    player_color_counts = {}\n    for player in range(n):\n        player_color_counts[player] = {}\n    \n    # Populate the player_color_counts with the picks\n    for x, y in pick:\n        if y in player_color_counts[x]:\n            player_color_counts[x][y] += 1\n        else:\n            player_color_counts[x][y] = 1\n    \n    # Count the number of winning players\n    winners = 0\n    for player in range(n):\n        # Check if any color count for the player exceeds their threshold (player + 1)\n        for color, count in player_color_counts[player].items():\n            if count > player:\n                winners += 1\n                break  # Only need one color to meet the condition\n    \n    return winners\n", "passed": true, "raw_code": "def count_winners(n, pick):\n    # Initialize a dictionary to keep track of each player's color counts\n    player_color_counts = {}\n    for player in range(n):\n        player_color_counts[player] = {}\n    \n    # Populate the player_color_counts with the picks\n    for x, y in pick:\n        if y in player_color_counts[x]:\n            player_color_counts[x][y] += 1\n        else:\n            player_color_counts[x][y] = 1\n    \n    # Count the number of winning players\n    winners = 0\n    for player in range(n):\n        # Check if any color count for the player exceeds their threshold (player + 1)\n        for color, count in player_color_counts[player].items():\n            if count > player:\n                winners += 1\n                break  # Only need one color to meet the condition\n    \n    return winners\n"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read().split()\n    N = int(input[0])\n    A = list(map(int, input[1:N+1]))\n    \n    # Create a list of tuples (value, original index)\n    indexed_A = [(A[i], i + 1) for i in range(N)]\n    \n    # Sort the list in descending order based on the value\n    sorted_A = sorted(indexed_A, key=lambda x: -x[0])\n    \n    # The second largest element is at position 1 (0-based index would be 1)\n    second_largest_index = sorted_A[1][1]\n    \n    print(second_largest_index)\n\nfind_second_largest_index()\n", "passed": true, "raw_code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read().split()\n    N = int(input[0])\n    A = list(map(int, input[1:N+1]))\n    \n    # Create a list of tuples (value, original index)\n    indexed_A = [(A[i], i + 1) for i in range(N)]\n    \n    # Sort the list in descending order based on the value\n    sorted_A = sorted(indexed_A, key=lambda x: -x[0])\n    \n    # The second largest element is at position 1 (0-based index would be 1)\n    second_largest_index = sorted_A[1][1]\n    \n    print(second_largest_index)\n\nfind_second_largest_index()\n"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    N, T, A = map(int, sys.stdin.readline().split())\n    remaining = N - T - A\n    # To determine if the outcome is already decided:\n    # The current leader cannot be overtaken even if the remaining votes all go to the other candidate.\n    if T > A:\n        if T > A + remaining:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    elif A > T:\n        if A > T + remaining:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        # If T == A, then the remaining votes will decide the winner\n        print(\"No\")\n\ndetermine_election_outcome()\n", "passed": true, "raw_code": "def determine_election_outcome():\n    import sys\n    N, T, A = map(int, sys.stdin.readline().split())\n    remaining = N - T - A\n    # To determine if the outcome is already decided:\n    # The current leader cannot be overtaken even if the remaining votes all go to the other candidate.\n    if T > A:\n        if T > A + remaining:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    elif A > T:\n        if A > T + remaining:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        # If T == A, then the remaining votes will decide the winner\n        print(\"No\")\n\ndetermine_election_outcome()\n"}
{"task_id": "abc368_a", "code": "3 4 5 1 2\n", "passed": false, "raw_code": "3 4 5 1 2\n"}
{"task_id": "abc371_b", "code": "def determine_taro_names():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    M = int(input[ptr])\n    ptr += 1\n    \n    families = {}  # key: family number, value: has_male (True/False)\n    \n    for _ in range(M):\n        A_i = int(input[ptr])\n        ptr += 1\n        B_i = input[ptr]\n        ptr += 1\n        \n        if B_i == 'M':\n            if A_i not in families:\n                families[A_i] = True\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n\ndetermine_taro_names()\n", "passed": true, "raw_code": "def determine_taro_names():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    M = int(input[ptr])\n    ptr += 1\n    \n    families = {}  # key: family number, value: has_male (True/False)\n    \n    for _ in range(M):\n        A_i = int(input[ptr])\n        ptr += 1\n        B_i = input[ptr]\n        ptr += 1\n        \n        if B_i == 'M':\n            if A_i not in families:\n                families[A_i] = True\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n\ndetermine_taro_names()\n"}
{"task_id": "3555", "code": "def transform_array(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] = min_val * multiplier\n    return nums\n", "passed": true, "raw_code": "def transform_array(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] = min_val * multiplier\n    return nums\n"}
{"task_id": "3567", "code": "def date_to_binary(date):\n    # Split the date into year, month, and day components\n    year, month, day = date.split('-')\n    \n    # Convert each component to integer and then to binary without leading '0b'\n    year_bin = bin(int(year))[2:]\n    month_bin = bin(int(month))[2:]\n    day_bin = bin(int(day))[2:]\n    \n    # Combine the binary representations with '-' in between\n    binary_date = f\"{year_bin}-{month_bin}-{day_bin}\"\n    \n    return binary_date\n", "passed": true, "raw_code": "def date_to_binary(date):\n    # Split the date into year, month, and day components\n    year, month, day = date.split('-')\n    \n    # Convert each component to integer and then to binary without leading '0b'\n    year_bin = bin(int(year))[2:]\n    month_bin = bin(int(month))[2:]\n    day_bin = bin(int(day))[2:]\n    \n    # Combine the binary representations with '-' in between\n    binary_date = f\"{year_bin}-{month_bin}-{day_bin}\"\n    \n    return binary_date\n"}
{"task_id": "abc366_b", "code": "  fda\n  geb\n  h*c\n  i\n  ", "passed": false, "raw_code": "  fda\n  geb\n  h*c\n  i\n  "}
{"task_id": "abc373_a", "code": "def count_matching_lengths():\n    count = 0\n    for i in range(1, 13):\n        s = input().strip()\n        if len(s) == i:\n            count += 1\n    print(count)\n\ncount_matching_lengths()\n", "passed": true, "raw_code": "def count_matching_lengths():\n    count = 0\n    for i in range(1, 13):\n        s = input().strip()\n        if len(s) == i:\n            count += 1\n    print(count)\n\ncount_matching_lengths()\n"}
{"task_id": "abc368_b", "code": "def solve():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    A = list(map(int, input[ptr:ptr+N]))\n    ptr += N\n    \n    count = 0\n    while True:\n        # Count positive elements\n        positive = [x for x in A if x > 0]\n        if len(positive) <= 1:\n            break\n        # Sort in descending order\n        A_sorted = sorted(A, reverse=True)\n        # Decrement the top two\n        A_sorted[0] -= 1\n        A_sorted[1] -= 1\n        count += 1\n        A = A_sorted\n    print(count)\n\nsolve()\n", "passed": true, "raw_code": "def solve():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    A = list(map(int, input[ptr:ptr+N]))\n    ptr += N\n    \n    count = 0\n    while True:\n        # Count positive elements\n        positive = [x for x in A if x > 0]\n        if len(positive) <= 1:\n            break\n        # Sort in descending order\n        A_sorted = sorted(A, reverse=True)\n        # Decrement the top two\n        A_sorted[0] -= 1\n        A_sorted[1] -= 1\n        count += 1\n        A = A_sorted\n    print(count)\n\nsolve()\n"}
{"task_id": "3568", "code": "def find_key(num1, num2, num3):\n    # Pad each number with leading zeros to make them 4 digits\n    str1 = str(num1).zfill(4)\n    str2 = str(num2).zfill(4)\n    str3 = str(num3).zfill(4)\n    \n    key_digits = []\n    for i in range(4):\n        # Get the i-th digit from each number\n        d1 = int(str1[i])\n        d2 = int(str2[i])\n        d3 = int(str3[i])\n        \n        # Find the smallest digit\n        min_digit = min(d1, d2, d3)\n        key_digits.append(str(min_digit))\n    \n    # Join the digits and convert to integer to remove leading zeros\n    key = int(''.join(key_digits))\n    return key\n", "passed": true, "raw_code": "def find_key(num1, num2, num3):\n    # Pad each number with leading zeros to make them 4 digits\n    str1 = str(num1).zfill(4)\n    str2 = str(num2).zfill(4)\n    str3 = str(num3).zfill(4)\n    \n    key_digits = []\n    for i in range(4):\n        # Get the i-th digit from each number\n        d1 = int(str1[i])\n        d2 = int(str2[i])\n        d3 = int(str3[i])\n        \n        # Find the smallest digit\n        min_digit = min(d1, d2, d3)\n        key_digits.append(str(min_digit))\n    \n    # Join the digits and convert to integer to remove leading zeros\n    key = int(''.join(key_digits))\n    return key\n"}
{"task_id": "abc370_b", "code": "def solve():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    \n    # Initialize the combination matrix\n    A = [[0] * (N + 1) for _ in range(N + 1)]  # 1-based indexing\n    \n    for i in range(1, N + 1):\n        for j in range(1, i + 1):\n            A[i][j] = int(input[ptr])\n            ptr += 1\n    \n    # Fill the upper triangular part (j > i) with A[j][i]\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            A[i][j] = A[j][i]\n    \n    current = 1\n    for j in range(1, N + 1):\n        # Combine current with j\n        i = current\n        if i >= j:\n            current = A[i][j]\n        else:\n            current = A[j][i]\n    \n    print(current)\n\nsolve()\n", "passed": true, "raw_code": "def solve():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    \n    # Initialize the combination matrix\n    A = [[0] * (N + 1) for _ in range(N + 1)]  # 1-based indexing\n    \n    for i in range(1, N + 1):\n        for j in range(1, i + 1):\n            A[i][j] = int(input[ptr])\n            ptr += 1\n    \n    # Fill the upper triangular part (j > i) with A[j][i]\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            A[i][j] = A[j][i]\n    \n    current = 1\n    for j in range(1, N + 1):\n        # Combine current with j\n        i = current\n        if i >= j:\n            current = A[i][j]\n        else:\n            current = A[j][i]\n    \n    print(current)\n\nsolve()\n"}
{"task_id": "3600", "code": "def find_kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        new_part = []\n        for c in word:\n            if c == 'z':\n                new_part.append('a')\n            else:\n                new_part.append(chr(ord(c) + 1))\n        word += ''.join(new_part)\n    return word[k-1]\n", "passed": true, "raw_code": "def find_kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        new_part = []\n        for c in word:\n            if c == 'z':\n                new_part.append('a')\n            else:\n                new_part.append(chr(ord(c) + 1))\n        word += ''.join(new_part)\n    return word[k-1]\n"}
{"task_id": "3553", "code": "def same_color(coordinate1, coordinate2):\n    # Extract the column (letter) and row (number) for each coordinate\n    col1, row1 = coordinate1[0], int(coordinate1[1])\n    col2, row2 = coordinate2[0], int(coordinate2[1])\n    \n    # Calculate the color of each square\n    # The color is determined by the sum of the column and row indices\n    # If the sum is even, the square is black; if odd, it's white\n    color1 = (ord(col1) - ord('a') + row1) % 2\n    color2 = (ord(col2) - ord('a') + row2) % 2\n    \n    # Return True if colors are the same, False otherwise\n    return color1 == color2\n", "passed": true, "raw_code": "def same_color(coordinate1, coordinate2):\n    # Extract the column (letter) and row (number) for each coordinate\n    col1, row1 = coordinate1[0], int(coordinate1[1])\n    col2, row2 = coordinate2[0], int(coordinate2[1])\n    \n    # Calculate the color of each square\n    # The color is determined by the sum of the column and row indices\n    # If the sum is even, the square is black; if odd, it's white\n    color1 = (ord(col1) - ord('a') + row1) % 2\n    color2 = (ord(col2) - ord('a') + row2) % 2\n    \n    # Return True if colors are the same, False otherwise\n    return color1 == color2\n"}
{"task_id": "3543", "code": "def count_valid_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            \n            if zeros <= k or ones <= k:\n                count += 1\n            else:\n                break\n    \n    return count\n", "passed": true, "raw_code": "def count_valid_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            \n            if zeros <= k or ones <= k:\n                count += 1\n            else:\n                break\n    \n    return count\n"}
{"task_id": "3606", "code": "def min_digit_sum(nums):\n    \"\"\"\n    Replaces each element in nums with the sum of its digits and returns the minimum element.\n    \n    Args:\n    nums (List[int]): List of integers to process.\n    \n    Returns:\n    int: The minimum element after replacing each number with the sum of its digits.\n    \"\"\"\n    def digit_sum(n):\n        \"\"\"Helper function to calculate the sum of digits of a number.\"\"\"\n        total = 0\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return total\n    \n    # Replace each element in nums with its digit sum\n    transformed = [digit_sum(num) for num in nums]\n    \n    # Return the minimum element in the transformed list\n    return min(transformed)\n", "passed": true, "raw_code": "def min_digit_sum(nums):\n    \"\"\"\n    Replaces each element in nums with the sum of its digits and returns the minimum element.\n    \n    Args:\n    nums (List[int]): List of integers to process.\n    \n    Returns:\n    int: The minimum element after replacing each number with the sum of its digits.\n    \"\"\"\n    def digit_sum(n):\n        \"\"\"Helper function to calculate the sum of digits of a number.\"\"\"\n        total = 0\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return total\n    \n    # Replace each element in nums with its digit sum\n    transformed = [digit_sum(num) for num in nums]\n    \n    # Return the minimum element in the transformed list\n    return min(transformed)\n"}
{"task_id": "abc369_a", "code": "def solve():\n    import sys\n    A, B = map(int, sys.stdin.readline().split())\n    possible_x = set()\n    \n    # Case 1: A, B, x is arithmetic sequence\n    x1 = 2 * B - A\n    possible_x.add(x1)\n    \n    # Case 2: A, x, B is arithmetic sequence\n    if (A + B) % 2 == 0:\n        x2 = (A + B) // 2\n        possible_x.add(x2)\n    \n    # Case 3: x, A, B is arithmetic sequence\n    x3 = 2 * A - B\n    possible_x.add(x3)\n    \n    print(len(possible_x))\n\nsolve()\n", "passed": true, "raw_code": "def solve():\n    import sys\n    A, B = map(int, sys.stdin.readline().split())\n    possible_x = set()\n    \n    # Case 1: A, B, x is arithmetic sequence\n    x1 = 2 * B - A\n    possible_x.add(x1)\n    \n    # Case 2: A, x, B is arithmetic sequence\n    if (A + B) % 2 == 0:\n        x2 = (A + B) // 2\n        possible_x.add(x2)\n    \n    # Case 3: x, A, B is arithmetic sequence\n    x3 = 2 * A - B\n    possible_x.add(x3)\n    \n    print(len(possible_x))\n\nsolve()\n"}
{"task_id": "abc373_b", "code": "def calculate_min_distance():\n    S = input().strip()\n    # Create a dictionary to map each character to its 1-based position in S\n    char_to_pos = {char: idx for idx, char in enumerate(S, 1)}\n    total_distance = 0\n    current_pos = char_to_pos['A']\n    for c in 'BCDEFGHIJKLMNOPQRSTUVWXYZ':\n        next_pos = char_to_pos[c]\n        total_distance += abs(next_pos - current_pos)\n        current_pos = next_pos\n    print(total_distance)\n\ncalculate_min_distance()\n", "passed": true, "raw_code": "def calculate_min_distance():\n    S = input().strip()\n    # Create a dictionary to map each character to its 1-based position in S\n    char_to_pos = {char: idx for idx, char in enumerate(S, 1)}\n    total_distance = 0\n    current_pos = char_to_pos['A']\n    for c in 'BCDEFGHIJKLMNOPQRSTUVWXYZ':\n        next_pos = char_to_pos[c]\n        total_distance += abs(next_pos - current_pos)\n        current_pos = next_pos\n    print(total_distance)\n\ncalculate_min_distance()\n"}
{"task_id": "abc367_a", "code": "def solve():\n    A, B, C = map(int, input().split())\n    if B < C:\n        if B <= A < C:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    else:\n        if A >= B or A < C:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\nsolve()\n", "passed": true, "raw_code": "def solve():\n    A, B, C = map(int, input().split())\n    if B < C:\n        if B <= A < C:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    else:\n        if A >= B or A < C:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\nsolve()\n"}
{"task_id": "abc369_b", "code": "def solve():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    A = []\n    S = []\n    for _ in range(N):\n        a = int(input[ptr])\n        s = input[ptr + 1]\n        ptr += 2\n        A.append(a)\n        S.append(s)\n    \n    INF = float('inf')\n    # DP[i][l][r] = min fatigue after first i steps, left at l, right at r\n    # Initialize with INF\n    max_key = 100\n    dp_prev = [[INF] * (max_key + 1) for _ in range(max_key + 1)]\n    \n    # Initial state: before any key press, hands can be anywhere, fatigue 0\n    # But the first key press will require the hand to be on A_0\n    # So for the first step, the other hand can be anywhere, but the assigned hand must be at A_0\n    first_a = A[0]\n    first_hand = S[0]\n    if first_hand == 'L':\n        # left hand must be at first_a, right can be anywhere (initial position)\n        for r in range(1, max_key + 1):\n            dp_prev[first_a][r] = 0\n    else:\n        # right hand must be at first_a, left can be anywhere\n        for l in range(1, max_key + 1):\n            dp_prev[l][first_a] = 0\n    \n    for i in range(1, N):\n        a_i = A[i]\n        s_i = S[i]\n        dp_next = [[INF] * (max_key + 1) for _ in range(max_key + 1)]\n        if s_i == 'L':\n            # current press is left hand: must be at a_i\n            for l_prev in range(1, max_key + 1):\n                for r_prev in range(1, max_key + 1):\n                    if dp_prev[l_prev][r_prev] == INF:\n                        continue\n                    # new left is a_i, right remains r_prev\n                    cost = dp_prev[l_prev][r_prev] + abs(a_i - l_prev)\n                    if cost < dp_next[a_i][r_prev]:\n                        dp_next[a_i][r_prev] = cost\n        else:\n            # current press is right hand: must be at a_i\n            for l_prev in range(1, max_key + 1):\n                for r_prev in range(1, max_key + 1):\n                    if dp_prev[l_prev][r_prev] == INF:\n                        continue\n                    # new right is a_i, left remains l_prev\n                    cost = dp_prev[l_prev][r_prev] + abs(a_i - r_prev)\n                    if cost < dp_next[l_prev][a_i]:\n                        dp_next[l_prev][a_i] = cost\n        dp_prev = dp_next\n    \n    min_fatigue = INF\n    for l in range(1, max_key + 1):\n        for r in range(1, max_key + 1):\n            if dp_prev[l][r] < min_fatigue:\n                min_fatigue = dp_prev[l][r]\n    print(min_fatigue)\n\nsolve()\n", "passed": true, "raw_code": "def solve():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    N = int(input[ptr])\n    ptr += 1\n    A = []\n    S = []\n    for _ in range(N):\n        a = int(input[ptr])\n        s = input[ptr + 1]\n        ptr += 2\n        A.append(a)\n        S.append(s)\n    \n    INF = float('inf')\n    # DP[i][l][r] = min fatigue after first i steps, left at l, right at r\n    # Initialize with INF\n    max_key = 100\n    dp_prev = [[INF] * (max_key + 1) for _ in range(max_key + 1)]\n    \n    # Initial state: before any key press, hands can be anywhere, fatigue 0\n    # But the first key press will require the hand to be on A_0\n    # So for the first step, the other hand can be anywhere, but the assigned hand must be at A_0\n    first_a = A[0]\n    first_hand = S[0]\n    if first_hand == 'L':\n        # left hand must be at first_a, right can be anywhere (initial position)\n        for r in range(1, max_key + 1):\n            dp_prev[first_a][r] = 0\n    else:\n        # right hand must be at first_a, left can be anywhere\n        for l in range(1, max_key + 1):\n            dp_prev[l][first_a] = 0\n    \n    for i in range(1, N):\n        a_i = A[i]\n        s_i = S[i]\n        dp_next = [[INF] * (max_key + 1) for _ in range(max_key + 1)]\n        if s_i == 'L':\n            # current press is left hand: must be at a_i\n            for l_prev in range(1, max_key + 1):\n                for r_prev in range(1, max_key + 1):\n                    if dp_prev[l_prev][r_prev] == INF:\n                        continue\n                    # new left is a_i, right remains r_prev\n                    cost = dp_prev[l_prev][r_prev] + abs(a_i - l_prev)\n                    if cost < dp_next[a_i][r_prev]:\n                        dp_next[a_i][r_prev] = cost\n        else:\n            # current press is right hand: must be at a_i\n            for l_prev in range(1, max_key + 1):\n                for r_prev in range(1, max_key + 1):\n                    if dp_prev[l_prev][r_prev] == INF:\n                        continue\n                    # new right is a_i, left remains l_prev\n                    cost = dp_prev[l_prev][r_prev] + abs(a_i - r_prev)\n                    if cost < dp_next[l_prev][a_i]:\n                        dp_next[l_prev][a_i] = cost\n        dp_prev = dp_next\n    \n    min_fatigue = INF\n    for l in range(1, max_key + 1):\n        for r in range(1, max_key + 1):\n            if dp_prev[l][r] < min_fatigue:\n                min_fatigue = dp_prev[l][r]\n    print(min_fatigue)\n\nsolve()\n"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    S_AB, S_AC, S_BC = input().split()\n    \n    # We'll represent the brothers as characters and determine their order\n    # The order is a list where the first is youngest, last is oldest.\n    # We need to find a permutation of A, B, C that satisfies all three conditions.\n    \n    # Possible permutations of A, B, C\n    from itertools import permutations\n    \n    for candidate in permutations(['A', 'B', 'C']):\n        a, b, c = candidate\n        # Check S_AB: relation between A and B\n        # In the candidate, the position determines age: earlier in the tuple means younger.\n        a_pos = candidate.index('A')\n        b_pos = candidate.index('B')\n        c_pos = candidate.index('C')\n        \n        # Check S_AB\n        if S_AB == '<':\n            if a_pos >= b_pos:\n                continue\n        else:\n            if a_pos <= b_pos:\n                continue\n        \n        # Check S_AC\n        if S_AC == '<':\n            if a_pos >= c_pos:\n                continue\n        else:\n            if a_pos <= c_pos:\n                continue\n        \n        # Check S_BC\n        if S_BC == '<':\n            if b_pos >= c_pos:\n                continue\n        else:\n            if b_pos <= c_pos:\n                continue\n        \n        # If all checks passed, this is the correct order\n        # The middle brother is the one in position 1 (0-based, 1 is middle in 0,1,2)\n        return candidate[1]\n    \n    # According to the problem statement, input has no contradictions, so the loop will always return.\n    return None\n\nresult = find_middle_brother()\nprint(result)\n", "passed": true, "raw_code": "def find_middle_brother():\n    S_AB, S_AC, S_BC = input().split()\n    \n    # We'll represent the brothers as characters and determine their order\n    # The order is a list where the first is youngest, last is oldest.\n    # We need to find a permutation of A, B, C that satisfies all three conditions.\n    \n    # Possible permutations of A, B, C\n    from itertools import permutations\n    \n    for candidate in permutations(['A', 'B', 'C']):\n        a, b, c = candidate\n        # Check S_AB: relation between A and B\n        # In the candidate, the position determines age: earlier in the tuple means younger.\n        a_pos = candidate.index('A')\n        b_pos = candidate.index('B')\n        c_pos = candidate.index('C')\n        \n        # Check S_AB\n        if S_AB == '<':\n            if a_pos >= b_pos:\n                continue\n        else:\n            if a_pos <= b_pos:\n                continue\n        \n        # Check S_AC\n        if S_AC == '<':\n            if a_pos >= c_pos:\n                continue\n        else:\n            if a_pos <= c_pos:\n                continue\n        \n        # Check S_BC\n        if S_BC == '<':\n            if b_pos >= c_pos:\n                continue\n        else:\n            if b_pos <= c_pos:\n                continue\n        \n        # If all checks passed, this is the correct order\n        # The middle brother is the one in position 1 (0-based, 1 is middle in 0,1,2)\n        return candidate[1]\n    \n    # According to the problem statement, input has no contradictions, so the loop will always return.\n    return None\n\nresult = find_middle_brother()\nprint(result)\n"}
{"final_accuracy": "92.31%"}
