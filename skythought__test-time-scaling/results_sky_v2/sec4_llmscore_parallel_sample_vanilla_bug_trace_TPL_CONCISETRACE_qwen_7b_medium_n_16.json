{"difficulty": "medium", "num_threads": 32, "temperature": 0.7, "n": 16, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_CONCISETRACE_qwen_7b_medium_n_16.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3518", "code": "def max_score(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score using the first four elements of the sorted array b\n    score = sum(a[i] * b_sorted[i] for i in range(4))\n    \n    return score", "passed": false, "raw_code": "```python\ndef max_score(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score using the first four elements of the sorted array b\n    score = sum(a[i] * b_sorted[i] for i in range(4))\n    \n    return score\n```"}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    unique_banned_words = set()\n    \n    for word in message:\n        if word in banned_set:\n            unique_banned_words.add(word)\n            if len(unique_banned_words) == 2:\n                return True\n    \n    return False", "passed": false, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    unique_banned_words = set()\n    \n    for word in message:\n        if word in banned_set:\n            unique_banned_words.add(word)\n            if len(unique_banned_words) == 2:\n                return True\n    \n    return False\n```"}
{"task_id": "abc373_c", "code": "def max_sum(A, B):\n    # Sort both sequences\n    A.sort()\n    B.sort()\n    \n    # The maximum sum will be the sum of the last elements of both sorted sequences\n    return A[-1] + B[-1]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nN = int(data[0])\nA = list(map(int, data[1:N+1]))\nB = list(map(int, data[N+1:]))\n\n# Print the result\nprint(max_sum(A, B))", "passed": true, "raw_code": "```python\ndef max_sum(A, B):\n    # Sort both sequences\n    A.sort()\n    B.sort()\n    \n    # The maximum sum will be the sum of the last elements of both sorted sequences\n    return A[-1] + B[-1]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nN = int(data[0])\nA = list(map(int, data[1:N+1]))\nB = list(map(int, data[N+1:]))\n\n# Print the result\nprint(max_sum(A, B))\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    index = 1\n    results = []\n    \n    # Initialize data structures\n    unique_values = set()\n    value_counts = {}\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(data[index])\n            index += 1\n            if x not in value_counts:\n                unique_values.add(x)\n            value_counts[x] = value_counts.get(x, 0) + 1\n        elif query_type == 2:\n            x = int(data[index])\n            index += 1\n            value_counts[x] -= 1\n            if value_counts[x] == 0:\n                unique_values.remove(x)\n        elif query_type == 3:\n            results.append(len(unique_values))\n    \n    # Print results for type 3 queries\n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    index = 1\n    results = []\n    \n    # Initialize data structures\n    unique_values = set()\n    value_counts = {}\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(data[index])\n            index += 1\n            if x not in value_counts:\n                unique_values.add(x)\n            value_counts[x] = value_counts.get(x, 0) + 1\n        elif query_type == 2:\n            x = int(data[index])\n            index += 1\n            value_counts[x] -= 1\n            if value_counts[x] == 0:\n                unique_values.remove(x)\n        elif query_type == 3:\n            results.append(len(unique_values))\n    \n    # Print results for type 3 queries\n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "abc372_d", "code": "def count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            if all(heights[k] <= heights[j] for k in range(i + 1, j)):\n                result[i] += 1\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()", "passed": false, "raw_code": "```python\ndef count_valid_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            if all(heights[k] <= heights[j] for k in range(i + 1, j)):\n                result[i] += 1\n    \n    print(' '.join(map(str, result)))\n\ncount_valid_buildings()\n```"}
{"task_id": "3526", "code": "def minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[~i] for i in range((n + 1) // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome(col) for col in zip(*grid))\n    \n    return min(row_flips, col_flips)", "passed": false, "raw_code": "```python\ndef minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[~i] for i in range((n + 1) // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome(col) for col in zip(*grid))\n    \n    return min(row_flips, col_flips)\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Initialize the first hour\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    return max(dp_A[-1], dp_B[-1])", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Initialize the first hour\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    return max(dp_A[-1], dp_B[-1])\n```"}
{"task_id": "3534", "code": "def almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def generate_swapped_numbers(num_str):\n        swapped_numbers = set()\n        num_list = list(num_str)\n        for i in range(len(num_list)):\n            for j in range(i + 1, len(num_list)):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                swapped_numbers.add(''.join(num_list))\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n        return swapped_numbers\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1_str = str(nums[i])\n            num2_str = str(nums[j])\n            if num1_str == num2_str:\n                count += 1\n            else:\n                swapped_num1 = generate_swapped_numbers(num1_str)\n                if num2_str in swapped_num1:\n                    count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def generate_swapped_numbers(num_str):\n        swapped_numbers = set()\n        num_list = list(num_str)\n        for i in range(len(num_list)):\n            for j in range(i + 1, len(num_list)):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                swapped_numbers.add(''.join(num_list))\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n        return swapped_numbers\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1_str = str(nums[i])\n            num2_str = str(nums[j])\n            if num1_str == num2_str:\n                count += 1\n            else:\n                swapped_num1 = generate_swapped_numbers(num1_str)\n                if num2_str in swapped_num1:\n                    count += 1\n    \n    return count\n```"}
{"task_id": "3496", "code": "def minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        return sum(worker * (time // (worker + 1)) for worker in workerTimes) >= height\n    \n    left, right = 1, max(worker * (mountainHeight * (mountainHeight + 1) // 2) for worker in workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        return sum(worker * (time // (worker + 1)) for worker in workerTimes) >= height\n    \n    left, right = 1, max(worker * (mountainHeight * (mountainHeight + 1) // 2) for worker in workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    start.sort()\n    n = len(start)\n    max_score = 0\n    \n    for i in range(n):\n        # Consider both the lower and upper bounds of the interval\n        lower_bound = start[i]\n        upper_bound = start[i] + d\n        \n        # Calculate the potential scores\n        if i > 0:\n            score_with_lower = abs(lower_bound - start[i-1])\n        else:\n            score_with_lower = float('inf')\n        \n        if i < n - 1:\n            score_with_upper = abs(upper_bound - start[i+1])\n        else:\n            score_with_upper = float('inf')\n        \n        # Choose the maximum of the two potential scores\n        max_score = max(max_score, min(score_with_lower, score_with_upper))\n    \n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    start.sort()\n    n = len(start)\n    max_score = 0\n    \n    for i in range(n):\n        # Consider both the lower and upper bounds of the interval\n        lower_bound = start[i]\n        upper_bound = start[i] + d\n        \n        # Calculate the potential scores\n        if i > 0:\n            score_with_lower = abs(lower_bound - start[i-1])\n        else:\n            score_with_lower = float('inf')\n        \n        if i < n - 1:\n            score_with_upper = abs(upper_bound - start[i+1])\n        else:\n            score_with_upper = float('inf')\n        \n        # Choose the maximum of the two potential scores\n        max_score = max(max_score, min(score_with_lower, score_with_upper))\n    \n    return max_score\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    dp = [[0, 0] for _ in range(N + 1)]\n    \n    for i in range(1, N + 1):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1])\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1]) + A[i-1]\n        if i % 2 == 0:\n            dp[i][1] += A[i-1]\n    \n    print(max(dp[N][0], dp[N][1]))\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    dp = [[0, 0] for _ in range(N + 1)]\n    \n    for i in range(1, N + 1):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1])\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1]) + A[i-1]\n        if i % 2 == 0:\n            dp[i][1] += A[i-1]\n    \n    print(max(dp[N][0], dp[N][1]))\n\nmax_experience_points()\n```"}
{"task_id": "3495", "code": "import heapq\n\ndef kth_nearest_obstacles(queries, k):\n    min_heap = []\n    results = [-1] * len(queries)\n\n    for i, (x, y) in enumerate(queries):\n        distance = abs(x) + abs(y)\n        heapq.heappush(min_heap, (-distance, x, y))\n\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n        if len(min_heap) == k:\n            results[i] = -min_heap[0][0]\n\n    return results", "passed": true, "raw_code": "import heapq\n\ndef kth_nearest_obstacles(queries, k):\n    min_heap = []\n    results = [-1] * len(queries)\n\n    for i, (x, y) in enumerate(queries):\n        distance = abs(x) + abs(y)\n        heapq.heappush(min_heap, (-distance, x, y))\n\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n        if len(min_heap) == k:\n            results[i] = -min_heap[0][0]\n\n    return results"}
{"task_id": "abc371_d", "code": "import sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    P = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n    \n    # Create prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for p in P:\n        current_sum += p\n        prefix_sum.append(current_sum)\n    \n    # Process each query\n    for L, R in queries:\n        # Find the indices using binary search\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        \n        # Calculate the result\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\nimport sys\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    P = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = []\n    for _ in range(Q):\n        L = int(data[index])\n        R = int(data[index + 1])\n        queries.append((L, R))\n        index += 2\n    \n    # Create prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for p in P:\n        current_sum += p\n        prefix_sum.append(current_sum)\n    \n    # Process each query\n    for L, R in queries:\n        # Find the indices using binary search\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n        \n        # Calculate the result\n        result = prefix_sum[right_index] - prefix_sum[left_index]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        for r in range(l, N):\n            if r - l <= 1:\n                count += 1\n            else:\n                diff = A[r] - A[r-1]\n                is_ap = True\n                for i in range(r-1, l, -1):\n                    if A[i] - A[i-1] != diff:\n                        is_ap = False\n                        break\n                if is_ap:\n                    count += 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        for r in range(l, N):\n            if r - l <= 1:\n                count += 1\n            else:\n                diff = A[r] - A[r-1]\n                is_ap = True\n                for i in range(r-1, l, -1):\n                    if A[i] - A[i-1] != diff:\n                        is_ap = False\n                        break\n                if is_ap:\n                    count += 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "3522", "code": "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        is_consecutive_and_sorted = sorted(subarray) == subarray and all(subarray[j] - subarray[j - 1] == 1 for j in range(1, k))\n        \n        if is_consecutive_and_sorted:\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "passed": true, "raw_code": "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        is_consecutive_and_sorted = sorted(subarray) == subarray and all(subarray[j] - subarray[j - 1] == 1 for j in range(1, k))\n        \n        if is_consecutive_and_sorted:\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    # Check if the subsidy limit can be made infinitely large\n    if sum(A) <= M:\n        return \"infinite\"\n    \n    # Binary search for the maximum subsidy limit\n    low, high = 0, 10**9\n    while low <= high:\n        mid = (low + high) // 2\n        total_subsidy = sum(min(mid, a) for a in A)\n        if total_subsidy <= M:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return high\n\n# Call the function with input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nprint(max_subsidy_limit(N, M, A))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    # Check if the subsidy limit can be made infinitely large\n    if sum(A) <= M:\n        return \"infinite\"\n    \n    # Binary search for the maximum subsidy limit\n    low, high = 0, 10**9\n    while low <= high:\n        mid = (low + high) // 2\n        total_subsidy = sum(min(mid, a) for a in A)\n        if total_subsidy <= M:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return high\n\n# Call the function with input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "abc372_c", "code": "def count_abc(S):\n    n = len(S)\n    count = 0\n    a, b, c = 0, 0, 0\n    \n    for char in S:\n        if char == 'A':\n            a += 1\n        elif char == 'B':\n            b += 1\n            count += a\n        elif char == 'C':\n            c += 1\n            count += b\n        else:\n            a, b, c = 0, 0, 0\n    \n    return count\n\ndef process_queries(N, Q, S, queries):\n    result = []\n    a, b, c = 0, 0, 0\n    total_count = 0\n    \n    for i in range(Q):\n        X, C = queries[i]\n        X -= 1\n        \n        # Remove the effect of the previous character at position X\n        prev_char = S[X]\n        if prev_char == 'A':\n            a -= 1\n        elif prev_char == 'B':\n            b -= 1\n            total_count -= a\n        elif prev_char == 'C':\n            c -= 1\n            total_count -= b\n        \n        # Add the effect of the new character at position X\n        if C == 'A':\n            a += 1\n        elif C == 'B':\n            b += 1\n            total_count += a\n        elif C == 'C':\n            c += 1\n            total_count += b\n        \n        S = S[:X] + C + S[X+1:]\n        \n        result.append(total_count)\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[2 + 2 * i]) - 1, data[3 + 2 * i]) for i in range(Q)]\n\n# Process queries and get results\nresults = process_queries(N, Q, S, queries)\n\n# Print results\nfor res in results:\n    print(res)", "passed": false, "raw_code": "```python\ndef count_abc(S):\n    n = len(S)\n    count = 0\n    a, b, c = 0, 0, 0\n    \n    for char in S:\n        if char == 'A':\n            a += 1\n        elif char == 'B':\n            b += 1\n            count += a\n        elif char == 'C':\n            c += 1\n            count += b\n        else:\n            a, b, c = 0, 0, 0\n    \n    return count\n\ndef process_queries(N, Q, S, queries):\n    result = []\n    a, b, c = 0, 0, 0\n    total_count = 0\n    \n    for i in range(Q):\n        X, C = queries[i]\n        X -= 1\n        \n        # Remove the effect of the previous character at position X\n        prev_char = S[X]\n        if prev_char == 'A':\n            a -= 1\n        elif prev_char == 'B':\n            b -= 1\n            total_count -= a\n        elif prev_char == 'C':\n            c -= 1\n            total_count -= b\n        \n        # Add the effect of the new character at position X\n        if C == 'A':\n            a += 1\n        elif C == 'B':\n            b += 1\n            total_count += a\n        elif C == 'C':\n            c += 1\n            total_count += b\n        \n        S = S[:X] + C + S[X+1:]\n        \n        result.append(total_count)\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nS = data[2]\nqueries = [(int(data[2 + 2 * i]) - 1, data[3 + 2 * i]) for i in range(Q)]\n\n# Process queries and get results\nresults = process_queries(N, Q, S, queries)\n\n# Print results\nfor res in results:\n    print(res)\n```"}
{"task_id": "abc367_d", "code": "from collections import defaultdict\nfrom math import comb\n\ndef count_valid_pairs(N, M, A):\n    # Step 1: Calculate prefix sums\n    prefix = [0]\n    current_sum = 0\n    for a in A:\n        current_sum += a\n        prefix.append(current_sum)\n    \n    # Step 2: Group indices by prefix sums modulo M\n    mod_groups = defaultdict(list)\n    for i in range(1, N + 1):\n        mod_groups[prefix[i] % M].append(i)\n    \n    # Step 3: Count valid pairs\n    total_pairs = 0\n    for group in mod_groups.values():\n        n = len(group)\n        total_pairs += comb(n, 2)\n    \n    return total_pairs\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function and print the result\nprint(count_valid_pairs(N, M, A))", "passed": false, "raw_code": "```python\nfrom collections import defaultdict\nfrom math import comb\n\ndef count_valid_pairs(N, M, A):\n    # Step 1: Calculate prefix sums\n    prefix = [0]\n    current_sum = 0\n    for a in A:\n        current_sum += a\n        prefix.append(current_sum)\n    \n    # Step 2: Group indices by prefix sums modulo M\n    mod_groups = defaultdict(list)\n    for i in range(1, N + 1):\n        mod_groups[prefix[i] % M].append(i)\n    \n    # Step 3: Count valid pairs\n    total_pairs = 0\n    for group in mod_groups.values():\n        n = len(group)\n        total_pairs += comb(n, 2)\n    \n    return total_pairs\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function and print the result\nprint(count_valid_pairs(N, M, A))\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    wins = 0\n    last_move = None\n    \n    for move in S:\n        if move == 'R':\n            if last_move != 'P':\n                wins += 1\n                last_move = 'P'\n            elif last_move == 'P':\n                last_move = 'S'\n            else:\n                last_move = 'R'\n        elif move == 'P':\n            if last_move != 'S':\n                wins += 1\n                last_move = 'S'\n            elif last_move == 'S':\n                last_move = 'R'\n            else:\n                last_move = 'P'\n        elif move == 'S':\n            if last_move != 'R':\n                wins += 1\n                last_move = 'R'\n            elif last_move == 'R':\n                last_move = 'P'\n            else:\n                last_move = 'S'\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    wins = 0\n    last_move = None\n    \n    for move in S:\n        if move == 'R':\n            if last_move != 'P':\n                wins += 1\n                last_move = 'P'\n            elif last_move == 'P':\n                last_move = 'S'\n            else:\n                last_move = 'R'\n        elif move == 'P':\n            if last_move != 'S':\n                wins += 1\n                last_move = 'S'\n            elif last_move == 'S':\n                last_move = 'R'\n            else:\n                last_move = 'P'\n        elif move == 'S':\n            if last_move != 'R':\n                wins += 1\n                last_move = 'R'\n            elif last_move == 'R':\n                last_move = 'P'\n            else:\n                last_move = 'S'\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "abc370_c", "code": "import heapq\n\ndef transform_string(S, T):\n    M = 0\n    X = []\n    queue = [(S, 0)]\n    \n    while queue:\n        current, index = heapq.heappop(queue)\n        if current == T:\n            break\n        if index == len(S):\n            heapq.heappush(queue, (current, 0))\n            continue\n        for i in range(26):\n            new_char = chr(ord('a') + i)\n            if new_char != current[index]:\n                new_string = current[:index] + new_char + current[index+1:]\n                heapq.heappush(queue, (new_string, index + 1))\n                M += 1\n                X.append(new_string)\n    \n    return M, X\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    S = data[0]\n    T = data[1]\n    \n    M, X = transform_string(S, T)\n    \n    print(M)\n    for x in X:\n        print(x)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport heapq\n\ndef transform_string(S, T):\n    M = 0\n    X = []\n    queue = [(S, 0)]\n    \n    while queue:\n        current, index = heapq.heappop(queue)\n        if current == T:\n            break\n        if index == len(S):\n            heapq.heappush(queue, (current, 0))\n            continue\n        for i in range(26):\n            new_char = chr(ord('a') + i)\n            if new_char != current[index]:\n                new_string = current[:index] + new_char + current[index+1:]\n                heapq.heappush(queue, (new_string, index + 1))\n                M += 1\n                X.append(new_string)\n    \n    return M, X\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    S = data[0]\n    T = data[1]\n    \n    M, X = transform_string(S, T)\n    \n    print(M)\n    for x in X:\n        print(x)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            \n            for v in graph[u]:\n                distance = current_dist + 1\n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return dist[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "passed": true, "raw_code": "```python\nimport heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            \n            for v in graph[u]:\n                distance = current_dist + 1\n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return dist[end]\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if j > i:\n                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if j > i:\n                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```"}
{"task_id": "3579", "code": "from itertools import permutations\n\ndef max_binary_number(nums):\n    max_num = 0\n    for perm in permutations(nums):\n        binary_str = ''.join(format(num, 'b') for num in perm)\n        max_num = max(max_num, int(binary_str, 2))\n    return max_num", "passed": true, "raw_code": "```python\nfrom itertools import permutations\n\ndef max_binary_number(nums):\n    max_num = 0\n    for perm in permutations(nums):\n        binary_str = ''.join(format(num, 'b') for num in perm)\n        max_num = max(max_num, int(binary_str, 2))\n    return max_num\n```"}
{"task_id": "arc181_a", "code": "def min_operations_to_identity():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        \n        operations = 0\n        \n        for i in range(N):\n            while P[i] != i + 1:\n                # Find the position of the element that should be at position i\n                j = P.index(i + 1)\n                \n                # Sort the segment [0:i+1]\n                if j > 0:\n                    P[:j+1] = sorted(P[:j+1])\n                \n                # Sort the segment [i:N]\n                if j < N - 1:\n                    P[j:] = sorted(P[j:])\n                \n                operations += 1\n        \n        results.append(operations)\n    \n    for result in results:\n        print(result)\n\nmin_operations_to_identity()", "passed": false, "raw_code": "```python\ndef min_operations_to_identity():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        P = list(map(int, data[index:index + N]))\n        index += N\n        \n        operations = 0\n        \n        for i in range(N):\n            while P[i] != i + 1:\n                # Find the position of the element that should be at position i\n                j = P.index(i + 1)\n                \n                # Sort the segment [0:i+1]\n                if j > 0:\n                    P[:j+1] = sorted(P[:j+1])\n                \n                # Sort the segment [i:N]\n                if j < N - 1:\n                    P[j:] = sorted(P[j:])\n                \n                operations += 1\n        \n        results.append(operations)\n    \n    for result in results:\n        print(result)\n\nmin_operations_to_identity()\n```"}
{"task_id": "3559", "code": "def minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Create a dictionary to store words and their prefixes\n    prefixes = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefixes[word[:i]].append(word)\n    \n    # Initialize the DP array with infinity\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill the DP array\n    for i in range(1, len(target) + 1):\n        for prefix in prefixes:\n            if target[i - len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    # Check if it's possible to form the target string\n    if dp[-1] == float('inf'):\n        return -1\n    return dp[-1]", "passed": false, "raw_code": "```python\ndef minValidStrings(words, target):\n    from collections import defaultdict\n    \n    # Create a dictionary to store words and their prefixes\n    prefixes = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefixes[word[:i]].append(word)\n    \n    # Initialize the DP array with infinity\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill the DP array\n    for i in range(1, len(target) + 1):\n        for prefix in prefixes:\n            if target[i - len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    # Check if it's possible to form the target string\n    if dp[-1] == float('inf'):\n        return -1\n    return dp[-1]\n```"}
{"task_id": "abc367_c", "code": "import sys\nfrom itertools import product\n\ndef find_sequences(N, K, R):\n    sequences = []\n    for seq in product(range(1, r+1) for r in R):\n        if sum(seq) % K == 0:\n            sequences.append(seq)\n    sequences.sort()\n    return sequences\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    sequences = find_sequences(N, K, R)\n    print(len(sequences))\n    for seq in sequences:\n        print(' '.join(map(str, seq)))\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "import sys\nfrom itertools import product\n\ndef find_sequences(N, K, R):\n    sequences = []\n    for seq in product(range(1, r+1) for r in R):\n        if sum(seq) % K == 0:\n            sequences.append(seq)\n    sequences.sort()\n    return sequences\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    sequences = find_sequences(N, K, R)\n    print(len(sequences))\n    for seq in sequences:\n        print(' '.join(map(str, seq)))\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "3558", "code": "def can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, current_health):\n        if x < 0 or x >= m or y < 0 or y >= n or current_health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return current_health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 1  # Mark the cell as visited\n        current_health -= temp\n        \n        # Explore all four directions\n        if (dfs(x + 1, y, current_health) or\n            dfs(x - 1, y, current_health) or\n            dfs(x, y + 1, current_health) or\n            dfs(x, y - 1, current_health)):\n            return True\n        \n        grid[x][y] = temp  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, current_health):\n        if x < 0 or x >= m or y < 0 or y >= n or current_health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return current_health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 1  # Mark the cell as visited\n        current_health -= temp\n        \n        # Explore all four directions\n        if (dfs(x + 1, y, current_health) or\n            dfs(x - 1, y, current_health) or\n            dfs(x, y + 1, current_health) or\n            dfs(x, y - 1, current_health)):\n            return True\n        \n        grid[x][y] = temp  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    n = len(maximumHeight)\n    if n > len(set(maximumHeight)):\n        return -1\n    \n    heights = sorted(maximumHeight)\n    total_sum = sum(range(1, n + 1))\n    \n    for i in range(n):\n        if heights[i] < i + 1:\n            return -1\n        total_sum += heights[i] - (i + 1)\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    n = len(maximumHeight)\n    if n > len(set(maximumHeight)):\n        return -1\n    \n    heights = sorted(maximumHeight)\n    total_sum = sum(range(1, n + 1))\n    \n    for i in range(n):\n        if heights[i] < i + 1:\n            return -1\n        total_sum += heights[i] - (i + 1)\n    \n    return total_sum\n```"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n\n    walls = set((i, j) for i in range(1, H + 1) for j in range(1, W + 1))\n\n    def destroy_wall(r, c):\n        if (r, c) in walls:\n            walls.remove((r, c))\n        else:\n            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n            for dr, dc in directions:\n                i, j = r, c\n                while True:\n                    i += dr\n                    j += dc\n                    if 1 <= i <= H and 1 <= j <= W and (i, j) in walls:\n                        walls.remove((i, j))\n                        break\n                    elif not (1 <= i <= H and 1 <= j <= W):\n                        break\n\n    for q in range(Q):\n        r = int(data[2 * q + 3])\n        c = int(data[2 * q + 4])\n        destroy_wall(r, c)\n\n    print(len(walls))\n\nmain()", "passed": false, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n\n    walls = set((i, j) for i in range(1, H + 1) for j in range(1, W + 1))\n\n    def destroy_wall(r, c):\n        if (r, c) in walls:\n            walls.remove((r, c))\n        else:\n            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n            for dr, dc in directions:\n                i, j = r, c\n                while True:\n                    i += dr\n                    j += dc\n                    if 1 <= i <= H and 1 <= j <= W and (i, j) in walls:\n                        walls.remove((i, j))\n                        break\n                    elif not (1 <= i <= H and 1 <= j <= W):\n                        break\n\n    for q in range(Q):\n        r = int(data[2 * q + 3])\n        c = int(data[2 * q + 4])\n        destroy_wall(r, c)\n\n    print(len(walls))\n\nmain()"}
{"task_id": "3584", "code": "def almost_equal_indices(word1, word2):\n    m, n = len(word1), len(word2)\n    i = j = 0\n    indices = []\n    changes = 0\n    \n    while i < m and j < n:\n        if word1[i] == word2[j]:\n            indices.append(i)\n            i += 1\n            j += 1\n        else:\n            if changes == 1:\n                return []\n            if word1[:i] + word2[j] + word1[i+1:] == word2:\n                indices.append(i)\n                changes += 1\n                i += 1\n                j += 1\n            else:\n                return []\n    \n    while j < n:\n        return []\n    \n    return indices", "passed": false, "raw_code": "```python\ndef almost_equal_indices(word1, word2):\n    m, n = len(word1), len(word2)\n    i = j = 0\n    indices = []\n    changes = 0\n    \n    while i < m and j < n:\n        if word1[i] == word2[j]:\n            indices.append(i)\n            i += 1\n            j += 1\n        else:\n            if changes == 1:\n                return []\n            if word1[:i] + word2[j] + word1[i+1:] == word2:\n                indices.append(i)\n                changes += 1\n                i += 1\n                j += 1\n            else:\n                return []\n    \n    while j < n:\n        return []\n    \n    return indices\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1: str, word2: str) -> int:\n    count = 0\n    w2_set = set(word2)\n    \n    for i in range(len(word1)):\n        for j in range(i + len(word2), len(word1) + 1):\n            if set(word1[i:j]) >= w2_set:\n                count += 1\n                \n    return count", "passed": false, "raw_code": "```python\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    count = 0\n    w2_set = set(word2)\n    \n    for i in range(len(word1)):\n        for j in range(i + len(word2), len(word1) + 1):\n            if set(word1[i:j]) >= w2_set:\n                count += 1\n                \n    return count\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while len(H) > 0:\n        T += 1\n        if T % 3 == 0:\n            H[0] -= 3\n        else:\n            H[0] -= 1\n        \n        if H[0] <= 0:\n            H.pop(0)\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while len(H) > 0:\n        T += 1\n        if T % 3 == 0:\n            H[0] -= 3\n        else:\n            H[0] -= 1\n        \n        if H[0] <= 0:\n            H.pop(0)\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "arc183_a", "code": "import itertools\nimport math\n\ndef get_good_sequences(N, K):\n    # Generate all possible sequences\n    elements = [i for i in range(1, N + 1)] * K\n    unique_sequences = set(itertools.permutations(elements))\n    return sorted(unique_sequences)\n\ndef find_desired_sequence(N, K):\n    # Get all good sequences\n    good_sequences = get_good_sequences(N, K)\n    \n    # Calculate the target index\n    S = len(good_sequences)\n    target_index = math.floor((S + 1) / 2) - 1\n    \n    # Return the target sequence\n    return good_sequences[target_index]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    result = find_desired_sequence(N, K)\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport itertools\nimport math\n\ndef get_good_sequences(N, K):\n    # Generate all possible sequences\n    elements = [i for i in range(1, N + 1)] * K\n    unique_sequences = set(itertools.permutations(elements))\n    return sorted(unique_sequences)\n\ndef find_desired_sequence(N, K):\n    # Get all good sequences\n    good_sequences = get_good_sequences(N, K)\n    \n    # Calculate the target index\n    S = len(good_sequences)\n    target_index = math.floor((S + 1) / 2) - 1\n    \n    # Return the target sequence\n    return good_sequences[target_index]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    result = find_desired_sequence(N, K)\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc371_c", "code": "def min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    G = set()\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G.add((u, v))\n        G.add((v, u))\n        index += 2\n\n    M_H = int(data[index])\n    index += 1\n    H = set()\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H.add((a, b))\n        H.add((b, a))\n        index += 2\n\n    A = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1, N):\n            A[i][j] = int(data[index])\n            index += 1\n\n    def cost_to_add_edge(u, v):\n        return A[u][v]\n\n    def cost_to_remove_edge(u, v):\n        return A[u][v]\n\n    def perform_operation(u, v):\n        if (u, v) in H:\n            H.remove((u, v))\n            return cost_to_remove_edge(u, v)\n        else:\n            H.add((u, v))\n            return cost_to_add_edge(u, v)\n\n    total_cost = 0\n    for edge in G:\n        if edge not in H:\n            total_cost += cost_to_add_edge(edge[0], edge[1])\n            H.add(edge)\n\n    for edge in H:\n        if edge not in G:\n            total_cost += cost_to_remove_edge(edge[0], edge[1])\n            H.remove(edge)\n\n    print(total_cost)\n\nmin_cost_to_isomorphic()", "passed": false, "raw_code": "def min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    G = set()\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        G.add((u, v))\n        G.add((v, u))\n        index += 2\n\n    M_H = int(data[index])\n    index += 1\n    H = set()\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        H.add((a, b))\n        H.add((b, a))\n        index += 2\n\n    A = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1, N):\n            A[i][j] = int(data[index])\n            index += 1\n\n    def cost_to_add_edge(u, v):\n        return A[u][v]\n\n    def cost_to_remove_edge(u, v):\n        return A[u][v]\n\n    def perform_operation(u, v):\n        if (u, v) in H:\n            H.remove((u, v))\n            return cost_to_remove_edge(u, v)\n        else:\n            H.add((u, v))\n            return cost_to_add_edge(u, v)\n\n    total_cost = 0\n    for edge in G:\n        if edge not in H:\n            total_cost += cost_to_add_edge(edge[0], edge[1])\n            H.add(edge)\n\n    for edge in H:\n        if edge not in G:\n            total_cost += cost_to_remove_edge(edge[0], edge[1])\n            H.remove(edge)\n\n    print(total_cost)\n\nmin_cost_to_isomorphic()"}
{"task_id": "3570", "code": "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc366_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n\n    N = int(data[index])\n    index += 1\n\n    A = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                A[x][y][z] = int(data[index])\n                index += 1\n\n    prefix_sum = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix_sum[x][y][z] = A[x][y][z] + prefix_sum[x - 1][y][z] + prefix_sum[x][y - 1][z] + prefix_sum[x][y][z - 1] - prefix_sum[x - 1][y - 1][z] - prefix_sum[x - 1][y][z - 1] - prefix_sum[x][y - 1][z - 1] + prefix_sum[x - 1][y - 1][z - 1]\n\n    Q = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n        index += 6\n\n        result = prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx - 1][Ry][Rz] - prefix_sum[Rx][Ly - 1][Rz] - prefix_sum[Rx][Ry][Lz - 1] + prefix_sum[Lx - 1][Ly - 1][Rz] + prefix_sum[Lx - 1][Ry][Lz - 1] + prefix_sum[Rx][Ly - 1][Lz - 1] - prefix_sum[Lx - 1][Ly - 1][Lz - 1]\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nmain()", "passed": true, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n\n    N = int(data[index])\n    index += 1\n\n    A = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                A[x][y][z] = int(data[index])\n                index += 1\n\n    prefix_sum = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix_sum[x][y][z] = A[x][y][z] + prefix_sum[x - 1][y][z] + prefix_sum[x][y - 1][z] + prefix_sum[x][y][z - 1] - prefix_sum[x - 1][y - 1][z] - prefix_sum[x - 1][y][z - 1] - prefix_sum[x][y - 1][z - 1] + prefix_sum[x - 1][y - 1][z - 1]\n\n    Q = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n        index += 6\n\n        result = prefix_sum[Rx][Ry][Rz] - prefix_sum[Lx - 1][Ry][Rz] - prefix_sum[Rx][Ly - 1][Rz] - prefix_sum[Rx][Ry][Lz - 1] + prefix_sum[Lx - 1][Ly - 1][Rz] + prefix_sum[Lx - 1][Ry][Lz - 1] + prefix_sum[Rx][Ly - 1][Lz - 1] - prefix_sum[Lx - 1][Ly - 1][Lz - 1]\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nmain()"}
{"final_accuracy": "29.73%"}
