"{\"difficulty\": \"hard\", \"num_threads\": 32, \"temperature\": 0.7, \"n\": 1, \"context\": \"all\", \"selection\": \"oracle\", \"num_round\": 1, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/sec4_parallel_sample_vanilla_bug_trace_TPL_CODEEXECUTOR_qwen_7b_hard_n_1.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"openai/gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"api_base\": \"http://127.0.0.1:8001/8001/v1\", \"no_refine\": true, \"no_dspy_gen\": false, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42, \"resume\": true}"
{"task_id": "abc365_e", "codes": ["```python\ndef calculate_xor_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    prefixXOR = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefixXOR[i] = prefixXOR[i - 1] ^ A[i - 1]\n    \n    total_sum = 0\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            total_sum += prefixXOR[i - 1] ^ prefixXOR[j]\n    \n    print(total_sum)\n\ncalculate_xor_sum()"], "passed": [false], "raw_code": ["```python\ndef calculate_xor_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    prefixXOR = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefixXOR[i] = prefixXOR[i - 1] ^ A[i - 1]\n    \n    total_sum = 0\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            total_sum += prefixXOR[i - 1] ^ prefixXOR[j]\n    \n    print(total_sum)\n\ncalculate_xor_sum()"]}
{"task_id": "3532", "codes": ["def find_marking_times(edges):\n    n = len(edges) + 1\n    adj_list = [[] for _ in range(n)]\n    \n    # Build the adjacency list\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Initialize marking times\n    times = [0] * n\n    \n    # Helper function to perform BFS and calculate marking times\n    def bfs(start_node):\n        queue = [(start_node, 0)]\n        visited = set()\n        \n        while queue:\n            node, time = queue.pop(0)\n            if node in visited:\n                continue\n            visited.add(node)\n            \n            # Mark the current node\n            times[node] = time\n            \n            # Determine the next marking time for neighbors\n            for neighbor in adj_list[node]:\n                if neighbor not in visited:\n                    if node % 2 == 0:\n                        queue.append((neighbor, time + 2))\n                    else:\n                        queue.append((neighbor, time + 1))\n    \n    # Perform BFS for each node to calculate marking times\n    for i in range(n):\n        bfs(i)\n    \n    return times[1:]"], "passed": [false], "raw_code": ["```python\ndef find_marking_times(edges):\n    n = len(edges) + 1\n    adj_list = [[] for _ in range(n)]\n    \n    # Build the adjacency list\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Initialize marking times\n    times = [0] * n\n    \n    # Helper function to perform BFS and calculate marking times\n    def bfs(start_node):\n        queue = [(start_node, 0)]\n        visited = set()\n        \n        while queue:\n            node, time = queue.pop(0)\n            if node in visited:\n                continue\n            visited.add(node)\n            \n            # Mark the current node\n            times[node] = time\n            \n            # Determine the next marking time for neighbors\n            for neighbor in adj_list[node]:\n                if neighbor not in visited:\n                    if node % 2 == 0:\n                        queue.append((neighbor, time + 2))\n                    else:\n                        queue.append((neighbor, time + 1))\n    \n    # Perform BFS for each node to calculate marking times\n    for i in range(n):\n        bfs(i)\n    \n    return times[1:]\n```"]}
{"task_id": "abc368_f", "codes": ["def determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Check if there is at least one odd number\n    has_odd = any(x % 2 != 0 for x in A)\n    \n    if has_odd:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\ndetermine_winner()"], "passed": [false], "raw_code": ["```python\ndef determine_winner():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Check if there is at least one odd number\n    has_odd = any(x % 2 != 0 for x in A)\n    \n    if has_odd:\n        print(\"Anna\")\n    else:\n        print(\"Bruno\")\n\ndetermine_winner()\n```"]}
{"task_id": "abc370_e", "codes": ["```python\ndef count_valid_partitions(N, K, A):\n    MOD = 998244353\n    dp = [0] * N\n    dp[0] = 1 if A[0] != K else 0\n    prefix_sum = [0] * N\n    prefix_sum[0] = A[0]\n    \n    for i in range(1, N):\n        prefix_sum[i] = prefix_sum[i-1] + A[i]\n        dp[i] = dp[i-1]\n        for j in range(i):\n            if prefix_sum[i] - prefix_sum[j] == K:\n                dp[i] -= dp[j]\n                dp[i] %= MOD\n            else:\n                dp[i] += dp[j]\n                dp[i] %= MOD\n    \n    return dp[N-1]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Output the result\nprint(count_valid_partitions(N, K, A))"], "passed": [false], "raw_code": ["```python\ndef count_valid_partitions(N, K, A):\n    MOD = 998244353\n    dp = [0] * N\n    dp[0] = 1 if A[0] != K else 0\n    prefix_sum = [0] * N\n    prefix_sum[0] = A[0]\n    \n    for i in range(1, N):\n        prefix_sum[i] = prefix_sum[i-1] + A[i]\n        dp[i] = dp[i-1]\n        for j in range(i):\n            if prefix_sum[i] - prefix_sum[j] == K:\n                dp[i] -= dp[j]\n                dp[i] %= MOD\n            else:\n                dp[i] += dp[j]\n                dp[i] %= MOD\n    \n    return dp[N-1]\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Output the result\nprint(count_valid_partitions(N, K, A))"]}
{"task_id": "abc366_f", "codes": ["```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    functions = []\n    for i in range(N):\n        A = int(data[2 + 2 * i])\n        B = int(data[3 + 2 * i])\n        functions.append((A, B))\n    \n    # Sort functions by A in descending order\n    functions.sort(key=lambda x: x[0], reverse=True)\n    \n    a = 1\n    b = 0\n    for i in range(K):\n        A, B = functions[i]\n        a = A * a + B\n    \n    print(a)\n\n# Call the function\nmax_nested_function_value()"], "passed": [false], "raw_code": ["```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    functions = []\n    for i in range(N):\n        A = int(data[2 + 2 * i])\n        B = int(data[3 + 2 * i])\n        functions.append((A, B))\n    \n    # Sort functions by A in descending order\n    functions.sort(key=lambda x: x[0], reverse=True)\n    \n    a = 1\n    b = 0\n    for i in range(K):\n        A, B = functions[i]\n        a = A * a + B\n    \n    print(a)\n\n# Call the function\nmax_nested_function_value()"]}
{"task_id": "abc371_g", "codes": ["```python\ndef smallest_array(N, P, A):\n    # Create a list of tuples where each tuple is (original_index, value)\n    indexed_A = [(i, A[i]) for i in range(N)]\n    \n    # Sort the list based on the value of A\n    indexed_A.sort(key=lambda x: x[1])\n    \n    # Create a result array initialized with zeros\n    result = [0] * N\n    \n    # Iterate over the sorted list and place the values in their new positions\n    for i, (_, value) in enumerate(indexed_A):\n        result[P[i] - 1] = value\n    \n    # Print the result array\n    print(' '.join(map(str, result)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Call the function with the input\nsmallest_array(N, P, A)"], "passed": [false], "raw_code": ["```python\ndef smallest_array(N, P, A):\n    # Create a list of tuples where each tuple is (original_index, value)\n    indexed_A = [(i, A[i]) for i in range(N)]\n    \n    # Sort the list based on the value of A\n    indexed_A.sort(key=lambda x: x[1])\n    \n    # Create a result array initialized with zeros\n    result = [0] * N\n    \n    # Iterate over the sorted list and place the values in their new positions\n    for i, (_, value) in enumerate(indexed_A):\n        result[P[i] - 1] = value\n    \n    # Print the result array\n    print(' '.join(map(str, result)))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nA = list(map(int, data[N+1:]))\n\n# Call the function with the input\nsmallest_array(N, P, A)"]}
{"task_id": "abc371_f", "codes": ["```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        tasks.append((T, G))\n        index += 2\n    \n    # Sort initial positions\n    X.sort()\n    \n    total_moves = 0\n    for T, G in tasks:\n        total_moves += abs(X[T] - G)\n    \n    print(total_moves)\n\nmin_movements()"], "passed": [false], "raw_code": ["```python\ndef min_movements():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    tasks = []\n    for _ in range(Q):\n        T = int(data[index]) - 1\n        G = int(data[index + 1])\n        tasks.append((T, G))\n        index += 2\n    \n    # Sort initial positions\n    X.sort()\n    \n    total_moves = 0\n    for T, G in tasks:\n        total_moves += abs(X[T] - G)\n    \n    print(total_moves)\n\nmin_movements()"]}
{"task_id": "abc373_f", "codes": ["```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    \n    items = []\n    for i in range(N):\n        w = int(data[2 + 2 * i])\n        v = int(data[3 + 2 * i])\n        items.append((w, v))\n    \n    total_happiness = 0\n    \n    for w, v in items:\n        # Calculate the optimal k for the current item type\n        k_opt = v / (2 * w)\n        k_opt_int = int(k_opt)\n        \n        # Check the happiness for k_opt_int and k_opt_int + 1\n        happiness1 = k_opt_int * v - k_opt_int ** 2\n        happiness2 = (k_opt_int + 1) * v - (k_opt_int + 1) ** 2\n        \n        # Choose the maximum happiness\n        if happiness1 > happiness2:\n            k = k_opt_int\n        else:\n            k = k_opt_int + 1\n        \n        # Ensure the total weight does not exceed W\n        while k * w > W:\n            k -= 1\n        \n        total_happiness += k * v - k ** 2\n    \n    print(total_happiness)\n\nmax_happiness()"], "passed": [false], "raw_code": ["```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    \n    items = []\n    for i in range(N):\n        w = int(data[2 + 2 * i])\n        v = int(data[3 + 2 * i])\n        items.append((w, v))\n    \n    total_happiness = 0\n    \n    for w, v in items:\n        # Calculate the optimal k for the current item type\n        k_opt = v / (2 * w)\n        k_opt_int = int(k_opt)\n        \n        # Check the happiness for k_opt_int and k_opt_int + 1\n        happiness1 = k_opt_int * v - k_opt_int ** 2\n        happiness2 = (k_opt_int + 1) * v - (k_opt_int + 1) ** 2\n        \n        # Choose the maximum happiness\n        if happiness1 > happiness2:\n            k = k_opt_int\n        else:\n            k = k_opt_int + 1\n        \n        # Ensure the total weight does not exceed W\n        while k * w > W:\n            k -= 1\n        \n        total_happiness += k * v - k ** 2\n    \n    print(total_happiness)\n\nmax_happiness()"]}
{"task_id": "3535", "codes": ["def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_non_decr = [[0] * (n + 1) for _ in range(51)]\n    dp_non_incr = [[0] * (n + 1) for _ in range(51)]\n    \n    # Base cases\n    dp_non_decr[0][0] = 1\n    dp_non_incr[50][0] = 1\n    \n    # Fill DP tables\n    for i in range(n):\n        for j in range(51):\n            if dp_non_decr[j][i] > 0:\n                dp_non_decr[min(j + 1, 50)][i + 1] += dp_non_decr[j][i]\n                dp_non_decr[min(j + 1, 50)][i + 1] %= MOD\n            \n            if dp_non_incr[j][i] > 0:\n                dp_non_incr[max(j - 1, 0)][i + 1] += dp_non_incr[j][i]\n                dp_non_incr[max(j - 1, 0)][i + 1] %= MOD\n    \n    # Calculate the result\n    result = 0\n    for j in range(51):\n        result += dp_non_decr[j][n] * dp_non_incr[j][n]\n        result %= MOD\n    \n    return result"], "passed": [false], "raw_code": ["```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize DP tables\n    dp_non_decr = [[0] * (n + 1) for _ in range(51)]\n    dp_non_incr = [[0] * (n + 1) for _ in range(51)]\n    \n    # Base cases\n    dp_non_decr[0][0] = 1\n    dp_non_incr[50][0] = 1\n    \n    # Fill DP tables\n    for i in range(n):\n        for j in range(51):\n            if dp_non_decr[j][i] > 0:\n                dp_non_decr[min(j + 1, 50)][i + 1] += dp_non_decr[j][i]\n                dp_non_decr[min(j + 1, 50)][i + 1] %= MOD\n            \n            if dp_non_incr[j][i] > 0:\n                dp_non_incr[max(j - 1, 0)][i + 1] += dp_non_incr[j][i]\n                dp_non_incr[max(j - 1, 0)][i + 1] %= MOD\n    \n    # Calculate the result\n    result = 0\n    for j in range(51):\n        result += dp_non_decr[j][n] * dp_non_incr[j][n]\n        result %= MOD\n    \n    return result\n```"]}
{"task_id": "abc366_e", "codes": ["```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points.append((x, y))\n        index += 2\n    \n    # Sort points by x-coordinate\n    points.sort(key=lambda p: p[0])\n    \n    # Initialize variables\n    left = 0\n    right = 0\n    current_sum = 0\n    result = 0\n    \n    # Iterate over all y-coordinates\n    for y in range(-10**6, 10**6 + 1):\n        # Move the right pointer to include points with the same y-coordinate\n        while right < N and points[right][1] == y:\n            current_sum += abs(points[right][0] - points[left][0])\n            right += 1\n        \n        # Remove points with smaller y-coordinate\n        while left < N and points[left][1] < y:\n            current_sum -= abs(points[left][0] - points[left + 1][0])\n            left += 1\n        \n        # Count valid x-coordinates for the current y-coordinate\n        if current_sum <= D:\n            result += right - left\n    \n    print(result)\n\ncount_valid_pairs()"], "passed": [false], "raw_code": ["```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    points = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        points.append((x, y))\n        index += 2\n    \n    # Sort points by x-coordinate\n    points.sort(key=lambda p: p[0])\n    \n    # Initialize variables\n    left = 0\n    right = 0\n    current_sum = 0\n    result = 0\n    \n    # Iterate over all y-coordinates\n    for y in range(-10**6, 10**6 + 1):\n        # Move the right pointer to include points with the same y-coordinate\n        while right < N and points[right][1] == y:\n            current_sum += abs(points[right][0] - points[left][0])\n            right += 1\n        \n        # Remove points with smaller y-coordinate\n        while left < N and points[left][1] < y:\n            current_sum -= abs(points[left][0] - points[left + 1][0])\n            left += 1\n        \n        # Count valid x-coordinates for the current y-coordinate\n        if current_sum <= D:\n            result += right - left\n    \n    print(result)\n\ncount_valid_pairs()"]}
{"task_id": "abc373_e", "codes": ["```python\ndef min_additional_votes(N, M, K, A):\n    from collections import deque\n    \n    # Calculate the total number of votes counted so far\n    total_votes_counted = sum(A)\n    # Calculate the number of remaining votes\n    remaining_votes = K - total_votes_counted\n    \n    # Sort candidates based on the number of votes they have received\n    candidates = sorted([(A[i], i) for i in range(N)])\n    votes_needed = [0] * N\n    \n    # Use a deque to keep track of the candidates with more votes than the current candidate\n    deque_candidates = deque()\n    \n    for i in range(N):\n        current_votes, current_index = candidates[i]\n        \n        # Remove candidates from the deque who cannot secure victory\n        while deque_candidates and deque_candidates[0][1] < current_index:\n            deque_candidates.popleft()\n        \n        # If deque is not empty, candidate cannot secure victory\n        if deque_candidates and deque_candidates[-1][0] + remaining_votes < current_votes + len(deque_candidates) - 1:\n            votes_needed[current_index] = -1\n        else:\n            # Calculate the minimum additional votes needed\n            if deque_candidates:\n                votes_needed[current_index] = current_votes + len(deque_candidates) - 1 - (deque_candidates[-1][0] + remaining_votes)\n            else:\n                if M <= 1:\n                    votes_needed[current_index] = 0\n                else:\n                    votes_needed[current_index] = -1\n        \n        # Add the current candidate to the deque\n        deque_candidates.append((current_votes, current_index))\n    \n    # Print the results\n    print(\" \".join(map(str, votes_needed)))\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Call the function\nmin_additional_votes(N, M, K, A)"], "passed": [false], "raw_code": ["```python\ndef min_additional_votes(N, M, K, A):\n    from collections import deque\n    \n    # Calculate the total number of votes counted so far\n    total_votes_counted = sum(A)\n    # Calculate the number of remaining votes\n    remaining_votes = K - total_votes_counted\n    \n    # Sort candidates based on the number of votes they have received\n    candidates = sorted([(A[i], i) for i in range(N)])\n    votes_needed = [0] * N\n    \n    # Use a deque to keep track of the candidates with more votes than the current candidate\n    deque_candidates = deque()\n    \n    for i in range(N):\n        current_votes, current_index = candidates[i]\n        \n        # Remove candidates from the deque who cannot secure victory\n        while deque_candidates and deque_candidates[0][1] < current_index:\n            deque_candidates.popleft()\n        \n        # If deque is not empty, candidate cannot secure victory\n        if deque_candidates and deque_candidates[-1][0] + remaining_votes < current_votes + len(deque_candidates) - 1:\n            votes_needed[current_index] = -1\n        else:\n            # Calculate the minimum additional votes needed\n            if deque_candidates:\n                votes_needed[current_index] = current_votes + len(deque_candidates) - 1 - (deque_candidates[-1][0] + remaining_votes)\n            else:\n                if M <= 1:\n                    votes_needed[current_index] = 0\n                else:\n                    votes_needed[current_index] = -1\n        \n        # Add the current candidate to the deque\n        deque_candidates.append((current_votes, current_index))\n    \n    # Print the results\n    print(\" \".join(map(str, votes_needed)))\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Call the function\nmin_additional_votes(N, M, K, A)"]}
{"task_id": "arc182_d", "codes": ["def min_operations_to_transform():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:N+2]))\n    B = list(map(int, data[N+2:2*N+2]))\n    \n    def is_valid_transition(a, b):\n        if a == b:\n            return False\n        if a == (b + 1) % M or a == (b - 1) % M:\n            return False\n        if a != -1 and (a == (B[i-1] + 1) % M or a == (B[i-1] - 1) % M):\n            return False\n        if i < N - 1 and (a == (B[i+1] + 1) % M or a == (B[i+1] - 1) % M):\n            return False\n        return True\n    \n    total_operations = 0\n    \n    for i in range(N):\n        if not is_valid_transition(A[i], B[i]):\n            print(-1)\n            return\n        \n        diff = abs(A[i] - B[i])\n        total_operations += min(diff, M - diff)\n    \n    print(total_operations)\n\nmin_operations_to_transform()"], "passed": [false], "raw_code": ["```python\ndef min_operations_to_transform():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:N+2]))\n    B = list(map(int, data[N+2:2*N+2]))\n    \n    def is_valid_transition(a, b):\n        if a == b:\n            return False\n        if a == (b + 1) % M or a == (b - 1) % M:\n            return False\n        if a != -1 and (a == (B[i-1] + 1) % M or a == (B[i-1] - 1) % M):\n            return False\n        if i < N - 1 and (a == (B[i+1] + 1) % M or a == (B[i+1] - 1) % M):\n            return False\n        return True\n    \n    total_operations = 0\n    \n    for i in range(N):\n        if not is_valid_transition(A[i], B[i]):\n            print(-1)\n            return\n        \n        diff = abs(A[i] - B[i])\n        total_operations += min(diff, M - diff)\n    \n    print(total_operations)\n\nmin_operations_to_transform()\n```"]}
{"task_id": "abc369_e", "codes": ["```python\nimport heapq\nfrom collections import defaultdict, deque\n\ndef dijkstra(graph, start, end):\n    n = len(graph)\n    dist = [float('inf')] * n\n    dist[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, u = heapq.heappop(pq)\n        \n        if current_dist > dist[u]:\n            continue\n        \n        for v, weight in graph[u]:\n            distance = current_dist + weight\n            \n            if distance < dist[v]:\n                dist[v] = distance\n                heapq.heappush(pq, (distance, v))\n    \n    return dist[end]\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    graph = defaultdict(list)\n    \n    for _ in range(M):\n        U = int(data[index]) - 1\n        V = int(data[index + 1]) - 1\n        T = int(data[index + 2])\n        index += 3\n        graph[U].append((V, T))\n        graph[V].append((U, T))\n    \n    Q = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(Q):\n        K = int(data[index])\n        index += 1\n        bridges = set(int(data[index + i]) - 1 for i in range(K))\n        index += K\n        \n        modified_graph = defaultdict(list)\n        \n        for u in range(N):\n            for v, weight in graph[u]:\n                modified_graph[u].append((v, weight))\n                modified_graph[v].append((u, weight))\n        \n        for u, v, _ in graph.values():\n            if {u, v} in bridges:\n                modified_graph[u].append((v, 0))\n                modified_graph[v].append((u, 0))\n        \n        result = dijkstra(modified_graph, 0, N - 1)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nsolve()"], "passed": [false], "raw_code": ["```python\nimport heapq\nfrom collections import defaultdict, deque\n\ndef dijkstra(graph, start, end):\n    n = len(graph)\n    dist = [float('inf')] * n\n    dist[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, u = heapq.heappop(pq)\n        \n        if current_dist > dist[u]:\n            continue\n        \n        for v, weight in graph[u]:\n            distance = current_dist + weight\n            \n            if distance < dist[v]:\n                dist[v] = distance\n                heapq.heappush(pq, (distance, v))\n    \n    return dist[end]\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    index += 2\n    \n    graph = defaultdict(list)\n    \n    for _ in range(M):\n        U = int(data[index]) - 1\n        V = int(data[index + 1]) - 1\n        T = int(data[index + 2])\n        index += 3\n        graph[U].append((V, T))\n        graph[V].append((U, T))\n    \n    Q = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(Q):\n        K = int(data[index])\n        index += 1\n        bridges = set(int(data[index + i]) - 1 for i in range(K))\n        index += K\n        \n        modified_graph = defaultdict(list)\n        \n        for u in range(N):\n            for v, weight in graph[u]:\n                modified_graph[u].append((v, weight))\n                modified_graph[v].append((u, weight))\n        \n        for u, v, _ in graph.values():\n            if {u, v} in bridges:\n                modified_graph[u].append((v, 0))\n                modified_graph[v].append((u, 0))\n        \n        result = dijkstra(modified_graph, 0, N - 1)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nsolve()"]}
{"task_id": "abc367_e", "codes": ["def transform_sequence(X, A):\n    return [A[X[i] - 1] for i in range(len(X))]\n\ndef find_cycle_length(X, A):\n    seen = {}\n    current_state = tuple(A)\n    step = 0\n    \n    while current_state not in seen:\n        seen[current_state] = step\n        A = transform_sequence(X, A)\n        current_state = tuple(A)\n        step += 1\n    \n    return step - seen[current_state]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    X = list(map(int, data[2:N+2]))\n    A = list(map(int, data[N+2:]))\n    \n    if K == 0:\n        print(' '.join(map(str, A)))\n        return\n    \n    cycle_length = find_cycle_length(X, A)\n    effective_k = K % cycle_length\n    \n    for _ in range(effective_k):\n        A = transform_sequence(X, A)\n    \n    print(' '.join(map(str, A)))\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false], "raw_code": ["```python\ndef transform_sequence(X, A):\n    return [A[X[i] - 1] for i in range(len(X))]\n\ndef find_cycle_length(X, A):\n    seen = {}\n    current_state = tuple(A)\n    step = 0\n    \n    while current_state not in seen:\n        seen[current_state] = step\n        A = transform_sequence(X, A)\n        current_state = tuple(A)\n        step += 1\n    \n    return step - seen[current_state]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    X = list(map(int, data[2:N+2]))\n    A = list(map(int, data[N+2:]))\n    \n    if K == 0:\n        print(' '.join(map(str, A)))\n        return\n    \n    cycle_length = find_cycle_length(X, A)\n    effective_k = K % cycle_length\n    \n    for _ in range(effective_k):\n        A = transform_sequence(X, A)\n    \n    print(' '.join(map(str, A)))\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc368_e", "codes": ["def min_transit_delays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    X1 = int(data[index + 2])\n    index += 3\n    \n    trains = []\n    for _ in range(M):\n        A = int(data[index])\n        B = int(data[index + 1])\n        S = int(data[index + 2])\n        T = int(data[index + 3])\n        index += 4\n        trains.append((A, B, S, T))\n    \n    delays = [0] * M\n    \n    for i in range(1, M):\n        for j in range(i):\n            Ai, Bi, Si, Ti = trains[i]\n            Aj, Bj, Sj, Tj = trains[j]\n            if Bi == Aj and Ti <= Sj:\n                needed_delay = max(0, Sj - Ti + X1 - Xj)\n                delays[i] = max(delays[i], needed_delay)\n                delays[j] = max(delays[j], needed_delay)\n    \n    print(' '.join(map(str, delays[1:])))"], "passed": [false], "raw_code": ["```python\ndef min_transit_delays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    M = int(data[index + 1])\n    X1 = int(data[index + 2])\n    index += 3\n    \n    trains = []\n    for _ in range(M):\n        A = int(data[index])\n        B = int(data[index + 1])\n        S = int(data[index + 2])\n        T = int(data[index + 3])\n        index += 4\n        trains.append((A, B, S, T))\n    \n    delays = [0] * M\n    \n    for i in range(1, M):\n        for j in range(i):\n            Ai, Bi, Si, Ti = trains[i]\n            Aj, Bj, Sj, Tj = trains[j]\n            if Bi == Aj and Ti <= Sj:\n                needed_delay = max(0, Sj - Ti + X1 - Xj)\n                delays[i] = max(delays[i], needed_delay)\n                delays[j] = max(delays[j], needed_delay)\n    \n    print(' '.join(map(str, delays[1:])))\n```"]}
{"task_id": "abc368_d", "codes": ["```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nN = int(data[0])\nK = int(data[1])\nedges = []\nfor i in range(N - 1):\n    A = int(data[2 + 2 * i]) - 1\n    B = int(data[3 + 2 * i]) - 1\n    edges.append((A, B))\n\nvertices = [int(x) - 1 for x in data[2 * N + 1:]]\n\n# Build the adjacency list\nadj_list = [[] for _ in range(N)]\nfor u, v in edges:\n    adj_list[u].append(v)\n    adj_list[v].append(u)\n\n# Function to perform DFS and find the LCA\ndef dfs(node, parent, target, path):\n    if node == target:\n        return True\n    path.add(node)\n    for neighbor in adj_list[node]:\n        if neighbor != parent and dfs(neighbor, node, target, path):\n            return True\n    path.remove(node)\n    return False\n\ndef lca(a, b):\n    path_a = set()\n    path_b = set()\n    dfs(a, -1, b, path_b)\n    while a not in path_b:\n        path_a.add(a)\n        a = parent[a]\n    return a\n\n# Find the LCA of the K vertices\nlca_node = vertices[0]\nfor v in vertices[1:]:\n    lca_node = lca(lca_node, v)\n\n# Function to count vertices in the subtree rooted at a given node\ndef count_vertices(node, parent):\n    count = 1\n    for neighbor in adj_list[node]:\n        if neighbor != parent:\n            count += count_vertices(neighbor, node)\n    return count\n\n# Count the vertices in the subtree rooted at the LCA\nmin_vertices = count_vertices(lca_node, -1)\nprint(min_vertices)"], "passed": [false], "raw_code": ["```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nN = int(data[0])\nK = int(data[1])\nedges = []\nfor i in range(N - 1):\n    A = int(data[2 + 2 * i]) - 1\n    B = int(data[3 + 2 * i]) - 1\n    edges.append((A, B))\n\nvertices = [int(x) - 1 for x in data[2 * N + 1:]]\n\n# Build the adjacency list\nadj_list = [[] for _ in range(N)]\nfor u, v in edges:\n    adj_list[u].append(v)\n    adj_list[v].append(u)\n\n# Function to perform DFS and find the LCA\ndef dfs(node, parent, target, path):\n    if node == target:\n        return True\n    path.add(node)\n    for neighbor in adj_list[node]:\n        if neighbor != parent and dfs(neighbor, node, target, path):\n            return True\n    path.remove(node)\n    return False\n\ndef lca(a, b):\n    path_a = set()\n    path_b = set()\n    dfs(a, -1, b, path_b)\n    while a not in path_b:\n        path_a.add(a)\n        a = parent[a]\n    return a\n\n# Find the LCA of the K vertices\nlca_node = vertices[0]\nfor v in vertices[1:]:\n    lca_node = lca(lca_node, v)\n\n# Function to count vertices in the subtree rooted at a given node\ndef count_vertices(node, parent):\n    count = 1\n    for neighbor in adj_list[node]:\n        if neighbor != parent:\n            count += count_vertices(neighbor, node)\n    return count\n\n# Count the vertices in the subtree rooted at the LCA\nmin_vertices = count_vertices(lca_node, -1)\nprint(min_vertices)"]}
{"task_id": "abc372_f", "codes": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    index = 3\n    for _ in range(M):\n        X = int(data[index])\n        Y = int(data[index + 1])\n        edges.append((X, Y))\n        index += 2\n    \n    MOD = 998244353\n    \n    dp = [[0] * (N + 1) for _ in range(K + 1)]\n    dp[0][1] = 1\n    \n    for i in range(1, K + 1):\n        new_dp = [0] * (N + 1)\n        for j in range(1, N + 1):\n            for x, y in edges:\n                if x == j:\n                    new_dp[y] += dp[i - 1][x]\n                    new_dp[y] %= MOD\n            if j <= N:\n                new_dp[j % (N + 1)] += dp[i - 1][j]\n                new_dp[j % (N + 1)] %= MOD\n        dp[i] = new_dp\n    \n    result = sum(dp[K]) % MOD\n    print(result)\n\nmain()"], "passed": [false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    \n    edges = []\n    index = 3\n    for _ in range(M):\n        X = int(data[index])\n        Y = int(data[index + 1])\n        edges.append((X, Y))\n        index += 2\n    \n    MOD = 998244353\n    \n    dp = [[0] * (N + 1) for _ in range(K + 1)]\n    dp[0][1] = 1\n    \n    for i in range(1, K + 1):\n        new_dp = [0] * (N + 1)\n        for j in range(1, N + 1):\n            for x, y in edges:\n                if x == j:\n                    new_dp[y] += dp[i - 1][x]\n                    new_dp[y] %= MOD\n            if j <= N:\n                new_dp[j % (N + 1)] += dp[i - 1][j]\n                new_dp[j % (N + 1)] %= MOD\n        dp[i] = new_dp\n    \n    result = sum(dp[K]) % MOD\n    print(result)\n\nmain()"]}
{"task_id": "abc372_g", "codes": ["import sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef count_valid_pairs(N, A, B, C):\n    count = 0\n    max_x = min(max(A), max(C)) // min(B, 1)\n    for x in range(1, max_x + 1):\n        if C[0] - A[0] * x > 0:\n            y_max = (C[0] - A[0] * x) // B[0]\n            if y_max > 0:\n                count += y_max\n    return count\n\ndef main():\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        B = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        C = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        \n        results.append(count_valid_pairs(N, A, B, C))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false], "raw_code": ["```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef count_valid_pairs(N, A, B, C):\n    count = 0\n    max_x = min(max(A), max(C)) // min(B, 1)\n    for x in range(1, max_x + 1):\n        if C[0] - A[0] * x > 0:\n            y_max = (C[0] - A[0] * x) // B[0]\n            if y_max > 0:\n                count += y_max\n    return count\n\ndef main():\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        A = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        B = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        C = [int(data[index]) for index in range(index, index + N)]\n        index += N\n        \n        results.append(count_valid_pairs(N, A, B, C))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc371_e", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Initialize variables\n    total_sum = 0\n    \n    # Iterate over all possible starting points i\n    for i in range(N):\n        distinct_values = set()\n        \n        # Iterate over all possible ending points j starting from i\n        for j in range(i, N):\n            distinct_values.add(A[j])\n            total_sum += len(distinct_values)\n    \n    print(total_sum)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Initialize variables\n    total_sum = 0\n    \n    # Iterate over all possible starting points i\n    for i in range(N):\n        distinct_values = set()\n        \n        # Iterate over all possible ending points j starting from i\n        for j in range(i, N):\n            distinct_values.add(A[j])\n            total_sum += len(distinct_values)\n    \n    print(total_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc367_f", "codes": ["def can_rearrange_subsequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        freq_A = [0] * (N + 1)\n        freq_B = [0] * (N + 1)\n        \n        for num in subseq_A:\n            freq_A[num] += 1\n        \n        for num in subseq_B:\n            freq_B[num] += 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequences()"], "passed": [false], "raw_code": ["```python\ndef can_rearrange_subsequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        freq_A = [0] * (N + 1)\n        freq_B = [0] * (N + 1)\n        \n        for num in subseq_A:\n            freq_A[num] += 1\n        \n        for num in subseq_B:\n            freq_B[num] += 1\n        \n        if freq_A == freq_B:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequences()\n```"]}
{"task_id": "arc181_b", "codes": ["def f(S, T, X):\n    result = \"\"\n    for char in X:\n        if char == '0':\n            result += S\n        else:\n            result += T\n    return result\n\ndef check_f(S, X, Y):\n    count_X_0 = X.count('0')\n    count_X_1 = X.count('1')\n    count_Y_0 = Y.count('0')\n    count_Y_1 = Y.count('1')\n\n    if count_X_0 == count_Y_0 and count_X_1 == count_Y_1:\n        return \"Yes\"\n    elif count_X_0 > count_Y_0 and count_X_1 < count_Y_1:\n        return \"Yes\" if len(T) >= count_X_0 - count_Y_0 else \"No\"\n    elif count_X_0 < count_Y_0 and count_X_1 > count_Y_1:\n        return \"Yes\" if len(T) >= count_Y_0 - count_X_0 else \"No\"\n    else:\n        return \"No\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        result = check_f(S, X, Y)\n        results.append(result)\n        \n        index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false], "raw_code": ["```python\ndef f(S, T, X):\n    result = \"\"\n    for char in X:\n        if char == '0':\n            result += S\n        else:\n            result += T\n    return result\n\ndef check_f(S, X, Y):\n    count_X_0 = X.count('0')\n    count_X_1 = X.count('1')\n    count_Y_0 = Y.count('0')\n    count_Y_1 = Y.count('1')\n\n    if count_X_0 == count_Y_0 and count_X_1 == count_Y_1:\n        return \"Yes\"\n    elif count_X_0 > count_Y_0 and count_X_1 < count_Y_1:\n        return \"Yes\" if len(T) >= count_X_0 - count_Y_0 else \"No\"\n    elif count_X_0 < count_Y_0 and count_X_1 > count_Y_1:\n        return \"Yes\" if len(T) >= count_Y_0 - count_X_0 else \"No\"\n    else:\n        return \"No\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(t):\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        result = check_f(S, X, Y)\n        results.append(result)\n        \n        index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "abc370_g", "codes": ["```python\ndef sum_of_divisors(n):\n    divisors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef good_integer(n):\n    return sum_of_divisors(n) % 3 == 0\n\nMOD = 998244353\n\ndef count_sequences(N, M):\n    dp = [[0] * (M + 1) for _ in range(3)]\n    dp[1][0] = 1\n    \n    for n in range(1, N + 1):\n        if good_integer(n):\n            for i in range(2, 0, -1):\n                for j in range(M, 0, -1):\n                    dp[i][j] = (dp[i][j] + dp[i - n % 3][j - 1]) % MOD\n            dp[0][1] = (dp[0][1] + 1) % MOD\n    \n    return dp[0][M]\n\n# Main function to read input and print the result\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    result = count_sequences(N, M)\n    print(result)\n\nif __name__ == \"__"], "passed": [false], "raw_code": ["```python\ndef sum_of_divisors(n):\n    divisors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef good_integer(n):\n    return sum_of_divisors(n) % 3 == 0\n\nMOD = 998244353\n\ndef count_sequences(N, M):\n    dp = [[0] * (M + 1) for _ in range(3)]\n    dp[1][0] = 1\n    \n    for n in range(1, N + 1):\n        if good_integer(n):\n            for i in range(2, 0, -1):\n                for j in range(M, 0, -1):\n                    dp[i][j] = (dp[i][j] + dp[i - n % 3][j - 1]) % MOD\n            dp[0][1] = (dp[0][1] + 1) % MOD\n    \n    return dp[0][M]\n\n# Main function to read input and print the result\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    result = count_sequences(N, M)\n    print(result)\n\nif __name__ == \"__"]}
{"task_id": "3563", "codes": ["def maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort(reverse=True)\n    \n    selected_values = set()\n    total_sum = 0\n    \n    for j in range(m):\n        for i in range(n):\n            if grid[i][j] not in selected_values:\n                selected_values.add(grid[i][j])\n                total_sum += grid[i][j]\n                break\n    \n    return total_sum"], "passed": [false], "raw_code": ["```python\ndef maxScore(grid):\n    n, m = len(grid), len(grid[0])\n    for row in grid:\n        row.sort(reverse=True)\n    \n    selected_values = set()\n    total_sum = 0\n    \n    for j in range(m):\n        for i in range(n):\n            if grid[i][j] not in selected_values:\n                selected_values.add(grid[i][j])\n                total_sum += grid[i][j]\n                break\n    \n    return total_sum\n```"]}
{"task_id": "arc182_c", "codes": ["```python\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\ndef sum_of_scores(N, M):\n    MOD = 998244353\n    total_score = 0\n    for k in range(1, N + 1):\n        score_sum = 0\n        for i in range(1, M + 1):\n            score_sum += count_divisors(i) ** k\n            score_sum %= MOD\n        total_score += k * score_sum\n        total_score %= MOD\n    return total_score\n\nN, M = map(int, input().split())\nprint(sum_of_scores(N, M))"], "passed": [false], "raw_code": ["```python\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\ndef sum_of_scores(N, M):\n    MOD = 998244353\n    total_score = 0\n    for k in range(1, N + 1):\n        score_sum = 0\n        for i in range(1, M + 1):\n            score_sum += count_divisors(i) ** k\n            score_sum %= MOD\n        total_score += k * score_sum\n        total_score %= MOD\n    return total_score\n\nN, M = map(int, input().split())\nprint(sum_of_scores(N, M))"]}
{"task_id": "abc366_g", "codes": ["import sys\nfrom collections import defaultdict, deque\n\ndef xor_assignment(N, M, edges):\n    # Create adjacency list\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # Initialize visited array\n    visited = [False] * (N + 1)\n\n    def dfs(node, parent, value):\n        visited[node] = True\n        current_value = value\n        for neighbor in adj_list[node]:\n            if neighbor == parent:\n                continue\n            if not visited[neighbor]:\n                dfs(neighbor, node, current_value ^ (value ^ 1))\n            elif visited[neighbor] and (current_value ^ (value ^ 1)) != (value ^ (visited[neighbor] ^ 1)):\n                return False\n        return True\n\n    for i in range(1, N + 1):\n        if not visited[i]:\n            if not dfs(i, -1, 1):\n                return 'No'\n\n    # Collect results\n    result = []\n    for i in range(1, N + 1):\n        result.append(str(1 << i))\n\n    return 'Yes\\n' + '\\ '.join(result)\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    edges = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(M)]\n    print(xor_assignment(N, M, edges))"], "passed": [false], "raw_code": ["import sys\nfrom collections import defaultdict, deque\n\ndef xor_assignment(N, M, edges):\n    # Create adjacency list\n    adj_list = defaultdict(list)\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # Initialize visited array\n    visited = [False] * (N + 1)\n\n    def dfs(node, parent, value):\n        visited[node] = True\n        current_value = value\n        for neighbor in adj_list[node]:\n            if neighbor == parent:\n                continue\n            if not visited[neighbor]:\n                dfs(neighbor, node, current_value ^ (value ^ 1))\n            elif visited[neighbor] and (current_value ^ (value ^ 1)) != (value ^ (visited[neighbor] ^ 1)):\n                return False\n        return True\n\n    for i in range(1, N + 1):\n        if not visited[i]:\n            if not dfs(i, -1, 1):\n                return 'No'\n\n    # Collect results\n    result = []\n    for i in range(1, N + 1):\n        result.append(str(1 << i))\n\n    return 'Yes\\n' + '\\ '.join(result)\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    M = int(data[1])\n    edges = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(M)]\n    print(xor_assignment(N, M, edges))"]}
{"task_id": "abc372_e", "codes": ["import sys\nfrom heapq import heappush, heappop\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = [[] for _ in range(N + 1)]\n    heap_dict = {i: [] for i in range(1, N + 1)}\n    \n    def add_edge(u, v):\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        heappush(heap_dict[u], -v)\n        heappush(heap_dict[v], -u)\n    \n    def kth_largest(v, k):\n        if len(heap_dict[v]) < k:\n            return -1\n        while k > 0:\n            k -= 1\n            max_val = -heappop(heap_dict[v])\n            heappush(heap_dict[v], -max_val)\n        return max_val\n    \n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            u = int(data[index])\n            v = int(data[index + 1])\n            index += 2\n            add_edge(u, v)\n        elif query_type == 2:\n            v = int(data[index])\n            k = int(data[index + 1])\n            index += 2\n            result = kth_largest(v, k)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false], "raw_code": ["```python\nimport sys\nfrom heapq import heappush, heappop\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    adj_list = [[] for _ in range(N + 1)]\n    heap_dict = {i: [] for i in range(1, N + 1)}\n    \n    def add_edge(u, v):\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        heappush(heap_dict[u], -v)\n        heappush(heap_dict[v], -u)\n    \n    def kth_largest(v, k):\n        if len(heap_dict[v]) < k:\n            return -1\n        while k > 0:\n            k -= 1\n            max_val = -heappop(heap_dict[v])\n            heappush(heap_dict[v], -max_val)\n        return max_val\n    \n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        index += 1\n        \n        if query_type == 1:\n            u = int(data[index])\n            v = int(data[index + 1])\n            index += 2\n            add_edge(u, v)\n        elif query_type == 2:\n            v = int(data[index])\n            k = int(data[index + 1])\n            index += 2\n            result = kth_largest(v, k)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "3531", "codes": ["def min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times = [(h / p) for h, p in zip(health, damage)]\n    \n    # Sort enemies based on the time it takes for them to die\n    sorted_enemies = sorted(zip(times, damage, health))\n    \n    total_damage = 0\n    current_time = 0\n    \n    for time, d, h in sorted_enemies:\n        if current_time >= time:\n            continue\n        \n        # Calculate the remaining time to defeat the enemy\n        remaining_time = time - current_time\n        full_attacks = int(remaining_time // power)\n        partial_attack = min(int(remaining_time % power), d)\n        \n        total_damage += full_attacks * d + partial_attack\n        current_time = time\n    \n    return total_damage"], "passed": [false], "raw_code": ["```python\ndef min_damage(power, damage, health):\n    # Calculate the time it takes for each enemy to die\n    times = [(h / p) for h, p in zip(health, damage)]\n    \n    # Sort enemies based on the time it takes for them to die\n    sorted_enemies = sorted(zip(times, damage, health))\n    \n    total_damage = 0\n    current_time = 0\n    \n    for time, d, h in sorted_enemies:\n        if current_time >= time:\n            continue\n        \n        # Calculate the remaining time to defeat the enemy\n        remaining_time = time - current_time\n        full_attacks = int(remaining_time // power)\n        partial_attack = min(int(remaining_time % power), d)\n        \n        total_damage += full_attacks * d + partial_attack\n        current_time = time\n    \n    return total_damage\n```"]}
{"task_id": "arc182_e", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    # Precompute Ck % M for k from 0 to K-1\n    mod_values = [(C * k) % M for k in range(K)]\n    \n    # Calculate the sum of min(Ck + Ai % M) for each k\n    total_sum = 0\n    for k in range(K):\n        min_val = float('inf')\n        for ai in A:\n            val = (mod_values[k] + ai) % M\n            min_val = min(min_val, val)\n        total_sum += min_val\n    \n    print(total_sum)\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n    \n    # Precompute Ck % M for k from 0 to K-1\n    mod_values = [(C * k) % M for k in range(K)]\n    \n    # Calculate the sum of min(Ck + Ai % M) for each k\n    total_sum = 0\n    for k in range(K):\n        min_val = float('inf')\n        for ai in A:\n            val = (mod_values[k] + ai) % M\n            min_val = min(min_val, val)\n        total_sum += min_val\n    \n    print(total_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "arc181_d", "codes": ["```python\ndef merge_sort_and_count(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    \n    mid = len(arr) // 2\n    left, left_inv = merge_sort_and_count(arr[:mid])\n    right, right_inv = merge_sort_and_count(arr[mid:])\n    \n    merged, split_inv = merge_and_count(left, right)\n    \n    return merged, left_inv + right_inv + split_inv\n\ndef merge_and_count(left, right):\n    result = []\n    i = j = inv_count = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result, inv_count\n\ndef apply_operations(P, A):\n    results = []\n    current_inversions = merge_sort_and_count(P)[1]\n    results.append(current_inversions)\n    \n    for a in A:\n        for i in range(a - 1):\n            if P[i] > P[i + 1]:\n                P[i], P[i + 1] = P[i + 1], P[i]\n                current_inversions -= 1\n        results.append(current_inversions)\n    \n    return results\n\n# Read"], "passed": [false], "raw_code": ["```python\ndef merge_sort_and_count(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    \n    mid = len(arr) // 2\n    left, left_inv = merge_sort_and_count(arr[:mid])\n    right, right_inv = merge_sort_and_count(arr[mid:])\n    \n    merged, split_inv = merge_and_count(left, right)\n    \n    return merged, left_inv + right_inv + split_inv\n\ndef merge_and_count(left, right):\n    result = []\n    i = j = inv_count = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result, inv_count\n\ndef apply_operations(P, A):\n    results = []\n    current_inversions = merge_sort_and_count(P)[1]\n    results.append(current_inversions)\n    \n    for a in A:\n        for i in range(a - 1):\n            if P[i] > P[i + 1]:\n                P[i], P[i + 1] = P[i + 1], P[i]\n                current_inversions -= 1\n        results.append(current_inversions)\n    \n    return results\n\n# Read"]}
{"task_id": "arc182_a", "codes": ["```python\ndef count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, Q + 1):\n        pi = P[i - 1]\n        vi = V[i - 1]\n        \n        # Case 1: Replace first pi elements\n        if pi <= N:\n            for j in range(pi, 0, -1):\n                if max(S[j:j+pi]) <= vi:\n                    dp[i][pi] += dp[i-1][j-1]\n                    dp[i][pi] %= MOD\n        \n        # Case 2: Replace from pi to N elements\n        if pi > 0:\n            for j in range(N, pi - 1, -1):\n                if max(S[j-pi+1:j+1]) <= vi:\n                    dp[i][N-pi+1] += dp[i-1][j-N]\n                    dp[i][N-pi+1] %= MOD\n    \n    return sum(dp[-1]) % MOD\n\n# Example usage\nN = 8\nQ = 3\nP = [1, 8, 2]\nV = [8, 1, 1]\nS = [0] * N\n\nresult = count_valid_sequences(N, Q, P, V)\nprint"], "passed": [false], "raw_code": ["```python\ndef count_valid_sequences(N, Q, P, V):\n    MOD = 998244353\n    \n    # Initialize DP table\n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, Q + 1):\n        pi = P[i - 1]\n        vi = V[i - 1]\n        \n        # Case 1: Replace first pi elements\n        if pi <= N:\n            for j in range(pi, 0, -1):\n                if max(S[j:j+pi]) <= vi:\n                    dp[i][pi] += dp[i-1][j-1]\n                    dp[i][pi] %= MOD\n        \n        # Case 2: Replace from pi to N elements\n        if pi > 0:\n            for j in range(N, pi - 1, -1):\n                if max(S[j-pi+1:j+1]) <= vi:\n                    dp[i][N-pi+1] += dp[i-1][j-N]\n                    dp[i][N-pi+1] %= MOD\n    \n    return sum(dp[-1]) % MOD\n\n# Example usage\nN = 8\nQ = 3\nP = [1, 8, 2]\nV = [8, 1, 1]\nS = [0] * N\n\nresult = count_valid_sequences(N, Q, P, V)\nprint"]}
{"task_id": "3550", "codes": ["def maxSumOfRooks(board):\n    m, n = len(board), len(board[0])\n    \n    # Calculate row sums\n    row_sums = [sum(row) for row in board]\n    \n    # Calculate column sums\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Sort rows and columns by their sums in descending order\n    sorted_rows = sorted(range(m), key=lambda i: row_sums[i], reverse=True)\n    sorted_cols = sorted(range(n), key=lambda j: col_sums[j], reverse=True)\n    \n    # Initialize variables to track used rows and columns\n    used_rows = set()\n    used_cols = set()\n    \n    # Select the top three non-overlapping rows and columns\n    selected_rows = []\n    selected_cols = []\n    for i in range(3):\n        if i < m and sorted_rows[i] not in used_rows:\n            selected_rows.append(sorted_rows[i])\n            used_rows.add(sorted_rows[i])\n        if i < n and sorted_cols[i] not in used_cols:\n            selected_cols.append(sorted_cols[i])\n            used_cols.add(sorted_cols[i])\n    \n    # Calculate the sum of the selected cells\n    max_sum = 0\n    for r in selected_rows:\n        for c in selected_cols:\n            max_sum += board[r][c]\n    \n    return max_sum"], "passed": [false], "raw_code": ["```python\ndef maxSumOfRooks(board):\n    m, n = len(board), len(board[0])\n    \n    # Calculate row sums\n    row_sums = [sum(row) for row in board]\n    \n    # Calculate column sums\n    col_sums = [sum(col) for col in zip(*board)]\n    \n    # Sort rows and columns by their sums in descending order\n    sorted_rows = sorted(range(m), key=lambda i: row_sums[i], reverse=True)\n    sorted_cols = sorted(range(n), key=lambda j: col_sums[j], reverse=True)\n    \n    # Initialize variables to track used rows and columns\n    used_rows = set()\n    used_cols = set()\n    \n    # Select the top three non-overlapping rows and columns\n    selected_rows = []\n    selected_cols = []\n    for i in range(3):\n        if i < m and sorted_rows[i] not in used_rows:\n            selected_rows.append(sorted_rows[i])\n            used_rows.add(sorted_rows[i])\n        if i < n and sorted_cols[i] not in used_cols:\n            selected_cols.append(sorted_cols[i])\n            used_cols.add(sorted_cols[i])\n    \n    # Calculate the sum of the selected cells\n    max_sum = 0\n    for r in selected_rows:\n        for c in selected_cols:\n            max_sum += board[r][c]\n    \n    return max_sum\n```"]}
{"task_id": "arc183_d", "codes": ["```python\ndef find_leaves(graph):\n    leaves = []\n    for node in range(1, len(graph)):\n        if len(graph[node]) == 1:\n            leaves.append(node)\n    return leaves\n\ndef max_score_operations(N, edges):\n    graph = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    leaves = find_leaves(graph)\n    result = []\n    \n    while len(leaves) > 1:\n        max_distance = 0\n        best_pair = (None, None)\n        \n        for i in range(len(leaves)):\n            for j in range(i + 1, len(leaves)):\n                leaf1 = leaves[i]\n                leaf2 = leaves[j]\n                distance = 0\n                current = leaf1\n                \n                while current != leaf2:\n                    next_nodes = [n for n in graph[current] if n != leaf1]\n                    if next_nodes[0] == leaf2:\n                        distance += 1\n                        break\n                    current = next_nodes[0]\n                    distance += 1\n        \n        result.append((leaf1, leaf2))\n        leaves.remove(leaf1)\n        leaves.remove(leaf2)\n    \n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    edges = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(N - 1)]\n    \n    operations = max_score_operations(N, edges)\n    \n    for op in operations:\n        print(op[0], op[1])\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false], "raw_code": ["```python\ndef find_leaves(graph):\n    leaves = []\n    for node in range(1, len(graph)):\n        if len(graph[node]) == 1:\n            leaves.append(node)\n    return leaves\n\ndef max_score_operations(N, edges):\n    graph = [[] for _ in range(N + 1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    leaves = find_leaves(graph)\n    result = []\n    \n    while len(leaves) > 1:\n        max_distance = 0\n        best_pair = (None, None)\n        \n        for i in range(len(leaves)):\n            for j in range(i + 1, len(leaves)):\n                leaf1 = leaves[i]\n                leaf2 = leaves[j]\n                distance = 0\n                current = leaf1\n                \n                while current != leaf2:\n                    next_nodes = [n for n in graph[current] if n != leaf1]\n                    if next_nodes[0] == leaf2:\n                        distance += 1\n                        break\n                    current = next_nodes[0]\n                    distance += 1\n        \n        result.append((leaf1, leaf2))\n        leaves.remove(leaf1)\n        leaves.remove(leaf2)\n    \n    return result\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    edges = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(N - 1)]\n    \n    operations = max_score_operations(N, edges)\n    \n    for op in operations:\n        print(op[0], op[1])\n\nif __name__ == \"__main__\":\n    main()"]}
{"task_id": "3560", "codes": ["def min_moves_to_capture(kx, ky, px, py):\n    directions = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.pop(0)\n        \n        if (cx, cy) == (px, py):\n            return moves\n        \n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            \n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    \n    return float('inf')\n\n@lru_cache(None)\ndef dfs(positions, turn):\n    if not positions:\n        return 0\n    \n    max_moves = 0 if turn == 'Alice' else float('-inf')\n    \n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        new_positions = tuple([pos for j, pos in enumerate(positions) if j != i])\n        \n        if turn == 'Alice':\n            max_moves = max(max_moves, moves + dfs(new_positions, 'Bob'))\n        else:\n            max_moves = max(max_moves, dfs(new_positions, 'Alice'))\n    \n    return max_moves\n\ndef max_total_moves(kx, ky, positions):\n    return dfs(tuple(positions), 'Alice')\n\n# Example usage:\nprint(max_total_moves(1, 1, ((0, 0),)))  # Output: 4\nprint(max_total_moves(0, 2, ((1, 1), (2, 2), (3, 3))))  # Output: 8\nprint(max_total_moves(0, 0, ((1, 2), (2, 4))))  # Output: 3"], "passed": [false], "raw_code": ["```python\ndef min_moves_to_capture(kx, ky, px, py):\n    directions = [\n        (2, 1), (2, -1), (-2, 1), (-2, -1),\n        (1, 2), (1, -2), (-1, 2), (-1, -2)\n    ]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        cx, cy, moves = queue.pop(0)\n        \n        if (cx, cy) == (px, py):\n            return moves\n        \n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            \n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    \n    return float('inf')\n\n@lru_cache(None)\ndef dfs(positions, turn):\n    if not positions:\n        return 0\n    \n    max_moves = 0 if turn == 'Alice' else float('-inf')\n    \n    for i, (px, py) in enumerate(positions):\n        moves = min_moves_to_capture(kx, ky, px, py)\n        new_positions = tuple([pos for j, pos in enumerate(positions) if j != i])\n        \n        if turn == 'Alice':\n            max_moves = max(max_moves, moves + dfs(new_positions, 'Bob'))\n        else:\n            max_moves = max(max_moves, dfs(new_positions, 'Alice'))\n    \n    return max_moves\n\ndef max_total_moves(kx, ky, positions):\n    return dfs(tuple(positions), 'Alice')\n\n# Example usage:\nprint(max_total_moves(1, 1, ((0, 0),)))  # Output: 4\nprint(max_total_moves(0, 2, ((1, 1), (2, 2), (3, 3))))  # Output: 8\nprint(max_total_moves(0, 0, ((1, 2), (2, 4))))  # Output: 3\n```"]}
{"task_id": "3552", "codes": ["def largest_k_palindrome(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def get_max_number(digits):\n        if digits == 1:\n            return '9'\n        return ''.join(str(9) for _ in range(digits))\n    \n    max_num = int(get_max_number(n))\n    while True:\n        str_num = str(max_num)\n        palindrome = str_num + str_num[-2::-1] if n % 2 != 0 else str_num + str_num[::-1]\n        if is_palindrome(palindrome) and int(palindrome) % k == 0:\n            return str(int(palindrome))\n        max_num -= 1"], "passed": [false], "raw_code": ["```python\ndef largest_k_palindrome(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def get_max_number(digits):\n        if digits == 1:\n            return '9'\n        return ''.join(str(9) for _ in range(digits))\n    \n    max_num = int(get_max_number(n))\n    while True:\n        str_num = str(max_num)\n        palindrome = str_num + str_num[-2::-1] if n % 2 != 0 else str_num + str_num[::-1]\n        if is_palindrome(palindrome) and int(palindrome) % k == 0:\n            return str(int(palindrome))\n        max_num -= 1\n```"]}
{"task_id": "abc368_g", "codes": ["import sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef build_segment_tree(arr):\n    n = len(arr)\n    tree = [0] * (4 * n)\n    \n    def build(node, start, end):\n        if start == end:\n            tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            tree[node] = max(build(2 * node, start, mid), build(2 * node + 1, mid + 1, end))\n        return tree[node]\n    \n    build(1, 0, n - 1)\n    return tree\n\ndef update_segment_tree(tree, node, start, end, idx, val):\n    if start == end:\n        tree[node] = val\n    else:\n        mid = (start + end) // 2\n        if start <= idx <= mid:\n            update_segment_tree(tree, 2 * node, start, mid, idx, val)\n        else:\n            update_segment_tree(tree, 2 * node + 1, mid + 1, end, idx, val)\n        tree[node] = max(tree[2 * node], tree[2 * node + 1])\n\ndef query_segment_tree(tree, node, start, end, l, r):\n    if r < start or end < l:\n        return float('-inf')\n    if l <= start and end <= r:\n        return tree[node]\n    mid = (start + end) // 2\n    left = query_segment_tree(tree, 2 * node, start, mid, l, r)\n    right = query_segment_tree(tree, 2 * node + 1, mid + 1, end, l, r)\n    return max(left, right)\n\ndef main():\n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = data[2*N+2:]\n    \n    tree_A = build_segment_tree(A)\n    tree_B = build_segment_tree(B)\n    \n    result = []\n    index = 0\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            i = int(queries[index]) - 1\n            x = int(queries[index + 1])\n            index += 2\n            A[i] = x\n            update_segment_tree(tree_A, 1, 0, N - 1, i, x)\n        elif query_type == 2:\n            i = int(queries[index]) - 1\n            x = int(queries[index + 1])\n            index += 2\n            B[i] = x\n            update_segment_tree(tree_B, 1, 0, N - 1, i, x)\n        elif query_type == 3:\n            l = int(queries[index]) - 1\n            r = int(queries[index + 1]) - 1\n            index += 2\n            \n            v = 0\n            for i in range(l, r + 1):\n                v = max(v + A[i], v * B[i])\n            \n            result.append(str(v))\n    \n    print('\\n'.join(result))\n\nif __name__ == \"__main__\":\n    main()"], "passed": [false], "raw_code": ["```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\ndef build_segment_tree(arr):\n    n = len(arr)\n    tree = [0] * (4 * n)\n    \n    def build(node, start, end):\n        if start == end:\n            tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            tree[node] = max(build(2 * node, start, mid), build(2 * node + 1, mid + 1, end))\n        return tree[node]\n    \n    build(1, 0, n - 1)\n    return tree\n\ndef update_segment_tree(tree, node, start, end, idx, val):\n    if start == end:\n        tree[node] = val\n    else:\n        mid = (start + end) // 2\n        if start <= idx <= mid:\n            update_segment_tree(tree, 2 * node, start, mid, idx, val)\n        else:\n            update_segment_tree(tree, 2 * node + 1, mid + 1, end, idx, val)\n        tree[node] = max(tree[2 * node], tree[2 * node + 1])\n\ndef query_segment_tree(tree, node, start, end, l, r):\n    if r < start or end < l:\n        return float('-inf')\n    if l <= start and end <= r:\n        return tree[node]\n    mid = (start + end) // 2\n    left = query_segment_tree(tree, 2 * node, start, mid, l, r)\n    right = query_segment_tree(tree, 2 * node + 1, mid + 1, end, l, r)\n    return max(left, right)\n\ndef main():\n    N = int(data[0])\n    A = list(map(int, data[1:N+1]))\n    B = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = data[2*N+2:]\n    \n    tree_A = build_segment_tree(A)\n    tree_B = build_segment_tree(B)\n    \n    result = []\n    index = 0\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            i = int(queries[index]) - 1\n            x = int(queries[index + 1])\n            index += 2\n            A[i] = x\n            update_segment_tree(tree_A, 1, 0, N - 1, i, x)\n        elif query_type == 2:\n            i = int(queries[index]) - 1\n            x = int(queries[index + 1])\n            index += 2\n            B[i] = x\n            update_segment_tree(tree_B, 1, 0, N - 1, i, x)\n        elif query_type == 3:\n            l = int(queries[index]) - 1\n            r = int(queries[index + 1]) - 1\n            index += 2\n            \n            v = 0\n            for i in range(l, r + 1):\n                v = max(v + A[i], v * B[i])\n            \n            result.append(str(v))\n    \n    print('\\n'.join(result))\n\nif __name__ == \"__main__\":\n    main()\n```"]}
{"task_id": "3575", "codes": ["def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    nums.sort()\n    left = 0\n    right = n - 1\n    result = 0\n    for i in range(k):\n        result |= nums[left]\n        left += 1\n    for i in range(k):\n        result ^= nums[right]\n        right -= 1\n    return result"], "passed": [false], "raw_code": ["def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    nums.sort()\n    left = 0\n    right = n - 1\n    result = 0\n    for i in range(k):\n        result |= nums[left]\n        left += 1\n    for i in range(k):\n        result ^= nums[right]\n        right -= 1\n    return result"]}
{"task_id": "3583", "codes": ["from math import gcd\nfrom collections import defaultdict\n\ndef solve(nums, queries):\n    # Dictionary to count occurrences of each GCD\n    gcd_count = defaultdict(int)\n    \n    # Generate all pairs and count their GCDs\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_count[g] += 1\n    \n    # List of unique GCD values sorted in ascending order\n    unique_gcds = sorted(gcd_count.keys())\n    \n    # Prefix sum array to build the final answer\n    prefix_sum = [0]\n    for g in unique_gcds:\n        prefix_sum.append(prefix_sum[-1] + gcd_count[g])\n    \n    # Answer each query\n    result = []\n    for q in queries:\n        idx = bisect.bisect_left(prefix_sum, q + 1)\n        if idx > 0:\n            result.append(unique_gcds[idx - 1])\n        else:\n            result.append(0)\n    \n    return result"], "passed": [false], "raw_code": ["```python\nfrom math import gcd\nfrom collections import defaultdict\n\ndef solve(nums, queries):\n    # Dictionary to count occurrences of each GCD\n    gcd_count = defaultdict(int)\n    \n    # Generate all pairs and count their GCDs\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_count[g] += 1\n    \n    # List of unique GCD values sorted in ascending order\n    unique_gcds = sorted(gcd_count.keys())\n    \n    # Prefix sum array to build the final answer\n    prefix_sum = [0]\n    for g in unique_gcds:\n        prefix_sum.append(prefix_sum[-1] + gcd_count[g])\n    \n    # Answer each query\n    result = []\n    for q in queries:\n        idx = bisect.bisect_left(prefix_sum, q + 1)\n        if idx > 0:\n            result.append(unique_gcds[idx - 1])\n        else:\n            result.append(0)\n    \n    return result\n```"]}
{"task_id": "3548", "codes": ["def count_good_integers(n, k):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        result = 1\n        for i in range(2, num + 1):\n            result *= i\n        return result\n    \n    def count_permutations(digits, k):\n        count = 0\n        half_len = (len(digits) + 1) // 2\n        for perm in set(permutations(digits)):\n            num_str = ''.join(perm[:half_len])\n            full_num = int(num_str * (2 - len(digits) % 2))\n            if full_num % k == 0:\n                count += 1\n        return count\n    \n    digits = [str(i) for i in range(1, 10)]\n    total_count = 0\n    \n    for length in range(1, n + 1):\n        for perm in set(permutations(digits, length)):\n            num_str = ''.join(perm)\n            full_num = int(num_str * (2 - length % 2))\n            if full_num % k == 0:\n                total_count += 1\n    \n    return total_count"], "passed": [false], "raw_code": ["```python\ndef count_good_integers(n, k):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        result = 1\n        for i in range(2, num + 1):\n            result *= i\n        return result\n    \n    def count_permutations(digits, k):\n        count = 0\n        half_len = (len(digits) + 1) // 2\n        for perm in set(permutations(digits)):\n            num_str = ''.join(perm[:half_len])\n            full_num = int(num_str * (2 - len(digits) % 2))\n            if full_num % k == 0:\n                count += 1\n        return count\n    \n    digits = [str(i) for i in range(1, 10)]\n    total_count = 0\n    \n    for length in range(1, n + 1):\n        for perm in set(permutations(digits, length)):\n            num_str = ''.join(perm)\n            full_num = int(num_str * (2 - length % 2))\n            if full_num % k == 0:\n                total_count += 1\n    \n    return total_count\n```"]}
{"task_id": "abc369_g", "codes": ["def min_max_walk_score():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    edges = []\n    index = 1\n    for _ in range(N - 1):\n        u = int(data[index])\n        v = int(data[index + 1])\n        l = int(data[index + 2])\n        edges.append((u, v, l))\n        index += 3\n    def dfs(node, parent, dist, depth):\n        nonlocal max_dist, min_depth\n        if depth > max_dist:\n            max_dist = depth\n            min_depth = dist\n        elif depth == max_dist:\n            min_depth = min(min_depth, dist)\n        for neighbor, _, _ in graph[node]:\n            if neighbor != parent:\n                dfs(neighbor, node, dist + 1, depth + 1)\n    graph = [[] for _ in range(N + 1)]\n    for u, v, l in edges:\n        graph[u].append((v, l, 0))\n        graph[v].append((u, l, 0))\n    results = [0] * N\n    for K in range(1, N + 1):\n        for combination in combinations(range(1, N + 1), K):\n            visited = [False] * (N + 1)\n            for v in combination:\n                visited[v] = True\n            max_dist = 0\n            min_depth = float('inf')\n            for i in range(1, N + 1):\n                if not visited[i]:\n                    dfs(i, -1, 0, 0)\n            results[K - 1] = max(results[K - 1], max_dist + min_depth)\n    for result in results:\n        print(result)\nmin_max_walk_score()"], "passed": [false], "raw_code": ["def min_max_walk_score():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    edges = []\n    index = 1\n    for _ in range(N - 1):\n        u = int(data[index])\n        v = int(data[index + 1])\n        l = int(data[index + 2])\n        edges.append((u, v, l))\n        index += 3\n    def dfs(node, parent, dist, depth):\n        nonlocal max_dist, min_depth\n        if depth > max_dist:\n            max_dist = depth\n            min_depth = dist\n        elif depth == max_dist:\n            min_depth = min(min_depth, dist)\n        for neighbor, _, _ in graph[node]:\n            if neighbor != parent:\n                dfs(neighbor, node, dist + 1, depth + 1)\n    graph = [[] for _ in range(N + 1)]\n    for u, v, l in edges:\n        graph[u].append((v, l, 0))\n        graph[v].append((u, l, 0))\n    results = [0] * N\n    for K in range(1, N + 1):\n        for combination in combinations(range(1, N + 1), K):\n            visited = [False] * (N + 1)\n            for v in combination:\n                visited[v] = True\n            max_dist = 0\n            min_depth = float('inf')\n            for i in range(1, N + 1):\n                if not visited[i]:\n                    dfs(i, -1, 0, 0)\n            results[K - 1] = max(results[K - 1], max_dist + min_depth)\n    for result in results:\n        print(result)\nmin_max_walk_score()"]}
{"task_id": "abc373_g", "codes": ["def find_non_intersecting_permutation(N, P, Q):\n    def does_intersect(i, j, k, l):\n        # Check if segments P[i]Q[j] and P[k]Q[l] intersect\n        return (min(A[i], A[j]) <= max(C[k], C[l]) and\n                min(C[k], C[l]) <= max(A[i], A[j]) and\n                min(B[i], B[j]) <= max(D[k], D[l]) and\n                min(D[k], D[l]) <= max(B[i], B[j]))\n\n    for perm in permutations(range(1, N+1)):\n        valid = True\n        for i in range(N):\n            for j in range(i+1, N):\n                if does_intersect(i, j, perm[i]-1, perm[j]-1):\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            return ' '.join(map(str, perm))\n    return '-1'\n\nfrom itertools import permutations\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nP = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(n)]\nQ = [(int(data[2*n+2*i+1]), int(data[2*n+2*i+2])) for i in range(n)]\nprint(find_non_intersecting_permutation(n, P, Q))"], "passed": [false], "raw_code": ["def find_non_intersecting_permutation(N, P, Q):\n    def does_intersect(i, j, k, l):\n        # Check if segments P[i]Q[j] and P[k]Q[l] intersect\n        return (min(A[i], A[j]) <= max(C[k], C[l]) and\n                min(C[k], C[l]) <= max(A[i], A[j]) and\n                min(B[i], B[j]) <= max(D[k], D[l]) and\n                min(D[k], D[l]) <= max(B[i], B[j]))\n\n    for perm in permutations(range(1, N+1)):\n        valid = True\n        for i in range(N):\n            for j in range(i+1, N):\n                if does_intersect(i, j, perm[i]-1, perm[j]-1):\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            return ' '.join(map(str, perm))\n    return '-1'\n\nfrom itertools import permutations\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nP = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(n)]\nQ = [(int(data[2*n+2*i+1]), int(data[2*n+2*i+2])) for i in range(n)]\nprint(find_non_intersecting_permutation(n, P, Q))"]}
{"task_id": "arc183_c", "codes": ["def count_valid_permutations(N, M, conditions):\n    MOD = 998244353\n    dp = [[0] * (N + 1) for _ in range(1 << N)]\n    dp[0][0] = 1\n\n    for i in range(M):\n        l, r, x = conditions[i]\n        new_dp = [[0] * (N + 1) for _ in range(1 << N)]\n        for mask in range(1 << N):\n            for j in range(1, N + 1):\n                if mask & (1 << (j - 1)):\n                    max_val = max(j if (mask & (1 << k)) != 0 else 0 for k in range(j - 1, -1, -1))\n                    if max_val != j or j < l or j > r:\n                        new_dp[mask][j] = (new_dp[mask][j] + dp[mask ^ (1 << (j - 1))][k]) % MOD\n                else:\n                    new_dp[mask][j] = dp[mask][j]\n        dp = new_dp\n\n    return sum(dp[-1]) % MOD\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nconditions = [(int(data[2 + 3 * i]), int(data[3 + 3 * i]), int(data[4 + 3 * i])) for i in range(M)]\nprint(count_valid_permutations(N, M, conditions))"], "passed": [false], "raw_code": ["def count_valid_permutations(N, M, conditions):\n    MOD = 998244353\n    dp = [[0] * (N + 1) for _ in range(1 << N)]\n    dp[0][0] = 1\n\n    for i in range(M):\n        l, r, x = conditions[i]\n        new_dp = [[0] * (N + 1) for _ in range(1 << N)]\n        for mask in range(1 << N):\n            for j in range(1, N + 1):\n                if mask & (1 << (j - 1)):\n                    max_val = max(j if (mask & (1 << k)) != 0 else 0 for k in range(j - 1, -1, -1))\n                    if max_val != j or j < l or j > r:\n                        new_dp[mask][j] = (new_dp[mask][j] + dp[mask ^ (1 << (j - 1))][k]) % MOD\n                else:\n                    new_dp[mask][j] = dp[mask][j]\n        dp = new_dp\n\n    return sum(dp[-1]) % MOD\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nconditions = [(int(data[2 + 3 * i]), int(data[3 + 3 * i]), int(data[4 + 3 * i])) for i in range(M)]\nprint(count_valid_permutations(N, M, conditions))"]}
{"task_id": "3527", "codes": ["def count_alternating_groups(colors, queries):\n    n = len(colors)\n    colors = colors + colors  # Extend the list to handle circular nature\n    groups = []\n    current_group = []\n\n    # Initialize the list of alternating groups\n    for i in range(n * 2):\n        if not current_group or colors[i] != colors[i - 1]:\n            if current_group:\n                groups.append((current_group[0], current_group[-1], len(current_group)))\n            current_group = [colors[i]]\n        else:\n            current_group.append(colors[i])\n\n    if current_group:\n        groups.append((current_group[0], current_group[-1], len(current_group)))\n\n    result = []\n    for query in queries:\n        if query[0] == 2:\n            index, new_color = query[1], query[2]\n            old_color = colors[index]\n            colors[index] = new_color\n\n            # Update the list of alternating groups\n            for i in range(len(groups)):\n                if groups[i][0] == old_color and groups[i][1] == (index + n) % n:\n                    groups[i] = (new_color, (index + n) % n, groups[i][2])\n                elif groups[i][0] == new_color and groups[i][1] == (index + n) % n:\n                    groups[i] = (old_color, (index + n) % n, groups[i][2])\n\n        elif query[0] == 1:\n            size = query[1]\n            count = sum(1 for group in groups if group[2] == size)\n            result.append(count)\n\n    return result"], "passed": [false], "raw_code": ["```python\ndef count_alternating_groups(colors, queries):\n    n = len(colors)\n    colors = colors + colors  # Extend the list to handle circular nature\n    groups = []\n    current_group = []\n\n    # Initialize the list of alternating groups\n    for i in range(n * 2):\n        if not current_group or colors[i] != colors[i - 1]:\n            if current_group:\n                groups.append((current_group[0], current_group[-1], len(current_group)))\n            current_group = [colors[i]]\n        else:\n            current_group.append(colors[i])\n\n    if current_group:\n        groups.append((current_group[0], current_group[-1], len(current_group)))\n\n    result = []\n    for query in queries:\n        if query[0] == 2:\n            index, new_color = query[1], query[2]\n            old_color = colors[index]\n            colors[index] = new_color\n\n            # Update the list of alternating groups\n            for i in range(len(groups)):\n                if groups[i][0] == old_color and groups[i][1] == (index + n) % n:\n                    groups[i] = (new_color, (index + n) % n, groups[i][2])\n                elif groups[i][0] == new_color and groups[i][1] == (index + n) % n:\n                    groups[i] = (old_color, (index + n) % n, groups[i][2])\n\n        elif query[0] == 1:\n            size = query[1]\n            count = sum(1 for group in groups if group[2] == size)\n            result.append(count)\n\n    return result\n```"]}
{"task_id": "abc367_g", "codes": ["def xor_subsequences(N, M, K, A):\n    MOD = 998244353\n    \n    # Step 1: Compute prefix XORs\n    prefix_xor = [0]\n    for num in A:\n        prefix_xor.append(prefix_xor[-1] ^ num)\n    \n    # Step 2: Initialize DP table\n    dp = [[0] * 2 for _ in range(2)]\n    dp[0][0] = 1\n    \n    # Step 3: Update DP table for each element in A\n    for num in A:\n        new_dp = [[0] * 2 for _ in range(2)]\n        for i in range(2):\n            for j in range(2):\n                new_dp[i ^ (num & 1)][j] += dp[i][j]\n                new_dp[i ^ (num & 1)][j] %= MOD\n        dp = new_dp\n    \n    # Step 4: Calculate the total sum\n    total_sum = 0\n    for i in range(2):\n        for j in range(2):\n            if (len(A) + 1) % M == 0:\n                total_sum += pow(dp[i][j], K, MOD)\n            total_sum %= MOD\n    \n    return total_sum\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Call the function and print the result\nprint(xor_subsequences(N, M, K, A))"], "passed": [false], "raw_code": ["```python\ndef xor_subsequences(N, M, K, A):\n    MOD = 998244353\n    \n    # Step 1: Compute prefix XORs\n    prefix_xor = [0]\n    for num in A:\n        prefix_xor.append(prefix_xor[-1] ^ num)\n    \n    # Step 2: Initialize DP table\n    dp = [[0] * 2 for _ in range(2)]\n    dp[0][0] = 1\n    \n    # Step 3: Update DP table for each element in A\n    for num in A:\n        new_dp = [[0] * 2 for _ in range(2)]\n        for i in range(2):\n            for j in range(2):\n                new_dp[i ^ (num & 1)][j] += dp[i][j]\n                new_dp[i ^ (num & 1)][j] %= MOD\n        dp = new_dp\n    \n    # Step 4: Calculate the total sum\n    total_sum = 0\n    for i in range(2):\n        for j in range(2):\n            if (len(A) + 1) % M == 0:\n                total_sum += pow(dp[i][j], K, MOD)\n            total_sum %= MOD\n    \n    return total_sum\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Call the function and print the result\nprint(xor_subsequences(N, M, K, A))\n```"]}
{"task_id": "abc370_f", "codes": ["def solve(N, K, A):\n    A.sort(reverse=True)\n    people = [[] for _ in range(K)]\n    never_cut = 0\n    for i in range(N):\n        people[i % K].append(A[i])\n        if i > 0 and people[i % K][-1] == people[(i - 1) % K][-1]:\n            never_cut += 1\n    min_mass = min(sum(person) for person in people)\n    return min_mass, never_cut\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nx, y = solve(N, K, A)\nprint(x, y)"], "passed": [false], "raw_code": ["def solve(N, K, A):\n    A.sort(reverse=True)\n    people = [[] for _ in range(K)]\n    never_cut = 0\n    for i in range(N):\n        people[i % K].append(A[i])\n        if i > 0 and people[i % K][-1] == people[(i - 1) % K][-1]:\n            never_cut += 1\n    min_mass = min(sum(person) for person in people)\n    return min_mass, never_cut\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nx, y = solve(N, K, A)\nprint(x, y)"]}
{"task_id": "3580", "codes": ["def find_almost_equal_substring(s: str, pattern: str) -> int:\n    n = len(s)\n    m = len(pattern)\n    \n    for i in range(n - m + 1):\n        diff = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff += 1\n            if diff > 1:\n                break\n        if diff <= 1:\n            return i\n    \n    return -1"], "passed": [false], "raw_code": ["```python\ndef find_almost_equal_substring(s: str, pattern: str) -> int:\n    n = len(s)\n    m = len(pattern)\n    \n    for i in range(n - m + 1):\n        diff = 0\n        for j in range(m):\n            if s[i + j] != pattern[j]:\n                diff += 1\n            if diff > 1:\n                break\n        if diff <= 1:\n            return i\n    \n    return -1\n```"]}
{"task_id": "3551", "codes": ["def maximizeXor(nums, queries):\n    def insert(trie, num):\n        node = trie\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node:\n                node[bit] = {}\n            node = node[bit]\n    \n    def getMaxXor(trie, num):\n        max_xor = 0\n        node = trie\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            alt_bit = 1 - bit\n            if alt_bit in node:\n                max_xor |= (1 << i)\n                node = node[alt_bit]\n            elif bit in node:\n                node = node[bit]\n            else:\n                return max_xor\n        return max_xor\n    \n    trie = {}\n    prefix_xors = [0]\n    for num in nums:\n        prefix_xors.append(prefix_xors[-1] ^ num)\n    \n    sorted_queries = sorted([(i, j, idx) for idx, (i, j) in enumerate(queries)], key=lambda x: x[1])\n    result = [0] * len(queries)\n    i = 0\n    for start, end, idx in sorted_queries:\n        while i < end + 1:\n            insert(trie, prefix_xors[i])\n            i += 1\n        result[idx] = getMaxXor(trie, prefix_xors[start])\n    \n    return result"], "passed": [false], "raw_code": ["```python\ndef maximizeXor(nums, queries):\n    def insert(trie, num):\n        node = trie\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node:\n                node[bit] = {}\n            node = node[bit]\n    \n    def getMaxXor(trie, num):\n        max_xor = 0\n        node = trie\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            alt_bit = 1 - bit\n            if alt_bit in node:\n                max_xor |= (1 << i)\n                node = node[alt_bit]\n            elif bit in node:\n                node = node[bit]\n            else:\n                return max_xor\n        return max_xor\n    \n    trie = {}\n    prefix_xors = [0]\n    for num in nums:\n        prefix_xors.append(prefix_xors[-1] ^ num)\n    \n    sorted_queries = sorted([(i, j, idx) for idx, (i, j) in enumerate(queries)], key=lambda x: x[1])\n    result = [0] * len(queries)\n    i = 0\n    for start, end, idx in sorted_queries:\n        while i < end + 1:\n            insert(trie, prefix_xors[i])\n            i += 1\n        result[idx] = getMaxXor(trie, prefix_xors[start])\n    \n    return result\n```"]}
{"task_id": "arc181_c", "codes": ["def generate_grid(N, P, Q):\n    # Initialize the grid with zeros\n    grid = [[0] * N for _ in range(N)]\n\n    # Fill the first row based on permutation P\n    for i in range(N):\n        grid[0][P[i]-1] = 1 if i % 2 == 0 else 0\n\n    # Fill the first column based on permutation Q\n    for j in range(N):\n        grid[Q[j]-1][0] = 1 if j % 2 == 0 else 0\n\n    # Fill the rest of the grid\n    for i in range(1, N):\n        for j in range(1, N):\n            if grid[i-1][j] < grid[i][j-1]:\n                grid[i][j] = grid[i-1][j]\n            else:\n                grid[i][j] = grid[i][j-1] + 1\n\n    # Convert the grid to the required format\n    result = [\"\".join(map(str, row)) for row in grid]\n    return \"\\n\".join(result)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\n# Generate and print the grid\nprint(generate_grid(N, P, Q))"], "passed": [false], "raw_code": ["def generate_grid(N, P, Q):\n    # Initialize the grid with zeros\n    grid = [[0] * N for _ in range(N)]\n\n    # Fill the first row based on permutation P\n    for i in range(N):\n        grid[0][P[i]-1] = 1 if i % 2 == 0 else 0\n\n    # Fill the first column based on permutation Q\n    for j in range(N):\n        grid[Q[j]-1][0] = 1 if j % 2 == 0 else 0\n\n    # Fill the rest of the grid\n    for i in range(1, N):\n        for j in range(1, N):\n            if grid[i-1][j] < grid[i][j-1]:\n                grid[i][j] = grid[i-1][j]\n            else:\n                grid[i][j] = grid[i][j-1] + 1\n\n    # Convert the grid to the required format\n    result = [\"\".join(map(str, row)) for row in grid]\n    return \"\\n\".join(result)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\n# Generate and print the grid\nprint(generate_grid(N, P, Q))"]}
{"task_id": "arc183_b", "codes": ["def can_make_identical(T):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = list(map(int, data[index + 2:index + 2 + N]))\n        B = list(map(int, data[index + 2 + N:index + 2 + 2 * N]))\n        \n        index += 2 + 2 * N\n        \n        # Step 1: Count frequency of each element in A and B\n        freq_A = {}\n        freq_B = {}\n        \n        for num in A:\n            if num in freq_A:\n                freq_A[num] += 1\n            else:\n                freq_A[num] = 1\n        \n        for num in B:\n            if num in freq_B:\n                freq_B[num] += 1\n            else:\n                freq_B[num] = 1\n        \n        # Step 2: Check if frequencies match\n        if freq_A != freq_B:\n            results.append(\"No\")\n            continue\n        \n        # Step 3: Group elements based on their frequencies\n        groups_A = {num: [] for num in freq_A}\n        groups_B = {num: [] for num in freq_B}\n        \n        for i, num in enumerate(A):\n            groups_A[num].append(i)\n        \n        for i, num in enumerate(B):\n            groups_B[num].append(i)\n        \n        # Step 4: Sort groups by their indices in A and B\n        sorted_indices_A = sorted(groups_A.keys())\n        sorted_indices_B = sorted(groups_B.keys())\n        \n        # Step 5: Verify order\n        for i in range(len(sorted_indices_A)):\n            if len(groups_A[sorted_indices_A[i]]) != len(groups_B[sorted_indices_B[i]]):\n                results.append(\"No\")\n                break\n            \n            for j in range(len(groups_A[sorted_indices_A[i]])):\n                if abs(groups_A[sorted_indices_A[i]][j] - groups_B[sorted_indices_B[i]][j]) > K:\n                    results.append(\"No\")\n                    break\n            else:\n                continue\n            break\n        else:\n            results.append(\"Yes\")\n    \n    for result in results:\n        print(result)\n\n# Call the function with the number of test cases read from stdin\ncan_make_identical(int(input()))"], "passed": [false], "raw_code": ["```python\ndef can_make_identical(T):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        A = list(map(int, data[index + 2:index + 2 + N]))\n        B = list(map(int, data[index + 2 + N:index + 2 + 2 * N]))\n        \n        index += 2 + 2 * N\n        \n        # Step 1: Count frequency of each element in A and B\n        freq_A = {}\n        freq_B = {}\n        \n        for num in A:\n            if num in freq_A:\n                freq_A[num] += 1\n            else:\n                freq_A[num] = 1\n        \n        for num in B:\n            if num in freq_B:\n                freq_B[num] += 1\n            else:\n                freq_B[num] = 1\n        \n        # Step 2: Check if frequencies match\n        if freq_A != freq_B:\n            results.append(\"No\")\n            continue\n        \n        # Step 3: Group elements based on their frequencies\n        groups_A = {num: [] for num in freq_A}\n        groups_B = {num: [] for num in freq_B}\n        \n        for i, num in enumerate(A):\n            groups_A[num].append(i)\n        \n        for i, num in enumerate(B):\n            groups_B[num].append(i)\n        \n        # Step 4: Sort groups by their indices in A and B\n        sorted_indices_A = sorted(groups_A.keys())\n        sorted_indices_B = sorted(groups_B.keys())\n        \n        # Step 5: Verify order\n        for i in range(len(sorted_indices_A)):\n            if len(groups_A[sorted_indices_A[i]]) != len(groups_B[sorted_indices_B[i]]):\n                results.append(\"No\")\n                break\n            \n            for j in range(len(groups_A[sorted_indices_A[i]])):\n                if abs(groups_A[sorted_indices_A[i]][j] - groups_B[sorted_indices_B[i]][j]) > K:\n                    results.append(\"No\")\n                    break\n            else:\n                continue\n            break\n        else:\n            results.append(\"Yes\")\n    \n    for result in results:\n        print(result)\n\n# Call the function with the number of test cases read from stdin\ncan_make_identical(int(input()))\n```"]}
{"task_id": "3571", "codes": ["def maxIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Step 1: Sort the coordinates\n    coordinates.sort()\n    \n    # Step 2: Create adjacency list and indegree dictionary\n    n = len(coordinates)\n    adj = defaultdict(list)\n    indegree = defaultdict(int)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                adj[i].append(j)\n                indegree[j] += 1\n    \n    # Step 3: Topological sort using Kahn's algorithm\n    queue = deque([i for i in range(n) if indegree[i] == 0])\n    dp = [1] * n\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in adj[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Return the length of the longest increasing path containing coordinates[k]\n    return dp[k]"], "passed": [false], "raw_code": ["```python\ndef maxIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Step 1: Sort the coordinates\n    coordinates.sort()\n    \n    # Step 2: Create adjacency list and indegree dictionary\n    n = len(coordinates)\n    adj = defaultdict(list)\n    indegree = defaultdict(int)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if coordinates[j][0] > coordinates[i][0] and coordinates[j][1] > coordinates[i][1]:\n                adj[i].append(j)\n                indegree[j] += 1\n    \n    # Step 3: Topological sort using Kahn's algorithm\n    queue = deque([i for i in range(n) if indegree[i] == 0])\n    dp = [1] * n\n    \n    while queue:\n        node = queue.popleft()\n        for neighbor in adj[node]:\n            dp[neighbor] = max(dp[neighbor], dp[node] + 1)\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Return the length of the longest increasing path containing coordinates[k]\n    return dp[k]\n```"]}
{"final_accuracy": "0.00%"}
