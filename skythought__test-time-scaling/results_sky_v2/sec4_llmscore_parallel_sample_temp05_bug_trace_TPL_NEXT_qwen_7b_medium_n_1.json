{"difficulty": "medium", "num_threads": 32, "temperature": 0.5, "n": 1, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp05_bug_trace_TPL_NEXT_qwen_7b_medium_n_1.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3526", "code": "def minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[m - 1 - i] for i in range(m // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[i][j] for i in range(m)]) for j in range(n))\n    \n    return min(row_flips, col_flips)", "passed": false, "raw_code": "```python\ndef minFlips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(arr[i] != arr[m - 1 - i] for i in range(m // 2))\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[i][j] for i in range(m)]) for j in range(n))\n    \n    return min(row_flips, col_flips)\n```"}
{"task_id": "abc372_d", "code": "d", "passed": false, "raw_code": "```python\ndef count_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    stack = []\n    \n    for i in range(N-1, -1, -1):\n        while stack and stack[-1] <= heights[i]:\n            stack.pop()\n        if stack:\n            result[i] = len(stack)\n        stack.append(heights[i])\n    \n    print(' '.join(map(str, result)))\n\ncount_buildings()"}
{"task_id": "abc367_d", "code": "d", "passed": false, "raw_code": "```python\ndef count_valid_pairs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Calculate cumulative sum of steps\n    cumulative_sum = [0]\n    for i in range(N):\n        cumulative_sum.append(cumulative_sum[-1] + A[i])\n    \n    # Dictionary to count occurrences of each remainder\n    remainder_count = {}\n    for i in range(N):\n        remainder = cumulative_sum[i + 1] % M\n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n    \n    # Calculate the number of valid pairs\n    valid_pairs = 0\n    for remainder in remainder_count:\n        count = remainder_count[remainder]\n        valid_pairs += count * (count - 1) // 2\n    \n    print(valid_pairs)\n\ncount_valid_pairs()"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    start.sort()\n    n = len(start)\n    max_score = 0\n    \n    for i in range(n):\n        if i > 0:\n            max_score = max(max_score, min(start[i] - start[i-1], start[i] - (start[i-1] + d)))\n        if i < n - 1:\n            max_score = max(max_score, min((start[i+1] - start[i]), ((start[i+1] - d) - start[i])))\n    \n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    start.sort()\n    n = len(start)\n    max_score = 0\n    \n    for i in range(n):\n        if i > 0:\n            max_score = max(max_score, min(start[i] - start[i-1], start[i] - (start[i-1] + d)))\n        if i < n - 1:\n            max_score = max(max_score, min((start[i+1] - start[i]), ((start[i+1] - d) - start[i])))\n    \n    return max_score\n```"}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```"}
{"task_id": "abc367_c", "code": "d", "passed": false, "raw_code": "```python\ndef find_sequences(N, K, R, current_sequence, current_sum, result):\n    if len(current_sequence) == N:\n        if current_sum % K == 0:\n            result.append(list(current_sequence))\n        return\n    \n    for i in range(1, R[len(current_sequence)] + 1):\n        current_sequence.append(i)\n        current_sum += i\n        find_sequences(N, K, R, current_sequence, current_sum, result)\n        current_sequence.pop()\n        current_sum -= i\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    R = [int(data[i]) for i in range(2, 2 + N)]\n    \n    result = []\n    find_sequences(N, K, R, [], 0, result)\n    \n    result.sort()\n    \n    print(len(result))\n    for seq in result:\n        print(\" \".join(map(str, seq)))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "arc181_a", "code": "d", "passed": false, "raw_code": "```python\ndef merge_sort_and_count(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    \n    mid = len(arr) // 2\n    left, left_count = merge_sort_and_count(arr[:mid])\n    right, right_count = merge_sort_and_count(arr[mid:])\n    merged, split_count = merge_and_count(left, right)\n    \n    return merged, left_count + right_count + split_count\n\ndef merge_and_count(left, right):\n    merged = []\n    i = j = split_count = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            split_count += len(left) - i\n    \n    merged += left[i:]\n    merged += right[j:]\n    \n    return merged, split_count\n\ndef min_operations_to_sort(permutation):\n    _, count = merge_sort_and_count(permutation)\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        permutation = list(map(int, data[index:index + N]))\n        index += N\n        results.append(min_operations_to_sort(permutation))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    solve()"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            results.append(len(bag))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    index = 0\n    results = []\n    \n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            results.append(len(bag))\n    \n    for result in results:\n        print(result)\n\nprocess_queries()\n```"}
{"task_id": "3573", "code": "from collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    m, n = len(word1), len(word2)\n    count = 0\n    \n    for i in range(m - n + 1):\n        substring = word1[i:i + n]\n        if substring.startswith(word2):\n            remaining = word1[i + n:]\n            if Counter(substring[len(word2):]) == Counter(word2[len(word2):]):\n                count += 1\n                \n    return count", "passed": false, "raw_code": "```python\nfrom collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    m, n = len(word1), len(word2)\n    count = 0\n    \n    for i in range(m - n + 1):\n        substring = word1[i:i + n]\n        if substring.startswith(word2):\n            remaining = word1[i + n:]\n            if Counter(substring[len(word2):]) == Counter(word2[len(word2):]):\n                count += 1\n                \n    return count\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[n-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + (i - j) * nums[j])\n    \n    return dp[n-1]\n```"}
{"task_id": "3534", "code": "def almost_equal_pairs(nums):\n    def generate_swapped_numbers(num_str):\n        num_set = set()\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swapped_num_str = num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:]\n                num_set.add(swapped_num_str)\n        return num_set\n    \n    num_set = set(map(str, nums))\n    count = 0\n    \n    for num_str in map(str, nums):\n        swapped_nums = generate_swapped_numbers(num_str)\n        for swapped_num_str in swapped_nums:\n            if swapped_num_str in num_set:\n                count += 1\n    \n    # Each pair is counted twice, so divide by 2\n    return count // 2", "passed": false, "raw_code": "```python\ndef almost_equal_pairs(nums):\n    def generate_swapped_numbers(num_str):\n        num_set = set()\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                swapped_num_str = num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:]\n                num_set.add(swapped_num_str)\n        return num_set\n    \n    num_set = set(map(str, nums))\n    count = 0\n    \n    for num_str in map(str, nums):\n        swapped_nums = generate_swapped_numbers(num_str)\n        for swapped_num_str in swapped_nums:\n            if swapped_num_str in num_set:\n                count += 1\n    \n    # Each pair is counted twice, so divide by 2\n    return count // 2\n```"}
{"task_id": "3518", "code": "def max_score(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by multiplying corresponding elements of a and b_sorted\n    score = sum(x * y for x, y in zip(a, b_sorted))\n    \n    return score", "passed": false, "raw_code": "```python\ndef max_score(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by multiplying corresponding elements of a and b_sorted\n    score = sum(x * y for x, y in zip(a, b_sorted))\n    \n    return score\n```"}
{"task_id": "3540", "code": "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)", "passed": true, "raw_code": "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    return ''.join(result)\n```"}
{"task_id": "abc371_d", "code": "d", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read input values\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    X = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    P = [int(data[index + i]) for i in range(N)]\n    index += N\n    \n    Q = int(data[index])\n    index += 1\n    \n    queries = [(int(data[index + 2 * i]), int(data[index + 2 * i + 1])) for i in range(Q)]\n    index += 2 * Q\n    \n    # Create prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for p in P:\n        current_sum += p\n        prefix_sum.append(current_sum)\n    \n    # Answer each query\n    for l, r in queries:\n        result = prefix_sum[r + 1] - prefix_sum[l]\n        print(result)\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "3496", "code": "def minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        remainingHeight = height\n        for workerTime in sorted(workerTimes, reverse=True):\n            x = 1\n            while True:\n                workTime = workerTime * x\n                if workTime > time:\n                    break\n                if remainingHeight >= x:\n                    remainingHeight -= x\n                x += 1\n            if remainingHeight == 0:\n                return True\n        return False\n\n    left, right = 1, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        remainingHeight = height\n        for workerTime in sorted(workerTimes, reverse=True):\n            x = 1\n            while True:\n                workTime = workerTime * x\n                if workTime > time:\n                    break\n                if remainingHeight >= x:\n                    remainingHeight -= x\n                x += 1\n            if remainingHeight == 0:\n                return True\n        return False\n\n    left, right = 1, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    return max(dp_A[-1], dp_B[-1])", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    return max(dp_A[-1], dp_B[-1])\n```"}
{"task_id": "3517", "code": "import heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        priority_queue = [(0, start)]\n        \n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    result = []\n    for u, v in queries:\n        graph[u][v] = 1\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "passed": true, "raw_code": "```python\nimport heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        priority_queue = [(0, start)]\n        \n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    result = []\n    for u, v in queries:\n        graph[u][v] = 1\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```"}
{"task_id": "abc370_c", "code": "d", "passed": false, "raw_code": "```python\ndef transform_string(S, T):\n    X = [S]\n    while S != T:\n        for i in range(len(S)):\n            if S[i] != T[i]:\n                # Find the lexicographically smallest character to replace\n                min_char = min(S[i], T[i])\n                if S[i] > T[i]:\n                    S = S[:i] + T[i] + S[i+1:]\n                break\n        X.append(S)\n    return X\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nS = data[0]\nT = data[1]\n\n# Get the transformed array\nX = transform_string(S, T)\n\n# Output the result\nprint(len(X))\nfor s in X:\n    print(s)"}
{"task_id": "3579", "code": "def max_concatenated_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their integer value\n    binary_nums.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "passed": false, "raw_code": "```python\ndef max_concatenated_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their integer value\n    binary_nums.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```"}
{"task_id": "3522", "code": "def find_power_of_subarrays(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        sorted_subarray = sorted(subarray)\n        \n        if subarray == sorted_subarray and len(set(subarray)) == k:\n            results[i] = max(subarray)\n    \n    return results", "passed": false, "raw_code": "```python\ndef find_power_of_subarrays(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        sorted_subarray = sorted(subarray)\n        \n        if subarray == sorted_subarray and len(set(subarray)) == k:\n            results[i] = max(subarray)\n    \n    return results\n```"}
{"task_id": "3558", "code": "def hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(i, j, health):\n        if i < 0 or i >= m or j < 0 or j >= n or health <= 0:\n            return False\n        if i == m - 1 and j == n - 1:\n            return health >= 1\n        temp = grid[i][j]\n        grid[i][j] = -1  # Mark the cell as visited\n        if (dfs(i + 1, j, health - temp) or\n                dfs(i - 1, j, health - temp) or\n                dfs(i, j + 1, health - temp) or\n                dfs(i, j - 1, health - temp)):\n            return True\n        grid[i][j] = temp  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(i, j, health):\n        if i < 0 or i >= m or j < 0 or j >= n or health <= 0:\n            return False\n        if i == m - 1 and j == n - 1:\n            return health >= 1\n        temp = grid[i][j]\n        grid[i][j] = -1  # Mark the cell as visited\n        if (dfs(i + 1, j, health - temp) or\n                dfs(i - 1, j, health - temp) or\n                dfs(i, j + 1, health - temp) or\n                dfs(i, j - 1, health - temp)):\n            return True\n        grid[i][j] = temp  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "abc372_c", "code": "def count_abc(s):\n    n = len(s)\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    return count\n\ndef update_and_count(s, x, c):\n    n = len(s)\n    old_char = s[x-1]\n    \n    # Update the character\n    s = s[:x-1] + c + s[x:]\n    \n    # Initialize counts for the new and old characters\n    new_count = 0\n    old_count = 0\n    \n    # Check the three positions around the updated character\n    for i in [x-2, x-1, x]:\n        if i < 0 or i >= n:\n            continue\n        if s[i:i+3] == 'ABC':\n            new_count += 1\n        if s[i:i+3] == old_char * 3:\n            old_count += 1\n    \n    return new_count - old_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    s = data[2]\n    \n    results = []\n    for i in range(q):\n        x = int(data[2 + 2*i]) - 1\n        c = data[3 + 2*i]\n        result = update_and_count(s, x, c)\n        results.append(result)\n        print(result)\n    \nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef count_abc(s):\n    n = len(s)\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    return count\n\ndef update_and_count(s, x, c):\n    n = len(s)\n    old_char = s[x-1]\n    \n    # Update the character\n    s = s[:x-1] + c + s[x:]\n    \n    # Initialize counts for the new and old characters\n    new_count = 0\n    old_count = 0\n    \n    # Check the three positions around the updated character\n    for i in [x-2, x-1, x]:\n        if i < 0 or i >= n:\n            continue\n        if s[i:i+3] == 'ABC':\n            new_count += 1\n        if s[i:i+3] == old_char * 3:\n            old_count += 1\n    \n    return new_count - old_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    s = data[2]\n    \n    results = []\n    for i in range(q):\n        x = int(data[2 + 2*i]) - 1\n        c = data[3 + 2*i]\n        result = update_and_count(s, x, c)\n        results.append(result)\n        print(result)\n    \nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    def can_set_limit(limit):\n        return sum(min(limit, ai) for ai in A) <= M\n    \n    left, right = 0, M\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_set_limit(mid):\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left if left > 0 else \"infinite\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))", "passed": false, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    def can_set_limit(limit):\n        return sum(min(limit, ai) for ai in A) <= M\n    \n    left, right = 0, M\n    while left < right:\n        mid = (left + right + 1) // 2\n        if can_set_limit(mid):\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left if left > 0 else \"infinite\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "3570", "code": "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = [0] * 5\n        consonant_count = 0\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count[vowels.index(char)] += 1\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if min(vowel_count) > 0 and consonant_count == k:\n                count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = [0] * 5\n        consonant_count = 0\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count[vowels.index(char)] += 1\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if min(vowel_count) > 0 and consonant_count == k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        \n        for r in range(l, N):\n            if r == l:\n                diff_count[0] = diff_count.get(0, 0) + 1\n            else:\n                diff = A[r] - A[r-1]\n                count += diff_count.get(diff, 0)\n                diff_count[diff] = diff_count.get(diff, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    count = 0\n    \n    for l in range(N):\n        diff_count = {}\n        \n        for r in range(l, N):\n            if r == l:\n                diff_count[0] = diff_count.get(0, 0) + 1\n            else:\n                diff = A[r] - A[r-1]\n                count += diff_count.get(diff, 0)\n                diff_count[diff] = diff_count.get(diff, 0) + 1\n    \n    print(count)\n\ncount_arithmetic_progressions()\n```"}
{"task_id": "3584", "code": "def smallestSequence(word1, word2):\n    n, m = len(word1), len(word2)\n    mismatches = []\n\n    # Identify all mismatched indices\n    for i in range(m):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n\n    # Check if there are more than one mismatch\n    if len(mismatches) > 1:\n        return []\n\n    # If there is exactly one mismatch, check if changing it makes them almost equal\n    if len(mismatches) == 1:\n        idx = mismatches[0]\n        if word1[idx + 1:] == word2[idx + 1:]:\n            return [idx]\n        else:\n            return []\n\n    # If there are no mismatches, no changes are needed\n    return list(range(m))", "passed": false, "raw_code": "```python\ndef smallestSequence(word1, word2):\n    n, m = len(word1), len(word2)\n    mismatches = []\n\n    # Identify all mismatched indices\n    for i in range(m):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n\n    # Check if there are more than one mismatch\n    if len(mismatches) > 1:\n        return []\n\n    # If there is exactly one mismatch, check if changing it makes them almost equal\n    if len(mismatches) == 1:\n        idx = mismatches[0]\n        if word1[idx + 1:] == word2[idx + 1:]:\n            return [idx]\n        else:\n            return []\n\n    # If there are no mismatches, no changes are needed\n    return list(range(m))\n```"}
{"task_id": "3495", "code": "import heapq\n\ndef kthSmallestObstacleDistance(queries, k):\n    # Min-heap to store distances of obstacles from the origin\n    heap = []\n    # List to store results\n    results = []\n    \n    for x, y in queries:\n        # Calculate the Manhattan distance from the origin\n        distance = abs(x) + abs(y)\n        # Add the distance to the heap\n        heapq.heappush(heap, distance)\n        \n        # Ensure the heap has at most k elements\n        while len(heap) > k:\n            heapq.heappop(heap)\n        \n        # If there are at least k elements, the k-th smallest is the smallest in the heap\n        if len(heap) == k:\n            results.append(heap[0])\n        else:\n            results.append(-1)\n    \n    return results", "passed": false, "raw_code": "```python\nimport heapq\n\ndef kthSmallestObstacleDistance(queries, k):\n    # Min-heap to store distances of obstacles from the origin\n    heap = []\n    # List to store results\n    results = []\n    \n    for x, y in queries:\n        # Calculate the Manhattan distance from the origin\n        distance = abs(x) + abs(y)\n        # Add the distance to the heap\n        heapq.heappush(heap, distance)\n        \n        # Ensure the heap has at most k elements\n        while len(heap) > k:\n            heapq.heappop(heap)\n        \n        # If there are at least k elements, the k-th smallest is the smallest in the heap\n        if len(heap) == k:\n            results.append(heap[0])\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    n = len(maximumHeight)\n    \n    # Check if there are enough unique heights\n    for i in range(n):\n        if i + 1 > maximumHeight[i]:\n            return -1\n    \n    # Calculate the sum of the first n natural numbers\n    return n * (n + 1) // 2", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    n = len(maximumHeight)\n    \n    # Check if there are enough unique heights\n    for i in range(n):\n        if i + 1 > maximumHeight[i]:\n            return -1\n    \n    # Calculate the sum of the first n natural numbers\n    return n * (n + 1) // 2\n```"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\\n    # Initialize the count of wins\\n    wins = 0\\n    # Iterate through Aoki's moves\\n    for i in range(N):\\n        # Determine Aoki's move\\n        aoki_move = S[i]\\n        # Determine Takahashi's move to win\\n        if aoki_move == 'R':\\n            takahashi_move = 'P'\\n        elif aoki_move == 'P':\\n            takahashi_move = 'S'\\n        else:\\n            takahashi_move = 'R'\\n        # Check if Takahashi's move is different from the previous move\\n        if i == 0 or takahashi_move != S[i-1]:\\n            wins += 1\\n    return wins\\n\\n# Example usage:\\n# N = int(input())\\n# S = input()\\n# print(max_wins(N, S))", "passed": false, "raw_code": "def max_wins(N, S):\\n    # Initialize the count of wins\\n    wins = 0\\n    # Iterate through Aoki's moves\\n    for i in range(N):\\n        # Determine Aoki's move\\n        aoki_move = S[i]\\n        # Determine Takahashi's move to win\\n        if aoki_move == 'R':\\n            takahashi_move = 'P'\\n        elif aoki_move == 'P':\\n            takahashi_move = 'S'\\n        else:\\n            takahashi_move = 'R'\\n        # Check if Takahashi's move is different from the previous move\\n        if i == 0 or takahashi_move != S[i-1]:\\n            wins += 1\\n    return wins\\n\\n# Example usage:\\n# N = int(input())\\n# S = input()\\n# print(max_wins(N, S))"}
{"task_id": "abc370_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    grid = [[True] * W for _ in range(H)]\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C]:\n            grid[R][C] = False\n        else:\n            # Look up\n            for i in range(R - 1, -1, -1):\n                if grid[i][C]:\n                    grid[i][C] = False\n                    break\n            \n            # Look down\n            for i in range(R + 1, H):\n                if grid[i][C]:\n                    grid[i][C] = False\n                    break\n            \n            # Look left\n            for j in range(C - 1, -1, -1):\n                if grid[R][j]:\n                    grid[R][j] = False\n                    break\n            \n            # Look right\n            for j in range(C + 1, W):\n                if grid[R][j]:\n                    grid[R][j] = False\n                    break\n    \n    remaining_walls = sum(row.count(True) for row in grid)\n    print(remaining_walls)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    H = int(data[index])\n    W = int(data[index + 1])\n    Q = int(data[index + 2])\n    index += 3\n    \n    grid = [[True] * W for _ in range(H)]\n    \n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n        \n        if grid[R][C]:\n            grid[R][C] = False\n        else:\n            # Look up\n            for i in range(R - 1, -1, -1):\n                if grid[i][C]:\n                    grid[i][C] = False\n                    break\n            \n            # Look down\n            for i in range(R + 1, H):\n                if grid[i][C]:\n                    grid[i][C] = False\n                    break\n            \n            # Look left\n            for j in range(C - 1, -1, -1):\n                if grid[R][j]:\n                    grid[R][j] = False\n                    break\n            \n            # Look right\n            for j in range(C + 1, W):\n                if grid[R][j]:\n                    grid[R][j] = False\n                    break\n    \n    remaining_walls = sum(row.count(True) for row in grid)\n    print(remaining_walls)\n\nmain()\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        for i in range(N):\n            if H[i] > 0:\n                T += 1\n                if T % 3 == 0:\n                    H[i] -= 3\n                else:\n                    H[i] -= 1\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        for i in range(N):\n            if H[i] > 0:\n                T += 1\n                if T % 3 == 0:\n                    H[i] -= 3\n                else:\n                    H[i] -= 1\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "abc366_d", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Read input values\nN = int(data[0])\nvalues = [int(val) for val in data[1:N*N+N+1]]\nQ = int(data[N*N+N+1])\nqueries = [(int(data[N*N+N+2+i*6]), int(data[N*N+N+3+i*6]), int(data[N*N+N+4+i*6]), int(data[N*N+N+5+i*6]), int(data[N*N+N+6+i*6]), int(data[N*N+N+7+i*6])) for i in range(Q)]\n\n# Initialize 3D prefix sum array\nprefix_sum = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n\n# Fill the prefix sum array\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            prefix_sum[x][y][z] = values[(x - 1) * N * N + (y - 1) * N + (z - 1)] + prefix_sum[x - 1][y][z] + prefix_sum[x][y - 1][z] + prefix_sum[x][y][z - 1] - prefix_sum[x - 1][y - 1][z] - prefix_sum[x - 1][y][z - 1] - prefix_sum[x][y - 1][z - 1] + prefix_sum[x - 1][y - 1][z - 1]\n\n# Process each query\nresults = []\ncur_index = N*N+N+1+6*Q\nfor lx, rx, ly, ry, lz, rz in queries:\n    result = prefix_sum[rx][ry][rz] - prefix_sum[lx - 1][ry][rz] - prefix_sum[lx][ly - 1][rz] - prefix_sum[lx][ry][lz - 1] + prefix_sum[lx - 1][ly - 1][rz] + prefix_sum[lx - 1][ry][lz - 1] + prefix_sum[lx][ly - 1][lz - 1] - prefix_sum[lx - 1][ly - 1][lz - 1]\n    results.append(result)\n\n# Print results\nfor result in results:\n    print(result)", "passed": false, "raw_code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Read input values\nN = int(data[0])\nvalues = [int(val) for val in data[1:N*N+N+1]]\nQ = int(data[N*N+N+1])\nqueries = [(int(data[N*N+N+2+i*6]), int(data[N*N+N+3+i*6]), int(data[N*N+N+4+i*6]), int(data[N*N+N+5+i*6]), int(data[N*N+N+6+i*6]), int(data[N*N+N+7+i*6])) for i in range(Q)]\n\n# Initialize 3D prefix sum array\nprefix_sum = [[[0] * (N + 1) for _ in range(N + 1)] for _ in range(N + 1)]\n\n# Fill the prefix sum array\nfor x in range(1, N + 1):\n    for y in range(1, N + 1):\n        for z in range(1, N + 1):\n            prefix_sum[x][y][z] = values[(x - 1) * N * N + (y - 1) * N + (z - 1)] + prefix_sum[x - 1][y][z] + prefix_sum[x][y - 1][z] + prefix_sum[x][y][z - 1] - prefix_sum[x - 1][y - 1][z] - prefix_sum[x - 1][y][z - 1] - prefix_sum[x][y - 1][z - 1] + prefix_sum[x - 1][y - 1][z - 1]\n\n# Process each query\nresults = []\ncur_index = N*N+N+1+6*Q\nfor lx, rx, ly, ry, lz, rz in queries:\n    result = prefix_sum[rx][ry][rz] - prefix_sum[lx - 1][ry][rz] - prefix_sum[lx][ly - 1][rz] - prefix_sum[lx][ry][lz - 1] + prefix_sum[lx - 1][ly - 1][rz] + prefix_sum[lx - 1][ry][lz - 1] + prefix_sum[lx][ly - 1][lz - 1] - prefix_sum[lx - 1][ly - 1][lz - 1]\n    results.append(result)\n\n# Print results\nfor result in results:\n    print(result)"}
{"task_id": "abc371_c", "code": "def min_cost_to_isomorphize_graphs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    edges_G = [(int(data[index]), int(data[index + 1])) for _ in range(M_G)]\n    index += 2\n    M_H = int(data[index])\n    index += 1\n    edges_H = [(int(data[index]), int(data[index + 1])) for _ in range(M_H)]\n    index += 2\n    costs = [[int(data[index + j * N + i]) for i in range(N - 1)] for j in range(N - 1)]\n    index += N * (N - 1)\n\n    # Create adjacency matrices for G and H\n    adj_G = [[0] * N for _ in range(N)]\n    for u, v in edges_G:\n        adj_G[u - 1][v - 1] = 1\n        adj_G[v - 1][u - 1] = 1\n\n    adj_H = [[0] * N for _ in range(N)]\n    for u, v in edges_H:\n        adj_H[u - 1][v - 1] = 1\n        adj_H[v - 1][u - 1] = 1\n\n    # Calculate the cost to make H isomorphic to G\n    total_cost = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if adj_G[i][j] != adj_H[i][j]:\n                total_cost += costs[i][j]\n\n    print(total_cost)\n\nmin_cost_to_isomorphize_graphs()", "passed": false, "raw_code": "def min_cost_to_isomorphize_graphs():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    M_G = int(data[index])\n    index += 1\n    edges_G = [(int(data[index]), int(data[index + 1])) for _ in range(M_G)]\n    index += 2\n    M_H = int(data[index])\n    index += 1\n    edges_H = [(int(data[index]), int(data[index + 1])) for _ in range(M_H)]\n    index += 2\n    costs = [[int(data[index + j * N + i]) for i in range(N - 1)] for j in range(N - 1)]\n    index += N * (N - 1)\n\n    # Create adjacency matrices for G and H\n    adj_G = [[0] * N for _ in range(N)]\n    for u, v in edges_G:\n        adj_G[u - 1][v - 1] = 1\n        adj_G[v - 1][u - 1] = 1\n\n    adj_H = [[0] * N for _ in range(N)]\n    for u, v in edges_H:\n        adj_H[u - 1][v - 1] = 1\n        adj_H[v - 1][u - 1] = 1\n\n    # Calculate the cost to make H isomorphic to G\n    total_cost = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if adj_G[i][j] != adj_H[i][j]:\n                total_cost += costs[i][j]\n\n    print(total_cost)\n\nmin_cost_to_isomorphize_graphs()"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    dp = [[0, 0] for _ in range(N + 1)]\n    \n    for i in range(1, N + 1):\n        dp[i][0] = max(dp[i][0], dp[i - 1][0])\n        dp[i][1] = max(dp[i][1], dp[i - 1][1] + A[i - 1])\n        if i % 2 == 0:\n            dp[i][1] += A[i - 1]\n    \n    print(max(dp[N][0], dp[N][1]))\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    dp = [[0, 0] for _ in range(N + 1)]\n    \n    for i in range(1, N + 1):\n        dp[i][0] = max(dp[i][0], dp[i - 1][0])\n        dp[i][1] = max(dp[i][1], dp[i - 1][1] + A[i - 1])\n        if i % 2 == 0:\n            dp[i][1] += A[i - 1]\n    \n    print(max(dp[N][0], dp[N][1]))\n\nmax_experience_points()\n```"}
{"task_id": "3559", "code": "def min_valid_strings(words, target):\n    from collections import defaultdict\n    \n    # Create a list of valid prefixes for each word\n    prefixes = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefixes[word[:i]].append(word)\n    \n    # Initialize the DP array\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill the DP array\n    for i in range(1, len(target) + 1):\n        for prefix in prefixes:\n            if target[i - len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1", "passed": false, "raw_code": "```python\ndef min_valid_strings(words, target):\n    from collections import defaultdict\n    \n    # Create a list of valid prefixes for each word\n    prefixes = defaultdict(list)\n    for word in words:\n        for i in range(1, len(word) + 1):\n            prefixes[word[:i]].append(word)\n    \n    # Initialize the DP array\n    dp = [float('inf')] * (len(target) + 1)\n    dp[0] = 0\n    \n    # Fill the DP array\n    for i in range(1, len(target) + 1):\n        for prefix in prefixes:\n            if target[i - len(prefix):i] == prefix:\n                dp[i] = min(dp[i], dp[i - len(prefix)] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n```"}
{"task_id": "abc373_c", "code": "def max_sum(A, B):\n    A.sort()\n    B.sort()\n    \n    left, right = 0, len(B) - 1\n    max_sum = float('-inf')\n    \n    while left < len(A) and right >= 0:\n        current_sum = A[left] + B[right]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Move the pointers based on the comparison\n        if current_sum < 0:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_sum\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:N+1]))\nB = list(map(int, data[N+1:]))\n\n# Calculate and print the result\nprint(max_sum(A, B))", "passed": false, "raw_code": "```python\ndef max_sum(A, B):\n    A.sort()\n    B.sort()\n    \n    left, right = 0, len(B) - 1\n    max_sum = float('-inf')\n    \n    while left < len(A) and right >= 0:\n        current_sum = A[left] + B[right]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Move the pointers based on the comparison\n        if current_sum < 0:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_sum\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = list(map(int, data[1:N+1]))\nB = list(map(int, data[N+1:]))\n\n# Calculate and print the result\nprint(max_sum(A, B))\n```"}
{"task_id": "arc183_a", "code": "import itertools\n\ndef kth_permutation(N, K):\n    # Create the sequence [1, 2, ..., N] repeated K times\n    sequence = [i for i in range(1, N + 1) for _ in range(K)]\n    # Generate all permutations of the sequence\n    all_perms = sorted(itertools.permutations(sequence))\n    # Return the k-th permutation (0-based index)\n    return ' '.join(map(str, all_perms[K - 1]))\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\nN, K = map(int, input().split())\n\n# Print the k-th permutation\nprint(kth_permutation(N, K))\n", "passed": false, "raw_code": "import itertools\n\ndef kth_permutation(N, K):\n    # Create the sequence [1, 2, ..., N] repeated K times\n    sequence = [i for i in range(1, N + 1) for _ in range(K)]\n    # Generate all permutations of the sequence\n    all_perms = sorted(itertools.permutations(sequence))\n    # Return the k-th permutation (0-based index)\n    return ' '.join(map(str, all_perms[K - 1]))\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\nN, K = map(int, input().split())\n\n# Print the k-th permutation\nprint(kth_permutation(N, K))\n"}
{"final_accuracy": "10.81%"}
