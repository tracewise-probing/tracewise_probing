"{\"difficulty\": \"easy\", \"num_threads\": 16, \"temperature\": 0.7, \"n\": 16, \"context\": \"all\", \"selection\": \"generated_tests_majority_no_public_tests\", \"num_round\": 1, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"microsoft/phi-4\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/majoritybug_trace_TPL_CODEEXECUTOR_phi4_n_16_easy.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"microsoft/phi-4\", \"api_base\": \"http://10.96.183.224:63019/8001/v1\", \"no_refine\": false, \"no_dspy_gen\": true, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42}"
{"task_id": "3555", "code": "def transform_array(nums, k, multiplier):\n    for _ in range(k):\n        # Find the minimum value in nums and its first occurrence index\n        min_value = float('inf')\n        min_index = -1\n        for i in range(len(nums)):\n            if nums[i] < min_value:\n                min_value = nums[i]\n                min_index = i\n        \n        # Replace the minimum value with itself multiplied by the multiplier\n        nums[min_index] *= multiplier\n    \n    return nums\n", "passed": true, "raw_code": "def transform_array(nums, k, multiplier):\n    for _ in range(k):\n        # Find the minimum value in nums and its first occurrence index\n        min_value = float('inf')\n        min_index = -1\n        for i in range(len(nums)):\n            if nums[i] < min_value:\n                min_value = nums[i]\n                min_index = i\n        \n        # Replace the minimum value with itself multiplied by the multiplier\n        nums[min_index] *= multiplier\n    \n    return nums\n"}
{"task_id": "3606", "code": "def minDigitSum(nums):\n    def digitSum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    transformed_nums = [digitSum(num) for num in nums]\n    return min(transformed_nums)\n", "passed": true, "raw_code": "def minDigitSum(nums):\n    def digitSum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    transformed_nums = [digitSum(num) for num in nums]\n    return min(transformed_nums)\n"}
{"task_id": "3567", "code": "def binary_date_representation(date: str) -> str:\n    year, month, day = date.split('-')\n    binary_year = bin(int(year))[2:]\n    binary_month = bin(int(month))[2:]\n    binary_day = bin(int(day))[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n", "passed": true, "raw_code": "def binary_date_representation(date: str) -> str:\n    year, month, day = date.split('-')\n    binary_year = bin(int(year))[2:]\n    binary_month = bin(int(month))[2:]\n    binary_day = bin(int(day))[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n"}
{"task_id": "3568", "code": "def generate_key(num1, num2, num3):\n    # Convert numbers to zero-padded strings of length 4\n    str_num1 = str(num1).zfill(4)\n    str_num2 = str(num2).zfill(4)\n    str_num3 = str(num3).zfill(4)\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate over each digit position (0 to 3)\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(str_num1[i], str_num2[i], str_num3[i])\n        # Append the minimum digit to the key\n        key += min_digit\n    \n    # Convert the key to an integer to remove leading zeros and return it\n    return int(key)\n", "passed": true, "raw_code": "def generate_key(num1, num2, num3):\n    # Convert numbers to zero-padded strings of length 4\n    str_num1 = str(num1).zfill(4)\n    str_num2 = str(num2).zfill(4)\n    str_num3 = str(num3).zfill(4)\n    \n    # Initialize the key as an empty string\n    key = \"\"\n    \n    # Iterate over each digit position (0 to 3)\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(str_num1[i], str_num2[i], str_num3[i])\n        # Append the minimum digit to the key\n        key += min_digit\n    \n    # Convert the key to an integer to remove leading zeros and return it\n    return int(key)\n"}
{"task_id": "3519", "code": "def count_winning_players(n, pick):\n    from collections import defaultdict\n\n    # Store the count of each player's picks by color\n    player_ball_count = defaultdict(lambda: defaultdict(int))\n    for player, color in pick:\n        player_ball_count[player][color] += 1\n\n    # Determine the number of winning players\n    winning_players = 0\n    for player in range(n):\n        # Find the maximum number of balls of the same color the player picked\n        max_balls_of_same_color = max(player_ball_count[player].values(), default=0)\n        # Check if the player wins the game\n        if max_balls_of_same_color >= player + 1:\n            winning_players += 1\n\n    return winning_players\n", "passed": true, "raw_code": "def count_winning_players(n, pick):\n    from collections import defaultdict\n\n    # Store the count of each player's picks by color\n    player_ball_count = defaultdict(lambda: defaultdict(int))\n    for player, color in pick:\n        player_ball_count[player][color] += 1\n\n    # Determine the number of winning players\n    winning_players = 0\n    for player in range(n):\n        # Find the maximum number of balls of the same color the player picked\n        max_balls_of_same_color = max(player_ball_count[player].values(), default=0)\n        # Check if the player wins the game\n        if max_balls_of_same_color >= player + 1:\n            winning_players += 1\n\n    return winning_players\n"}
{"task_id": "3553", "code": "def same_color_square(coordinate1, coordinate2):\n    def get_square_color(coordinate):\n        # Convert the column letter to position (0-indexed)\n        column = ord(coordinate[0]) - ord('a')\n        # Convert the row number to an integer (0-indexed)\n        row = int(coordinate[1]) - 1\n        # Calculate color based on sum of column and row indices\n        return (column + row) % 2\n\n    # Compare the colors of the two squares\n    return get_square_color(coordinate1) == get_square_color(coordinate2)\n", "passed": true, "raw_code": "def same_color_square(coordinate1, coordinate2):\n    def get_square_color(coordinate):\n        # Convert the column letter to position (0-indexed)\n        column = ord(coordinate[0]) - ord('a')\n        # Convert the row number to an integer (0-indexed)\n        row = int(coordinate[1]) - 1\n        # Calculate color based on sum of column and row indices\n        return (column + row) % 2\n\n    # Compare the colors of the two squares\n    return get_square_color(coordinate1) == get_square_color(coordinate2)\n"}
{"task_id": "3533", "code": "def snake_final_position(n, commands):\n    # Initial position of the snake\n    position = 0\n\n    # Define movements for each command\n    for command in commands:\n        if command == \"UP\":\n            if position >= n:  # Ensure it's not on the top row\n                position -= n\n        elif command == \"DOWN\":\n            if position < n * (n - 1):  # Ensure it's not on the bottom row\n                position += n\n        elif command == \"LEFT\":\n            if position % n != 0:  # Ensure it's not on the leftmost column\n                position -= 1\n        elif command == \"RIGHT\":\n            if position % n != n - 1:  # Ensure it's not on the rightmost column\n                position += 1\n\n    return position\n", "passed": true, "raw_code": "def snake_final_position(n, commands):\n    # Initial position of the snake\n    position = 0\n\n    # Define movements for each command\n    for command in commands:\n        if command == \"UP\":\n            if position >= n:  # Ensure it's not on the top row\n                position -= n\n        elif command == \"DOWN\":\n            if position < n * (n - 1):  # Ensure it's not on the bottom row\n                position += n\n        elif command == \"LEFT\":\n            if position % n != 0:  # Ensure it's not on the leftmost column\n                position -= 1\n        elif command == \"RIGHT\":\n            if position % n != n - 1:  # Ensure it's not on the rightmost column\n                position += 1\n\n    return position\n"}
{"task_id": "3543", "code": "def count_k_constraint_substrings(s, k):\n    n = len(s)\n    count = 0\n    \n    for start in range(n):\n        zero_count = 0\n        one_count = 0\n        \n        for end in range(start, n):\n            if s[end] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                count += 1\n    \n    return count\n", "passed": true, "raw_code": "def count_k_constraint_substrings(s, k):\n    n = len(s)\n    count = 0\n    \n    for start in range(n):\n        zero_count = 0\n        one_count = 0\n        \n        for end in range(start, n):\n            if s[end] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                count += 1\n    \n    return count\n"}
{"task_id": "3600", "code": "def kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        new_part = ''.join(chr(((ord(c) - ord('a') + 1) % 26) + ord('a')) for c in word)\n        word += new_part\n    return word[k-1]\n", "passed": true, "raw_code": "def kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        new_part = ''.join(chr(((ord(c) - ord('a') + 1) % 26) + ord('a')) for c in word)\n        word += new_part\n    return word[k-1]\n"}
{"final_accuracy": "100.00%"}
{"difficulty": "easy", "num_threads": 16, "temperature": 0.7, "n": 16, "context": "all", "selection": "generated_tests_majority_no_public_tests", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "microsoft/phi-4", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/majoritybug_trace_TPL_CODEEXECUTOR_phi4_n_16_easy.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "gpt-4o-mini", "num_test_suites": 1, "api_name": "microsoft/phi-4", "api_base": "http://127.0.0.1:8002/v1", "no_refine": false, "no_dspy_gen": true, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    input_data = sys.stdin.read().strip()\n    result = input_data.replace('.', '')\n    print(result)\n\n# Call the function\nremove_dots()\n", "passed": true, "raw_code": "def remove_dots():\n    import sys\n    input_data = sys.stdin.read().strip()\n    result = input_data.replace('.', '')\n    print(result)\n\n# Call the function\nremove_dots()\n"}
{"task_id": "abc373_a", "code": "def count_matching_length_strings():\n    import sys\n    input = sys.stdin.read\n    strings = input().split()\n    \n    count = 0\n    for i in range(1, 13):\n        if len(strings[i-1]) == i:\n            count += 1\n    \n    print(count)\n\n# Call the function\ncount_matching_length_strings()\n", "passed": true, "raw_code": "def count_matching_length_strings():\n    import sys\n    input = sys.stdin.read\n    strings = input().split()\n    \n    count = 0\n    for i in range(1, 13):\n        if len(strings[i-1]) == i:\n            count += 1\n    \n    print(count)\n\n# Call the function\ncount_matching_length_strings()\n"}
{"task_id": "abc370_a", "code": "def takoyaki_decision():\n    import sys\n    input = sys.stdin.read\n    L, R = map(int, input().strip().split())\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\n# Call the function\ntakoyaki_decision()\n", "passed": true, "raw_code": "def takoyaki_decision():\n    import sys\n    input = sys.stdin.read\n    L, R = map(int, input().strip().split())\n    \n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\n# Call the function\ntakoyaki_decision()\n"}
{"task_id": "abc365_a", "code": "def calculate_days_in_year():\n    import sys\n    input = sys.stdin.read\n    Y = int(input().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\ncalculate_days_in_year()\n", "passed": true, "raw_code": "def calculate_days_in_year():\n    import sys\n    input = sys.stdin.read\n    Y = int(input().strip())\n    \n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\ncalculate_days_in_year()\n"}
{"task_id": "abc368_b", "code": "def perform_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operation_count = 0\n    \n    while len(A) > 1 and A[0] > 0:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operation_count += 1\n        A = [a for a in A if a > 0]\n    \n    print(operation_count)\n\n# Call the function\nperform_operations()\n", "passed": true, "raw_code": "def perform_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operation_count = 0\n    \n    while len(A) > 1 and A[0] > 0:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operation_count += 1\n        A = [a for a in A if a > 0]\n    \n    print(operation_count)\n\n# Call the function\nperform_operations()\n"}
{"task_id": "abc367_b", "code": "def process_real_number():\n    import sys\n    import re\n    \n    # Read the input from stdin\n    X = sys.stdin.read().strip()\n\n    # Remove trailing zeros from decimal part if present\n    X = re.sub(r'\\.?0+$', '', X)\n    \n    # If the number becomes empty after removing decimal and zeros, it is considered as '0'\n    if X == '' or X == '.':\n        X = '0'\n    \n    # Print the result\n    print(X)\n\n# Call the function\nprocess_real_number()\n", "passed": true, "raw_code": "def process_real_number():\n    import sys\n    import re\n    \n    # Read the input from stdin\n    X = sys.stdin.read().strip()\n\n    # Remove trailing zeros from decimal part if present\n    X = re.sub(r'\\.?0+$', '', X)\n    \n    # If the number becomes empty after removing decimal and zeros, it is considered as '0'\n    if X == '' or X == '.':\n        X = '0'\n    \n    # Print the result\n    print(X)\n\n# Call the function\nprocess_real_number()\n"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])  # Total number of votes\n    T = int(data[1])  # Votes for Takahashi\n    A = int(data[2])  # Votes for Aoki\n    \n    # Calculate the majority needed to win\n    majority = (N // 2) + 1\n    \n    # Check if Takahashi or Aoki is already guaranteed to win\n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        # Check if the remaining votes can change the outcome\n        if T > A:\n            print(\"Yes\")  # Takahashi cannot lose\n        else:\n            print(\"No\")  # Aoki still has a chance\n\n# Call the function\ndetermine_election_outcome()\n", "passed": false, "raw_code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])  # Total number of votes\n    T = int(data[1])  # Votes for Takahashi\n    A = int(data[2])  # Votes for Aoki\n    \n    # Calculate the majority needed to win\n    majority = (N // 2) + 1\n    \n    # Check if Takahashi or Aoki is already guaranteed to win\n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        # Check if the remaining votes can change the outcome\n        if T > A:\n            print(\"Yes\")  # Takahashi cannot lose\n        else:\n            print(\"No\")  # Aoki still has a chance\n\n# Call the function\ndetermine_election_outcome()\n"}
{"task_id": "abc365_b", "code": "def find_second_largest():\n    import sys\n    input = sys.stdin.read\n    \n    data = input().strip().split()\n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Find the largest and second largest elements\n    largest = second_largest = -1\n    \n    for num in A:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest:\n            second_largest = num\n    \n    # Find the position (1-based index) of the second largest element\n    for i, num in enumerate(A):\n        if num == second_largest:\n            print(i + 1)\n            break\n\n# Call the function\nfind_second_largest()\n", "passed": true, "raw_code": "def find_second_largest():\n    import sys\n    input = sys.stdin.read\n    \n    data = input().strip().split()\n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Find the largest and second largest elements\n    largest = second_largest = -1\n    \n    for num in A:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest:\n            second_largest = num\n    \n    # Find the position (1-based index) of the second largest element\n    for i, num in enumerate(A):\n        if num == second_largest:\n            print(i + 1)\n            break\n\n# Call the function\nfind_second_largest()\n"}
{"task_id": "abc368_a", "code": "def rearrange_stack():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Take K cards from the bottom and move them to the top\n    A = A[-K:] + A[:-K]\n    \n    # Print the rearranged stack\n    print(\" \".join(map(str, A)))\n\n# Call the function to execute\nrearrange_stack()\n", "passed": true, "raw_code": "def rearrange_stack():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Take K cards from the bottom and move them to the top\n    A = A[-K:] + A[:-K]\n    \n    # Print the rearranged stack\n    print(\" \".join(map(str, A)))\n\n# Call the function to execute\nrearrange_stack()\n"}
{"task_id": "abc367_a", "code": "def can_shout_love_for_takoyaki():\n    import sys\n    input = sys.stdin.read\n    A, B, C = map(int, input().strip().split())\n\n    # If A is greater than or equal to B, then it means Takahashi wakes up after midnight\n    if A >= B:\n        if B <= A < C or A < C <= B:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    # If A is less than B, then Takahashi wakes up before midnight\n    else:\n        if A < C and C < B:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n# Call the function to execute\ncan_shout_love_for_takoyaki()\n", "passed": false, "raw_code": "def can_shout_love_for_takoyaki():\n    import sys\n    input = sys.stdin.read\n    A, B, C = map(int, input().strip().split())\n\n    # If A is greater than or equal to B, then it means Takahashi wakes up after midnight\n    if A >= B:\n        if B <= A < C or A < C <= B:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    # If A is less than B, then Takahashi wakes up before midnight\n    else:\n        if A < C and C < B:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n# Call the function to execute\ncan_shout_love_for_takoyaki()\n"}
{"task_id": "abc370_b", "code": "def find_final_element():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Read the matrix A\n    A = []\n    for i in range(N):\n        row = list(map(int, data[index:index + (i + 1)]))\n        A.append(row)\n        index += (i + 1)\n    \n    # Start with element 1\n    current_element = 1\n    \n    # Combine elements from 1 to N\n    for j in range(2, N + 1):\n        if current_element >= j:\n            current_element = A[current_element - 1][j - 1]\n        else:\n            current_element = A[j - 1][current_element - 1]\n    \n    # Print the final element\n    print(current_element)\n\n# Call the function\nfind_final_element()\n", "passed": false, "raw_code": "def find_final_element():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Read the matrix A\n    A = []\n    for i in range(N):\n        row = list(map(int, data[index:index + (i + 1)]))\n        A.append(row)\n        index += (i + 1)\n    \n    # Start with element 1\n    current_element = 1\n    \n    # Combine elements from 1 to N\n    for j in range(2, N + 1):\n        if current_element >= j:\n            current_element = A[current_element - 1][j - 1]\n        else:\n            current_element = A[j - 1][current_element - 1]\n    \n    # Print the final element\n    print(current_element)\n\n# Call the function\nfind_final_element()\n"}
{"task_id": "abc371_b", "code": "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N, M = map(int, data[0].split())\n    results = []\n    first_male = [None] * (N + 1)\n    male_count = [0] * (N + 1)\n    \n    for i in range(1, M + 1):\n        A_i, B_i = data[i].split()\n        A_i = int(A_i)\n        \n        if B_i == 'M':\n            if first_male[A_i] is None:\n                first_male[A_i] = i\n                results.append(\"Yes\")\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "passed": true, "raw_code": "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N, M = map(int, data[0].split())\n    results = []\n    first_male = [None] * (N + 1)\n    male_count = [0] * (N + 1)\n    \n    for i in range(1, M + 1):\n        A_i, B_i = data[i].split()\n        A_i = int(A_i)\n        \n        if B_i == 'M':\n            if first_male[A_i] is None:\n                first_male[A_i] = i\n                results.append(\"Yes\")\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    # Read the input from stdin\n    S_AB, S_AC, S_BC = input().strip().split()\n\n    # Initialize the possible orderings\n    possible_orders = []\n\n    # Check all possible orderings based on the input relationships\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        # A < B < C\n        possible_orders.append(['A', 'B', 'C'])\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        # A < C < B\n        possible_orders.append(['A', 'C', 'B'])\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        # B < A < C\n        possible_orders.append(['B', 'A', 'C'])\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        # C < A < B\n        possible_orders.append(['C', 'A', 'B'])\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        # A < C < B\n        possible_orders.append(['A', 'C', 'B'])\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        # C < B < A\n        possible_orders.append(['C', 'B', 'A'])\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        # B < C < A\n        possible_orders.append(['B', 'C', 'A'])\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        # B < A < C\n        possible_orders.append(['B', 'A', 'C'])\n\n    # Since there is no contradiction, there should be exactly one valid order\n    middle_brother = possible_orders[0][1]\n    print(middle_brother)\n\n# Call the function\nfind_middle_brother()\n", "passed": false, "raw_code": "def find_middle_brother():\n    # Read the input from stdin\n    S_AB, S_AC, S_BC = input().strip().split()\n\n    # Initialize the possible orderings\n    possible_orders = []\n\n    # Check all possible orderings based on the input relationships\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        # A < B < C\n        possible_orders.append(['A', 'B', 'C'])\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        # A < C < B\n        possible_orders.append(['A', 'C', 'B'])\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        # B < A < C\n        possible_orders.append(['B', 'A', 'C'])\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        # C < A < B\n        possible_orders.append(['C', 'A', 'B'])\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        # A < C < B\n        possible_orders.append(['A', 'C', 'B'])\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        # C < B < A\n        possible_orders.append(['C', 'B', 'A'])\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        # B < C < A\n        possible_orders.append(['B', 'C', 'A'])\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        # B < A < C\n        possible_orders.append(['B', 'A', 'C'])\n\n    # Since there is no contradiction, there should be exactly one valid order\n    middle_brother = possible_orders[0][1]\n    print(middle_brother)\n\n# Call the function\nfind_middle_brother()\n"}
{"task_id": "abc366_b", "code": "def convert_to_vertical():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    strings = data[1:N+1]\n    \n    max_len = max(len(s) for s in strings)\n    T = [''] * max_len\n    \n    for i, s in enumerate(strings):\n        for j, char in enumerate(s):\n            if j >= len(T):\n                T[j] = ''\n            \n            if len(T[j]) <= i:\n                T[j] += ' ' * (i - len(T[j]) + 1)\n            \n            T[j] = T[j][:i] + char + T[j][i+1:]\n            \n    for i in reversed(range(len(T))):\n        if i < len(T) - 1:\n            if T[i][-1] == ' ':\n                T[i] = T[i][:-1] + '*'\n            else:\n                for k in range(len(T[i]), N):\n                    if T[i][-1] == ' ':\n                        break\n                    T[i] += '*'\n        else:\n            T[i] = T[i].rstrip()\n    \n    for row in T:\n        print(row)\n\n# Call the function\nconvert_to_vertical()\n", "passed": false, "raw_code": "def convert_to_vertical():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    strings = data[1:N+1]\n    \n    max_len = max(len(s) for s in strings)\n    T = [''] * max_len\n    \n    for i, s in enumerate(strings):\n        for j, char in enumerate(s):\n            if j >= len(T):\n                T[j] = ''\n            \n            if len(T[j]) <= i:\n                T[j] += ' ' * (i - len(T[j]) + 1)\n            \n            T[j] = T[j][:i] + char + T[j][i+1:]\n            \n    for i in reversed(range(len(T))):\n        if i < len(T) - 1:\n            if T[i][-1] == ' ':\n                T[i] = T[i][:-1] + '*'\n            else:\n                for k in range(len(T[i]), N):\n                    if T[i][-1] == ' ':\n                        break\n                    T[i] += '*'\n        else:\n            T[i] = T[i].rstrip()\n    \n    for row in T:\n        print(row)\n\n# Call the function\nconvert_to_vertical()\n"}
{"task_id": "abc369_a", "code": "def count_valid_x():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    A = int(data[0])\n    B = int(data[1])\n    \n    x_values = set()\n    \n    # Calculate possible x values\n    x1 = 2 * B - A\n    x2 = 2 * A - B\n    if (A + B) % 2 == 0:\n        x3 = (A + B) // 2\n    \n    # Add valid x values to the set\n    x_values.add(x1)\n    x_values.add(x2)\n    if (A + B) % 2 == 0:\n        x_values.add(x3)\n    \n    # Print the number of unique valid x values\n    print(len(x_values))\n\n# Call the function\ncount_valid_x()\n", "passed": true, "raw_code": "def count_valid_x():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    A = int(data[0])\n    B = int(data[1])\n    \n    x_values = set()\n    \n    # Calculate possible x values\n    x1 = 2 * B - A\n    x2 = 2 * A - B\n    if (A + B) % 2 == 0:\n        x3 = (A + B) // 2\n    \n    # Add valid x values to the set\n    x_values.add(x1)\n    x_values.add(x2)\n    if (A + B) % 2 == 0:\n        x_values.add(x3)\n    \n    # Print the number of unique valid x values\n    print(len(x_values))\n\n# Call the function\ncount_valid_x()\n"}
{"task_id": "abc373_b", "code": "def calculate_minimal_distance(S):\n    # Create a dictionary to map each character to its position in S\n    position_map = {char: idx for idx, char in enumerate(S)}\n    \n    # Initialize the total distance\n    total_distance = 0\n    \n    # Calculate the distance from 'A' to 'Z', one character at a time\n    for i in range(ord('A'), ord('Z') + 1):\n        current_char = chr(i)\n        if i > ord('A'):\n            previous_char = chr(i - 1)\n            # Calculate the distance between consecutive characters\n            total_distance += abs(position_map[current_char] - position_map[previous_char])\n    \n    # Print the total distance\n    print(total_distance)\n\n# Read input from standard input\nimport sys\ninput_string = sys.stdin.read().strip()\ncalculate_minimal_distance(input_string)\n", "passed": true, "raw_code": "def calculate_minimal_distance(S):\n    # Create a dictionary to map each character to its position in S\n    position_map = {char: idx for idx, char in enumerate(S)}\n    \n    # Initialize the total distance\n    total_distance = 0\n    \n    # Calculate the distance from 'A' to 'Z', one character at a time\n    for i in range(ord('A'), ord('Z') + 1):\n        current_char = chr(i)\n        if i > ord('A'):\n            previous_char = chr(i - 1)\n            # Calculate the distance between consecutive characters\n            total_distance += abs(position_map[current_char] - position_map[previous_char])\n    \n    # Print the total distance\n    print(total_distance)\n\n# Read input from standard input\nimport sys\ninput_string = sys.stdin.read().strip()\ncalculate_minimal_distance(input_string)\n"}
{"task_id": "abc369_b", "code": "def minimum_fatigue():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    plays = [(int(data[i*2+1]), data[i*2+2]) for i in range(N)]\n    \n    # dp[i][left][right] = minimum fatigue after i-th press with left hand on 'left' and right hand on 'right'\n    dp = [[[float('inf')] * 101 for _ in range(101)] for _ in range(N + 1)]\n    \n    # Initially, any position for both hands is possible with 0 fatigue\n    for l in range(1, 101):\n        for r in range(1, 101):\n            dp[0][l][r] = 0\n    \n    for i in range(N):\n        A_i, S_i = plays[i]\n        for left in range(1, 101):\n            for right in range(1, 101):\n                if S_i == 'L':\n                    # Move left hand to A_i\n                    dp[i+1][A_i][right] = min(dp[i+1][A_i][right], dp[i][left][right] + abs(A_i - left))\n                    # Move right hand to its current position\n                    dp[i+1][left][right] = min(dp[i+1][left][right], dp[i][left][right] + abs(right - right))\n                else:  # S_i == 'R'\n                    # Move right hand to A_i\n                    dp[i+1][left][A_i] = min(dp[i+1][left][A_i], dp[i][left][right] + abs(A_i - right))\n                    # Move left hand to its current position\n                    dp[i+1][left][right] = min(dp[i+1][left][right], dp[i][left][right] + abs(left - left))\n    \n    # Find the minimum fatigue after all presses\n    min_fatigue = float('inf')\n    for l in range(1, 101):\n        for r in range(1, 101):\n            min_fatigue = min(min_fatigue, dp[N][l][r])\n    \n    print(min_fatigue)\n\n# Call the function to execute\nminimum_fatigue()\n", "passed": false, "raw_code": "def minimum_fatigue():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    plays = [(int(data[i*2+1]), data[i*2+2]) for i in range(N)]\n    \n    # dp[i][left][right] = minimum fatigue after i-th press with left hand on 'left' and right hand on 'right'\n    dp = [[[float('inf')] * 101 for _ in range(101)] for _ in range(N + 1)]\n    \n    # Initially, any position for both hands is possible with 0 fatigue\n    for l in range(1, 101):\n        for r in range(1, 101):\n            dp[0][l][r] = 0\n    \n    for i in range(N):\n        A_i, S_i = plays[i]\n        for left in range(1, 101):\n            for right in range(1, 101):\n                if S_i == 'L':\n                    # Move left hand to A_i\n                    dp[i+1][A_i][right] = min(dp[i+1][A_i][right], dp[i][left][right] + abs(A_i - left))\n                    # Move right hand to its current position\n                    dp[i+1][left][right] = min(dp[i+1][left][right], dp[i][left][right] + abs(right - right))\n                else:  # S_i == 'R'\n                    # Move right hand to A_i\n                    dp[i+1][left][A_i] = min(dp[i+1][left][A_i], dp[i][left][right] + abs(A_i - right))\n                    # Move left hand to its current position\n                    dp[i+1][left][right] = min(dp[i+1][left][right], dp[i][left][right] + abs(left - left))\n    \n    # Find the minimum fatigue after all presses\n    min_fatigue = float('inf')\n    for l in range(1, 101):\n        for r in range(1, 101):\n            min_fatigue = min(min_fatigue, dp[N][l][r])\n    \n    print(min_fatigue)\n\n# Call the function to execute\nminimum_fatigue()\n"}
{"final_accuracy": "76.92%"}
