{"difficulty": "easy", "num_threads": 32, "temperature": 0.5, "n": 16, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp05_bug_trace_TPL_NEXT_qwen_7b_easy_n_16.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result = input_string.replace('.', '')\n    print(result)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result = input_string.replace('.', '')\n    print(result)\n\nremove_dots()\n```"}
{"task_id": "3606", "code": "def min_sum_of_digits(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    modified_nums = [sum_of_digits(num) for num in nums]\n    return min(modified_nums)", "passed": true, "raw_code": "```python\ndef min_sum_of_digits(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    modified_nums = [sum_of_digits(num) for num in nums]\n    return min(modified_nums)\n```"}
{"task_id": "abc367_b", "code": "def process_number():\n    import sys\n    x = float(sys.stdin.read().strip())\n    formatted_x = \"{:.3f}\".format(x).rstrip('0').rstrip('.')\n    print(formatted_x)\n\nprocess_number()", "passed": true, "raw_code": "```python\ndef process_number():\n    import sys\n    x = float(sys.stdin.read().strip())\n    formatted_x = \"{:.3f}\".format(x).rstrip('0').rstrip('.')\n    print(formatted_x)\n\nprocess_number()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki(A, B, C):\n    # Calculate the duration of Takahashi's sleep\n    sleep_duration = (C - B + 24) % 24\n    \n    # Check if A falls within the sleep period\n    if (A >= B and A < C) or (A >= C and A < B):\n        return \"No\"\n    else:\n        return \"Yes\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki(A, B, C):\n    # Calculate the duration of Takahashi's sleep\n    sleep_duration = (C - B + 24) % 24\n    \n    # Check if A falls within the sleep period\n    if (A >= B and A < C) or (A >= C and A < B):\n        return \"No\"\n    else:\n        return \"Yes\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))\n```"}
{"task_id": "abc365_a", "code": "def number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        days = 366\n    elif Y % 100 == 0:\n        days = 365\n    elif Y % 4 == 0:\n        days = 366\n    else:\n        days = 365\n    \n    print(days)\n\nnumber_of_days_in_year()", "passed": true, "raw_code": "```python\ndef number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        days = 366\n    elif Y % 100 == 0:\n        days = 365\n    elif Y % 4 == 0:\n        days = 366\n    else:\n        days = 365\n    \n    print(days)\n\nnumber_of_days_in_year()\n```"}
{"task_id": "abc368_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3555", "code": "def modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        idx = nums.index(min_val)\n        nums[idx] *= multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        idx = nums.index(min_val)\n        nums[idx] *= multiplier\n    return nums\n```"}
{"task_id": "abc373_a", "code": "def main():\n    count = 0\n    for i in range(12):\n        s = input().strip()\n        if len(s) == i + 1:\n            count += 1\n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    count = 0\n    for i in range(12):\n        s = input().strip()\n        if len(s) == i + 1:\n            count += 1\n    print(count)\n\nmain()\n```"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    required_votes = (N + 1) // 2\n    \n    if T >= required_votes or A >= required_votes:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()", "passed": true, "raw_code": "```python\ndef determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    required_votes = (N + 1) // 2\n    \n    if T >= required_votes or A >= required_votes:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()\n```"}
{"task_id": "abc370_a", "code": "def check_hand_raising(L, R):\n    if L == 1 and R == 0:\n        return \"Yes\"\n    elif L == 0 and R == 1:\n        return \"Yes\"\n    elif L == 1 and R == 1:\n        return \"Invalid\"\n    elif L == 0 and R == 0:\n        return \"Invalid\"\n    else:\n        return \"Invalid\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\n# Print the result\nprint(check_hand_raising(L, R))", "passed": false, "raw_code": "```python\ndef check_hand_raising(L, R):\n    if L == 1 and R == 0:\n        return \"Yes\"\n    elif L == 0 and R == 1:\n        return \"Yes\"\n    elif L == 1 and R == 1:\n        return \"Invalid\"\n    elif L == 0 and R == 0:\n        return \"Invalid\"\n    else:\n        return \"Invalid\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\n# Print the result\nprint(check_hand_raising(L, R))\n```"}
{"task_id": "abc368_a", "code": "def rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Extract the last K elements\n    bottom_K = A[-K:]\n    \n    # Remove the last K elements from the list\n    A = A[:-K]\n    \n    # Concatenate the extracted K elements to the beginning of the list\n    A = bottom_K + A\n    \n    # Print the result\n    print(' '.join(map(str, A)))\n\n# Call the function\nrearrange_cards()", "passed": true, "raw_code": "```python\ndef rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Extract the last K elements\n    bottom_K = A[-K:]\n    \n    # Remove the last K elements from the list\n    A = A[:-K]\n    \n    # Concatenate the extracted K elements to the beginning of the list\n    A = bottom_K + A\n    \n    # Print the result\n    print(' '.join(map(str, A)))\n\n# Call the function\nrearrange_cards()\n```"}
{"task_id": "abc370_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = []\n    for i in range(N):\n        row = list(map(int, data[index:index + i + 1]))\n        A.append(row)\n        index += i + 1\n    \n    current_element = 1\n    for i in range(1, N):\n        if i >= current_element:\n            current_element = A[i][current_element - 1]\n        else:\n            current_element = A[current_element - 1][i]\n    \n    print(current_element)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = []\n    for i in range(N):\n        row = list(map(int, data[index:index + i + 1]))\n        A.append(row)\n        index += i + 1\n    \n    current_element = 1\n    for i in range(1, N):\n        if i >= current_element:\n            current_element = A[i][current_element - 1]\n        else:\n            current_element = A[current_element - 1][i]\n    \n    print(current_element)\n\nmain()\n```"}
{"task_id": "3567", "code": "def binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"", "passed": true, "raw_code": "```python\ndef binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_position():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    first_max_index = -1\n    second_max_index = -1\n    \n    for i, num in enumerate(A):\n        if num > first_max:\n            second_max = first_max\n            second_max_index = first_max_index\n            first_max = num\n            first_max_index = i\n        elif num > second_max:\n            second_max = num\n            second_max_index = i\n    \n    print(second_max_index + 1)\n\nfind_second_largest_position()", "passed": true, "raw_code": "```python\ndef find_second_largest_position():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    first_max_index = -1\n    second_max_index = -1\n    \n    for i, num in enumerate(A):\n        if num > first_max:\n            second_max = first_max\n            second_max_index = first_max_index\n            first_max = num\n            first_max_index = i\n        elif num > second_max:\n            second_max = num\n            second_max_index = i\n    \n    print(second_max_index + 1)\n\nfind_second_largest_position()\n```"}
{"task_id": "abc373_b", "code": "def min_distance(S):\n    # Create a dictionary to store the position of each letter in the string S\n    position = {char: idx for idx, char in enumerate(S)}\n    \n    # Initial position of the finger is at the coordinate of 'A'\n    current_position = position['A']\n    total_distance = 0\n    \n    # Iterate through the letters from 'A' to 'Z'\n    for i in range(1, 26):\n        next_letter = chr(ord('A') + i)\n        next_position = position[next_letter]\n        # Calculate the distance to the next letter and add it to the total distance\n        total_distance += abs(next_position - current_position)\n        # Update the current position to the next position\n        current_position = next_position\n    \n    # Print the total distance\n    print(total_distance)\n\n# Call the function with the input from standard input\nmin_distance(input())", "passed": true, "raw_code": "```python\ndef min_distance(S):\n    # Create a dictionary to store the position of each letter in the string S\n    position = {char: idx for idx, char in enumerate(S)}\n    \n    # Initial position of the finger is at the coordinate of 'A'\n    current_position = position['A']\n    total_distance = 0\n    \n    # Iterate through the letters from 'A' to 'Z'\n    for i in range(1, 26):\n        next_letter = chr(ord('A') + i)\n        next_position = position[next_letter]\n        # Calculate the distance to the next letter and add it to the total distance\n        total_distance += abs(next_position - current_position)\n        # Update the current position to the next position\n        current_position = next_position\n    \n    # Print the total distance\n    print(total_distance)\n\n# Call the function with the input from standard input\nmin_distance(input())\n```"}
{"task_id": "3553", "code": "def are_squares_same_color(coordinate1, coordinate2):\n    col1, row1 = ord(coordinate1[0]) - ord('a'), int(coordinate1[1])\n    col2, row2 = ord(coordinate2[0]) - ord('a'), int(coordinate2[1])\n    return (col1 + row1) % 2 == (col2 + row2) % 2", "passed": true, "raw_code": "```python\ndef are_squares_same_color(coordinate1, coordinate2):\n    col1, row1 = ord(coordinate1[0]) - ord('a'), int(coordinate1[1])\n    col2, row2 = ord(coordinate2[0]) - ord('a'), int(coordinate2[1])\n    return (col1 + row1) % 2 == (col2 + row2) % 2\n```"}
{"task_id": "3600", "code": "def findKthCharacter(k):\n    length = 1\n    current_char = 'a'\n    \n    while length < k:\n        length *= 2\n        if length >= k:\n            break\n    \n    remaining_length = k - (length // 2)\n    char_index = remaining_length % 26\n    \n    return chr((ord(current_char) - ord('a') + char_index) % 26 + ord('a'))", "passed": false, "raw_code": "```python\ndef findKthCharacter(k):\n    length = 1\n    current_char = 'a'\n    \n    while length < k:\n        length *= 2\n        if length >= k:\n            break\n    \n    remaining_length = k - (length // 2)\n    char_index = remaining_length % 26\n    \n    return chr((ord(current_char) - ord('a') + char_index) % 26 + ord('a'))\n```"}
{"task_id": "abc371_b", "code": "def determine_taro_name(N, M, births):\n    # Initialize a list to keep track of the earliest-born male child in each family\n    earliest_male = [-1] * N\n    \n    # Process each birth\n    results = []\n    for family, gender in births:\n        if gender == 'M':\n            if earliest_male[family - 1] == -1:\n                # This is the first male born in this family\n                results.append(\"Yes\")\n                earliest_male[family - 1] = family\n            else:\n                # This is not the first male born in this family\n                results.append(\"No\")\n        else:\n            # This is a female, so no change needed\n            results.append(\"No\")\n    \n    return \"\\n\".join(results)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbirths = [(int(data[2 + 2 * i]) - 1, data[3 + 2 * i]) for i in range(M)]\n\n# Determine the results\nresults = determine_taro_name(N, M, births)\n\n# Print the results\nprint(results)", "passed": true, "raw_code": "```python\ndef determine_taro_name(N, M, births):\n    # Initialize a list to keep track of the earliest-born male child in each family\n    earliest_male = [-1] * N\n    \n    # Process each birth\n    results = []\n    for family, gender in births:\n        if gender == 'M':\n            if earliest_male[family - 1] == -1:\n                # This is the first male born in this family\n                results.append(\"Yes\")\n                earliest_male[family - 1] = family\n            else:\n                # This is not the first male born in this family\n                results.append(\"No\")\n        else:\n            # This is a female, so no change needed\n            results.append(\"No\")\n    \n    return \"\\n\".join(results)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbirths = [(int(data[2 + 2 * i]) - 1, data[3 + 2 * i]) for i in range(M)]\n\n# Determine the results\nresults = determine_taro_name(N, M, births)\n\n# Print the results\nprint(results)\n```"}
{"task_id": "abc369_b", "code": "d", "passed": false, "raw_code": "```python\ndef min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    left_hand = 0\n    right_hand = 0\n    fatigue = 0\n    \n    for i in range(N):\n        A_i = int(data[2 * i + 1])\n        S_i = data[2 * i + 2]\n        \n        if S_i == 'L':\n            if A_i < left_hand:\n                fatigue += left_hand - A_i\n                left_hand = A_i\n            elif A_i > left_hand:\n                fatigue += A_i - left_hand\n                left_hand = A_i\n        else:\n            if A_i < right_hand:\n                fatigue += right_hand - A_i\n                right_hand = A_i\n            elif A_i > right_hand:\n                fatigue += A_i - right_hand\n                right_hand = A_i\n    \n    print(fatigue)\n\nmin_fatigue_level()"}
{"task_id": "abc366_b", "code": "def vertical_text(input_string):\n    # Split the input string into lines\n    lines = input_string.strip().split('\\n')\n    # Get the number of strings and the maximum length\n    n = int(lines[0])\n    max_length = max(len(line) for line in lines[1:])\n    # Initialize the result list with empty strings of length max_length\n    result = [''] * max_length\n    # Process each string\n    for i in range(1, n + 1):\n        s = lines[i]\n        for j in range(max_length):\n            if j < len(s) - 1:\n                result[j] += s[-j - 2]\n            else:\n                result[j] += '*'\n    # Print the result\n    for line in result:\n        print(line)\n\n# Call the function with standard input\nvertical_text(input())", "passed": false, "raw_code": "def vertical_text(input_string):\n    # Split the input string into lines\n    lines = input_string.strip().split('\\n')\n    # Get the number of strings and the maximum length\n    n = int(lines[0])\n    max_length = max(len(line) for line in lines[1:])\n    # Initialize the result list with empty strings of length max_length\n    result = [''] * max_length\n    # Process each string\n    for i in range(1, n + 1):\n        s = lines[i]\n        for j in range(max_length):\n            if j < len(s) - 1:\n                result[j] += s[-j - 2]\n            else:\n                result[j] += '*'\n    # Print the result\n    for line in result:\n        print(line)\n\n# Call the function with standard input\nvertical_text(input())"}
{"task_id": "3543", "code": "def count_valid_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if zeros <= k or ones <= k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_valid_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if zeros <= k or ones <= k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc369_a", "code": "def count_valid_x(A, B):\n    valid_x = set()\n    \n    # Check if 2x = A + A is a valid integer\n    if (2 * A) % 2 == 0:\n        valid_x.add((2 * A) // 2)\n    \n    # Check if 2x = A + B is a valid integer\n    if (A + B) % 2 == 0:\n        valid_x.add((A + B) // 2)\n    \n    # Check if 2x = B + A is a valid integer\n    if (B + A) % 2 == 0:\n        valid_x.add((B + A) // 2)\n    \n    # Check if 2x = B + B is a valid integer\n    if (2 * B) % 2 == 0:\n        valid_x.add((2 * B) // 2)\n    \n    return len(valid_x)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_valid_x(A, B))", "passed": true, "raw_code": "```python\ndef count_valid_x(A, B):\n    valid_x = set()\n    \n    # Check if 2x = A + A is a valid integer\n    if (2 * A) % 2 == 0:\n        valid_x.add((2 * A) // 2)\n    \n    # Check if 2x = A + B is a valid integer\n    if (A + B) % 2 == 0:\n        valid_x.add((A + B) // 2)\n    \n    # Check if 2x = B + A is a valid integer\n    if (B + A) % 2 == 0:\n        valid_x.add((B + A) // 2)\n    \n    # Check if 2x = B + B is a valid integer\n    if (2 * B) % 2 == 0:\n        valid_x.add((2 * B) // 2)\n    \n    return len(valid_x)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_valid_x(A, B))\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    # Initialize the starting position of the snake\n    row, col = 0, 0\n    \n    # Iterate through each command\n    for command in commands:\n        if command == \"UP\":\n            row -= 1\n        elif command == \"DOWN\":\n            row += 1\n        elif command == \"LEFT\":\n            col -= 1\n        elif command == \"RIGHT\":\n            col += 1\n        \n        # Wrap around if the new position is out of bounds\n        row = (row + n) % n\n        col = (col + n) % n\n    \n    # Return the final position of the snake\n    return row * n + col", "passed": false, "raw_code": "```python\ndef final_position(n, commands):\n    # Initialize the starting position of the snake\n    row, col = 0, 0\n    \n    # Iterate through each command\n    for command in commands:\n        if command == \"UP\":\n            row -= 1\n        elif command == \"DOWN\":\n            row += 1\n        elif command == \"LEFT\":\n            col -= 1\n        elif command == \"RIGHT\":\n            col += 1\n        \n        # Wrap around if the new position is out of bounds\n        row = (row + n) % n\n        col = (col + n) % n\n    \n    # Return the final position of the snake\n    return row * n + col\n```"}
{"task_id": "3519", "code": "def countWinningPlayers(n, pick):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of balls picked by each player for each color\n    player_balls = defaultdict(lambda: defaultdict(int))\n    \n    # Update the count of balls picked by each player for each color\n    for player, color in pick:\n        player_balls[player][color] += 1\n    \n    # Function to check if a player wins\n    def player_wins(player):\n        return any(count >= player + 1 for count in player_balls[player].values())\n    \n    # Count the number of players who win\n    winning_players = sum(1 for player in range(n) if player_wins(player))\n    \n    return winning_players", "passed": true, "raw_code": "```python\ndef countWinningPlayers(n, pick):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of balls picked by each player for each color\n    player_balls = defaultdict(lambda: defaultdict(int))\n    \n    # Update the count of balls picked by each player for each color\n    for player, color in pick:\n        player_balls[player][color] += 1\n    \n    # Function to check if a player wins\n    def player_wins(player):\n        return any(count >= player + 1 for count in player_balls[player].values())\n    \n    # Count the number of players who win\n    winning_players = sum(1 for player in range(n) if player_wins(player))\n    \n    return winning_players\n```"}
{"task_id": "3568", "code": "def find_key(num1, num2, num3):\n    # Pad numbers with leading zeros to make them four digits long\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Extract digits and find the minimum for each position\n    key_digits = [\n        min(int(num1_str[0]), int(num2_str[0]), int(num3_str[0])),\n        min(int(num1_str[1]), int(num2_str[1]), int(num3_str[1])),\n        min(int(num1_str[2]), int(num2_str[2]), int(num3_str[2])),\n        min(int(num1_str[3]), int(num2_str[3]), int(num3_str[3]))\n    ]\n    \n    # Form the key as a string and convert to integer\n    key_str = ''.join(map(str, key_digits))\n    key = int(key_str)\n    \n    # Return 0 if all digits are zero, otherwise return the key\n    return key if key != 0 else 0", "passed": true, "raw_code": "```python\ndef find_key(num1, num2, num3):\n    # Pad numbers with leading zeros to make them four digits long\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Extract digits and find the minimum for each position\n    key_digits = [\n        min(int(num1_str[0]), int(num2_str[0]), int(num3_str[0])),\n        min(int(num1_str[1]), int(num2_str[1]), int(num3_str[1])),\n        min(int(num1_str[2]), int(num2_str[2]), int(num3_str[2])),\n        min(int(num1_str[3]), int(num2_str[3]), int(num3_str[3]))\n    ]\n    \n    # Form the key as a string and convert to integer\n    key_str = ''.join(map(str, key_digits))\n    key = int(key_str)\n    \n    # Return 0 if all digits are zero, otherwise return the key\n    return key if key != 0 else 0\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB = data[0]\n    S_AC = data[1]\n    S_BC = data[2]\n    \n    # Initialize the order of ages\n    if S_AB == '<':\n        if S_AC == '<':\n            if S_BC == '<':\n                order = ['A', 'B', 'C']\n            elif S_BC == '>':\n                order = ['A', 'C', 'B']\n        elif S_AC == '>':\n            if S_BC == '<':\n                order = ['C', 'A', 'B']\n            elif S_BC == '>':\n                order = ['B', 'A', 'C']\n    elif S_AB == '>':\n        if S_AC == '<':\n            if S_BC == '<':\n                order = ['B', 'A', 'C']\n            elif S_BC == '>':\n                order = ['C', 'A', 'B']\n        elif S_AC == '>':\n            if S_BC == '<':\n                order = ['A', 'C', 'B']\n            elif S_BC == '>':\n                order = ['A', 'B', 'C']\n    \n    # Print the middle brother\n    print(order[1])\n\nfind_middle_brother()", "passed": true, "raw_code": "```python\ndef find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB = data[0]\n    S_AC = data[1]\n    S_BC = data[2]\n    \n    # Initialize the order of ages\n    if S_AB == '<':\n        if S_AC == '<':\n            if S_BC == '<':\n                order = ['A', 'B', 'C']\n            elif S_BC == '>':\n                order = ['A', 'C', 'B']\n        elif S_AC == '>':\n            if S_BC == '<':\n                order = ['C', 'A', 'B']\n            elif S_BC == '>':\n                order = ['B', 'A', 'C']\n    elif S_AB == '>':\n        if S_AC == '<':\n            if S_BC == '<':\n                order = ['B', 'A', 'C']\n            elif S_BC == '>':\n                order = ['C', 'A', 'B']\n        elif S_AC == '>':\n            if S_BC == '<':\n                order = ['A', 'C', 'B']\n            elif S_BC == '>':\n                order = ['A', 'B', 'C']\n    \n    # Print the middle brother\n    print(order[1])\n\nfind_middle_brother()\n```"}
{"final_accuracy": "73.08%"}
