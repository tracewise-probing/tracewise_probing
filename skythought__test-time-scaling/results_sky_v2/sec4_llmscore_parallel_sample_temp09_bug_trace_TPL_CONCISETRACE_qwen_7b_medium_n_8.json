{"difficulty": "medium", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_CONCISETRACE_qwen_7b_medium_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3541", "code": "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count == 2:\n                return True\n    \n    return False", "passed": true, "raw_code": "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count == 2:\n                return True\n    \n    return False\n```"}
{"task_id": "3485", "code": "def maxScore(start, d):\n    # Combine start points and start points + d into one list\n    points = sorted(start + [x + d for x in start])\n    \n    # Initialize the maximum score to a very small number\n    max_score = 0\n    \n    # Iterate through the sorted list and calculate differences between consecutive points\n    for i in range(1, len(points)):\n        diff = points[i] - points[i - 1]\n        if diff > max_score:\n            max_score = diff\n    \n    return max_score", "passed": false, "raw_code": "```python\ndef maxScore(start, d):\n    # Combine start points and start points + d into one list\n    points = sorted(start + [x + d for x in start])\n    \n    # Initialize the maximum score to a very small number\n    max_score = 0\n    \n    # Iterate through the sorted list and calculate differences between consecutive points\n    for i in range(1, len(points)):\n        diff = points[i] - points[i - 1]\n        if diff > max_score:\n            max_score = diff\n    \n    return max_score\n```"}
{"task_id": "abc372_d", "code": "def count_visible_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    stack = []\n    \n    for i in range(N):\n        while stack and heights[i] > heights[stack[-1]]:\n            stack.pop()\n        \n        if not stack:\n            result[i] = N - i\n        else:\n            result[i] = i - stack[-1]\n        \n        stack.append(i)\n    \n    print(' '.join(map(str, result)))\n\ncount_visible_buildings()", "passed": false, "raw_code": "```python\ndef count_visible_buildings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = [0] * N\n    stack = []\n    \n    for i in range(N):\n        while stack and heights[i] > heights[stack[-1]]:\n            stack.pop()\n        \n        if not stack:\n            result[i] = N - i\n        else:\n            result[i] = i - stack[-1]\n        \n        stack.append(i)\n    \n    print(' '.join(map(str, result)))\n\ncount_visible_buildings()\n```"}
{"task_id": "abc369_c", "code": "def count_arithmetic_progressions(N, A):\n    def is_arithmetic(subarray):\n        if len(subarray) <= 1:\n            return True\n        diff = subarray[1] - subarray[0]\n        for i in range(2, len(subarray)):\n            if subarray[i] - subarray[i - 1] != diff:\n                return False\n        return True\n    \n    count = 0\n    for l in range(N):\n        for r in range(l, N):\n            if is_arithmetic(A[l:r + 1]):\n                count += 1\n    return count\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Print result\nprint(count_arithmetic_progressions(N, A))", "passed": false, "raw_code": "```python\ndef count_arithmetic_progressions(N, A):\n    def is_arithmetic(subarray):\n        if len(subarray) <= 1:\n            return True\n        diff = subarray[1] - subarray[0]\n        for i in range(2, len(subarray)):\n            if subarray[i] - subarray[i - 1] != diff:\n                return False\n        return True\n    \n    count = 0\n    for l in range(N):\n        for r in range(l, N):\n            if is_arithmetic(A[l:r + 1]):\n                count += 1\n    return count\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nA = list(map(int, data[1:]))\n\n# Print result\nprint(count_arithmetic_progressions(N, A))\n```"}
{"task_id": "abc373_c", "code": "def max_sum_of_two_arrays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read the number of elements\n    N = int(data[0])\n    \n    # Read the first array A\n    A = list(map(int, data[1:N+1]))\n    \n    # Read the second array B\n    B = list(map(int, data[N+1:]))\n    \n    # Find the maximum element in A\n    max_A = max(A)\n    \n    # Find the maximum element in B\n    max_B = max(B)\n    \n    # Print the maximum sum\n    print(max_A + max_B)\n\nmax_sum_of_two_arrays()", "passed": true, "raw_code": "```python\ndef max_sum_of_two_arrays():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read the number of elements\n    N = int(data[0])\n    \n    # Read the first array A\n    A = list(map(int, data[1:N+1]))\n    \n    # Read the second array B\n    B = list(map(int, data[N+1:]))\n    \n    # Find the maximum element in A\n    max_A = max(A)\n    \n    # Find the maximum element in B\n    max_B = max(B)\n    \n    # Print the maximum sum\n    print(max_A + max_B)\n\nmax_sum_of_two_arrays()\n```"}
{"task_id": "3518", "code": "def maxScore(a, b):\n    # Sort array b\n    b.sort()\n    \n    # Get the four largest elements from b\n    top_four_b = b[-4:]\n    \n    # Initialize the score\n    score = 0\n    \n    # Multiply the largest elements of b with the elements of a in descending order\n    for i in range(4):\n        score += a[i] * top_four_b[3 - i]\n    \n    return score", "passed": false, "raw_code": "```python\ndef maxScore(a, b):\n    # Sort array b\n    b.sort()\n    \n    # Get the four largest elements from b\n    top_four_b = b[-4:]\n    \n    # Initialize the score\n    score = 0\n    \n    # Multiply the largest elements of b with the elements of a in descending order\n    for i in range(4):\n        score += a[i] * top_four_b[3 - i]\n    \n    return score\n```"}
{"task_id": "3496", "code": "def minSeconds(mountainHeight: int, workerTimes: List[int]) -> int:\n    def canReduce(height, target):\n        return sum(worker * (target * (target + 1)) // 2 for worker in workerTimes) >= height\n    \n    left, right = 1, mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "passed": false, "raw_code": "```python\ndef minSeconds(mountainHeight: int, workerTimes: List[int]) -> int:\n    def canReduce(height, target):\n        return sum(worker * (target * (target + 1)) // 2 for worker in workerTimes) >= height\n    \n    left, right = 1, mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"}
{"task_id": "3526", "code": "def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range((n + 1) // 2) if row[i] != row[-i - 1])\n    \n    def flips_for_column(col):\n        return sum(1 for i in range((m + 1) // 2) if grid[i][col] != grid[-i - 1][col])\n    \n    total_flips_rows = sum(flips_for_row(row) for row in grid)\n    total_flips_columns = sum(flips_for_column(col) for col in range(n))\n    \n    return min(total_flips_rows, total_flips_columns)", "passed": true, "raw_code": "```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range((n + 1) // 2) if row[i] != row[-i - 1])\n    \n    def flips_for_column(col):\n        return sum(1 for i in range((m + 1) // 2) if grid[i][col] != grid[-i - 1][col])\n    \n    total_flips_rows = sum(flips_for_row(row) for row in grid)\n    total_flips_columns = sum(flips_for_column(col) for col in range(n))\n    \n    return min(total_flips_rows, total_flips_columns)\n```"}
{"task_id": "abc366_c", "code": "def process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    result = []\n    \n    index = 0\n    for _ in range(Q):\n        if queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n        elif queries[index] == '3':\n            result.append(len(bag))\n            index += 1\n    \n    for r in result:\n        print(r)\n\nprocess_queries()", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    result = []\n    \n    index = 0\n    for _ in range(Q):\n        if queries[index] == '1':\n            x = int(queries[index + 1])\n            bag.add(x)\n            index += 2\n        elif queries[index] == '2':\n            x = int(queries[index + 1])\n            bag.remove(x)\n            index += 2\n        elif queries[index] == '3':\n            result.append(len(bag))\n            index += 1\n    \n    for r in result:\n        print(r)\n\nprocess_queries()\n```"}
{"task_id": "3559", "code": "def minimumValidStrings(words, target):\n    dp = [0] + [-1] * len(target)\n    for i in range(1, len(target) + 1):\n        for word in words:\n            if i >= len(word) and target[i - len(word):i] == word:\n                if dp[i - len(word)] != -1:\n                    dp[i] = dp[i] if dp[i] != -1 else dp[i - len(word)] + 1\n    return dp[-1]", "passed": false, "raw_code": "```python\ndef minimumValidStrings(words, target):\n    dp = [0] + [-1] * len(target)\n    for i in range(1, len(target) + 1):\n        for word in words:\n            if i >= len(word) and target[i - len(word):i] == word:\n                if dp[i - len(word)] != -1:\n                    dp[i] = dp[i] if dp[i] != -1 else dp[i - len(word)] + 1\n    return dp[-1]\n```"}
{"task_id": "3525", "code": "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    # Initialize DP arrays\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Base case for the first hour\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill the DP arrays\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    # The result is the maximum value from the last elements of both DP arrays\n    return max(dp_A[n-1], dp_B[n-1])", "passed": true, "raw_code": "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    # Initialize DP arrays\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Base case for the first hour\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill the DP arrays\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-1])\n        dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-1])\n    \n    # The result is the maximum value from the last elements of both DP arrays\n    return max(dp_A[n-1], dp_B[n-1])\n```"}
{"task_id": "abc367_c", "code": "def backtrack(seq, pos, current_sum):\n    if pos == N:\n        if current_sum % K == 0:\n            results.append(seq[:])\n        return\n    \n    for i in range(1, R[pos] + 1):\n        seq[pos] = i\n        backtrack(seq, pos + 1, current_sum + i)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    global N, K, R, results\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:N+2]))\n    results = []\n    \n    backtrack([0] * N, 0, 0)\n    \n    if results:\n        print(len(results))\n        for seq in results:\n            print(\" \".join(map(str, seq)))\n    else:\n        print(\"\")\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef backtrack(seq, pos, current_sum):\n    if pos == N:\n        if current_sum % K == 0:\n            results.append(seq[:])\n        return\n    \n    for i in range(1, R[pos] + 1):\n        seq[pos] = i\n        backtrack(seq, pos + 1, current_sum + i)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    global N, K, R, results\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:N+2]))\n    results = []\n    \n    backtrack([0] * N, 0, 0)\n    \n    if results:\n        print(len(results))\n        for seq in results:\n            print(\" \".join(map(str, seq)))\n    else:\n        print(\"\")\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3540", "code": "def hash_string(s, k):\n    result = \"\"\n    n = len(s)\n    for i in range(0, n, k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result", "passed": true, "raw_code": "```python\ndef hash_string(s, k):\n    result = \"\"\n    n = len(s)\n    for i in range(0, n, k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result\n```"}
{"task_id": "abc367_d", "code": "def count_pairs(N, M, A):\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    remainder_count = {}\n    count = 0\n    \n    for i in range(N + 1):\n        remainder = prefix_sum[i] % M\n        required_remainder = (remainder - M) if remainder >= M else M + remainder\n        \n        if required_remainder in remainder_count:\n            count += remainder_count[required_remainder]\n        \n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n    \n    print(count)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function\ncount_pairs(N, M, A)", "passed": false, "raw_code": "```python\ndef count_pairs(N, M, A):\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    remainder_count = {}\n    count = 0\n    \n    for i in range(N + 1):\n        remainder = prefix_sum[i] % M\n        required_remainder = (remainder - M) if remainder >= M else M + remainder\n        \n        if required_remainder in remainder_count:\n            count += remainder_count[required_remainder]\n        \n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n    \n    print(count)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function\ncount_pairs(N, M, A)\n```"}
{"task_id": "3534", "code": "def count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def generate_swapped_numbers(num_str):\n        num_list = list(num_str)\n        swapped_numbers = set()\n        \n        for i in range(len(num_list)):\n            for j in range(i + 1, len(num_list)):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                swapped_numbers.add(''.join(num_list))\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n        \n        return swapped_numbers\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] == nums[j]:\n                count += 1\n            else:\n                swapped_i = generate_swapped_numbers(str(nums[i]))\n                if str(nums[j]) in swapped_i:\n                    count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    def generate_swapped_numbers(num_str):\n        num_list = list(num_str)\n        swapped_numbers = set()\n        \n        for i in range(len(num_list)):\n            for j in range(i + 1, len(num_list)):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                swapped_numbers.add(''.join(num_list))\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n        \n        return swapped_numbers\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] == nums[j]:\n                count += 1\n            else:\n                swapped_i = generate_swapped_numbers(str(nums[i]))\n                if str(nums[j]) in swapped_i:\n                    count += 1\n    \n    return count\n```"}
{"task_id": "abc370_d", "code": "d", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n\n    walls = [[1] * W for _ in range(H)]\n\n    index = 3\n    for _ in range(Q):\n        R = int(data[index]) - 1\n        C = int(data[index + 1]) - 1\n        index += 2\n\n        if walls[R][C] == 1:\n            walls[R][C] = 0\n        else:\n            for i in range(R - 1, -1, -1):\n                if walls[i][C] == 1:\n                    walls[i][C] = 0\n                    break\n            for i in range(R + 1, H):\n                if walls[i][C] == 1:\n                    walls[i][C] = 0\n                    break\n            for j in range(C - 1, -1, -1):\n                if walls[R][j] == 1:\n                    walls[R][j] = 0\n                    break\n            for j in range(C + 1, W):\n                if walls[R][j] == 1:\n                    walls[R][j] = 0\n                    break\n\n    remaining_walls = sum(sum(row) for row in walls)\n    print(remaining_walls)\n\nmain()"}
{"task_id": "arc181_a", "code": "import sys\ninput = sys.stdin.read\n\ndef min_operations(permutation):\n    n = len(permutation)\n    left = 0\n    while left < n and permutation[left] == left + 1:\n        left += 1\n    right = n - 1\n    while right > left and permutation[right] == right + 1:\n        right -= 1\n    return max(0, right - left)\n\ndef main():\n    data = input().split()\n    t = int(data[0])\n    results = []\n    index = 1\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        permutation = list(map(int, data[index:index+n]))\n        index += n\n        results.append(min_operations(permutation))\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "import sys\ninput = sys.stdin.read\n\ndef min_operations(permutation):\n    n = len(permutation)\n    left = 0\n    while left < n and permutation[left] == left + 1:\n        left += 1\n    right = n - 1\n    while right > left and permutation[right] == right + 1:\n        right -= 1\n    return max(0, right - left)\n\ndef main():\n    data = input().split()\n    t = int(data[0])\n    results = []\n    index = 1\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        permutation = list(map(int, data[index:index+n]))\n        index += n\n        results.append(min_operations(permutation))\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "3517", "code": "from collections import deque\n\ndef shortest_paths(n, queries):\n    def bfs(graph, start, end):\n        queue = deque([(start, 0)])\n        visited = set([start])\n        \n        while queue:\n            current, distance = queue.popleft()\n            if current == end:\n                return distance\n            \n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, distance + 1))\n        \n        return float('inf')\n    \n    graph = {i: [i + 1] for i in range(n - 1)}\n    \n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        shortest_path = bfs(graph, 0, n - 1)\n        result.append(shortest_path)\n    \n    return result", "passed": true, "raw_code": "```python\nfrom collections import deque\n\ndef shortest_paths(n, queries):\n    def bfs(graph, start, end):\n        queue = deque([(start, 0)])\n        visited = set([start])\n        \n        while queue:\n            current, distance = queue.popleft()\n            if current == end:\n                return distance\n            \n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, distance + 1))\n        \n        return float('inf')\n    \n    graph = {i: [i + 1] for i in range(n - 1)}\n    \n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        shortest_path = bfs(graph, 0, n - 1)\n        result.append(shortest_path)\n    \n    return result\n```"}
{"task_id": "abc365_c", "code": "def max_subsidy_limit(N, M, A):\n    low, high = 0, max(A)\n    \n    while low <= high:\n        mid = (low + high) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return low - 1 if low <= max(A) else \"infinite\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))", "passed": true, "raw_code": "```python\ndef max_subsidy_limit(N, M, A):\n    low, high = 0, max(A)\n    \n    while low <= high:\n        mid = (low + high) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        \n        if total_subsidy <= M:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return low - 1 if low <= max(A) else \"infinite\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(max_subsidy_limit(N, M, A))\n```"}
{"task_id": "abc372_c", "code": "d", "passed": false, "raw_code": "```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N, Q = int(data[0]), int(data[1])\n    S = data[2]\n    queries = [(int(data[2 + 2 * i]) - 1, data[2 + 2 * i + 1]) for i in range(Q)]\n    \n    def count_abc(s):\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i+3] == \"ABC\":\n                count += 1\n        return count\n    \n    initial_count = count_abc(S)\n    print(initial_count)\n    \n    current_count = initial_count\n    for pos, char in queries:\n        if S[pos] != char:\n            if pos > 0 and S[pos-1:pos+2] == \"ABC\":\n                current_count -= 1\n            if pos + 1 < len(S) and S[pos:pos+3] == \"ABC\":\n                current_count -= 1\n            if pos > 0 and S[pos-1:pos+2] == char + \"BC\":\n                current_count += 1\n            if pos + 1 < len(S) and S[pos:pos+3] == \"A\" + char + \"C\":\n                current_count += 1\n            if pos + 2 < len(S) and S[pos:pos+3] == \"AB\" + char:\n                current_count += 1\n            S = S[:pos] + char + S[pos+1:]\n            print(current_count)\n\nprocess_queries()"}
{"task_id": "abc365_d", "code": "def max_wins(N, S):\n    wins = 0\n    prev_takahashi_move = None\n    \n    for move in S:\n        if move == 'R':\n            takahashi_move = 'P'\n        elif move == 'P':\n            takahashi_move = 'S'\n        else:\n            takahashi_move = 'R'\n        \n        if takahashi_move != prev_takahashi_move:\n            wins += 1\n            prev_takahashi_move = takahashi_move\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Calculate and print the result\nprint(max_wins(N, S))", "passed": false, "raw_code": "```python\ndef max_wins(N, S):\n    wins = 0\n    prev_takahashi_move = None\n    \n    for move in S:\n        if move == 'R':\n            takahashi_move = 'P'\n        elif move == 'P':\n            takahashi_move = 'S'\n        else:\n            takahashi_move = 'R'\n        \n        if takahashi_move != prev_takahashi_move:\n            wins += 1\n            prev_takahashi_move = takahashi_move\n    \n    return wins\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nS = data[1]\n\n# Calculate and print the result\nprint(max_wins(N, S))\n```"}
{"task_id": "3573", "code": "def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    n, m = len(word1), len(word2)\n    count = 0\n    \n    # Frequency count of word2\n    word2_counter = Counter(word2)\n    \n    for i in range(n - m + 1):\n        # Frequency count of the current substring of length m\n        substring_counter = Counter(word1[i:i + m])\n        if substring_counter == word2_counter:\n            count += 1\n    \n    return count", "passed": false, "raw_code": "```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    n, m = len(word1), len(word2)\n    count = 0\n    \n    # Frequency count of word2\n    word2_counter = Counter(word2)\n    \n    for i in range(n - m + 1):\n        # Frequency count of the current substring of length m\n        substring_counter = Counter(word1[i:i + m])\n        if substring_counter == word2_counter:\n            count += 1\n    \n    return count\n```"}
{"task_id": "3522", "code": "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        sorted_subarray = sorted(subarray)\n        \n        if subarray == sorted_subarray and all(sorted_subarray[j] - sorted_subarray[j - 1] == 1 for j in range(1, k)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "passed": true, "raw_code": "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        sorted_subarray = sorted(subarray)\n        \n        if subarray == sorted_subarray and all(sorted_subarray[j] - sorted_subarray[j - 1] == 1 for j in range(1, k)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```"}
{"task_id": "arc183_a", "code": "def find_kth_sequence(N, K):\n    from itertools import permutations\n    import math\n\n    # Generate all possible sequences where each integer from 1 to N appears exactly K times\n    all_sequences = [''.join(p) for p in permutations(''.join(str(i+1)*K for i in range(N))) if len(set(p)) == N]\n\n    # Sort the sequences lexicographically\n    all_sequences.sort()\n\n    # Calculate S as the total number of good integer sequences\n    S = math.factorial(N * K)\n    for i in range(N):\n        S //= (math.factorial(K) * math.factorial(N-K))\n\n    # Find the k-th sequence in lexicographical order\n    k = int((S + 1) / 2) - 1  # Subtract 1 because list indices start at 0\n    return ' '.join(all_sequences[k].split())\n\n# Example usage:\nN = int(input())\nK = int(input())\nresult = find_kth_sequence(N, K)\nprint(result)\n", "passed": false, "raw_code": "def find_kth_sequence(N, K):\n    from itertools import permutations\n    import math\n\n    # Generate all possible sequences where each integer from 1 to N appears exactly K times\n    all_sequences = [''.join(p) for p in permutations(''.join(str(i+1)*K for i in range(N))) if len(set(p)) == N]\n\n    # Sort the sequences lexicographically\n    all_sequences.sort()\n\n    # Calculate S as the total number of good integer sequences\n    S = math.factorial(N * K)\n    for i in range(N):\n        S //= (math.factorial(K) * math.factorial(N-K))\n\n    # Find the k-th sequence in lexicographical order\n    k = int((S + 1) / 2) - 1  # Subtract 1 because list indices start at 0\n    return ' '.join(all_sequences[k].split())\n\n# Example usage:\nN = int(input())\nK = int(input())\nresult = find_kth_sequence(N, K)\nprint(result)\n"}
{"task_id": "abc371_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input values\n    N = int(data[0])\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = [(int(data[2*N+2 + 2*i]), int(data[2*N+3 + 2*i])) for i in range(Q)]\n\n    # Create prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + P[i]\n\n    # Answer each query using the prefix sum array\n    results = []\n    for L, R in queries:\n        result = prefix_sum[R + 1] - prefix_sum[L]\n        results.append(result)\n\n    # Print all results\n    for result in results:\n        print(result)\n\n# Call the main function\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read input values\n    N = int(data[0])\n    X = list(map(int, data[1:N+1]))\n    P = list(map(int, data[N+1:2*N+1]))\n    Q = int(data[2*N+1])\n    queries = [(int(data[2*N+2 + 2*i]), int(data[2*N+3 + 2*i])) for i in range(Q)]\n\n    # Create prefix sum array\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + P[i]\n\n    # Answer each query using the prefix sum array\n    results = []\n    for L, R in queries:\n        result = prefix_sum[R + 1] - prefix_sum[L]\n        results.append(result)\n\n    # Print all results\n    for result in results:\n        print(result)\n\n# Call the main function\nmain()\n```"}
{"task_id": "abc370_c", "code": "def transform_string():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    s = data[0]\n    t = data[1]\n    if s == t:\n        print(0)\n        return\n    result = [s]\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            for j in range(i + 1, len(s) + 1):\n                s = s[:j] + t[:j]\n                result.append(s)\n                if s == t:\n                    break\n    print(len(result) - 1)\n    for r in result:\n        print(r)\ntransform_string()", "passed": false, "raw_code": "def transform_string():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    s = data[0]\n    t = data[1]\n    if s == t:\n        print(0)\n        return\n    result = [s]\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            for j in range(i + 1, len(s) + 1):\n                s = s[:j] + t[:j]\n                result.append(s)\n                if s == t:\n                    break\n    print(len(result) - 1)\n    for r in result:\n        print(r)\ntransform_string()"}
{"task_id": "3579", "code": "def maxNumber(nums):\n    # Convert each number to its binary representation without the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order by length, and lexicographically in reverse if lengths are equal\n    binary_nums.sort(key=lambda x: (-len(x), x), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "passed": false, "raw_code": "```python\ndef maxNumber(nums):\n    # Convert each number to its binary representation without the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order by length, and lexicographically in reverse if lengths are equal\n    binary_nums.sort(key=lambda x: (-len(x), x), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```"}
{"task_id": "3528", "code": "def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]", "passed": false, "raw_code": "```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```"}
{"task_id": "3495", "code": "def kthSmallestDistances(queries, k):\n    import heapq\n    \n    heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(heap, distance)\n        \n        if len(heap) < k:\n            results.append(-1)\n        else:\n            results.append(heap[k-1])\n    \n    return results", "passed": false, "raw_code": "```python\ndef kthSmallestDistances(queries, k):\n    import heapq\n    \n    heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(heap, distance)\n        \n        if len(heap) < k:\n            results.append(-1)\n        else:\n            results.append(heap[k-1])\n    \n    return results\n```"}
{"task_id": "abc368_c", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    healths = list(map(int, data[1:]))\n    \n    T = 0\n    while any(health > 0 for health in healths):\n        T += 1\n        for i in range(N):\n            if healths[i] > 0:\n                if T % 3 == 0:\n                    healths[i] -= 3\n                else:\n                    healths[i] -= 1\n                break\n    \n    print(T)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    healths = list(map(int, data[1:]))\n    \n    T = 0\n    while any(health > 0 for health in healths):\n        T += 1\n        for i in range(N):\n            if healths[i] > 0:\n                if T % 3 == 0:\n                    healths[i] -= 3\n                else:\n                    healths[i] -= 1\n                break\n    \n    print(T)\n\nmain()\n```"}
{"task_id": "abc369_d", "code": "def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort()\n    \n    total_points = 0\n    for i in range(N):\n        if i % 2 == 0:\n            # First monster or odd-numbered defeated monster\n            total_points += A[i]\n        else:\n            # Even-numbered defeated monster\n            total_points += A[i] * 2\n    \n    print(total_points)\n\nmax_experience_points()", "passed": false, "raw_code": "```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort()\n    \n    total_points = 0\n    for i in range(N):\n        if i % 2 == 0:\n            # First monster or odd-numbered defeated monster\n            total_points += A[i]\n        else:\n            # Even-numbered defeated monster\n            total_points += A[i] * 2\n    \n    print(total_points)\n\nmax_experience_points()\n```"}
{"task_id": "3558", "code": "def can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(i, j, health):\n        if health <= 0:\n            return False\n        if i == m - 1 and j == n - 1:\n            return health >= 1\n        grid[i][j] = -1  # Mark the cell as visited\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] != -1:\n                if dfs(ni, nj, health - grid[ni][nj]):\n                    return True\n        grid[i][j] = 0  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)", "passed": false, "raw_code": "```python\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(i, j, health):\n        if health <= 0:\n            return False\n        if i == m - 1 and j == n - 1:\n            return health >= 1\n        grid[i][j] = -1  # Mark the cell as visited\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] != -1:\n                if dfs(ni, nj, health - grid[ni][nj]):\n                    return True\n        grid[i][j] = 0  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)\n```"}
{"task_id": "abc366_d", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Read the 3D array A\n    A = []\n    for _ in range(N):\n        row = list(map(int, data[index:index+N]))\n        A.append(row)\n        index += N\n    \n    # Read Q\n    Q = int(data[index])\n    index += 1\n    \n    # Initialize prefix sum array\n    prefix_sum = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    \n    # Fill the prefix sum array\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z] = A[x-1][y-1][z-1] + \\\n                                      prefix_sum[x-1][y][z] + \\\n                                      prefix_sum[x][y-1][z] + \\\n                                      prefix_sum[x][y][z-1] - \\\n                                      prefix_sum[x-1][y-1][z] - \\\n                                      prefix_sum[x-1][y][z-1] - \\\n                                      prefix_sum[x][y-1][z-1] + \\\n                                      prefix_sum[x-1][y-1][z-1]\n    \n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        \n        # Calculate the result using the prefix sum array\n        result = prefix_sum[Rx][Ry][Rz] - \\\n                 prefix_sum[Lx-1][Ry][Rz] - \\\n                 prefix_sum[Rx][Ly-1][Rz] - \\\n                 prefix_sum[Rx][Ry][Lz-1] + \\\n                 prefix_sum[Lx-1][Ly-1][Rz] + \\\n                 prefix_sum[Lx-1][Ry][Lz-1] + \\\n                 prefix_sum[Rx][Ly-1][Lz-1] - \\\n                 prefix_sum[Lx-1][Ly-1][Lz-1]\n        \n        results.append(result)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read N\n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    # Read the 3D array A\n    A = []\n    for _ in range(N):\n        row = list(map(int, data[index:index+N]))\n        A.append(row)\n        index += N\n    \n    # Read Q\n    Q = int(data[index])\n    index += 1\n    \n    # Initialize prefix sum array\n    prefix_sum = [[[0 for _ in range(N+1)] for _ in range(N+1)] for _ in range(N+1)]\n    \n    # Fill the prefix sum array\n    for x in range(1, N+1):\n        for y in range(1, N+1):\n            for z in range(1, N+1):\n                prefix_sum[x][y][z] = A[x-1][y-1][z-1] + \\\n                                      prefix_sum[x-1][y][z] + \\\n                                      prefix_sum[x][y-1][z] + \\\n                                      prefix_sum[x][y][z-1] - \\\n                                      prefix_sum[x-1][y-1][z] - \\\n                                      prefix_sum[x-1][y][z-1] - \\\n                                      prefix_sum[x][y-1][z-1] + \\\n                                      prefix_sum[x-1][y-1][z-1]\n    \n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index+6])\n        index += 6\n        \n        # Calculate the result using the prefix sum array\n        result = prefix_sum[Rx][Ry][Rz] - \\\n                 prefix_sum[Lx-1][Ry][Rz] - \\\n                 prefix_sum[Rx][Ly-1][Rz] - \\\n                 prefix_sum[Rx][Ry][Lz-1] + \\\n                 prefix_sum[Lx-1][Ly-1][Rz] + \\\n                 prefix_sum[Lx-1][Ry][Lz-1] + \\\n                 prefix_sum[Rx][Ly-1][Lz-1] - \\\n                 prefix_sum[Lx-1][Ly-1][Lz-1]\n        \n        results.append(result)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\nmain()\n```"}
{"task_id": "abc371_c", "code": "def min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read N\n    N = int(data[index])\n    index += 1\n    \n    # Read M_G and edges for G\n    M_G = int(data[index])\n    index += 1\n    adj_G = [[0] * N for _ in range(N)]\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        adj_G[u][v] = 1\n        adj_G[v][u] = 1\n        index += 2\n    \n    # Read M_H and edges for H\n    M_H = int(data[index])\n    index += 1\n    adj_H = [[0] * N for _ in range(N)]\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        adj_H[a][b] = 1\n        adj_H[b][a] = 1\n        index += 2\n    \n    # Read cost matrix A\n    A = []\n    for i in range(N - 1):\n        row = list(map(int, data[index:index + N - i - 1]))\n        A.append(row)\n        index += N - i - 1\n    \n    # Calculate the cost to make H isomorphic to G\n    total_cost = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if adj_G[i][j] != adj_H[i][j]:\n                total_cost += abs(adj_G[i][j] - adj_H[i][j]) * A[i][j]\n    \n    print(total_cost)\n\nmin_cost_to_isomorphic()", "passed": false, "raw_code": "```python\ndef min_cost_to_isomorphic():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read N\n    N = int(data[index])\n    index += 1\n    \n    # Read M_G and edges for G\n    M_G = int(data[index])\n    index += 1\n    adj_G = [[0] * N for _ in range(N)]\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        adj_G[u][v] = 1\n        adj_G[v][u] = 1\n        index += 2\n    \n    # Read M_H and edges for H\n    M_H = int(data[index])\n    index += 1\n    adj_H = [[0] * N for _ in range(N)]\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        adj_H[a][b] = 1\n        adj_H[b][a] = 1\n        index += 2\n    \n    # Read cost matrix A\n    A = []\n    for i in range(N - 1):\n        row = list(map(int, data[index:index + N - i - 1]))\n        A.append(row)\n        index += N - i - 1\n    \n    # Calculate the cost to make H isomorphic to G\n    total_cost = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if adj_G[i][j] != adj_H[i][j]:\n                total_cost += abs(adj_G[i][j] - adj_H[i][j]) * A[i][j]\n    \n    print(total_cost)\n\nmin_cost_to_isomorphic()\n```"}
{"task_id": "3584", "code": "def find_indices(word1, word2):\n    indices = []\n    change_made = False\n    \n    i = 0\n    j = 0\n    \n    while j < len(word2):\n        if word1[i] != word2[j]:\n            if change_made:\n                return []\n            else:\n                change_made = True\n                indices.append(i)\n        else:\n            indices.append(i)\n        \n        i += 1\n        j += 1\n    \n    return indices", "passed": false, "raw_code": "```python\ndef find_indices(word1, word2):\n    indices = []\n    change_made = False\n    \n    i = 0\n    j = 0\n    \n    while j < len(word2):\n        if word1[i] != word2[j]:\n            if change_made:\n                return []\n            else:\n                change_made = True\n                indices.append(i)\n        else:\n            indices.append(i)\n        \n        i += 1\n        j += 1\n    \n    return indices\n```"}
{"task_id": "3510", "code": "def maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        for h in range(mh, 0, -1):\n            if h not in used_heights:\n                used_heights.add(h)\n                total_sum += h\n                break\n        else:\n            return -1\n    \n    return total_sum", "passed": false, "raw_code": "```python\ndef maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for mh in maximumHeight:\n        for h in range(mh, 0, -1):\n            if h not in used_heights:\n                used_heights.add(h)\n                total_sum += h\n                break\n        else:\n            return -1\n    \n    return total_sum\n```"}
{"task_id": "3570", "code": "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Helper function to check if a substring has all vowels\n    def has_all_vowels(substring):\n        return all(vowel in substring for vowel in vowels)\n    \n    # Sliding window approach\n    for i in range(n):\n        seen_vowels = set()\n        consonant_count = 0\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                seen_vowels.add(char)\n            else:\n                consonant_count += 1\n            \n            # Check if the current window has exactly k consonants and all vowels\n            if consonant_count == k and has_all_vowels(word[i:j+1]):\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Helper function to check if a substring has all vowels\n    def has_all_vowels(substring):\n        return all(vowel in substring for vowel in vowels)\n    \n    # Sliding window approach\n    for i in range(n):\n        seen_vowels = set()\n        consonant_count = 0\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                seen_vowels.add(char)\n            else:\n                consonant_count += 1\n            \n            # Check if the current window has exactly k consonants and all vowels\n            if consonant_count == k and has_all_vowels(word[i:j+1]):\n                count += 1\n    \n    return count\n```"}
{"final_accuracy": "24.32%"}
