{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 16, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_OUR01_qwen_7b_easy_n_16.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    s = input()\n    result = s.replace('.', '')\n    print(result)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    s = input()\n    result = s.replace('.', '')\n    print(result)\n\nremove_dots()\n```"}
{"task_id": "3606", "code": "def min_digit_sum(nums):\n    return min(sum(int(digit) for digit in str(num)) for num in nums)", "passed": true, "raw_code": "```python\ndef min_digit_sum(nums):\n    return min(sum(int(digit) for digit in str(num)) for num in nums)\n```"}
{"task_id": "abc367_b", "code": "def simplify_number():\n    import sys\n    x = float(sys.stdin.read().strip())\n    \n    # Convert the number to a string and remove trailing zeros\n    simplified_str = \"{:.3f}\".format(x).rstrip('0').rstrip('.')\n    \n    # Print the simplified string\n    print(simplified_str)\n\n# Call the function\nsimplify_number()", "passed": true, "raw_code": "```python\ndef simplify_number():\n    import sys\n    x = float(sys.stdin.read().strip())\n    \n    # Convert the number to a string and remove trailing zeros\n    simplified_str = \"{:.3f}\".format(x).rstrip('0').rstrip('.')\n    \n    # Print the simplified string\n    print(simplified_str)\n\n# Call the function\nsimplify_number()\n```"}
{"task_id": "abc368_a", "code": "def rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N, K = int(data[0]), int(data[1])\n    cards = list(map(int, data[2:]))\n    cards = cards[N-K:] + cards[:N-K]\n    print(' '.join(map(str, cards)))\n\nrearrange_cards()", "passed": true, "raw_code": "def rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N, K = int(data[0]), int(data[1])\n    cards = list(map(int, data[2:]))\n    cards = cards[N-K:] + cards[:N-K]\n    print(' '.join(map(str, cards)))\n\nrearrange_cards()"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    majority = (N + 1) // 2\n    \n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()", "passed": true, "raw_code": "```python\ndef determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    majority = (N + 1) // 2\n    \n    if T >= majority or A >= majority:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n    \n    if (B <= A < C) or (C <= A < B):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncan_shout_takoyaki()", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n    \n    if (B <= A < C) or (C <= A < B):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncan_shout_takoyaki()\n```"}
{"task_id": "abc373_a", "code": "def main():\n    count = 0\n    for i in range(12):\n        s = input().strip()\n        if len(s) == i + 1:\n            count += 1\n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    count = 0\n    for i in range(12):\n        s = input().strip()\n        if len(s) == i + 1:\n            count += 1\n    print(count)\n\nmain()\n```"}
{"task_id": "3555", "code": "def modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] *= multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef modifyArray(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        min_index = nums.index(min_val)\n        nums[min_index] *= multiplier\n    return nums\n```"}
{"task_id": "3567", "code": "def binary_representation(date: str) -> str:\n    # Split the date string into year, month, and day\n    parts = date.split('-')\n    \n    # Convert each part to an integer and then to binary\n    year_binary = bin(int(parts[0]))[2:]\n    month_binary = bin(int(parts[1]))[2:]\n    day_binary = bin(int(parts[2]))[2:]\n    \n    # Return the concatenated binary strings in the year-month-day format\n    return f\"{year_binary}-{month_binary}-{day_binary}\"", "passed": true, "raw_code": "```python\ndef binary_representation(date: str) -> str:\n    # Split the date string into year, month, and day\n    parts = date.split('-')\n    \n    # Convert each part to an integer and then to binary\n    year_binary = bin(int(parts[0]))[2:]\n    month_binary = bin(int(parts[1]))[2:]\n    day_binary = bin(int(parts[2]))[2:]\n    \n    # Return the concatenated binary strings in the year-month-day format\n    return f\"{year_binary}-{month_binary}-{day_binary}\"\n```"}
{"task_id": "abc365_a", "code": "def days_in_year(Y):\n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Example usage\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nY = int(data[0])\ndays_in_year(Y)", "passed": true, "raw_code": "```python\ndef days_in_year(Y):\n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Example usage\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nY = int(data[0])\ndays_in_year(Y)\n```"}
{"task_id": "3600", "code": "def find_kth_character(k):\n    # Initialize variables\n    word = \"a\"\n    current_length = 1\n    \n    # Perform operations until the string length is at least k\n    while current_length < k:\n        # Generate the next string\n        next_string = ''.join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n        # Append the next string to the original word\n        word += next_string\n        # Update the current length\n        current_length *= 2\n    \n    # Find the exact position within the last cycle\n    position_in_last_cycle = (k - 1) % current_length\n    # Return the character at that position\n    return word[position_in_last_cycle]", "passed": true, "raw_code": "```python\ndef find_kth_character(k):\n    # Initialize variables\n    word = \"a\"\n    current_length = 1\n    \n    # Perform operations until the string length is at least k\n    while current_length < k:\n        # Generate the next string\n        next_string = ''.join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n        # Append the next string to the original word\n        word += next_string\n        # Update the current length\n        current_length *= 2\n    \n    # Find the exact position within the last cycle\n    position_in_last_cycle = (k - 1) % current_length\n    # Return the character at that position\n    return word[position_in_last_cycle]\n```"}
{"task_id": "3519", "code": "def countWinningPlayers(n, pick):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of balls picked by each player for each color\n    player_balls = defaultdict(lambda: defaultdict(int))\n    \n    # Update the count of balls for each pick\n    for p in pick:\n        player_id, color = p\n        player_balls[player_id][color] += 1\n    \n    # Count the number of winning players\n    winning_players = 0\n    for i in range(n):\n        if any(count >= i + 1 for count in player_balls[i].values()):\n            winning_players += 1\n    \n    return winning_players", "passed": true, "raw_code": "```python\ndef countWinningPlayers(n, pick):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of balls picked by each player for each color\n    player_balls = defaultdict(lambda: defaultdict(int))\n    \n    # Update the count of balls for each pick\n    for p in pick:\n        player_id, color = p\n        player_balls[player_id][color] += 1\n    \n    # Count the number of winning players\n    winning_players = 0\n    for i in range(n):\n        if any(count >= i + 1 for count in player_balls[i].values()):\n            winning_players += 1\n    \n    return winning_players\n```"}
{"task_id": "abc370_b", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = []\nindex = 1\nfor i in range(N):\n    row = list(map(int, data[index:index + N - i]))\n    A.append(row)\n    index += N - i\n\ncurrent_element = 1\nfor i in range(1, N):\n    current_element = A[current_element - 1][i - 1]\n\nprint(current_element)", "passed": false, "raw_code": "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = []\nindex = 1\nfor i in range(N):\n    row = list(map(int, data[index:index + N - i]))\n    A.append(row)\n    index += N - i\n\ncurrent_element = 1\nfor i in range(1, N):\n    current_element = A[current_element - 1][i - 1]\n\nprint(current_element)\n```"}
{"task_id": "abc368_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nmain()\n```"}
{"task_id": "abc370_a", "code": "def check_hand_raising(L, R):\n    if L == 1 and R == 0:\n        return \"Yes\"\n    elif L == 0 and R == 1:\n        return \"Yes\"\n    elif L == 1 and R == 1:\n        return \"Invalid\"\n    elif L == 0 and R == 0:\n        return \"Invalid\"\n    else:\n        return \"Invalid\"\n\n# Read input from standard input\nimport sys\ninput_line = sys.stdin.readline().strip()\nL, R = map(int, input_line.split())\n\n# Print the result\nprint(check_hand_raising(L, R))", "passed": false, "raw_code": "```python\ndef check_hand_raising(L, R):\n    if L == 1 and R == 0:\n        return \"Yes\"\n    elif L == 0 and R == 1:\n        return \"Yes\"\n    elif L == 1 and R == 1:\n        return \"Invalid\"\n    elif L == 0 and R == 0:\n        return \"Invalid\"\n    else:\n        return \"Invalid\"\n\n# Read input from standard input\nimport sys\ninput_line = sys.stdin.readline().strip()\nL, R = map(int, input_line.split())\n\n# Print the result\nprint(check_hand_raising(L, R))\n```"}
{"task_id": "abc371_b", "code": "def determine_taro_name(N, M, babies):\n    # Initialize a list to store the index of the earliest born male child in each family\n    earliest_born = [-1] * N\n    \n    for i in range(M):\n        family, gender = babies[i]\n        family -= 1  # Convert family index to zero-based\n        \n        if gender == 'M':\n            # Check if this is the earliest born male child in this family\n            if earliest_born[family] == -1 or family < earliest_born[family]:\n                earliest_born[family] = family\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            # If the baby is a girl, they cannot be Taro\n            print(\"No\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbabies = []\nfor i in range(2, 2 + 2 * M, 2):\n    babies.append((int(data[i]), data[i + 1]))\n\n# Determine and print the names\ndetermine_taro_name(N, M, babies)", "passed": true, "raw_code": "```python\ndef determine_taro_name(N, M, babies):\n    # Initialize a list to store the index of the earliest born male child in each family\n    earliest_born = [-1] * N\n    \n    for i in range(M):\n        family, gender = babies[i]\n        family -= 1  # Convert family index to zero-based\n        \n        if gender == 'M':\n            # Check if this is the earliest born male child in this family\n            if earliest_born[family] == -1 or family < earliest_born[family]:\n                earliest_born[family] = family\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            # If the baby is a girl, they cannot be Taro\n            print(\"No\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nbabies = []\nfor i in range(2, 2 + 2 * M, 2):\n    babies.append((int(data[i]), data[i + 1]))\n\n# Determine and print the names\ndetermine_taro_name(N, M, babies)\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for i, num in enumerate(A):\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif first_max > num > second_max:\n            second_max = num\n    \n    print(A.index(second_max) + 1)\n\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for i, num in enumerate(A):\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif first_max > num > second_max:\n            second_max = num\n    \n    print(A.index(second_max) + 1)\n\nfind_second_largest_index()\n```"}
{"task_id": "3553", "code": "def are_squares_same_color(coordinate1: str, coordinate2: str) -> bool:\n    columns = \"abcdefgh\"\n    col1_index = columns.index(coordinate1[0]) + 1\n    col2_index = columns.index(coordinate2[0]) + 1\n    row1 = int(coordinate1[1])\n    row2 = int(coordinate2[1])\n    return (col1_index + row1) % 2 == (col2_index + row2) % 2", "passed": true, "raw_code": "```python\ndef are_squares_same_color(coordinate1: str, coordinate2: str) -> bool:\n    columns = \"abcdefgh\"\n    col1_index = columns.index(coordinate1[0]) + 1\n    col2_index = columns.index(coordinate2[0]) + 1\n    row1 = int(coordinate1[1])\n    row2 = int(coordinate2[1])\n    return (col1_index + row1) % 2 == (col2_index + row2) % 2\n```"}
{"task_id": "abc366_b", "code": "def vertical_text():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    strings = data[1:]\n    \n    # Determine the maximum length of the strings\n    max_length = max(len(s) for s in strings)\n    \n    # Initialize the vertical strings with empty lists\n    vertical_strings = [[] for _ in range(max_length)]\n    \n    # Process each character position from the last character of the shortest string to the first character of the longest string\n    for i in range(max_length - 1, -1, -1):\n        for j in range(N - 1, -1, -1):\n            if i < len(strings[j]):\n                vertical_strings[i].append(strings[j][i])\n            else:\n                vertical_strings[i].append('*')\n    \n    # Print the vertical strings, ensuring no string ends with an asterisk\n    for vs in vertical_strings:\n        while vs and vs[-1] == '*':\n            vs.pop()\n        print(''.join(vs))\n\nvertical_text()", "passed": true, "raw_code": "```python\ndef vertical_text():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    strings = data[1:]\n    \n    # Determine the maximum length of the strings\n    max_length = max(len(s) for s in strings)\n    \n    # Initialize the vertical strings with empty lists\n    vertical_strings = [[] for _ in range(max_length)]\n    \n    # Process each character position from the last character of the shortest string to the first character of the longest string\n    for i in range(max_length - 1, -1, -1):\n        for j in range(N - 1, -1, -1):\n            if i < len(strings[j]):\n                vertical_strings[i].append(strings[j][i])\n            else:\n                vertical_strings[i].append('*')\n    \n    # Print the vertical strings, ensuring no string ends with an asterisk\n    for vs in vertical_strings:\n        while vs and vs[-1] == '*':\n            vs.pop()\n        print(''.join(vs))\n\nvertical_text()\n```"}
{"task_id": "3568", "code": "def min_key(num1, num2, num3):\n    num1 = str(num1).zfill(4)\n    num2 = str(num2).zfill(4)\n    num3 = str(num3).zfill(4)\n    \n    key = ''.join(min(num1[i], num2[i], num3[i]) for i in range(4))\n    \n    return int(key) if key != '0000' else 0", "passed": true, "raw_code": "```python\ndef min_key(num1, num2, num3):\n    num1 = str(num1).zfill(4)\n    num2 = str(num2).zfill(4)\n    num3 = str(num3).zfill(4)\n    \n    key = ''.join(min(num1[i], num2[i], num3[i]) for i in range(4))\n    \n    return int(key) if key != '0000' else 0\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    x, y = 0, 0  # Start at the top-left corner, cell 0\n    for command in commands:\n        if command == \"UP\":\n            x -= 1\n        elif command == \"DOWN\":\n            x += 1\n        elif command == \"LEFT\":\n            y -= 1\n        elif command == \"RIGHT\":\n            y += 1\n        # Ensure the snake stays within the grid boundaries\n        x = max(0, min(n - 1, x))\n        y = max(0, min(n - 1, y))\n    return x * n + y", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    x, y = 0, 0  # Start at the top-left corner, cell 0\n    for command in commands:\n        if command == \"UP\":\n            x -= 1\n        elif command == \"DOWN\":\n            x += 1\n        elif command == \"LEFT\":\n            y -= 1\n        elif command == \"RIGHT\":\n            y += 1\n        # Ensure the snake stays within the grid boundaries\n        x = max(0, min(n - 1, x))\n        y = max(0, min(n - 1, y))\n    return x * n + y\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    # Map each character to its index in the string S\n    char_to_index = {char: idx for idx, char in enumerate(S)}\n    \n    # Initial position of the finger at the index of 'A'\n    start_position = char_to_index['A']\n    total_distance = 0\n    \n    # Iterate through each character from 'B' to 'Z'\n    for char in range(ord('B'), ord('Z') + 1):\n        current_char = chr(char)\n        # Calculate the absolute difference between the current position and the new position\n        distance = abs(start_position - char_to_index[current_char])\n        # Update the total traveled distance\n        total_distance += distance\n        # Move the finger to the new position\n        start_position = char_to_index[current_char]\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with the input from standard input\nmin_traveled_distance(input())", "passed": true, "raw_code": "```python\ndef min_traveled_distance(S):\n    # Map each character to its index in the string S\n    char_to_index = {char: idx for idx, char in enumerate(S)}\n    \n    # Initial position of the finger at the index of 'A'\n    start_position = char_to_index['A']\n    total_distance = 0\n    \n    # Iterate through each character from 'B' to 'Z'\n    for char in range(ord('B'), ord('Z') + 1):\n        current_char = chr(char)\n        # Calculate the absolute difference between the current position and the new position\n        distance = abs(start_position - char_to_index[current_char])\n        # Update the total traveled distance\n        total_distance += distance\n        # Move the finger to the new position\n        start_position = char_to_index[current_char]\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with the input from standard input\nmin_traveled_distance(input())\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB, S_AC, S_BC = data[0], data[1], data[2]\n    \n    # Determine the age order based on the relationships\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        return 'B'\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        return 'C'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        return 'A'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        return 'B'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        return 'A'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        return 'B'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        return 'C'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        return 'A'\n\n# Call the function to print the output\nprint(find_middle_brother())", "passed": false, "raw_code": "```python\ndef find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB, S_AC, S_BC = data[0], data[1], data[2]\n    \n    # Determine the age order based on the relationships\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        return 'B'\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        return 'C'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        return 'A'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        return 'B'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        return 'A'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        return 'B'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        return 'C'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        return 'A'\n\n# Call the function to print the output\nprint(find_middle_brother())\n```"}
{"task_id": "abc369_b", "code": "def min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    left_hand = 1\n    right_hand = 100\n    fatigue = 0\n    \n    index = 1\n    for _ in range(N):\n        key = int(data[index])\n        hand_side = data[index + 1]\n        \n        if hand_side == 'L':\n            if key < left_hand:\n                fatigue += abs(key - left_hand)\n                left_hand = key\n            elif key > left_hand:\n                fatigue += abs(key - left_hand)\n                left_hand = key\n        elif hand_side == 'R':\n            if key < right_hand:\n                fatigue += abs(key - right_hand)\n                right_hand = key\n            elif key > right_hand:\n                fatigue += abs(key - right_hand)\n                right_hand = key\n        \n        index += 2\n    \n    print(fatigue)\n\nmin_fatigue_level()", "passed": false, "raw_code": "```python\ndef min_fatigue_level():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    left_hand = 1\n    right_hand = 100\n    fatigue = 0\n    \n    index = 1\n    for _ in range(N):\n        key = int(data[index])\n        hand_side = data[index + 1]\n        \n        if hand_side == 'L':\n            if key < left_hand:\n                fatigue += abs(key - left_hand)\n                left_hand = key\n            elif key > left_hand:\n                fatigue += abs(key - left_hand)\n                left_hand = key\n        elif hand_side == 'R':\n            if key < right_hand:\n                fatigue += abs(key - right_hand)\n                right_hand = key\n            elif key > right_hand:\n                fatigue += abs(key - right_hand)\n                right_hand = key\n        \n        index += 2\n    \n    print(fatigue)\n\nmin_fatigue_level()\n```"}
{"task_id": "abc369_a", "code": "def count_valid_x(A, B):\n    count = 0\n    # Check permutations of A, B, x\n    for x in range(min(A, B) - 100, max(A, B) + 100):\n        if (B - A == x - B) or (A - B == x - A) or (B - x == A - B) or (x - B == A - x) or (A - x == B - A) or (x - A == B - x):\n            count += 1\n    return count\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_valid_x(A, B))", "passed": true, "raw_code": "```python\ndef count_valid_x(A, B):\n    count = 0\n    # Check permutations of A, B, x\n    for x in range(min(A, B) - 100, max(A, B) + 100):\n        if (B - A == x - B) or (A - B == x - A) or (B - x == A - B) or (x - B == A - x) or (A - x == B - A) or (x - A == B - x):\n            count += 1\n    return count\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_valid_x(A, B))\n```"}
{"task_id": "3543", "code": "def count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    zero_count = 0\n    one_count = 0\n    \n    left = 0\n    for right in range(n):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > k and one_count > k:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        count += right - left + 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    zero_count = 0\n    one_count = 0\n    \n    left = 0\n    for right in range(n):\n        if s[right] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        while zero_count > k and one_count > k:\n            if s[left] == '0':\n                zero_count -= 1\n            else:\n                one_count -= 1\n            left += 1\n        \n        count += right - left + 1\n    \n    return count\n```"}
{"final_accuracy": "80.77%"}
