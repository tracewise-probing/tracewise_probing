{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09__qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    S = sys.stdin.read().strip()\n    result = S.replace('.', '')\n    print(result)\n\nremove_dots()", "passed": true, "raw_code": "def remove_dots():\n    import sys\n    S = sys.stdin.read().strip()\n    result = S.replace('.', '')\n    print(result)\n\nremove_dots()"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n\n    if A == B or (B < A < C) or (C > A >= B):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncan_shout_takoyaki()", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    A = int(data[0])\n    B = int(data[1])\n    C = int(data[2])\n\n    if A == B or (B < A < C) or (C > A >= B):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncan_shout_takoyaki()\n```"}
{"task_id": "abc373_a", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()\n```"}
{"task_id": "abc368_b", "code": "def count_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\ncount_operations()", "passed": true, "raw_code": "```python\ndef count_operations():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\ncount_operations()\n```"}
{"task_id": "3606", "code": "def min_sum_of_digits(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    transformed_nums = [sum_of_digits(num) for num in nums]\n    return min(transformed_nums)", "passed": true, "raw_code": "```python\ndef min_sum_of_digits(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    transformed_nums = [sum_of_digits(num) for num in nums]\n    return min(transformed_nums)\n```"}
{"task_id": "3600", "code": "def find_kth_character(k):\n    # Determine the effective length of the repeating sequence\n    base_length = 26\n    \n    # Calculate the position within the repeating sequence\n    position = (k - 1) % base_length\n    \n    # Return the character at the calculated position\n    return chr(97 + position)", "passed": false, "raw_code": "```python\ndef find_kth_character(k):\n    # Determine the effective length of the repeating sequence\n    base_length = 26\n    \n    # Calculate the position within the repeating sequence\n    position = (k - 1) % base_length\n    \n    # Return the character at the calculated position\n    return chr(97 + position)\n```"}
{"task_id": "abc367_b", "code": "def format_number():\n    import sys\n    x = float(sys.stdin.read().strip())\n    formatted_x = \"{:.{}f}\".format(x, 3).rstrip('0').rstrip('.')\n    print(formatted_x)\n\nformat_number()", "passed": true, "raw_code": "```python\ndef format_number():\n    import sys\n    x = float(sys.stdin.read().strip())\n    formatted_x = \"{:.{}f}\".format(x, 3).rstrip('0').rstrip('.')\n    print(formatted_x)\n\nformat_number()\n```"}
{"task_id": "abc370_b", "code": "d", "passed": false, "raw_code": "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = []\n    for i in range(N):\n        row = list(map(int, data[index:index + N]))\n        A.append(row)\n        index += N\n    \n    current = 1\n    for i in range(1, N):\n        if i >= current:\n            current = A[i][current - 1]\n        else:\n            current = A[current - 1][i]\n    \n    print(current)\n\nsolve()"}
{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09__qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "3555", "code": "def min_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_index = nums.index(min(nums))\n        nums[min_index] *= multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef min_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_index = nums.index(min(nums))\n        nums[min_index] *= multiplier\n    return nums\n```"}
{"task_id": "3567", "code": "def binary_date(date):\n    # Split the date string into year, month, and day\n    parts = date.split('-')\n    \n    # Convert each part to an integer and then to binary, removing the '0b' prefix\n    binary_year = bin(int(parts[0]))[2:]\n    binary_month = bin(int(parts[1]))[2:]\n    binary_day = bin(int(parts[2]))[2:]\n    \n    # Concatenate the binary parts with hyphens\n    return f\"{binary_year}-{binary_month}-{binary_day}\"", "passed": true, "raw_code": "```python\ndef binary_date(date):\n    # Split the date string into year, month, and day\n    parts = date.split('-')\n    \n    # Convert each part to an integer and then to binary, removing the '0b' prefix\n    binary_year = bin(int(parts[0]))[2:]\n    binary_month = bin(int(parts[1]))[2:]\n    binary_day = bin(int(parts[2]))[2:]\n    \n    # Concatenate the binary parts with hyphens\n    return f\"{binary_year}-{binary_month}-{binary_day}\"\n```"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    half_N = N // 2\n    \n    if T > half_N or A > half_N:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()", "passed": true, "raw_code": "```python\ndef determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    half_N = N // 2\n    \n    if T > half_N or A > half_N:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()\n```"}
{"task_id": "abc368_a", "code": "d", "passed": false, "raw_code": "```python\ndef rearrange_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Split the list into two parts\n    top_part = A[:N-K]\n    bottom_part = A[N-K:]\n    \n    # Reverse the bottom part\n    bottom_part.reverse()\n    \n    # Concatenate the reversed bottom part with the top part\n    result = bottom_part + top_part\n    \n    # Print the result\n    print(' '.join(map(str, result)))\n\nrearrange_cards()"}
{"task_id": "3543", "code": "def count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zero_count = 0\n        one_count = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zero_count = 0\n        one_count = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_position():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('inf')\n    \n    for num in A:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif first_max > num > second_max:\n            second_max = num\n    \n    # Find the index of the second largest element\n    for i in range(N):\n        if A[i] == second_max:\n            print(i + 1)\n            break\n\nfind_second_largest_position()", "passed": true, "raw_code": "```python\ndef find_second_largest_position():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('inf')\n    \n    for num in A:\n        if num > first_max:\n            second_max = first_max\n            first_max = num\n        elif first_max > num > second_max:\n            second_max = num\n    \n    # Find the index of the second largest element\n    for i in range(N):\n        if A[i] == second_max:\n            print(i + 1)\n            break\n\nfind_second_largest_position()\n```"}
{"task_id": "abc365_a", "code": "def get_days_in_year(Y):\n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Call the function with input from stdin\nimport sys\nget_days_in_year(int(sys.stdin.read().strip()))", "passed": true, "raw_code": "```python\ndef get_days_in_year(Y):\n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Call the function with input from stdin\nimport sys\nget_days_in_year(int(sys.stdin.read().strip()))\n```"}
{"task_id": "abc366_b", "code": "def vertical_text_conversion():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    strings = data[1:N+1]\n    \n    max_length = max(len(s) for s in strings)\n    \n    vertical_text = []\n    for col in range(max_length):\n        column_str = ''.join(strings[i][col] if col < len(strings[i]) else '*' for i in range(N-1, -1, -1))\n        vertical_text.append(column_str)\n    \n    for text in vertical_text:\n        print(text)\n\n# Call the function\nvertical_text_conversion()", "passed": false, "raw_code": "```python\ndef vertical_text_conversion():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    strings = data[1:N+1]\n    \n    max_length = max(len(s) for s in strings)\n    \n    vertical_text = []\n    for col in range(max_length):\n        column_str = ''.join(strings[i][col] if col < len(strings[i]) else '*' for i in range(N-1, -1, -1))\n        vertical_text.append(column_str)\n    \n    for text in vertical_text:\n        print(text)\n\n# Call the function\nvertical_text_conversion()\n```"}
{"task_id": "abc370_a", "code": "def check_takoyaki(L, R):\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"Yes\")\n    else:\n        print(\"Invalid\")\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\ncheck_takoyaki(L, R)", "passed": false, "raw_code": "```python\ndef check_takoyaki(L, R):\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"Yes\")\n    else:\n        print(\"Invalid\")\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\ncheck_takoyaki(L, R)\n```"}
{"task_id": "abc371_b", "code": "def determine_taro_names():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Initialize a list to keep track of the earliest-born male child's index in each family\n    earliest_male_indices = [-1] * N\n    \n    result = []\n    \n    for i in range(M):\n        family_index = int(data[2 + 2 * i]) - 1\n        gender = data[3 + 2 * i]\n        \n        if gender == 'M':\n            if earliest_male_indices[family_index] == -1 or i < earliest_male_indices[family_index]:\n                earliest_male_indices[family_index] = i\n                result.append(\"Yes\")\n            else:\n                result.append(\"No\")\n        else:\n            result.append(\"No\")\n    \n    for answer in result:\n        print(answer)\n\ndetermine_taro_names()", "passed": true, "raw_code": "```python\ndef determine_taro_names():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Initialize a list to keep track of the earliest-born male child's index in each family\n    earliest_male_indices = [-1] * N\n    \n    result = []\n    \n    for i in range(M):\n        family_index = int(data[2 + 2 * i]) - 1\n        gender = data[3 + 2 * i]\n        \n        if gender == 'M':\n            if earliest_male_indices[family_index] == -1 or i < earliest_male_indices[family_index]:\n                earliest_male_indices[family_index] = i\n                result.append(\"Yes\")\n            else:\n                result.append(\"No\")\n        else:\n            result.append(\"No\")\n    \n    for answer in result:\n        print(answer)\n\ndetermine_taro_names()\n```"}
{"task_id": "3553", "code": "def is_same_color(coordinate1: str, coordinate2: str) -> bool:\n    return (ord(coordinate1[0]) + ord(coordinate1[1])) % 2 == (ord(coordinate2[0]) + ord(coordinate2[1])) % 2", "passed": true, "raw_code": "```python\ndef is_same_color(coordinate1: str, coordinate2: str) -> bool:\n    return (ord(coordinate1[0]) + ord(coordinate1[1])) % 2 == (ord(coordinate2[0]) + ord(coordinate2[1])) % 2\n```"}
{"task_id": "3568", "code": "def find_key(num1, num2, num3):\n    # Pad numbers with leading zeros to make them four digits long\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Initialize an empty string to build the key\n    key = \"\"\n    \n    # Iterate over each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))\n        # Append the minimum digit to the key\n        key += str(min_digit)\n    \n    # Convert the key to an integer and return it\n    return int(key) if key != \"0000\" else 0", "passed": true, "raw_code": "```python\ndef find_key(num1, num2, num3):\n    # Pad numbers with leading zeros to make them four digits long\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Initialize an empty string to build the key\n    key = \"\"\n    \n    # Iterate over each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))\n        # Append the minimum digit to the key\n        key += str(min_digit)\n    \n    # Convert the key to an integer and return it\n    return int(key) if key != \"0000\" else 0\n```"}
{"task_id": "abc373_b", "code": "def min_traveled_distance(S):\n    # Create a dictionary to map each character to its index in the string S\n    char_index = {char: idx for idx, char in enumerate(S)}\n    \n    # Initialize the total distance traveled\n    total_distance = 0\n    \n    # Iterate through the characters from 'A' to 'Z'\n    for i in range(1, 27):\n        char = chr(ord('A') + i - 1)\n        if char in char_index:\n            # Add the distance from the previous character to the current character\n            if i > 1:\n                prev_char = chr(ord('A') + i - 2)\n                total_distance += abs(char_index[char] - char_index[prev_char])\n    \n    # Print the total distance traveled\n    print(total_distance)\n\n# Call the function with the input from standard input\nmin_traveled_distance(input())", "passed": true, "raw_code": "```python\ndef min_traveled_distance(S):\n    # Create a dictionary to map each character to its index in the string S\n    char_index = {char: idx for idx, char in enumerate(S)}\n    \n    # Initialize the total distance traveled\n    total_distance = 0\n    \n    # Iterate through the characters from 'A' to 'Z'\n    for i in range(1, 27):\n        char = chr(ord('A') + i - 1)\n        if char in char_index:\n            # Add the distance from the previous character to the current character\n            if i > 1:\n                prev_char = chr(ord('A') + i - 2)\n                total_distance += abs(char_index[char] - char_index[prev_char])\n    \n    # Print the total distance traveled\n    print(total_distance)\n\n# Call the function with the input from standard input\nmin_traveled_distance(input())\n```"}
{"task_id": "3519", "code": "def countWinners(n, pick):\n    # Initialize a list to keep track of the number of balls each player has picked for each color\n    player_balls = [{} for _ in range(n)]\n    \n    # Update the count for each player and color\n    for player, color in pick:\n        if color not in player_balls[player]:\n            player_balls[player][color] = 0\n        player_balls[player][color] += 1\n    \n    # Count the number of players who win\n    winners = 0\n    for player, colors in enumerate(player_balls):\n        for _, count in colors.items():\n            if count > player:\n                winners += 1\n                break\n    \n    return winners", "passed": true, "raw_code": "```python\ndef countWinners(n, pick):\n    # Initialize a list to keep track of the number of balls each player has picked for each color\n    player_balls = [{} for _ in range(n)]\n    \n    # Update the count for each player and color\n    for player, color in pick:\n        if color not in player_balls[player]:\n            player_balls[player][color] = 0\n        player_balls[player][color] += 1\n    \n    # Count the number of players who win\n    winners = 0\n    for player, colors in enumerate(player_balls):\n        for _, count in colors.items():\n            if count > player:\n                winners += 1\n                break\n    \n    return winners\n```"}
{"task_id": "abc369_a", "code": "def count_valid_x(A, B):\n    count = 0\n    for x in range(-100, 201):\n        if (2 * B == A + x) or (2 * A == B + x) or (2 * x == A + B):\n            count += 1\n    return count\n\n# Read input\nA, B = map(int, input().split())\n\n# Print the result\nprint(count_valid_x(A, B))", "passed": true, "raw_code": "```python\ndef count_valid_x(A, B):\n    count = 0\n    for x in range(-100, 201):\n        if (2 * B == A + x) or (2 * A == B + x) or (2 * x == A + B):\n            count += 1\n    return count\n\n# Read input\nA, B = map(int, input().split())\n\n# Print the result\nprint(count_valid_x(A, B))\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    # Initialize the starting position of the snake\n    position = 0\n    \n    # Iterate through each command\n    for command in commands:\n        if command == \"UP\":\n            position -= n if position // n > 0 else 0\n        elif command == \"DOWN\":\n            position += n if position // n < n - 1 else 0\n        elif command == \"LEFT\":\n            position -= 1 if position % n > 0 else 0\n        elif command == \"RIGHT\":\n            position += 1 if position % n < n - 1 else 0\n    \n    return position", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    # Initialize the starting position of the snake\n    position = 0\n    \n    # Iterate through each command\n    for command in commands:\n        if command == \"UP\":\n            position -= n if position // n > 0 else 0\n        elif command == \"DOWN\":\n            position += n if position // n < n - 1 else 0\n        elif command == \"LEFT\":\n            position -= 1 if position % n > 0 else 0\n        elif command == \"RIGHT\":\n            position += 1 if position % n < n - 1 else 0\n    \n    return position\n```"}
{"task_id": "abc369_b", "code": "def min_fatigue(N, presses):\n    # Initialize the positions of the left and right hands\n    left_hand = presses[0][0]\n    right_hand = presses[0][0]\n    fatigue = 0\n    \n    for key, hand_side in presses[1:]:\n        if hand_side == 'L':\n            if abs(left_hand - key) < abs(right_hand - key):\n                # Move left hand\n                fatigue += abs(left_hand - key)\n                left_hand = key\n            else:\n                # Move right hand\n                fatigue += abs(right_hand - key)\n                right_hand = key\n        elif hand_side == 'R':\n            if abs(right_hand - key) < abs(left_hand - key):\n                # Move right hand\n                fatigue += abs(right_hand - key)\n                right_hand = key\n            else:\n                # Move left hand\n                fatigue += abs(left_hand - key)\n                left_hand = key\n    \n    return fatigue\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\npresses = [(int(data[2*i + 1]), data[2*i + 2]) for i in range(N)]\n\n# Calculate and print the result\nprint(min_fatigue(N, presses))", "passed": false, "raw_code": "```python\ndef min_fatigue(N, presses):\n    # Initialize the positions of the left and right hands\n    left_hand = presses[0][0]\n    right_hand = presses[0][0]\n    fatigue = 0\n    \n    for key, hand_side in presses[1:]:\n        if hand_side == 'L':\n            if abs(left_hand - key) < abs(right_hand - key):\n                # Move left hand\n                fatigue += abs(left_hand - key)\n                left_hand = key\n            else:\n                # Move right hand\n                fatigue += abs(right_hand - key)\n                right_hand = key\n        elif hand_side == 'R':\n            if abs(right_hand - key) < abs(left_hand - key):\n                # Move right hand\n                fatigue += abs(right_hand - key)\n                right_hand = key\n            else:\n                # Move left hand\n                fatigue += abs(left_hand - key)\n                left_hand = key\n    \n    return fatigue\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\npresses = [(int(data[2*i + 1]), data[2*i + 2]) for i in range(N)]\n\n# Calculate and print the result\nprint(min_fatigue(N, presses))\n```"}
{"task_id": "abc371_a", "code": "import sys\n\ndef determine_middle_brother():\n    input_line = sys.stdin.read().strip()\n    S_AB, S_AC, S_BC = input_line.split()\n\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        middle_brother = 'B'\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        middle_brother = 'C'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        middle_brother = 'B'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        middle_brother = 'C'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        middle_brother = 'A'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        middle_brother = 'A'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        middle_brother = 'A'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        middle_brother = 'C'\n\n    print(middle_brother)\n\ndetermine_middle_brother()", "passed": false, "raw_code": "```python\nimport sys\n\ndef determine_middle_brother():\n    input_line = sys.stdin.read().strip()\n    S_AB, S_AC, S_BC = input_line.split()\n\n    if S_AB == '<' and S_AC == '<' and S_BC == '<':\n        middle_brother = 'B'\n    elif S_AB == '<' and S_AC == '<' and S_BC == '>':\n        middle_brother = 'C'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '<':\n        middle_brother = 'B'\n    elif S_AB == '<' and S_AC == '>' and S_BC == '>':\n        middle_brother = 'C'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '<':\n        middle_brother = 'A'\n    elif S_AB == '>' and S_AC == '<' and S_BC == '>':\n        middle_brother = 'A'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '<':\n        middle_brother = 'A'\n    elif S_AB == '>' and S_AC == '>' and S_BC == '>':\n        middle_brother = 'C'\n\n    print(middle_brother)\n\ndetermine_middle_brother()\n```"}
{"final_accuracy": "69.23%"}
{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09__qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"final_accuracy": "69.23%"}
{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09__qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"final_accuracy": "69.23%"}
