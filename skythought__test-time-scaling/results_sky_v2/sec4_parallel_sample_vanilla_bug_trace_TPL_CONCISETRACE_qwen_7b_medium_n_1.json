"{\"difficulty\": \"medium\", \"num_threads\": 32, \"temperature\": 0.7, \"n\": 1, \"context\": \"all\", \"selection\": \"oracle\", \"num_round\": 1, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/sec4_parallel_sample_vanilla_bug_trace_TPL_CONCISETRACE_qwen_7b_medium_n_1.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"openai/gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"api_base\": \"http://127.0.0.1:8001/8001/v1\", \"no_refine\": true, \"no_dspy_gen\": false, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42, \"resume\": true}"
{"task_id": "3541", "codes": ["def is_spam(message: List[str], banned_words: List[str]) -> bool:\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False"], "passed": [false], "raw_code": ["```python\ndef is_spam(message: List[str], banned_words: List[str]) -> bool:\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False\n```"]}
{"task_id": "3540", "codes": ["def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result"], "passed": [true], "raw_code": ["```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result\n```"]}
{"task_id": "abc366_c", "codes": ["```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    result = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            result.append(str(len(bag)))\n    \n    for res in result:\n        print(res)\n\nprocess_queries()"], "passed": [false], "raw_code": ["```python\ndef process_queries():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    Q = int(data[0])\n    queries = data[1:]\n    \n    bag = set()\n    result = []\n    \n    index = 0\n    for _ in range(Q):\n        query_type = int(queries[index])\n        index += 1\n        \n        if query_type == 1:\n            x = int(queries[index])\n            index += 1\n            bag.add(x)\n        elif query_type == 2:\n            x = int(queries[index])\n            index += 1\n            bag.remove(x)\n        elif query_type == 3:\n            result.append(str(len(bag)))\n    \n    for res in result:\n        print(res)\n\nprocess_queries()"]}
{"task_id": "3517", "codes": ["import heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        priority_queue = [(0, start)]\n        \n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    answer = []\n    for u, v in queries:\n        graph[u][v] = 1\n        answer.append(dijkstra(graph, 0, n - 1))\n    \n    return answer"], "passed": [true], "raw_code": ["```python\nimport heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        priority_queue = [(0, start)]\n        \n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    answer = []\n    for u, v in queries:\n        graph[u][v] = 1\n        answer.append(dijkstra(graph, 0, n - 1))\n    \n    return answer\n```"]}
{"task_id": "abc370_c", "codes": ["```python\ndef min_transformations(S, T):\n    X = [S]\n    while S != T:\n        # Find the position where S differs from T\n        diff_pos = next(i for i in range(len(S)) if S[i] != T[i])\n        \n        # Generate all possible transformations by changing one character at diff_pos\n        transformations = []\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            if char != S[diff_pos]:\n                transformed_S = S[:diff_pos] + char + S[diff_pos+1:]\n                transformations.append(transformed_S)\n        \n        # Sort transformations lexicographically\n        transformations.sort()\n        \n        # Choose the lexicographically smallest transformation\n        S = transformations[0]\n        X.append(S)\n    \n    return X\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().splitlines()\n\n# Get the strings S and T\nS = data[0]\nT = data[1]\n\n# Get the result\nresult = min_transformations(S, T)\n\n# Print the result\nprint(len(result))\nfor s in result:\n    print(s)"], "passed": [false], "raw_code": ["```python\ndef min_transformations(S, T):\n    X = [S]\n    while S != T:\n        # Find the position where S differs from T\n        diff_pos = next(i for i in range(len(S)) if S[i] != T[i])\n        \n        # Generate all possible transformations by changing one character at diff_pos\n        transformations = []\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            if char != S[diff_pos]:\n                transformed_S = S[:diff_pos] + char + S[diff_pos+1:]\n                transformations.append(transformed_S)\n        \n        # Sort transformations lexicographically\n        transformations.sort()\n        \n        # Choose the lexicographically smallest transformation\n        S = transformations[0]\n        X.append(S)\n    \n    return X\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().splitlines()\n\n# Get the strings S and T\nS = data[0]\nT = data[1]\n\n# Get the result\nresult = min_transformations(S, T)\n\n# Print the result\nprint(len(result))\nfor s in result:\n    print(s)"]}
{"task_id": "3534", "codes": ["def count_almost_equal_pairs(nums):\n    def generate_swapped_numbers(num_str):\n        swapped_numbers = set()\n        n = len(num_str)\n        for i in range(n - 1):\n            swapped_number = num_str[:i] + num_str[i+1] + num_str[i] + num_str[i+2:]\n            swapped_numbers.add(swapped_number)\n        return swapped_numbers\n    \n    num_set = set(map(str, nums))\n    count = 0\n    \n    for num_str in map(str, nums):\n        swapped_numbers = generate_swapped_numbers(num_str)\n        for swapped_num in swapped_numbers:\n            if swapped_num in num_set:\n                count += 1\n    \n    # Since each pair is counted twice, divide by 2\n    return count // 2"], "passed": [false], "raw_code": ["```python\ndef count_almost_equal_pairs(nums):\n    def generate_swapped_numbers(num_str):\n        swapped_numbers = set()\n        n = len(num_str)\n        for i in range(n - 1):\n            swapped_number = num_str[:i] + num_str[i+1] + num_str[i] + num_str[i+2:]\n            swapped_numbers.add(swapped_number)\n        return swapped_numbers\n    \n    num_set = set(map(str, nums))\n    count = 0\n    \n    for num_str in map(str, nums):\n        swapped_numbers = generate_swapped_numbers(num_str)\n        for swapped_num in swapped_numbers:\n            if swapped_num in num_set:\n                count += 1\n    \n    # Since each pair is counted twice, divide by 2\n    return count // 2\n```"]}
{"task_id": "abc365_c", "codes": ["```python\ndef max_subsidy_limit():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    if sum(A) <= M:\n        print(\"infinite\")\n        return\n    \n    left, right = 0, M\n    while left < right:\n        mid = (left + right + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        if total_subsidy <= M:\n            left = mid\n        else:\n            right = mid - 1\n    \n    print(left)\n\nmax_subsidy_limit()"], "passed": [false], "raw_code": ["```python\ndef max_subsidy_limit():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    if sum(A) <= M:\n        print(\"infinite\")\n        return\n    \n    left, right = 0, M\n    while left < right:\n        mid = (left + right + 1) // 2\n        total_subsidy = sum(min(mid, ai) for ai in A)\n        if total_subsidy <= M:\n            left = mid\n        else:\n            right = mid - 1\n    \n    print(left)\n\nmax_subsidy_limit()"]}
{"task_id": "3496", "codes": ["def minTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        totalWork = 0\n        for t in workerTimes:\n            x = 1\n            while t * x <= time:\n                totalWork += t * x\n                x += 1\n                if totalWork >= height:\n                    break\n        return totalWork >= height\n    \n    low, high = 0, sum(t * (t + 1) // 2 for t in workerTimes) * mountainHeight\n    while low < high:\n        mid = (low + high) // 2\n        if canReduce(mountainHeight, mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low"], "passed": [false], "raw_code": ["```python\ndef minTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        totalWork = 0\n        for t in workerTimes:\n            x = 1\n            while t * x <= time:\n                totalWork += t * x\n                x += 1\n                if totalWork >= height:\n                    break\n        return totalWork >= height\n    \n    low, high = 0, sum(t * (t + 1) // 2 for t in workerTimes) * mountainHeight\n    while low < high:\n        mid = (low + high) // 2\n        if canReduce(mountainHeight, mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low\n```"]}
{"task_id": "3522", "codes": ["def find_subarray_power(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if is_consecutive_and_sorted(subarray):\n            results[i] = max(subarray)\n    \n    return results\n\ndef is_consecutive_and_sorted(arr):\n    return arr == sorted(arr) and all(arr[j+1] - arr[j] == 1 for j in range(len(arr)-1))"], "passed": [true], "raw_code": ["```python\ndef find_subarray_power(nums, k):\n    n = len(nums)\n    results = [-1] * (n - k + 1)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if is_consecutive_and_sorted(subarray):\n            results[i] = max(subarray)\n    \n    return results\n\ndef is_consecutive_and_sorted(arr):\n    return arr == sorted(arr) and all(arr[j+1] - arr[j] == 1 for j in range(len(arr)-1))\n```"]}
{"task_id": "3518", "codes": ["def maxScore(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Select the top four elements from the sorted array b\n    top_four_b = b_sorted[:4]\n    \n    # Calculate the score using the top four elements from b and all elements from a\n    score = sum(a[i] * top_four_b[i] for i in range(4))\n    \n    return score"], "passed": [false], "raw_code": ["```python\ndef maxScore(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Select the top four elements from the sorted array b\n    top_four_b = b_sorted[:4]\n    \n    # Calculate the score using the top four elements from b and all elements from a\n    score = sum(a[i] * top_four_b[i] for i in range(4))\n    \n    return score\n```"]}
{"task_id": "3558", "codes": ["def canReachEnd(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        grid[x][y] = -1  # Mark the cell as visited\n        result = dfs(x + 1, y, health - grid[x][y]) or \\\n                 dfs(x - 1, y, health - grid[x][y]) or \\\n                 dfs(x, y + 1, health - grid[x][y]) or \\\n                 dfs(x, y - 1, health - grid[x][y])\n        grid[x][y] = 0  # Unmark the cell\n        return result\n    \n    return dfs(0, 0, health)"], "passed": [false], "raw_code": ["```python\ndef canReachEnd(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        grid[x][y] = -1  # Mark the cell as visited\n        result = dfs(x + 1, y, health - grid[x][y]) or \\\n                 dfs(x - 1, y, health - grid[x][y]) or \\\n                 dfs(x, y + 1, health - grid[x][y]) or \\\n                 dfs(x, y - 1, health - grid[x][y])\n        grid[x][y] = 0  # Unmark the cell\n        return result\n    \n    return dfs(0, 0, health)\n```"]}
{"task_id": "abc372_d", "codes": ["```python\ndef count_buldings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N):\n            if heights[j] >= heights[i]:\n                count += 1\n            else:\n                break\n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\n# call the function\ncount_buldings()"], "passed": [false], "raw_code": ["```python\ndef count_buldings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    heights = list(map(int, data[1:]))\n    \n    result = []\n    for i in range(N):\n        count = 0\n        for j in range(i + 1, N):\n            if heights[j] >= heights[i]:\n                count += 1\n            else:\n                break\n        result.append(count)\n    \n    print(' '.join(map(str, result)))\n\n# call the function\ncount_buldings()"]}
{"task_id": "arc183_a", "codes": ["```python\nimport sys\nfrom heapq import heappop, heappush\n\ndef find_good_sequence(N, K):\n    # Calculate the total number of good integer sequences\n    from math import factorial\n    S = factorial(N * K) // (factorial(K) ** N)\n    target_position = (S + 1) // 2\n    \n    # Initialize the heap with the first occurrence of each number\n    heap = [(i, K) for i in range(1, N + 1)]\n    heappify(heap)\n    \n    result = []\n    \n    for _ in range(N * K):\n        num, count = heappop(heap)\n        result.append(num)\n        if count > 1:\n            heappush(heap, (num, count - 1))\n    \n    # Get the target sequence\n    target_sequence = []\n    current_index = 0\n    while current_index < len(result):\n        target_sequence.append(result[current_index])\n        current_index += 1\n    \n    return ' '.join(map(str, target_sequence))\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\n\n# Print the result\nprint(find_good_sequence(N, K))"], "passed": [false], "raw_code": ["```python\nimport sys\nfrom heapq import heappop, heappush\n\ndef find_good_sequence(N, K):\n    # Calculate the total number of good integer sequences\n    from math import factorial\n    S = factorial(N * K) // (factorial(K) ** N)\n    target_position = (S + 1) // 2\n    \n    # Initialize the heap with the first occurrence of each number\n    heap = [(i, K) for i in range(1, N + 1)]\n    heappify(heap)\n    \n    result = []\n    \n    for _ in range(N * K):\n        num, count = heappop(heap)\n        result.append(num)\n        if count > 1:\n            heappush(heap, (num, count - 1))\n    \n    # Get the target sequence\n    target_sequence = []\n    current_index = 0\n    while current_index < len(result):\n        target_sequence.append(result[current_index])\n        current_index += 1\n    \n    return ' '.join(map(str, target_sequence))\n\n# Read input\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\n\n# Print the result\nprint(find_good_sequence(N, K))"]}
{"task_id": "3579", "codes": ["def maxNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order\n    binary_nums.sort(reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)"], "passed": [false], "raw_code": ["```python\ndef maxNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order\n    binary_nums.sort(reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```"]}
{"task_id": "3526", "codes": ["def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range((n + 1) // 2) if row[i] != row[n - 1 - i])\n    \n    def flips_for_col(col):\n        return sum(1 for i in range((m + 1) // 2) if grid[i][col] != grid[m - 1 - i][col])\n    \n    total_flips_rows = sum(flips_for_row(row) for row in grid)\n    total_flips_cols = sum(flips_for_col(col) for col in range(n))\n    \n    return min(total_flips_rows, total_flips_cols)"], "passed": [true], "raw_code": ["```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range((n + 1) // 2) if row[i] != row[n - 1 - i])\n    \n    def flips_for_col(col):\n        return sum(1 for i in range((m + 1) // 2) if grid[i][col] != grid[m - 1 - i][col])\n    \n    total_flips_rows = sum(flips_for_row(row) for row in grid)\n    total_flips_cols = sum(flips_for_col(col) for col in range(n))\n    \n    return min(total_flips_rows, total_flips_cols)\n```"]}
{"task_id": "3573", "codes": ["def countValidSubstrings(word1: str, word2: str) -> int:\n    count = 0\n    m, n = len(word1), len(word2)\n    \n    for i in range(n - 1, m):\n        if word1[i] == word2[-1]:\n            char_count = {}\n            for j in range(i, -1, -1):\n                if word1[j] == word2[n - i + j - 1]:\n                    if word1[j] in char_count:\n                        char_count[word1[j]] += 1\n                    else:\n                        char_count[word1[j]] = 1\n                if word2[n - i + j - 1] in char_count and char_count[word2[n - i + j - 1]] > 0:\n                    char_count[word2[n - i + j - 1]] -= 1\n                else:\n                    break\n            if all(v == 0 for v in char_count.values()):\n                count += 1\n    \n    return count"], "passed": [false], "raw_code": ["```python\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    count = 0\n    m, n = len(word1), len(word2)\n    \n    for i in range(n - 1, m):\n        if word1[i] == word2[-1]:\n            char_count = {}\n            for j in range(i, -1, -1):\n                if word1[j] == word2[n - i + j - 1]:\n                    if word1[j] in char_count:\n                        char_count[word1[j]] += 1\n                    else:\n                        char_count[word1[j]] = 1\n                if word2[n - i + j - 1] in char_count and char_count[word2[n - i + j - 1]] > 0:\n                    char_count[word2[n - i + j - 1]] -= 1\n                else:\n                    break\n            if all(v == 0 for v in char_count.values()):\n                count += 1\n    \n    return count\n```"]}
{"task_id": "abc367_c", "codes": ["import sys\nfrom itertools import product\n\ndef find_sequences(N, K, R):\n    def is_valid(seq):\n        return sum(seq) % K == 0\n\n    sequences = [seq for seq in product(range(1, r + 1 for r in R)) if is_valid(seq)]\n    sequences.sort()\n    return sequences\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    sequences = find_sequences(N, K, R)\n    print(len(sequences))\n    for seq in sequences:\n        print(' '.join(map(str, seq)))"], "passed": [false], "raw_code": ["import sys\nfrom itertools import product\n\ndef find_sequences(N, K, R):\n    def is_valid(seq):\n        return sum(seq) % K == 0\n\n    sequences = [seq for seq in product(range(1, r + 1 for r in R)) if is_valid(seq)]\n    sequences.sort()\n    return sequences\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    K = int(data[1])\n    R = list(map(int, data[2:]))\n    sequences = find_sequences(N, K, R)\n    print(len(sequences))\n    for seq in sequences:\n        print(' '.join(map(str, seq)))"]}
{"task_id": "abc370_d", "codes": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    \n    walls = set()\n    for i in range(1, H * W + 1):\n        row = (i - 1) // W + 1\n        col = (i - 1) % W + 1\n        walls.add((row, col))\n    \n    index = 3\n    for _ in range(Q):\n        R = int(data[index])\n        C = int(data[index + 1])\n        index += 2\n        \n        if (R, C) in walls:\n            walls.remove((R, C))\n        else:\n            # Destroy walls in the specified directions\n            # Up\n            for i in range(R - 1, 0, -1):\n                if (i, C) in walls:\n                    walls.remove((i, C))\n                    break\n            # Down\n            for i in range(R + 1, H + 1):\n                if (i, C) in walls:\n                    walls.remove((i, C))\n                    break\n            # Left\n            for j in range(C - 1, 0, -1):\n                if (R, j) in walls:\n                    walls.remove((R, j))\n                    break\n            # Right\n            for j in range(C + 1, W + 1):\n                if (R, j) in walls:\n                    walls.remove((R, j))\n                    break\n    \n    print(len(walls))\n\nmain()"], "passed": [false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    H = int(data[0])\n    W = int(data[1])\n    Q = int(data[2])\n    \n    walls = set()\n    for i in range(1, H * W + 1):\n        row = (i - 1) // W + 1\n        col = (i - 1) % W + 1\n        walls.add((row, col))\n    \n    index = 3\n    for _ in range(Q):\n        R = int(data[index])\n        C = int(data[index + 1])\n        index += 2\n        \n        if (R, C) in walls:\n            walls.remove((R, C))\n        else:\n            # Destroy walls in the specified directions\n            # Up\n            for i in range(R - 1, 0, -1):\n                if (i, C) in walls:\n                    walls.remove((i, C))\n                    break\n            # Down\n            for i in range(R + 1, H + 1):\n                if (i, C) in walls:\n                    walls.remove((i, C))\n                    break\n            # Left\n            for j in range(C - 1, 0, -1):\n                if (R, j) in walls:\n                    walls.remove((R, j))\n                    break\n            # Right\n            for j in range(C + 1, W + 1):\n                if (R, j) in walls:\n                    walls.remove((R, j))\n                    break\n    \n    print(len(walls))\n\nmain()"]}
{"task_id": "abc372_c", "codes": ["```python\ndef count_abc_substrings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    \n    # Convert S into a list for easier manipulation\n    S = list(S)\n    \n    # Prefix counts for 'A', 'B', and 'C'\n    prefix_A = [0] * (N + 1)\n    prefix_B = [0] * (N + 1)\n    prefix_C = [0] * (N + 1)\n    \n    # Initialize prefix counts\n    for i in range(1, N + 1):\n        prefix_A[i] = prefix_A[i - 1] + (1 if S[i - 1] == 'A' else 0)\n        prefix_B[i] = prefix_B[i - 1] + (1 if S[i - 1] == 'B' else 0)\n        prefix_C[i] = prefix_C[i - 1] + (1 if S[i - 1] == 'C' else 0)\n    \n    # Process each query\n    for i in range(Q):\n        index = int(data[2 + 2 * i]) - 1\n        new_char = data[3 + 2 * i]\n        \n        # Update the string and prefix counts\n        old_char = S[index]\n        S[index] = new_char\n        \n        if old_char == 'A':\n            prefix_A[index + 1] -= 1\n        elif old_char == 'B':\n            prefix_B[index + 1] -= 1\n        elif old_char == 'C':\n            prefix_C[index + 1] -= 1\n        \n        if new_char == 'A':\n            prefix_A[index + 1] += 1\n        elif new_char == 'B':\n            prefix_B[index + 1] += 1\n        elif new_char == 'C':\n            prefix_C[index + 1] += 1\n        \n        # Check for \"ABC\" in the current state\n        count = 0\n        for j in range(index, max(0, index - 2), -1):\n            if prefix_A[j + 1] > prefix_A[j] and prefix_B[j + 1] > prefix_B[j] and prefix_C[j + 1] > prefix_C[j]:\n                count += 1\n        \n        print(count)\n\n# Call the function to execute\ncount_abc_substrings()"], "passed": [false], "raw_code": ["```python\ndef count_abc_substrings():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    Q = int(data[1])\n    S = data[2]\n    \n    # Convert S into a list for easier manipulation\n    S = list(S)\n    \n    # Prefix counts for 'A', 'B', and 'C'\n    prefix_A = [0] * (N + 1)\n    prefix_B = [0] * (N + 1)\n    prefix_C = [0] * (N + 1)\n    \n    # Initialize prefix counts\n    for i in range(1, N + 1):\n        prefix_A[i] = prefix_A[i - 1] + (1 if S[i - 1] == 'A' else 0)\n        prefix_B[i] = prefix_B[i - 1] + (1 if S[i - 1] == 'B' else 0)\n        prefix_C[i] = prefix_C[i - 1] + (1 if S[i - 1] == 'C' else 0)\n    \n    # Process each query\n    for i in range(Q):\n        index = int(data[2 + 2 * i]) - 1\n        new_char = data[3 + 2 * i]\n        \n        # Update the string and prefix counts\n        old_char = S[index]\n        S[index] = new_char\n        \n        if old_char == 'A':\n            prefix_A[index + 1] -= 1\n        elif old_char == 'B':\n            prefix_B[index + 1] -= 1\n        elif old_char == 'C':\n            prefix_C[index + 1] -= 1\n        \n        if new_char == 'A':\n            prefix_A[index + 1] += 1\n        elif new_char == 'B':\n            prefix_B[index + 1] += 1\n        elif new_char == 'C':\n            prefix_C[index + 1] += 1\n        \n        # Check for \"ABC\" in the current state\n        count = 0\n        for j in range(index, max(0, index - 2), -1):\n            if prefix_A[j + 1] > prefix_A[j] and prefix_B[j + 1] > prefix_B[j] and prefix_C[j + 1] > prefix_C[j]:\n                count += 1\n        \n        print(count)\n\n# Call the function to execute\ncount_abc_substrings()"]}
{"task_id": "abc371_c", "codes": ["```python\nimport sys\nfrom itertools import permutations\n\ndef min_cost_to_isomorphic():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    M_G = int(data[index])\n    index += 1\n    edges_G = []\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        edges_G.append((u, v))\n        index += 2\n    \n    M_H = int(data[index])\n    index += 1\n    edges_H = []\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        edges_H.append((a, b))\n        index += 2\n    \n    A = []\n    for i in range(1, N):\n        row = []\n        for j in range(i + 1, N):\n            row.append(int(data[index]))\n            index += 1\n        A.append(row)\n    \n    def is_isomorphic(mapping):\n        G_prime_edges = set()\n        for u, v in edges_G:\n            G_prime_edges.add(tuple(sorted([mapping[u], mapping[v]])))\n        \n        H_edges = set()\n        for a, b in edges_H:\n            H_edges.add(tuple(sorted([a, b])))\n        \n        return G_prime_edges == H_edges\n    \n    def cost_of_mapping(mapping):\n        total_cost = 0\n        for u in range(N):\n            for v in range(u + 1, N):\n                if (u, v) not in edges_G and (v, u) not in edges_G:\n                    if (mapping[u], mapping[v]) in edges_H or (mapping[v], mapping[u]) in edges_H:\n                        total_cost += A[mapping[u]][mapping[v]]\n                elif (u, v) in edges_G or (v, u) in edges_G:\n                    if (mapping[u], mapping[v]) not in edges_H and (mapping[v], mapping[u]) not in edges_H:\n                        total_cost += A[mapping[u]][mapping[v]]\n        return total_cost\n    \n    min_cost = float('inf')\n    for perm in permutations(range(N)):\n        if is_isomorphic(perm):\n            current_cost = cost_of_mapping(perm)\n            if current_cost < min_cost:\n                min_cost = current_cost\n    \n    print(min_cost)\n\nmin_cost_to_isomorphic()"], "passed": [false], "raw_code": ["```python\nimport sys\nfrom itertools import permutations\n\ndef min_cost_to_isomorphic():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    M_G = int(data[index])\n    index += 1\n    edges_G = []\n    for _ in range(M_G):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        edges_G.append((u, v))\n        index += 2\n    \n    M_H = int(data[index])\n    index += 1\n    edges_H = []\n    for _ in range(M_H):\n        a = int(data[index]) - 1\n        b = int(data[index + 1]) - 1\n        edges_H.append((a, b))\n        index += 2\n    \n    A = []\n    for i in range(1, N):\n        row = []\n        for j in range(i + 1, N):\n            row.append(int(data[index]))\n            index += 1\n        A.append(row)\n    \n    def is_isomorphic(mapping):\n        G_prime_edges = set()\n        for u, v in edges_G:\n            G_prime_edges.add(tuple(sorted([mapping[u], mapping[v]])))\n        \n        H_edges = set()\n        for a, b in edges_H:\n            H_edges.add(tuple(sorted([a, b])))\n        \n        return G_prime_edges == H_edges\n    \n    def cost_of_mapping(mapping):\n        total_cost = 0\n        for u in range(N):\n            for v in range(u + 1, N):\n                if (u, v) not in edges_G and (v, u) not in edges_G:\n                    if (mapping[u], mapping[v]) in edges_H or (mapping[v], mapping[u]) in edges_H:\n                        total_cost += A[mapping[u]][mapping[v]]\n                elif (u, v) in edges_G or (v, u) in edges_G:\n                    if (mapping[u], mapping[v]) not in edges_H and (mapping[v], mapping[u]) not in edges_H:\n                        total_cost += A[mapping[u]][mapping[v]]\n        return total_cost\n    \n    min_cost = float('inf')\n    for perm in permutations(range(N)):\n        if is_isomorphic(perm):\n            current_cost = cost_of_mapping(perm)\n            if current_cost < min_cost:\n                min_cost = current_cost\n    \n    print(min_cost)\n\nmin_cost_to_isomorphic()"]}
{"task_id": "3570", "codes": ["def countSubstrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Helper function to count vowels and consonants in a substring\n    def count_vowels_and_consonants(sub):\n        v_count = sum(1 for char in sub if char in vowels)\n        c_count = len(sub) - v_count\n        return v_count, c_count\n    \n    # Iterate over all possible starting points of substrings\n    for i in range(n):\n        v_count_total = 0\n        c_count_total = 0\n        seen_vowels = set()\n        \n        # Iterate over all possible ending points of substrings starting from i\n        for j in range(i, n):\n            v_count, c_count = count_vowels_and_consonants(word[i:j+1])\n            v_count_total += v_count\n            c_count_total += c_count\n            \n            # Check if the current substring has at least one of each vowel\n            if len(seen_vowels) == 5 and c_count_total == k:\n                count += 1\n                \n            # Update seen vowels\n            seen_vowels.update(set(word[i:j+1]) & vowels)\n    \n    return count"], "passed": [false], "raw_code": ["```python\ndef countSubstrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    # Helper function to count vowels and consonants in a substring\n    def count_vowels_and_consonants(sub):\n        v_count = sum(1 for char in sub if char in vowels)\n        c_count = len(sub) - v_count\n        return v_count, c_count\n    \n    # Iterate over all possible starting points of substrings\n    for i in range(n):\n        v_count_total = 0\n        c_count_total = 0\n        seen_vowels = set()\n        \n        # Iterate over all possible ending points of substrings starting from i\n        for j in range(i, n):\n            v_count, c_count = count_vowels_and_consonants(word[i:j+1])\n            v_count_total += v_count\n            c_count_total += c_count\n            \n            # Check if the current substring has at least one of each vowel\n            if len(seen_vowels) == 5 and c_count_total == k:\n                count += 1\n                \n            # Update seen vowels\n            seen_vowels.update(set(word[i:j+1]) & vowels)\n    \n    return count\n```"]}
{"task_id": "abc373_c", "codes": ["def max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read the number of elements\n    N = int(data[0])\n    \n    # Read the elements of sequence A\n    A = list(map(int, data[1:N+1]))\n    \n    # Read the elements of sequence B\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    # Find the maximum value in A and B\n    max_A = max(A)\n    max_B = max(B)\n    \n    # Print the maximum possible sum\n    print(max_A + max_B)\n\n# Call the function\nmax_sum_of_sequences()"], "passed": [true], "raw_code": ["```python\ndef max_sum_of_sequences():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Read the number of elements\n    N = int(data[0])\n    \n    # Read the elements of sequence A\n    A = list(map(int, data[1:N+1]))\n    \n    # Read the elements of sequence B\n    B = list(map(int, data[N+1:2*N+1]))\n    \n    # Find the maximum value in A and B\n    max_A = max(A)\n    max_B = max(B)\n    \n    # Print the maximum possible sum\n    print(max_A + max_B)\n\n# Call the function\nmax_sum_of_sequences()\n```"]}
{"task_id": "3584", "codes": ["def almost_equal_indices(word1, word2):\n    # Find the indices where word1 and word2 differ\n    diff_indices = [i for i in range(len(word2)) if word1[i] != word2[i]]\n    \n    # Check if there is at most one mismatch\n    if len(diff_indices) > 1:\n        return []\n    \n    # If there is exactly one mismatch, return the lexicographically smallest sequence\n    if len(diff_indices) == 1:\n        return [i for i in range(len(word1)) if word1[i] == word2[diff_indices[0]]]\n    \n    # If there is no mismatch, return an empty array\n    return []"], "passed": [false], "raw_code": ["```python\ndef almost_equal_indices(word1, word2):\n    # Find the indices where word1 and word2 differ\n    diff_indices = [i for i in range(len(word2)) if word1[i] != word2[i]]\n    \n    # Check if there is at most one mismatch\n    if len(diff_indices) > 1:\n        return []\n    \n    # If there is exactly one mismatch, return the lexicographically smallest sequence\n    if len(diff_indices) == 1:\n        return [i for i in range(len(word1)) if word1[i] == word2[diff_indices[0]]]\n    \n    # If there is no mismatch, return an empty array\n    return []\n```"]}
{"task_id": "3559", "codes": ["def minValidStrings(words, target):\n    n = len(target)\n    dp = [float('inf')] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for word in words:\n            if i >= len(word) - 1 and target[i-len(word)+1:i+1] == word:\n                dp[i] = min(dp[i], dp[i-len(word)] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1"], "passed": [false], "raw_code": ["```python\ndef minValidStrings(words, target):\n    n = len(target)\n    dp = [float('inf')] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for word in words:\n            if i >= len(word) - 1 and target[i-len(word)+1:i+1] == word:\n                dp[i] = min(dp[i], dp[i-len(word)] + 1)\n    \n    return dp[-1] if dp[-1] != float('inf') else -1\n```"]}
{"task_id": "abc369_c", "codes": ["def count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_count = 0\n    \n    for i in range(N):\n        dp = {}\n        for j in range(i + 1, N):\n            diff = A[j] - A[i]\n            if diff in dp:\n                total_count += dp[diff]\n            dp[diff] = dp.get(diff, 0) + 1\n    \n    print(total_count)\n\ncount_arithmetic_progressions()"], "passed": [false], "raw_code": ["```python\ndef count_arithmetic_progressions():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    total_count = 0\n    \n    for i in range(N):\n        dp = {}\n        for j in range(i + 1, N):\n            diff = A[j] - A[i]\n            if diff in dp:\n                total_count += dp[diff]\n            dp[diff] = dp.get(diff, 0) + 1\n    \n    print(total_count)\n\ncount_arithmetic_progressions()\n```"]}
{"task_id": "3485", "codes": ["def maxScore(start, d):\n    start.sort()\n    max_diff = 0\n    for i in range(1, len(start)):\n        max_diff = max(max_diff, start[i] - start[i-1])\n    return max_diff"], "passed": [false], "raw_code": ["```python\ndef maxScore(start, d):\n    start.sort()\n    max_diff = 0\n    for i in range(1, len(start)):\n        max_diff = max(max_diff, start[i] - start[i-1])\n    return max_diff\n```"]}
{"task_id": "abc366_d", "codes": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    # Initialize 3D array A\n    A = [[[int(data[index + k * N * N + j * N + i]) for i in range(N)] for j in range(N)] for k in range(N)]\n    index += N * N * N\n\n    Q = int(data[index])\n    index += 1\n\n    # Initialize 4D prefix sum array\n    prefix = [[[[0 for _ in range(4)] for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n\n    # Fill the prefix sum array\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix[x][y][z][0] = A[x-1][y-1][z-1]\n                prefix[x][y][z][1] = prefix[x-1][y][z][0] + prefix[x][y-1][z][0] - prefix[x-1][y-1][z][0] + prefix[x][y][z-1][0]\n                prefix[x][y][z][2] = prefix[x][y][z-1][1] + prefix[x-1][y][z][1] - prefix[x-1][y][z-1][1] + prefix[x][y][z-1][2]\n                prefix[x][y][z][3] = prefix[x][y][z][2] + prefix[x][y-1][z][2] - prefix[x][y-1][z][1] + prefix[x][y][z][3]\n\n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n        index += 6\n        \n        result = (prefix[Rx][Ry][Rz][3] - prefix[Lx-1][Ry][Rz][3] - prefix[Rx]["], "passed": [false], "raw_code": ["```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n\n    # Initialize 3D array A\n    A = [[[int(data[index + k * N * N + j * N + i]) for i in range(N)] for j in range(N)] for k in range(N)]\n    index += N * N * N\n\n    Q = int(data[index])\n    index += 1\n\n    # Initialize 4D prefix sum array\n    prefix = [[[[0 for _ in range(4)] for _ in range(N + 1)] for _ in range(N + 1)] for _ in range(N + 1)]\n\n    # Fill the prefix sum array\n    for x in range(1, N + 1):\n        for y in range(1, N + 1):\n            for z in range(1, N + 1):\n                prefix[x][y][z][0] = A[x-1][y-1][z-1]\n                prefix[x][y][z][1] = prefix[x-1][y][z][0] + prefix[x][y-1][z][0] - prefix[x-1][y-1][z][0] + prefix[x][y][z-1][0]\n                prefix[x][y][z][2] = prefix[x][y][z-1][1] + prefix[x-1][y][z][1] - prefix[x-1][y][z-1][1] + prefix[x][y][z-1][2]\n                prefix[x][y][z][3] = prefix[x][y][z][2] + prefix[x][y-1][z][2] - prefix[x][y-1][z][1] + prefix[x][y][z][3]\n\n    # Process each query\n    results = []\n    for _ in range(Q):\n        Lx, Rx, Ly, Ry, Lz, Rz = map(int, data[index:index + 6])\n        index += 6\n        \n        result = (prefix[Rx][Ry][Rz][3] - prefix[Lx-1][Ry][Rz][3] - prefix[Rx]["]}
{"task_id": "abc367_d", "codes": ["def count_valid_pairs(N, M, A):\n    # Calculate the prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for i in range(N):\n        current_sum += A[i]\n        prefix_sum.append(current_sum)\n    \n    # Count valid pairs\n    count = 0\n    for s in range(1, N + 1):\n        for t in range(s + 1, N + 1):\n            if (prefix_sum[t] - prefix_sum[s-1]) % M == 0:\n                count += 1\n    \n    return count\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(count_valid_pairs(N, M, A))"], "passed": [false], "raw_code": ["```python\ndef count_valid_pairs(N, M, A):\n    # Calculate the prefix sum array\n    prefix_sum = [0]\n    current_sum = 0\n    for i in range(N):\n        current_sum += A[i]\n        prefix_sum.append(current_sum)\n    \n    # Count valid pairs\n    count = 0\n    for s in range(1, N + 1):\n        for t in range(s + 1, N + 1):\n            if (prefix_sum[t] - prefix_sum[s-1]) % M == 0:\n                count += 1\n    \n    return count\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nA = list(map(int, data[2:]))\n\n# Print the result\nprint(count_valid_pairs(N, M, A))\n```"]}
{"task_id": "abc371_d", "codes": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    P = list(map(int, data[index:index + N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = [(int(data[index]), int(data[index + 1])) for _ in range(Q)]\n    index += 2\n\n    # Calculate prefix sums for villagers and coordinates\n    prefix_villagers = [0] * (N + 1)\n    prefix_coordinates = [0] * (N + 1)\n\n    for i in range(N):\n        prefix_villagers[i + 1] = prefix_villagers[i] + P[i]\n        prefix_coordinates[i + 1] = prefix_coordinates[i] + X[i]\n\n    # Answer each query using the prefix sums\n    for L, R in queries:\n        # Find the indices of the villages just before L and R\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n\n        # Calculate the number of villagers in the range [L, R]\n        villagers_in_range = prefix_villagers[right_index] - prefix_villagers[left_index]\n        print(villagers_in_range)\n\nif __name__ == '__main__':\n    main()"], "passed": [false], "raw_code": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    index += 1\n    X = list(map(int, data[index:index + N]))\n    index += N\n    P = list(map(int, data[index:index + N]))\n    index += N\n    Q = int(data[index])\n    index += 1\n    queries = [(int(data[index]), int(data[index + 1])) for _ in range(Q)]\n    index += 2\n\n    # Calculate prefix sums for villagers and coordinates\n    prefix_villagers = [0] * (N + 1)\n    prefix_coordinates = [0] * (N + 1)\n\n    for i in range(N):\n        prefix_villagers[i + 1] = prefix_villagers[i] + P[i]\n        prefix_coordinates[i + 1] = prefix_coordinates[i] + X[i]\n\n    # Answer each query using the prefix sums\n    for L, R in queries:\n        # Find the indices of the villages just before L and R\n        left_index = bisect_left(X, L)\n        right_index = bisect_right(X, R)\n\n        # Calculate the number of villagers in the range [L, R]\n        villagers_in_range = prefix_villagers[right_index] - prefix_villagers[left_index]\n        print(villagers_in_range)\n\nif __name__ == '__main__':\n    main()"]}
{"task_id": "abc365_d", "codes": ["def max_wins(N, S):\n    wins = 0\n    prev_move = ''\n    for move in S:\n        if move == 'R':\n            if prev_move != 'P':\n                wins += 1\n                prev_move = 'P'\n        elif move == 'P':\n            if prev_move != 'S':\n                wins += 1\n                prev_move = 'S'\n        elif move == 'S':\n            if prev_move != 'R':\n                wins += 1\n                prev_move = 'R'\n    return wins\n\nN = int(input())\nS = input()\nprint(max_wins(N, S))"], "passed": [false], "raw_code": ["def max_wins(N, S):\n    wins = 0\n    prev_move = ''\n    for move in S:\n        if move == 'R':\n            if prev_move != 'P':\n                wins += 1\n                prev_move = 'P'\n        elif move == 'P':\n            if prev_move != 'S':\n                wins += 1\n                prev_move = 'S'\n        elif move == 'S':\n            if prev_move != 'R':\n                wins += 1\n                prev_move = 'R'\n    return wins\n\nN = int(input())\nS = input()\nprint(max_wins(N, S))"]}
{"task_id": "arc181_a", "codes": ["def min_operations_to_sort(permutation):\n    N = len(permutation)\n    index = {value: i for i, value in enumerate(permutation)}\n    inversions = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if index[i + 1] > index[j + 1]:\n                inversions += 1\n\n    return inversions\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    T = int(data[0])\n    result = []\n\n    index = 1\n    for _ in range(T):\n        N = int(data[index])\n        permutation = list(map(int, data[index + 1:index + N + 1]))\n        index += N + 1\n        result.append(min_operations_to_sort(permutation))\n\n    for r in result:\n        print(r)\n\nsolve()"], "passed": [false], "raw_code": ["def min_operations_to_sort(permutation):\n    N = len(permutation)\n    index = {value: i for i, value in enumerate(permutation)}\n    inversions = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if index[i + 1] > index[j + 1]:\n                inversions += 1\n\n    return inversions\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    T = int(data[0])\n    result = []\n\n    index = 1\n    for _ in range(T):\n        N = int(data[index])\n        permutation = list(map(int, data[index + 1:index + N + 1]))\n        index += N + 1\n        result.append(min_operations_to_sort(permutation))\n\n    for r in result:\n        print(r)\n\nsolve()"]}
{"task_id": "abc368_c", "codes": ["def min_attacks():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        T += 1\n        for i in range(N):\n            if H[i] > 0:\n                if T % 3 == 0:\n                    H[i] -= 3\n                else:\n                    H[i] -= 1\n                break\n    \n    print(T)\n\nmin_attacks()"], "passed": [false], "raw_code": ["```python\ndef min_attacks():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    H = list(map(int, data[1:]))\n    \n    T = 0\n    while any(h > 0 for h in H):\n        T += 1\n        for i in range(N):\n            if H[i] > 0:\n                if T % 3 == 0:\n                    H[i] -= 3\n                else:\n                    H[i] -= 1\n                break\n    \n    print(T)\n\nmin_attacks()\n```"]}
{"task_id": "abc369_d", "codes": ["def max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort()\n    \n    total_points = 0\n    \n    # Iterate through each monster\n    for i in range(N):\n        if i % 2 == 0:\n            # If it's an odd-numbered defeated monster, add twice its strength\n            total_points += 2 * A[i]\n        else:\n            # If it's an even-numbered defeated monster, add its strength\n            total_points += A[i]\n    \n    print(total_points)\n\n# Call the function\nmax_experience_points()"], "passed": [false], "raw_code": ["```python\ndef max_experience_points():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Sort the monsters by their strength\n    A.sort()\n    \n    total_points = 0\n    \n    # Iterate through each monster\n    for i in range(N):\n        if i % 2 == 0:\n            # If it's an odd-numbered defeated monster, add twice its strength\n            total_points += 2 * A[i]\n        else:\n            # If it's an even-numbered defeated monster, add its strength\n            total_points += A[i]\n    \n    print(total_points)\n\n# Call the function\nmax_experience_points()\n```"]}
{"task_id": "3528", "codes": ["def maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]"], "passed": [false], "raw_code": ["```python\ndef maxScore(nums):\n    n = len(nums)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n    \n    return dp[-1]\n```"]}
{"task_id": "3495", "codes": ["import heapq\n\ndef kthSmallestObstacleDistance(queries, k):\n    min_heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(min_heap, distance)\n        \n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        if len(min_heap) < k:\n            results.append(-1)\n        else:\n            results.append(min_heap[0])\n    \n    return results"], "passed": [false], "raw_code": ["```python\nimport heapq\n\ndef kthSmallestObstacleDistance(queries, k):\n    min_heap = []\n    results = []\n    \n    for x, y in queries:\n        distance = abs(x) + abs(y)\n        heapq.heappush(min_heap, distance)\n        \n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        if len(min_heap) < k:\n            results.append(-1)\n        else:\n            results.append(min_heap[0])\n    \n    return results\n```"]}
{"task_id": "3525", "codes": ["def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    # Initialize DP table\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = energyDrinkA[0]\n    dp[0][1] = energyDrinkB[0]\n    \n    # Fill DP table\n    for i in range(1, n):\n        dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], dp[i-1][1] + energyDrinkA[i])\n        dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], dp[i-1][0] + energyDrinkB[i])\n    \n    return max(dp[-1][0], dp[-1][1])"], "passed": [false], "raw_code": ["```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    \n    # Initialize DP table\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = energyDrinkA[0]\n    dp[0][1] = energyDrinkB[0]\n    \n    # Fill DP table\n    for i in range(1, n):\n        dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], dp[i-1][1] + energyDrinkA[i])\n        dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], dp[i-1][0] + energyDrinkB[i])\n    \n    return max(dp[-1][0], dp[-1][1])\n```"]}
{"task_id": "3510", "codes": ["def maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for maxHeight in maximumHeight:\n        for height in range(maxHeight, 0, -1):\n            if height not in used_heights:\n                used_heights.add(height)\n                total_sum += height\n                break\n        else:\n            return -1\n    \n    return total_sum"], "passed": [false], "raw_code": ["```python\ndef maxTowerHeight(maximumHeight):\n    maximumHeight.sort(reverse=True)\n    used_heights = set()\n    total_sum = 0\n    \n    for maxHeight in maximumHeight:\n        for height in range(maxHeight, 0, -1):\n            if height not in used_heights:\n                used_heights.add(height)\n                total_sum += height\n                break\n        else:\n            return -1\n    \n    return total_sum\n```"]}
{"final_accuracy": "13.51%"}
