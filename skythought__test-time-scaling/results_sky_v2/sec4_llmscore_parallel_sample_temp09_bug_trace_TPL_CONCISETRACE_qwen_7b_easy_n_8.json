{"difficulty": "easy", "num_threads": 32, "temperature": 0.9, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_temp09_bug_trace_TPL_CONCISETRACE_qwen_7b_easy_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result_string = input_string.replace('.', '')\n    print(result_string)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    import sys\n    input_string = sys.stdin.read().strip()\n    result_string = input_string.replace('.', '')\n    print(result_string)\n\nremove_dots()\n```"}
{"task_id": "3606", "code": "def min_sum_of_digits(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    for i in range(len(nums)):\n        nums[i] = digit_sum(nums[i])\n    \n    return min(nums)", "passed": true, "raw_code": "```python\ndef min_sum_of_digits(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    for i in range(len(nums)):\n        nums[i] = digit_sum(nums[i])\n    \n    return min(nums)\n```"}
{"task_id": "abc373_a", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()\n```"}
{"task_id": "abc368_a", "code": "def rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n    \n    # Move the last K elements to the front\n    rotated_cards = cards[-K:] + cards[:-K]\n    \n    # Print the result\n    print(' '.join(map(str, rotated_cards)))\n\nrotate_cards()", "passed": true, "raw_code": "```python\ndef rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    cards = list(map(int, data[2:]))\n    \n    # Move the last K elements to the front\n    rotated_cards = cards[-K:] + cards[:-K]\n    \n    # Print the result\n    print(' '.join(map(str, rotated_cards)))\n\nrotate_cards()\n```"}
{"task_id": "abc367_b", "code": "def process_number():\n    import sys\n    x = float(sys.stdin.read().strip())\n    x_str = str(x)\n    if '.' in x_str:\n        x_str = x_str.rstrip('0').rstrip('.')\n    print(x_str)\n\nprocess_number()", "passed": true, "raw_code": "```python\ndef process_number():\n    import sys\n    x = float(sys.stdin.read().strip())\n    x_str = str(x)\n    if '.' in x_str:\n        x_str = x_str.rstrip('0').rstrip('.')\n    print(x_str)\n\nprocess_number()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki(A, B, C):\n    if (C <= A < 24) or (0 <= A < B):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\ncan_shout_takoyaki(A, B, C)", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki(A, B, C):\n    if (C <= A < 24) or (0 <= A < B):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Example usage:\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\ncan_shout_takoyaki(A, B, C)\n```"}
{"task_id": "abc370_a", "code": "def check_hand_raising(L, R):\n    if (L == 1 and R == 0) or (L == 0 and R == 1):\n        return \"Yes\" if L == 1 else \"No\"\n    elif L + R == 0 or L + R == 2:\n        return \"Invalid\"\n    else:\n        return \"Invalid\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\n# Print the result\nprint(check_hand_raising(L, R))", "passed": true, "raw_code": "```python\ndef check_hand_raising(L, R):\n    if (L == 1 and R == 0) or (L == 0 and R == 1):\n        return \"Yes\" if L == 1 else \"No\"\n    elif L + R == 0 or L + R == 2:\n        return \"Invalid\"\n    else:\n        return \"Invalid\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nL = int(data[0])\nR = int(data[1])\n\n# Print the result\nprint(check_hand_raising(L, R))\n```"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    # Calculate the difference in votes\n    vote_difference = abs(T - A)\n    \n    # Determine if the outcome is decided\n    if vote_difference >= (N // 2) + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()", "passed": false, "raw_code": "```python\ndef determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    # Calculate the difference in votes\n    vote_difference = abs(T - A)\n    \n    # Determine if the outcome is decided\n    if vote_difference >= (N // 2) + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()\n```"}
{"task_id": "3555", "code": "def modify_array(nums, k, multiplier):\n    for _ in range(k):\n        min_value = min(nums)\n        min_index = nums.index(min_value)\n        nums[min_index] *= multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef modify_array(nums, k, multiplier):\n    for _ in range(k):\n        min_value = min(nums)\n        min_index = nums.index(min_value)\n        nums[min_index] *= multiplier\n    return nums\n```"}
{"task_id": "abc368_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc365_a", "code": "def get_days_in_year(Y):\n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Example usage\nget_days_in_year(int(input()))", "passed": true, "raw_code": "```python\ndef get_days_in_year(Y):\n    if Y % 400 == 0:\n        print(366)\n    elif Y % 100 == 0:\n        print(365)\n    elif Y % 4 == 0:\n        print(366)\n    else:\n        print(365)\n\n# Example usage\nget_days_in_year(int(input()))\n```"}
{"task_id": "3519", "code": "def countWinners(n, pick):\n    # Dictionary to store the count of balls picked by each player for each color\n    player_balls = {i: {} for i in range(n)}\n    \n    # Update the count of balls for each pick\n    for player, color in pick:\n        if color not in player_balls[player]:\n            player_balls[player][color] = 0\n        player_balls[player][color] += 1\n    \n    # Initialize the count of winners\n    winners = 0\n    \n    # Check each player's picks to see if they win\n    for i in range(n):\n        if any(count >= i + 1 for count in player_balls[i].values()):\n            winners += 1\n    \n    return winners", "passed": true, "raw_code": "```python\ndef countWinners(n, pick):\n    # Dictionary to store the count of balls picked by each player for each color\n    player_balls = {i: {} for i in range(n)}\n    \n    # Update the count of balls for each pick\n    for player, color in pick:\n        if color not in player_balls[player]:\n            player_balls[player][color] = 0\n        player_balls[player][color] += 1\n    \n    # Initialize the count of winners\n    winners = 0\n    \n    # Check each player's picks to see if they win\n    for i in range(n):\n        if any(count >= i + 1 for count in player_balls[i].values()):\n            winners += 1\n    \n    return winners\n```"}
{"task_id": "3567", "code": "def binary_representation(date):\n    # Split the date string into year, month, and day\n    year, month, day = map(int, date.split('-'))\n    \n    # Convert year, month, and day to binary and remove the '0b' prefix\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    \n    # Concatenate the binary strings with hyphens in between\n    result = f\"{binary_year}-{binary_month}-{binary_day}\"\n    \n    return result", "passed": true, "raw_code": "```python\ndef binary_representation(date):\n    # Split the date string into year, month, and day\n    year, month, day = map(int, date.split('-'))\n    \n    # Convert year, month, and day to binary and remove the '0b' prefix\n    binary_year = bin(year)[2:]\n    binary_month = bin(month)[2:]\n    binary_day = bin(day)[2:]\n    \n    # Concatenate the binary strings with hyphens in between\n    result = f\"{binary_year}-{binary_month}-{binary_day}\"\n    \n    return result\n```"}
{"task_id": "3600", "code": "def find_kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        word += ''.join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n    return word[k-1]", "passed": true, "raw_code": "```python\ndef find_kth_character(k):\n    word = \"a\"\n    while len(word) < k:\n        word += ''.join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n    return word[k-1]\n```"}
{"task_id": "abc370_b", "code": "def final_element(N, A):\n    current_element = 1\n    for i in range(2, N + 1):\n        current_element = A[i-1][current_element-1]\n    print(current_element)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = []\nindex = 1\nfor i in range(N):\n    A.append([int(x) for x in data[index:index + i + 1]])\n    index += i + 1\n\nfinal_element(N, A)", "passed": false, "raw_code": "```python\ndef final_element(N, A):\n    current_element = 1\n    for i in range(2, N + 1):\n        current_element = A[i-1][current_element-1]\n    print(current_element)\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nA = []\nindex = 1\nfor i in range(N):\n    A.append([int(x) for x in data[index:index + i + 1]])\n    index += i + 1\n\nfinal_element(N, A)\n```"}
{"task_id": "abc373_b", "code": "def calculate_min_distance(S):\n    # Initialize the initial position of the finger at the key corresponding to 'A'\n    current_position = 0\n    total_distance = 0\n    \n    # Iterate through each character in the permutation string S\n    for char in S:\n        # Calculate the position of the key corresponding to the current character\n        target_position = ord(char) - ord('A')\n        \n        # Calculate the distance from the current position to the target position\n        distance = abs(target_position - current_position)\n        \n        # Add the distance to the total distance\n        total_distance += distance\n        \n        # Update the current position to the target position\n        current_position = target_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function to execute with standard input\ncalculate_min_distance(input().strip())", "passed": false, "raw_code": "```python\ndef calculate_min_distance(S):\n    # Initialize the initial position of the finger at the key corresponding to 'A'\n    current_position = 0\n    total_distance = 0\n    \n    # Iterate through each character in the permutation string S\n    for char in S:\n        # Calculate the position of the key corresponding to the current character\n        target_position = ord(char) - ord('A')\n        \n        # Calculate the distance from the current position to the target position\n        distance = abs(target_position - current_position)\n        \n        # Add the distance to the total distance\n        total_distance += distance\n        \n        # Update the current position to the target position\n        current_position = target_position\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function to execute with standard input\ncalculate_min_distance(input().strip())\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for i in range(N):\n        if A[i] > first_max:\n            second_max = first_max\n            first_max = A[i]\n        elif A[i] != first_max and A[i] > second_max:\n            second_max = A[i]\n    \n    # Find the index of the second largest element\n    for i in range(N):\n        if A[i] == second_max:\n            print(i + 1)\n            break\n\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    first_max = float('-inf')\n    second_max = float('-inf')\n    \n    for i in range(N):\n        if A[i] > first_max:\n            second_max = first_max\n            first_max = A[i]\n        elif A[i] != first_max and A[i] > second_max:\n            second_max = A[i]\n    \n    # Find the index of the second largest element\n    for i in range(N):\n        if A[i] == second_max:\n            print(i + 1)\n            break\n\nfind_second_largest_index()\n```"}
{"task_id": "abc371_b", "code": "def determine_taro_names(N, M, births):\n    # Initialize an array to keep track of the earliest born male child for each family\n    earliest_male = [None] * (N + 1)\n    \n    # Function to determine if a baby is the earliest born male child in their family\n    def is_earliest_male(family_id, gender):\n        if gender == 'M':\n            if earliest_male[family_id] is None or family_id < earliest_male[family_id]:\n                earliest_male[family_id] = family_id\n                return True\n        return False\n    \n    # Process each birth and determine if the baby is named Taro\n    results = []\n    for family_id, gender in births:\n        if is_earliest_male(family_id, gender):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    # Print the results\n    for result in results:\n        print(result)\n\n# Example usage:\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    births = [(int(data[2 + 2*i]), data[3 + 2*i]) for i in range(M)]\n    \n    determine_taro_names(N, M, births)", "passed": true, "raw_code": "```python\ndef determine_taro_names(N, M, births):\n    # Initialize an array to keep track of the earliest born male child for each family\n    earliest_male = [None] * (N + 1)\n    \n    # Function to determine if a baby is the earliest born male child in their family\n    def is_earliest_male(family_id, gender):\n        if gender == 'M':\n            if earliest_male[family_id] is None or family_id < earliest_male[family_id]:\n                earliest_male[family_id] = family_id\n                return True\n        return False\n    \n    # Process each birth and determine if the baby is named Taro\n    results = []\n    for family_id, gender in births:\n        if is_earliest_male(family_id, gender):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    # Print the results\n    for result in results:\n        print(result)\n\n# Example usage:\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    births = [(int(data[2 + 2*i]), data[3 + 2*i]) for i in range(M)]\n    \n    determine_taro_names(N, M, births)\n```"}
{"task_id": "abc369_a", "code": "import sys\n\ndef count_valid_x(A, B):\n    count = 0\n    \n    # Case 1: x is the first term, p = x, q = A, r = B\n    x = 2 * A - B\n    if 1 <= x <= 100:\n        count += 1\n    \n    # Case 2: x is the second term, p = A, q = x, r = B\n    x = 2 * B - A\n    if 1 <= x <= 100:\n        count += 1\n    \n    # Case 3: x is the third term, p = A, q = B, r = x\n    x = A + B\n    if 1 <= x <= 100:\n        count += 1\n    \n    return count\n\n# Read input\nA, B = map(int, sys.stdin.readline().split())\n\n# Output the result\nprint(count_valid_x(A, B))", "passed": false, "raw_code": "```python\nimport sys\n\ndef count_valid_x(A, B):\n    count = 0\n    \n    # Case 1: x is the first term, p = x, q = A, r = B\n    x = 2 * A - B\n    if 1 <= x <= 100:\n        count += 1\n    \n    # Case 2: x is the second term, p = A, q = x, r = B\n    x = 2 * B - A\n    if 1 <= x <= 100:\n        count += 1\n    \n    # Case 3: x is the third term, p = A, q = B, r = x\n    x = A + B\n    if 1 <= x <= 100:\n        count += 1\n    \n    return count\n\n# Read input\nA, B = map(int, sys.stdin.readline().split())\n\n# Output the result\nprint(count_valid_x(A, B))\n```"}
{"task_id": "abc369_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    A = [int(data[i*2+1]) for i in range(N)]\n    S = [data[i*2+2] for i in range(N)]\n\n    def calculate_fatigue(left_hand, right_hand):\n        fatigue = 0\n        for i in range(N):\n            if S[i] == 'L':\n                if left_hand != A[i]:\n                    fatigue += abs(A[i] - left_hand)\n                    left_hand = A[i]\n            else:\n                if right_hand != A[i]:\n                    fatigue += abs(A[i] - right_hand)\n                    right_hand = A[i]\n        return fatigue\n\n    min_fatigue = float('inf')\n    for left_hand in range(1, 101):\n        for right_hand in range(1, 101):\n            min_fatigue = min(min_fatigue, calculate_fatigue(left_hand, right_hand))\n    print(min_fatigue)\n\nmain()", "passed": true, "raw_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    A = [int(data[i*2+1]) for i in range(N)]\n    S = [data[i*2+2] for i in range(N)]\n\n    def calculate_fatigue(left_hand, right_hand):\n        fatigue = 0\n        for i in range(N):\n            if S[i] == 'L':\n                if left_hand != A[i]:\n                    fatigue += abs(A[i] - left_hand)\n                    left_hand = A[i]\n            else:\n                if right_hand != A[i]:\n                    fatigue += abs(A[i] - right_hand)\n                    right_hand = A[i]\n        return fatigue\n\n    min_fatigue = float('inf')\n    for left_hand in range(1, 101):\n        for right_hand in range(1, 101):\n            min_fatigue = min(min_fatigue, calculate_fatigue(left_hand, right_hand))\n    print(min_fatigue)\n\nmain()"}
{"task_id": "3543", "code": "def count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zero_count = 0\n        one_count = 0\n        \n        for j in range(i, n):\n            if s[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                count += 1\n    \n    return count", "passed": true, "raw_code": "```python\ndef count_substrings(s: str, k: int) -> int:\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        zero_count = 0\n        one_count = 0\n        \n        for j in range(i, n):\n            if s[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                count += 1\n    \n    return count\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    # Initial position of the snake\n    i, j = 0, 0\n    \n    # Directions mapping\n    directions = {\n        \"UP\": (-1, 0),\n        \"RIGHT\": (0, 1),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1)\n    }\n    \n    # Process each command\n    for command in commands:\n        di, dj = directions[command]\n        ni, nj = i + di, j + dj\n        \n        # Check if the new position is within bounds\n        if 0 <= ni < n and 0 <= nj < n:\n            i, j = ni, nj\n    \n    # Calculate the final cell position\n    return (i * n) + j", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    # Initial position of the snake\n    i, j = 0, 0\n    \n    # Directions mapping\n    directions = {\n        \"UP\": (-1, 0),\n        \"RIGHT\": (0, 1),\n        \"DOWN\": (1, 0),\n        \"LEFT\": (0, -1)\n    }\n    \n    # Process each command\n    for command in commands:\n        di, dj = directions[command]\n        ni, nj = i + di, j + dj\n        \n        # Check if the new position is within bounds\n        if 0 <= ni < n and 0 <= nj < n:\n            i, j = ni, nj\n    \n    # Calculate the final cell position\n    return (i * n) + j\n```"}
{"task_id": "3568", "code": "def getKey(num1, num2, num3):\n    # Pad numbers with leading zeros to ensure they are four digits long\n    num1 = str(num1).zfill(4)\n    num2 = str(num2).zfill(4)\n    num3 = str(num3).zfill(4)\n    \n    # Initialize the key as an empty list\n    key = []\n    \n    # Iterate through each digit position (0-3)\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1[i]), int(num2[i]), int(num3[i]))\n        # Append the minimum digit to the key list\n        key.append(str(min_digit))\n    \n    # Join the list into a string and convert to an integer\n    key_str = ''.join(key)\n    key_int = int(key_str)\n    \n    # Return 0 if the key is \"0000\"; otherwise, return the integer value\n    return key_int if key_int != 0 else 0", "passed": true, "raw_code": "```python\ndef getKey(num1, num2, num3):\n    # Pad numbers with leading zeros to ensure they are four digits long\n    num1 = str(num1).zfill(4)\n    num2 = str(num2).zfill(4)\n    num3 = str(num3).zfill(4)\n    \n    # Initialize the key as an empty list\n    key = []\n    \n    # Iterate through each digit position (0-3)\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1[i]), int(num2[i]), int(num3[i]))\n        # Append the minimum digit to the key list\n        key.append(str(min_digit))\n    \n    # Join the list into a string and convert to an integer\n    key_str = ''.join(key)\n    key_int = int(key_str)\n    \n    # Return 0 if the key is \"0000\"; otherwise, return the integer value\n    return key_int if key_int != 0 else 0\n```"}
{"task_id": "abc366_b", "code": "d", "passed": false, "raw_code": "```python\ndef vertical_text():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Number of strings\n    N = int(data[0])\n    \n    # List of strings\n    strings = data[1:]\n    \n    # Determine the maximum length of the strings\n    max_len = max(len(s) for s in strings)\n    \n    # Initialize result list\n    result = [''] * max_len\n    \n    # Fill the result list by aligning characters from the rightmost string to the leftmost\n    for i in range(max_len):\n        for j in range(N):\n            if i < len(strings[j]):\n                result[i] += strings[j][i]\n            else:\n                result[i] += '*'\n        \n        # Ensure no string ends with an asterisk\n        if result[i].endswith('*'):\n            result[i] = result[i][:-1]\n    \n    # Print the result\n    for line in result:\n        print(line)\n\n# Call the function\nvertical_text()"}
{"task_id": "3553", "code": "def same_color(coordinate1: str, coordinate2: str) -> bool:\n    col_sum1 = ord(coordinate1[0]) + int(coordinate1[1])\n    col_sum2 = ord(coordinate2[0]) + int(coordinate2[1])\n    return col_sum1 % 2 == col_sum2 % 2", "passed": true, "raw_code": "```python\ndef same_color(coordinate1: str, coordinate2: str) -> bool:\n    col_sum1 = ord(coordinate1[0]) + int(coordinate1[1])\n    col_sum2 = ord(coordinate2[0]) + int(coordinate2[1])\n    return col_sum1 % 2 == col_sum2 % 2\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother(input_string):\n    # Parse the input string into individual relationships\n    S_AB, S_AC, S_BC = input_string.split()\n    \n    # Initialize age comparisons\n    ages = {'A': None, 'B': None, 'C': None}\n    \n    # Assign ages based on the relationships\n    if S_AB == '<':\n        ages['A'] = -1\n        ages['B'] = 1\n    elif S_AB == '>':\n        ages['A'] = 1\n        ages['B'] = -1\n    \n    if S_AC == '<':\n        ages['A'] = -1\n        ages['C'] = 1\n    elif S_AC == '>':\n        ages['A'] = 1\n        ages['C'] = -1\n    \n    if S_BC == '<':\n        ages['B'] = -1\n        ages['C'] = 1\n    elif S_BC == '>':\n        ages['B'] = 1\n        ages['C'] = -1\n    \n    # Sort the brothers based on their ages\n    sorted_ages = sorted(ages.items(), key=lambda x: x[1])\n    \n    # The middle brother is the one with the median age\n    middle_brother = sorted_ages[1][0]\n    \n    # Print the middle brother\n    print(middle_brother)\n\n# Call the function with standard input\nfind_middle_brother(input())", "passed": false, "raw_code": "```python\ndef find_middle_brother(input_string):\n    # Parse the input string into individual relationships\n    S_AB, S_AC, S_BC = input_string.split()\n    \n    # Initialize age comparisons\n    ages = {'A': None, 'B': None, 'C': None}\n    \n    # Assign ages based on the relationships\n    if S_AB == '<':\n        ages['A'] = -1\n        ages['B'] = 1\n    elif S_AB == '>':\n        ages['A'] = 1\n        ages['B'] = -1\n    \n    if S_AC == '<':\n        ages['A'] = -1\n        ages['C'] = 1\n    elif S_AC == '>':\n        ages['A'] = 1\n        ages['C'] = -1\n    \n    if S_BC == '<':\n        ages['B'] = -1\n        ages['C'] = 1\n    elif S_BC == '>':\n        ages['B'] = 1\n        ages['C'] = -1\n    \n    # Sort the brothers based on their ages\n    sorted_ages = sorted(ages.items(), key=lambda x: x[1])\n    \n    # The middle brother is the one with the median age\n    middle_brother = sorted_ages[1][0]\n    \n    # Print the middle brother\n    print(middle_brother)\n\n# Call the function with standard input\nfind_middle_brother(input())\n```"}
{"final_accuracy": "73.08%"}
