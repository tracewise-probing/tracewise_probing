"{\"difficulty\": \"medium\", \"num_threads\": 32, \"temperature\": 0.7, \"n\": 8, \"context\": \"all\", \"selection\": \"oracle\", \"num_round\": 1, \"selfdebug_decision\": \"exit\", \"judge\": \"openai/gpt-4o-mini\", \"generator\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"start_date\": \"2024-08-01T00:00:00\", \"end_date\": \"2024-12-01T00:00:00\", \"result_json_path\": \"results_sky_v2/sec4_parallel_sample_vanilla_bug_trace_TPL_CODEEXECUTOR_qwen_7b_medium_n_8.json\", \"ablation_judge_api_name\": null, \"ablation_judge_api_base\": \"openai/gpt-4o-mini\", \"method\": \"selfdebug\", \"test_generator\": \"openai/gpt-4o-mini\", \"num_test_suites\": 1, \"api_name\": \"openai/Qwen/Qwen2.5-Coder-7B-Instruct\", \"api_base\": \"http://127.0.0.1:8001/8001/v1\", \"no_refine\": true, \"no_dspy_gen\": false, \"lcb_version\": \"release_v4\", \"num_icl_examples\": 0, \"enable_llm_reflection_with_tool\": false, \"enable_vanilla_reflection\": false, \"ablation_qwq_vanilla_without_reasoning\": false, \"ablation_qwq_debug_with_4o_mini\": false, \"load_cached_preds\": false, \"cached_preds_path\": null, \"seed\": 42, \"resume\": true}"
{"task_id": "3579", "codes": ["def max_possible_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order\n    binary_nums.sort(reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "def max_binary_number(nums):\n    # Convert each number to its binary representation and strip the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings by length in descending order, and lexicographically if lengths are equal\n    binary_nums.sort(key=lambda x: (-len(x), x), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "def max_concatenated_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their value\n    binary_nums.sort(key=int, reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "def max_possible_number(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their lexicographical value\n    binary_nums.sort(reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "def max_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their numerical value\n    binary_nums.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)", "from itertools import permutations\n\ndef max_concatenated_binary(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = permutations(binary_nums)\n    \n    # Initialize the maximum value\n    max_value = 0\n    \n    # Iterate through each permutation and calculate the concatenated value\n    for perm in perms:\n        concatenated_bin = ''.join(perm)\n        concatenated_int = int(concatenated_bin, 2)\n        if concatenated_int > max_value:\n            max_value = concatenated_int\n    \n    return max_value", "def max_binary_number(nums):\n    max_value = 0\n    for perm in permutations(nums):\n        binary_str = ''.join(format(num, 'b') for num in perm)\n        max_value = max(max_value, int(binary_str, 2))\n    return max_value", "def largestNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their integer value\n    binary_nums.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)"], "passed": [false, false, false, false, false, true, false, false], "raw_code": ["```python\ndef max_possible_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order\n    binary_nums.sort(reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```", "```python\ndef max_binary_number(nums):\n    # Convert each number to its binary representation and strip the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings by length in descending order, and lexicographically if lengths are equal\n    binary_nums.sort(key=lambda x: (-len(x), x), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```", "```python\ndef max_concatenated_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their value\n    binary_nums.sort(key=int, reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```", "```python\ndef max_possible_number(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their lexicographical value\n    binary_nums.sort(reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```", "```python\ndef max_number(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their numerical value\n    binary_nums.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```", "```python\nfrom itertools import permutations\n\ndef max_concatenated_binary(nums):\n    # Convert each number to its binary representation without '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Generate all permutations of the binary strings\n    perms = permutations(binary_nums)\n    \n    # Initialize the maximum value\n    max_value = 0\n    \n    # Iterate through each permutation and calculate the concatenated value\n    for perm in perms:\n        concatenated_bin = ''.join(perm)\n        concatenated_int = int(concatenated_bin, 2)\n        if concatenated_int > max_value:\n            max_value = concatenated_int\n    \n    return max_value\n```", "```python\ndef max_binary_number(nums):\n    max_value = 0\n    for perm in permutations(nums):\n        binary_str = ''.join(format(num, 'b') for num in perm)\n        max_value = max(max_value, int(binary_str, 2))\n    return max_value\n```", "```python\ndef largestNumber(nums):\n    # Convert each number to its binary representation and remove the '0b' prefix\n    binary_nums = [bin(num)[2:] for num in nums]\n    \n    # Sort the binary strings in descending order based on their integer value\n    binary_nums.sort(key=lambda x: int(x, 2), reverse=True)\n    \n    # Concatenate the sorted binary strings\n    concatenated_binary = ''.join(binary_nums)\n    \n    # Convert the concatenated binary string back to an integer\n    return int(concatenated_binary, 2)\n```"]}
{"task_id": "3522", "codes": ["def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j] < subarray[j+1] for j in range(k-1)) and len(set(subarray)) == k:\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if sorted(subarray) == subarray and subarray == sorted(set(subarray)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "def find_power_of_subarrays(nums, k):\n    results = []\n    n = len(nums)\n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if subarray == sorted(subarray) and len(set(subarray)) == k:\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    return results", "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        subarray_set = set(subarray)\n        \n        if len(subarray_set) != len(subarray) or list(subarray_set) != sorted(subarray):\n            results.append(-1)\n        else:\n            results.append(max(subarray))\n    \n    return results", "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j] < subarray[j+1] for j in range(k-1)) and all(subarray[j] == subarray[j+1] or subarray[j] + 1 == subarray[j+1] for j in range(k-1)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "def find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if all(subarray[j] + 1 == subarray[j + 1] for j in range(k - 1)) and subarray == sorted(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results", "def find_power_of_subarrays(nums, k):\n    results = []\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sorted(subarray) == subarray and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    return results", "def find_subarray_powers(nums, k):\n    results = []\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if subarray == sorted(subarray) and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    return results"], "passed": [false, false, false, false, true, true, false, false], "raw_code": ["```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j] < subarray[j+1] for j in range(k-1)) and len(set(subarray)) == k:\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```", "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if sorted(subarray) == subarray and subarray == sorted(set(subarray)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```", "```python\ndef find_power_of_subarrays(nums, k):\n    results = []\n    n = len(nums)\n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if subarray == sorted(subarray) and len(set(subarray)) == k:\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    return results\n```", "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        subarray_set = set(subarray)\n        \n        if len(subarray_set) != len(subarray) or list(subarray_set) != sorted(subarray):\n            results.append(-1)\n        else:\n            results.append(max(subarray))\n    \n    return results\n```", "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j] < subarray[j+1] for j in range(k-1)) and all(subarray[j] == subarray[j+1] or subarray[j] + 1 == subarray[j+1] for j in range(k-1)):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```", "```python\ndef find_subarray_powers(nums, k):\n    n = len(nums)\n    results = []\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if all(subarray[j] + 1 == subarray[j + 1] for j in range(k - 1)) and subarray == sorted(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    \n    return results\n```", "```python\ndef find_power_of_subarrays(nums, k):\n    results = []\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sorted(subarray) == subarray and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    return results\n```", "```python\ndef find_subarray_powers(nums, k):\n    results = []\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if subarray == sorted(subarray) and len(set(subarray)) == len(subarray):\n            results.append(max(subarray))\n        else:\n            results.append(-1)\n    return results\n```"]}
{"task_id": "3526", "codes": ["def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flip_row(row):\n        return sum(1 for i in range(n // 2) if row[i] != row[n - 1 - i])\n    \n    def flip_col(col):\n        return sum(1 for j in range(m // 2) if grid[j][col] != grid[m - 1 - j][col])\n    \n    total_flips_rows = sum(flip_row(row) for row in grid)\n    total_flips_cols = sum(flip_col(col) for col in range(n))\n    \n    return min(total_flips_rows, total_flips_cols)", "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)", "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flip(row):\n        return [1 - x for x in row]\n    \n    def is_palindrome(row):\n        return row == row[::-1]\n    \n    def flips_needed_for_row(row):\n        return sum(x != y for x, y in zip(row, flip(row)))\n    \n    def flips_needed_for_column(col):\n        return sum(x != y for x, y in zip(col, flip(col)))\n    \n    total_flips_rows = sum(flips_needed_for_row(row) for row in grid)\n    total_flips_columns = sum(flips_needed_for_column([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(total_flips_rows, total_flips_columns)", "def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range(n // 2) if row[i] != row[n - 1 - i])\n    \n    def flips_for_column(col):\n        return sum(1 for i in range(m // 2) if grid[i][col] != grid[m - 1 - i][col])\n    \n    total_flips_rows = sum(flips_for_row(row) for row in grid)\n    total_flips_columns = sum(flips_for_column(col) for col in range(n))\n    \n    return min(total_flips_rows, total_flips_columns)", "def min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range((n + 1) // 2) if row[i] != row[n - 1 - i])\n    \n    def flips_for_column(col):\n        return sum(1 for i in range((m + 1) // 2) if grid[i][col] != grid[m - 1 - i][col])\n    \n    total_rows_flips = sum(flips_for_row(row) for row in grid)\n    total_cols_flips = sum(flips_for_column(col) for col in range(n))\n    \n    return min(total_rows_flips, total_cols_flips)", "def min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(1 for i in range(len(arr) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)", "def min_flips_to_palindrome(grid):\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    m, n = len(grid), len(grid[0])\n    \n    # Count flips needed to make all rows palindromic\n    row_flips = sum(sum(1 for j in range(n) if grid[i][j] != grid[i][n-1-j]) for i in range(m))\n    \n    # Count flips needed to make all columns palindromic\n    col_flips = sum(sum(1 for i in range(m) if grid[i][j] != grid[m-1-i][j]) for j in range(n))\n    \n    return min(row_flips, col_flips)", ""], "passed": [true, true, false, true, true, true, false, false], "raw_code": ["```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flip_row(row):\n        return sum(1 for i in range(n // 2) if row[i] != row[n - 1 - i])\n    \n    def flip_col(col):\n        return sum(1 for j in range(m // 2) if grid[j][col] != grid[m - 1 - j][col])\n    \n    total_flips_rows = sum(flip_row(row) for row in grid)\n    total_flips_cols = sum(flip_col(col) for col in range(n))\n    \n    return min(total_flips_rows, total_flips_cols)\n```", "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(1 for i in range((len(arr) + 1) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)\n```", "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flip(row):\n        return [1 - x for x in row]\n    \n    def is_palindrome(row):\n        return row == row[::-1]\n    \n    def flips_needed_for_row(row):\n        return sum(x != y for x, y in zip(row, flip(row)))\n    \n    def flips_needed_for_column(col):\n        return sum(x != y for x, y in zip(col, flip(col)))\n    \n    total_flips_rows = sum(flips_needed_for_row(row) for row in grid)\n    total_flips_columns = sum(flips_needed_for_column([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(total_flips_rows, total_flips_columns)\n```", "```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range(n // 2) if row[i] != row[n - 1 - i])\n    \n    def flips_for_column(col):\n        return sum(1 for i in range(m // 2) if grid[i][col] != grid[m - 1 - i][col])\n    \n    total_flips_rows = sum(flips_for_row(row) for row in grid)\n    total_flips_columns = sum(flips_for_column(col) for col in range(n))\n    \n    return min(total_flips_rows, total_flips_columns)\n```", "```python\ndef min_flips_to_palindrome(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_for_row(row):\n        return sum(1 for i in range((n + 1) // 2) if row[i] != row[n - 1 - i])\n    \n    def flips_for_column(col):\n        return sum(1 for i in range((m + 1) // 2) if grid[i][col] != grid[m - 1 - i][col])\n    \n    total_rows_flips = sum(flips_for_row(row) for row in grid)\n    total_cols_flips = sum(flips_for_column(col) for col in range(n))\n    \n    return min(total_rows_flips, total_cols_flips)\n```", "```python\ndef min_flips(grid):\n    m, n = len(grid), len(grid[0])\n    \n    def flips_to_palindrome(arr):\n        return sum(1 for i in range(len(arr) // 2) if arr[i] != arr[-i - 1])\n    \n    row_flips = sum(flips_to_palindrome(row) for row in grid)\n    col_flips = sum(flips_to_palindrome([grid[j][i] for j in range(m)]) for i in range(n))\n    \n    return min(row_flips, col_flips)\n```", "```python\ndef min_flips_to_palindrome(grid):\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    m, n = len(grid), len(grid[0])\n    \n    # Count flips needed to make all rows palindromic\n    row_flips = sum(sum(1 for j in range(n) if grid[i][j] != grid[i][n-1-j]) for i in range(m))\n    \n    # Count flips needed to make all columns palindromic\n    col_flips = sum(sum(1 for i in range(m) if grid[i][j] != grid[m-1-i][j]) for j in range(n))\n    \n    return min(row_flips, col_flips)\n```", ""]}
{"task_id": "3541", "codes": ["def is_spam(message: List[str], banned_words: List[str]) -> bool:\n    banned_set = set(banned_words)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False", "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False", "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in count:\n                count[word] += 1\n                if count[word] >= 2:\n                    return True\n            else:\n                count[word] = 1\n    \n    return False", "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    unique_banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            unique_banned_count += 1\n            if unique_banned_count >= 2:\n                return True\n    \n    return False", "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = sum(word in banned_set for word in message)\n    return banned_count >= 2", "def is_spam(message, banned_words):\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] == 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False", "def is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False", "def is_spam(message: List[str], banned_words: List[str]) -> bool:\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            word_count[word] = word_count.get(word, 0) + 1\n            if word_count[word] >= 2:\n                return True\n    \n    return False"], "passed": [false, false, false, true, true, false, false, false], "raw_code": ["```python\ndef is_spam(message: List[str], banned_words: List[str]) -> bool:\n    banned_set = set(banned_words)\n    banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            banned_count += 1\n            if banned_count >= 2:\n                return True\n    \n    return False\n```", "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False\n```", "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in count:\n                count[word] += 1\n                if count[word] >= 2:\n                    return True\n            else:\n                count[word] = 1\n    \n    return False\n```", "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    unique_banned_count = 0\n    \n    for word in message:\n        if word in banned_set:\n            unique_banned_count += 1\n            if unique_banned_count >= 2:\n                return True\n    \n    return False\n```", "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    banned_count = sum(word in banned_set for word in message)\n    return banned_count >= 2\n```", "```python\ndef is_spam(message, banned_words):\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] == 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False\n```", "```python\ndef is_spam(message, bannedWords):\n    banned_set = set(bannedWords)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            if word in word_count:\n                word_count[word] += 1\n                if word_count[word] >= 2:\n                    return True\n            else:\n                word_count[word] = 1\n    \n    return False\n```", "```python\ndef is_spam(message: List[str], banned_words: List[str]) -> bool:\n    banned_set = set(banned_words)\n    word_count = {}\n    \n    for word in message:\n        if word in banned_set:\n            word_count[word] = word_count.get(word, 0) + 1\n            if word_count[word] >= 2:\n                return True\n    \n    return False\n```"]}
{"task_id": "3540", "codes": ["def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result", "def hash_string(s: str, k: int) -> str:\n    result = []\n    n = len(s)\n    \n    for i in range(0, n, k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    \n    return ''.join(result)", "def hash_string(s, k):\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        hash_value = sum(ord(char) - ord('a') for char in substring)\n        hashedChar = hash_value % 26\n        result += chr(ord('a') + hashedChar)\n    return result", "def hashString(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        sum_hash = sum(ord(char) - ord('a') for char in substring)\n        hashedChar = sum_hash % 26\n        result += chr(hashedChar + ord('a'))\n    return result", "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)", "def hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result", "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)", "def hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)"], "passed": [true, true, true, true, true, true, true, true], "raw_code": ["```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result += chr(hashed_char + ord('a'))\n    return result\n```", "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    n = len(s)\n    \n    for i in range(0, n, k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = char_sum % 26\n        result.append(chr(hashed_char + ord('a')))\n    \n    return ''.join(result)\n```", "```python\ndef hash_string(s, k):\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        hash_value = sum(ord(char) - ord('a') for char in substring)\n        hashedChar = hash_value % 26\n        result += chr(ord('a') + hashedChar)\n    return result\n```", "```python\ndef hashString(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        sum_hash = sum(ord(char) - ord('a') for char in substring)\n        hashedChar = sum_hash % 26\n        result += chr(hashedChar + ord('a'))\n    return result\n```", "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)\n```", "```python\ndef hash_string(s: str, k: int) -> str:\n    result = \"\"\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result += hashed_char\n    return result\n```", "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)\n```", "```python\ndef hash_string(s: str, k: int) -> str:\n    result = []\n    for i in range(0, len(s), k):\n        substring = s[i:i+k]\n        char_sum = sum(ord(char) - ord('a') for char in substring)\n        hashed_char = chr((char_sum % 26) + ord('a'))\n        result.append(hashed_char)\n    return ''.join(result)\n```"]}
{"task_id": "3573", "codes": ["def countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    # Count character frequencies in word2\n    target_count = Counter(word2)\n    \n    n = len(word1)\n    m = len(word2)\n    result = 0\n    \n    # Sliding window over word1\n    for i in range(n - m + 1):\n        current_count = Counter(word1[i:i+m])\n        if current_count >= target_count:\n            result += 1\n            \n    return result", "from collections import Counter\n\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    m, n = len(word1), len(word2)\n    count_w1 = Counter()\n    count_w2 = Counter(word2)\n    valid_count = 0\n    \n    for i in range(m - n + 1):\n        # Update the counter for the current window\n        for j in range(n):\n            count_w1[word1[i + j]] += 1\n        \n        # Check if the current window matches the required character counts\n        if count_w1 == count_w2:\n            valid_count += 1\n        \n        # Reset the counter for the next window\n        for j in range(n):\n            count_w1[word1[i + j]] -= 1\n            if count_w1[word1[i + j]] == 0:\n                del count_w1[word1[i + j]]\n    \n    return valid_count", "from collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    n, m = len(word1), len(word2)\n    if n < m:\n        return 0\n    \n    target = Counter(word2)\n    count = 0\n    \n    for i in range(n - m + 1):\n        current = Counter(word1[i:i+m])\n        if current == target:\n            count += 1\n            \n    return count", "def countValidSubstrings(word1, word2):\n    count = 0\n    n = len(word1)\n    m = len(word2)\n    \n    for i in range(n - m + 1):\n        substring = word1[i:i + m]\n        if isValid(substring, word2):\n            count += 1\n            \n    return count\n\ndef isValid(substring, word2):\n    sub_count = [0] * 26\n    word2_count = [0] * 26\n    \n    for j in range(len(word2)):\n        sub_count[ord(substring[j]) - ord('a')] += 1\n        word2_count[ord(word2[j]) - ord('a')] += 1\n    \n    for j in range(len(word2)):\n        if sub_count[ord(word2[j]) - ord('a')] < word2_count[ord(word2[j]) - ord('a')]:\n            return False\n    \n    return True", "def count_valid_substrings(word1, word2):\n    from collections import Counter\n    \n    count2 = Counter(word2)\n    n1, n2 = len(word1), len(word2)\n    valid_count = 0\n    \n    for i in range(n1 - n2 + 1):\n        substring = word1[i:i + n2]\n        count1 = Counter(substring)\n        if all(count1[char] >= count2[char] for char in count2):\n            valid_count += 1\n    \n    return valid_count", "def countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    count = 0\n    target = Counter(word2)\n    \n    for i in range(m - n + 1):\n        window = Counter(word1[i:i+n])\n        if window & target == target:\n            count += 1\n            \n    return count", "def countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    target = Counter(word2)\n    count = 0\n    \n    for i in range(n - 1, m):\n        window = Counter(word1[i - n + 1:i + 1])\n        if window == target:\n            count += 1\n            \n    return count", "def countValidSubstrings(word1, word2):\n    m, n = len(word1), len(word2)\n    count = 0\n    \n    # Iterate over possible starting positions of the substring in word1\n    for i in range(m - n + 1):\n        substring = word1[i:i+n]\n        if substring.startswith(word2):\n            # Check if the remaining part of word1 contains enough characters to form word2\n            remaining = word1[i+n:]\n            remaining_count = collections.Counter(remaining)\n            target_count = collections.Counter(word2[n:])\n            if all(remaining_count[char] >= target_count[char] for char in target_count):\n                count += 1\n                \n    return count"], "passed": [false, false, false, false, false, false, false, false], "raw_code": ["```python\ndef countValidSubstrings(word1, word2):\n    from collections import Counter\n    \n    # Count character frequencies in word2\n    target_count = Counter(word2)\n    \n    n = len(word1)\n    m = len(word2)\n    result = 0\n    \n    # Sliding window over word1\n    for i in range(n - m + 1):\n        current_count = Counter(word1[i:i+m])\n        if current_count >= target_count:\n            result += 1\n            \n    return result\n```", "```python\nfrom collections import Counter\n\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    m, n = len(word1), len(word2)\n    count_w1 = Counter()\n    count_w2 = Counter(word2)\n    valid_count = 0\n    \n    for i in range(m - n + 1):\n        # Update the counter for the current window\n        for j in range(n):\n            count_w1[word1[i + j]] += 1\n        \n        # Check if the current window matches the required character counts\n        if count_w1 == count_w2:\n            valid_count += 1\n        \n        # Reset the counter for the next window\n        for j in range(n):\n            count_w1[word1[i + j]] -= 1\n            if count_w1[word1[i + j]] == 0:\n                del count_w1[word1[i + j]]\n    \n    return valid_count\n```", "```python\nfrom collections import Counter\n\ndef countValidSubstrings(word1, word2):\n    n, m = len(word1), len(word2)\n    if n < m:\n        return 0\n    \n    target = Counter(word2)\n    count = 0\n    \n    for i in range(n - m + 1):\n        current = Counter(word1[i:i+m])\n        if current == target:\n            count += 1\n            \n    return count\n```", "```python\ndef countValidSubstrings(word1, word2):\n    count = 0\n    n = len(word1)\n    m = len(word2)\n    \n    for i in range(n - m + 1):\n        substring = word1[i:i + m]\n        if isValid(substring, word2):\n            count += 1\n            \n    return count\n\ndef isValid(substring, word2):\n    sub_count = [0] * 26\n    word2_count = [0] * 26\n    \n    for j in range(len(word2)):\n        sub_count[ord(substring[j]) - ord('a')] += 1\n        word2_count[ord(word2[j]) - ord('a')] += 1\n    \n    for j in range(len(word2)):\n        if sub_count[ord(word2[j]) - ord('a')] < word2_count[ord(word2[j]) - ord('a')]:\n            return False\n    \n    return True\n```", "```python\ndef count_valid_substrings(word1, word2):\n    from collections import Counter\n    \n    count2 = Counter(word2)\n    n1, n2 = len(word1), len(word2)\n    valid_count = 0\n    \n    for i in range(n1 - n2 + 1):\n        substring = word1[i:i + n2]\n        count1 = Counter(substring)\n        if all(count1[char] >= count2[char] for char in count2):\n            valid_count += 1\n    \n    return valid_count\n```", "```python\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    count = 0\n    target = Counter(word2)\n    \n    for i in range(m - n + 1):\n        window = Counter(word1[i:i+n])\n        if window & target == target:\n            count += 1\n            \n    return count\n```", "```python\ndef countValidSubstrings(word1: str, word2: str) -> int:\n    from collections import Counter\n    \n    m, n = len(word1), len(word2)\n    target = Counter(word2)\n    count = 0\n    \n    for i in range(n - 1, m):\n        window = Counter(word1[i - n + 1:i + 1])\n        if window == target:\n            count += 1\n            \n    return count\n```", "```python\ndef countValidSubstrings(word1, word2):\n    m, n = len(word1), len(word2)\n    count = 0\n    \n    # Iterate over possible starting positions of the substring in word1\n    for i in range(m - n + 1):\n        substring = word1[i:i+n]\n        if substring.startswith(word2):\n            # Check if the remaining part of word1 contains enough characters to form word2\n            remaining = word1[i+n:]\n            remaining_count = collections.Counter(remaining)\n            target_count = collections.Counter(word2[n:])\n            if all(remaining_count[char] >= target_count[char] for char in target_count):\n                count += 1\n                \n    return count\n```"]}
{"task_id": "3485", "codes": ["def max_score(start, d):\n    # Sort the start array to facilitate finding the minimum differences\n    start.sort()\n    \n    # Initialize the maximum score to a very small number\n    max_score = float('-inf')\n    \n    # Iterate through the sorted array and calculate the differences\n    for i in range(1, len(start)):\n        diff = start[i] - start[i-1]\n        if diff > max_score:\n            max_score = diff\n    \n    return max_score", "def maxScore(start, d):\n    start.sort()\n    n = len(start)\n    chosen = [max(start[i] + d, start[i+1] - d) for i in range(n-1)]\n    return max(chosen)", "def maxScore(start, d):\n    return d", "def maxScore(start, d):\n    # Sort the intervals based on their starting points\n    start.sort()\n    \n    # Initialize the maximum score\n    max_score = 0\n    \n    # Iterate through the sorted intervals\n    for i in range(len(start)):\n        # Calculate the potential chosen integer\n        chosen_value = start[i] + d\n        \n        # Calculate the score for the current selection\n        if i > 0:\n            score = abs(chosen_value - start[i-1])\n        else:\n            score = abs(chosen_value - start[0])\n        \n        # Update the maximum score\n        max_score = max(max_score, score)\n    \n    return max_score", "def maxScore(start, d):\n    # Choose the upper bound of each interval\n    chosen = [s + d for s in start]\n    # Sort the chosen integers\n    chosen.sort()\n    # Calculate the differences between consecutive integers\n    max_diff = max(chosen[i] - chosen[i-1] for i in range(1, len(chosen)))\n    return max_diff", "def maxScore(start, d):\n    # Choose the largest number from each interval\n    chosen_numbers = [s + d for s in start]\n    # Sort the chosen numbers\n    chosen_numbers.sort()\n    # Calculate the minimum absolute difference between consecutive numbers\n    max_diff = max(chosen_numbers[i] - chosen_numbers[i-1] for i in range(1, len(chosen_numbers)))\n    return max_diff", "def maxScore(start, d):\n    start.sort()\n    max_score = 0\n    for i in range(len(start)):\n        if i > 0:\n            max_score = max(max_score, start[i] - start[i-1])\n    return max_score", "def maxScore(start, d):\n    start.sort()\n    max_diff = 0\n    for i in range(len(start) - 1):\n        max_diff = max(max_diff, start[i + 1] + d - (start[i] + d))\n    return max_diff"], "passed": [false, false, false, false, false, false, false, false], "raw_code": ["```python\ndef max_score(start, d):\n    # Sort the start array to facilitate finding the minimum differences\n    start.sort()\n    \n    # Initialize the maximum score to a very small number\n    max_score = float('-inf')\n    \n    # Iterate through the sorted array and calculate the differences\n    for i in range(1, len(start)):\n        diff = start[i] - start[i-1]\n        if diff > max_score:\n            max_score = diff\n    \n    return max_score\n```", "```python\ndef maxScore(start, d):\n    start.sort()\n    n = len(start)\n    chosen = [max(start[i] + d, start[i+1] - d) for i in range(n-1)]\n    return max(chosen)\n```", "```python\ndef maxScore(start, d):\n    return d\n```", "```python\ndef maxScore(start, d):\n    # Sort the intervals based on their starting points\n    start.sort()\n    \n    # Initialize the maximum score\n    max_score = 0\n    \n    # Iterate through the sorted intervals\n    for i in range(len(start)):\n        # Calculate the potential chosen integer\n        chosen_value = start[i] + d\n        \n        # Calculate the score for the current selection\n        if i > 0:\n            score = abs(chosen_value - start[i-1])\n        else:\n            score = abs(chosen_value - start[0])\n        \n        # Update the maximum score\n        max_score = max(max_score, score)\n    \n    return max_score\n```", "```python\ndef maxScore(start, d):\n    # Choose the upper bound of each interval\n    chosen = [s + d for s in start]\n    # Sort the chosen integers\n    chosen.sort()\n    # Calculate the differences between consecutive integers\n    max_diff = max(chosen[i] - chosen[i-1] for i in range(1, len(chosen)))\n    return max_diff\n```", "```python\ndef maxScore(start, d):\n    # Choose the largest number from each interval\n    chosen_numbers = [s + d for s in start]\n    # Sort the chosen numbers\n    chosen_numbers.sort()\n    # Calculate the minimum absolute difference between consecutive numbers\n    max_diff = max(chosen_numbers[i] - chosen_numbers[i-1] for i in range(1, len(chosen_numbers)))\n    return max_diff\n```", "```python\ndef maxScore(start, d):\n    start.sort()\n    max_score = 0\n    for i in range(len(start)):\n        if i > 0:\n            max_score = max(max_score, start[i] - start[i-1])\n    return max_score\n```", "```python\ndef maxScore(start, d):\n    start.sort()\n    max_diff = 0\n    for i in range(len(start) - 1):\n        max_diff = max(max_diff, start[i + 1] + d - (start[i] + d))\n    return max_diff\n```"]}
{"task_id": "3534", "codes": ["def almost_equal_pairs(nums):\n    def get_swaps(num):\n        digits = list(str(num))\n        swaps = set()\n        n = len(digits)\n        for i in range(n):\n            for j in range(i + 1, n):\n                digits[i], digits[j] = digits[j], digits[i]\n                swaps.add(int(''.join(digits)))\n                digits[i], digits[j] = digits[j], digits[i]\n        return swaps\n\n    swaps_dict = {num: get_swaps(num) for num in nums}\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[j] in swaps_dict[nums[i]]:\n                count += 1\n    return count", "def count_almost_equal_pairs(nums):\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        num_str = str(nums[i])\n        num_set = set()\n        for j in range(len(num_str)):\n            for k in range(j + 1, len(num_str)):\n                swapped_num_str = num_str[:j] + num_str[k] + num_str[j + 1:k] + num_str[j] + num_str[k + 1:]\n                swapped_num = int(swapped_num_str)\n                if swapped_num in nums and nums[i] != swapped_num:\n                    count += 1\n                    num_set.add(swapped_num)\n    return count // 2", "def almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            \n            for k in range(len(num1)):\n                for l in range(k + 1, len(num1)):\n                    # Create new strings by swapping characters at positions k and l\n                    swapped_num1 = num1[:k] + num1[l] + num1[k+1:l] + num1[k] + num1[l+1:]\n                    swapped_num2 = num2[:k] + num2[l] + num2[k+1:l] + num2[k] + num2[l+1:]\n                    \n                    if swapped_num1 == swapped_num2:\n                        count += 1\n                        \n    return count", "def almost_equal_pairs(nums):\n    def swap_digits(num_str, pos1, pos2):\n        num_list = list(num_str)\n        num_list[pos1], num_list[pos2] = num_list[pos2], num_list[pos1]\n        return ''.join(num_list)\n    \n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1, num2 = str(nums[i]), str(nums[j])\n            if num1 == num2:\n                count += 1\n                continue\n            \n            for pos1 in range(len(num1)):\n                for pos2 in range(pos1 + 1, len(num1)):\n                    swapped_num1 = swap_digits(num1, pos1, pos2)\n                    if swapped_num1 == num2:\n                        count += 1\n                        break\n                else:\n                    continue\n                break\n    \n    return count", "def almost_equal_pairs(nums):\n    def generate_swapped_numbers(num):\n        num_str = str(num)\n        n = len(num_str)\n        swapped_nums = set()\n        for i in range(n):\n            for j in range(i + 1, n):\n                swapped_num = int(num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:])\n                swapped_nums.add(swapped_num)\n        return swapped_nums\n    \n    count = 0\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            continue\n        swapped_nums = generate_swapped_numbers(num)\n        for swapped_num in swapped_nums:\n            if swapped_num in nums:\n                count += 1\n        seen.add(num)\n    \n    return count", "def count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            \n            # Check all possible pairs of positions to swap digits\n            for pos1 in range(len(num1)):\n                for pos2 in range(pos1 + 1, len(num1)):\n                    swapped_num1 = list(num1)\n                    swapped_num1[pos1], swapped_num1[pos2] = swapped_num1[pos2], swapped_num1[pos1]\n                    \n                    for pos3 in range(len(num2)):\n                        for pos4 in range(pos3 + 1, len(num2)):\n                            swapped_num2 = list(num2)\n                            swapped_num2[pos3], swapped_num2[pos4] = swapped_num2[pos4], swapped_num2[pos3]\n                            \n                            if ''.join(swapped_num1) == ''.join(swapped_num2):\n                                count += 1\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        continue\n                    break\n                    \n    return count", "def count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            str_x = str(nums[i])\n            str_y = str(nums[j])\n            \n            diff_indices = []\n            for k in range(min(len(str_x), len(str_y))):\n                if str_x[k] != str_y[k]:\n                    diff_indices.append(k)\n                \n                if len(diff_indices) > 2:\n                    break\n            \n            if len(diff_indices) == 2:\n                # Try swapping the differing digits\n                str_x_list = list(str_x)\n                str_y_list = list(str_y)\n                \n                str_x_list[diff_indices[0]], str_x_list[diff_indices[1]] = str_x_list[diff_indices[1]], str_x_list[diff_indices[0]]\n                str_y_list[diff_indices[0]], str_y_list[diff_indices[1]] = str_y_list[diff_indices[1]], str_y_list[diff_indices[0]]\n                \n                if ''.join(str_x_list) == ''.join(str_y_list):\n                    count += 1\n    \n    return count", "def almost_equal_pairs(nums):\n    def are_almost_equal(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n    \n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if are_almost_equal(nums[i], nums[j]):\n                count += 1\n    return count"], "passed": [false, false, false, false, false, false, false, false], "raw_code": ["```python\ndef almost_equal_pairs(nums):\n    def get_swaps(num):\n        digits = list(str(num))\n        swaps = set()\n        n = len(digits)\n        for i in range(n):\n            for j in range(i + 1, n):\n                digits[i], digits[j] = digits[j], digits[i]\n                swaps.add(int(''.join(digits)))\n                digits[i], digits[j] = digits[j], digits[i]\n        return swaps\n\n    swaps_dict = {num: get_swaps(num) for num in nums}\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[j] in swaps_dict[nums[i]]:\n                count += 1\n    return count\n```", "```python\ndef count_almost_equal_pairs(nums):\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        num_str = str(nums[i])\n        num_set = set()\n        for j in range(len(num_str)):\n            for k in range(j + 1, len(num_str)):\n                swapped_num_str = num_str[:j] + num_str[k] + num_str[j + 1:k] + num_str[j] + num_str[k + 1:]\n                swapped_num = int(swapped_num_str)\n                if swapped_num in nums and nums[i] != swapped_num:\n                    count += 1\n                    num_set.add(swapped_num)\n    return count // 2\n```", "```python\ndef almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            \n            for k in range(len(num1)):\n                for l in range(k + 1, len(num1)):\n                    # Create new strings by swapping characters at positions k and l\n                    swapped_num1 = num1[:k] + num1[l] + num1[k+1:l] + num1[k] + num1[l+1:]\n                    swapped_num2 = num2[:k] + num2[l] + num2[k+1:l] + num2[k] + num2[l+1:]\n                    \n                    if swapped_num1 == swapped_num2:\n                        count += 1\n                        \n    return count\n```", "```python\ndef almost_equal_pairs(nums):\n    def swap_digits(num_str, pos1, pos2):\n        num_list = list(num_str)\n        num_list[pos1], num_list[pos2] = num_list[pos2], num_list[pos1]\n        return ''.join(num_list)\n    \n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1, num2 = str(nums[i]), str(nums[j])\n            if num1 == num2:\n                count += 1\n                continue\n            \n            for pos1 in range(len(num1)):\n                for pos2 in range(pos1 + 1, len(num1)):\n                    swapped_num1 = swap_digits(num1, pos1, pos2)\n                    if swapped_num1 == num2:\n                        count += 1\n                        break\n                else:\n                    continue\n                break\n    \n    return count\n```", "```python\ndef almost_equal_pairs(nums):\n    def generate_swapped_numbers(num):\n        num_str = str(num)\n        n = len(num_str)\n        swapped_nums = set()\n        for i in range(n):\n            for j in range(i + 1, n):\n                swapped_num = int(num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:])\n                swapped_nums.add(swapped_num)\n        return swapped_nums\n    \n    count = 0\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            continue\n        swapped_nums = generate_swapped_numbers(num)\n        for swapped_num in swapped_nums:\n            if swapped_num in nums:\n                count += 1\n        seen.add(num)\n    \n    return count\n```", "```python\ndef count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            num1 = str(nums[i])\n            num2 = str(nums[j])\n            \n            # Check all possible pairs of positions to swap digits\n            for pos1 in range(len(num1)):\n                for pos2 in range(pos1 + 1, len(num1)):\n                    swapped_num1 = list(num1)\n                    swapped_num1[pos1], swapped_num1[pos2] = swapped_num1[pos2], swapped_num1[pos1]\n                    \n                    for pos3 in range(len(num2)):\n                        for pos4 in range(pos3 + 1, len(num2)):\n                            swapped_num2 = list(num2)\n                            swapped_num2[pos3], swapped_num2[pos4] = swapped_num2[pos4], swapped_num2[pos3]\n                            \n                            if ''.join(swapped_num1) == ''.join(swapped_num2):\n                                count += 1\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        continue\n                    break\n                    \n    return count\n```", "```python\ndef count_almost_equal_pairs(nums):\n    n = len(nums)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            str_x = str(nums[i])\n            str_y = str(nums[j])\n            \n            diff_indices = []\n            for k in range(min(len(str_x), len(str_y))):\n                if str_x[k] != str_y[k]:\n                    diff_indices.append(k)\n                \n                if len(diff_indices) > 2:\n                    break\n            \n            if len(diff_indices) == 2:\n                # Try swapping the differing digits\n                str_x_list = list(str_x)\n                str_y_list = list(str_y)\n                \n                str_x_list[diff_indices[0]], str_x_list[diff_indices[1]] = str_x_list[diff_indices[1]], str_x_list[diff_indices[0]]\n                str_y_list[diff_indices[0]], str_y_list[diff_indices[1]] = str_y_list[diff_indices[1]], str_y_list[diff_indices[0]]\n                \n                if ''.join(str_x_list) == ''.join(str_y_list):\n                    count += 1\n    \n    return count\n```", "```python\ndef almost_equal_pairs(nums):\n    def are_almost_equal(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n    \n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if are_almost_equal(nums[i], nums[j]):\n                count += 1\n    return count\n```"]}
{"task_id": "3517", "codes": ["def shortest_path_after_queries(n, queries):\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        rootX = find(x)\n        rootY = find(y)\n        if rootX != rootY:\n            parent[rootX] = rootY\n\n    parent = list(range(n))\n    result = []\n    current_length = n - 1  # Initial length without any additional roads\n\n    for u, v in queries:\n        union(u, v)\n        if find(0) == find(n - 1):\n            current_length = abs(v - u)\n        result.append(current_length)\n\n    return result", "from collections import deque\n\ndef shortestPath(n, queries):\n    # Initialize the graph with initial roads\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    def bfs(start, end):\n        queue = deque([(start, 0)])\n        visited = set([start])\n        \n        while queue:\n            current, distance = queue.popleft()\n            if current == end:\n                return distance\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, distance + 1))\n        \n        return float('inf')\n    \n    results = []\n    for u, v in queries:\n        graph[u].append(v)\n        results.append(bfs(0, n - 1))\n    \n    return results", "from collections import deque\n\ndef shortestPath(n, queries):\n    def bfs():\n        queue = deque([0])\n        visited = [False] * n\n        visited[0] = True\n        distance = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                current = queue.popleft()\n                if current == n - 1:\n                    return distance\n                for neighbor in graph[current]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append(neighbor)\n            distance += 1\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs())\n    \n    return result", "import heapq\n\ndef shortest_path_after_queries(n, queries):\n    def dijkstra(graph, start, end):\n        dist = {node: float('inf') for node in graph}\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            \n            if current_dist > dist[current_node]:\n                continue\n            \n            if current_node == end:\n                return current_dist\n            \n            for neighbor, weight in graph[current_node]:\n                distance = current_dist + weight\n                \n                if distance < dist[neighbor]:\n                    dist[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return float('inf')\n    \n    graph = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    answer = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        answer.append(dijkstra(graph, 0, n - 1))\n    \n    return answer", "import heapq\n\ndef shortest_path(n, queries):\n    # Initialize the graph with existing roads\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    # Function to compute shortest paths using Dijkstra's algorithm\n    def dijkstra(start):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            \n            for v, weight in graph[u]:\n                distance = current_dist + weight\n                \n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return dist\n    \n    # Initial shortest paths\n    distances = dijkstra(0)\n    result = []\n    \n    # Process each query\n    for u, v in queries:\n        # Add the new road to the graph\n        graph[u].append((v, 1))\n        graph[v].append((u, 1))\n        \n        # Recompute the shortest paths\n        distances = dijkstra(0)\n        \n        # Append the shortest path from 0 to n-1\n        result.append(distances[n-1])\n    \n    return result", "import heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        priority_queue = [(0, start)]\n        \n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    result = []\n    for u, v in queries:\n        graph[u][v] = 1\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "import heapq\n\ndef shortest_path(n, queries):\n    def dijkstra(graph, start, end):\n        dist = {node: float('inf') for node in graph}\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            \n            if current_dist > dist[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_dist + weight\n                \n                if distance < dist[neighbor]:\n                    dist[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return dist[end]\n    \n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    result = []\n    for u, v in queries:\n        graph[u][v] = 1\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result", "def shortestPath(n, queries):\n    from collections import deque\n    \n    # Initialize the graph with the initial roads\n    graph = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    # Function to perform BFS and find the shortest path from start to end\n    def bfs(start, end):\n        queue = deque([start])\n        visited = set([start])\n        distance = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                current = queue.popleft()\n                if current == end:\n                    return distance\n                for neighbor in graph[current]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n            distance += 1\n    \n    # Process each query and store the result\n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs(0, n - 1))\n    \n    return result"], "passed": [false, true, true, true, false, true, true, true], "raw_code": ["```python\ndef shortest_path_after_queries(n, queries):\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        rootX = find(x)\n        rootY = find(y)\n        if rootX != rootY:\n            parent[rootX] = rootY\n\n    parent = list(range(n))\n    result = []\n    current_length = n - 1  # Initial length without any additional roads\n\n    for u, v in queries:\n        union(u, v)\n        if find(0) == find(n - 1):\n            current_length = abs(v - u)\n        result.append(current_length)\n\n    return result\n```", "```python\nfrom collections import deque\n\ndef shortestPath(n, queries):\n    # Initialize the graph with initial roads\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    def bfs(start, end):\n        queue = deque([(start, 0)])\n        visited = set([start])\n        \n        while queue:\n            current, distance = queue.popleft()\n            if current == end:\n                return distance\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, distance + 1))\n        \n        return float('inf')\n    \n    results = []\n    for u, v in queries:\n        graph[u].append(v)\n        results.append(bfs(0, n - 1))\n    \n    return results\n```", "```python\nfrom collections import deque\n\ndef shortestPath(n, queries):\n    def bfs():\n        queue = deque([0])\n        visited = [False] * n\n        visited[0] = True\n        distance = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                current = queue.popleft()\n                if current == n - 1:\n                    return distance\n                for neighbor in graph[current]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append(neighbor)\n            distance += 1\n    \n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs())\n    \n    return result\n```", "```python\nimport heapq\n\ndef shortest_path_after_queries(n, queries):\n    def dijkstra(graph, start, end):\n        dist = {node: float('inf') for node in graph}\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            \n            if current_dist > dist[current_node]:\n                continue\n            \n            if current_node == end:\n                return current_dist\n            \n            for neighbor, weight in graph[current_node]:\n                distance = current_dist + weight\n                \n                if distance < dist[neighbor]:\n                    dist[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return float('inf')\n    \n    graph = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    answer = []\n    for u, v in queries:\n        graph[u].append((v, 1))\n        answer.append(dijkstra(graph, 0, n - 1))\n    \n    return answer\n```", "```python\nimport heapq\n\ndef shortest_path(n, queries):\n    # Initialize the graph with existing roads\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        graph[i].append((i + 1, 1))\n    \n    # Function to compute shortest paths using Dijkstra's algorithm\n    def dijkstra(start):\n        dist = [float('inf')] * n\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, u = heapq.heappop(pq)\n            if current_dist > dist[u]:\n                continue\n            \n            for v, weight in graph[u]:\n                distance = current_dist + weight\n                \n                if distance < dist[v]:\n                    dist[v] = distance\n                    heapq.heappush(pq, (distance, v))\n        \n        return dist\n    \n    # Initial shortest paths\n    distances = dijkstra(0)\n    result = []\n    \n    # Process each query\n    for u, v in queries:\n        # Add the new road to the graph\n        graph[u].append((v, 1))\n        graph[v].append((u, 1))\n        \n        # Recompute the shortest paths\n        distances = dijkstra(0)\n        \n        # Append the shortest path from 0 to n-1\n        result.append(distances[n-1])\n    \n    return result\n```", "```python\nimport heapq\n\ndef shortestPath(n, queries):\n    def dijkstra(graph, start, end):\n        distances = {node: float('inf') for node in graph}\n        distances[start] = 0\n        priority_queue = [(0, start)]\n        \n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            \n            if current_distance > distances[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_distance + weight\n                \n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n        \n        return distances[end]\n    \n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    result = []\n    for u, v in queries:\n        graph[u][v] = 1\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```", "```python\nimport heapq\n\ndef shortest_path(n, queries):\n    def dijkstra(graph, start, end):\n        dist = {node: float('inf') for node in graph}\n        dist[start] = 0\n        pq = [(0, start)]\n        \n        while pq:\n            current_dist, current_node = heapq.heappop(pq)\n            \n            if current_dist > dist[current_node]:\n                continue\n            \n            for neighbor, weight in graph[current_node].items():\n                distance = current_dist + weight\n                \n                if distance < dist[neighbor]:\n                    dist[neighbor] = distance\n                    heapq.heappush(pq, (distance, neighbor))\n        \n        return dist[end]\n    \n    graph = {i: {} for i in range(n)}\n    for i in range(n - 1):\n        graph[i][i + 1] = 1\n    \n    result = []\n    for u, v in queries:\n        graph[u][v] = 1\n        result.append(dijkstra(graph, 0, n - 1))\n    \n    return result\n```", "```python\ndef shortestPath(n, queries):\n    from collections import deque\n    \n    # Initialize the graph with the initial roads\n    graph = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        graph[i].append(i + 1)\n    \n    # Function to perform BFS and find the shortest path from start to end\n    def bfs(start, end):\n        queue = deque([start])\n        visited = set([start])\n        distance = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                current = queue.popleft()\n                if current == end:\n                    return distance\n                for neighbor in graph[current]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n            distance += 1\n    \n    # Process each query and store the result\n    result = []\n    for u, v in queries:\n        graph[u].append(v)\n        result.append(bfs(0, n - 1))\n    \n    return result\n```"]}
{"task_id": "3518", "codes": ["def maxScore(a, b):\n    # Create a list of tuples (product, index_in_b)\n    products = [(x * y, idx) for idx, x in enumerate(a) for y in b]\n    \n    # Sort the products in descending order\n    sorted_products = sorted(products, key=lambda x: x[0], reverse=True)\n    \n    # Select the top 4 products\n    top_4_products = sorted_products[:4]\n    \n    # Calculate the sum of the top 4 products\n    max_score = sum(product for product, _ in top_4_products)\n    \n    return max_score", "def max_score(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by pairing a[i] with the largest remaining elements in b\n    score = sum(a[i] * b_sorted[i] for i in range(4))\n    \n    return score", "def max_score(a, b):\n    # Sort the array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by pairing each element of a with the largest elements from b\n    score = sum(x * y for x, y in zip(a, b_sorted[:4]))\n    \n    return score", "def maxScore(a, b):\n    # Sort array b in ascending order\n    b.sort()\n    \n    # Sort array a in descending order\n    a.sort(reverse=True)\n    \n    # Calculate the maximum score\n    max_score = sum(a[i] * b[len(b) - 1 - i] for i in range(4))\n    \n    return max_score", "def maxScore(a, b):\n    a.sort()\n    b.sort(reverse=True)\n    return sum(x * y for x, y in zip(a, b))", "def max_score(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the maximum score\n    return sum(a[i] * b_sorted[i] for i in range(4))", "def maxScore(a, b):\n    b.sort()\n    a.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate through the sorted arrays and calculate the score\n    for i in range(4):\n        if a[i] >= 0:\n            score += a[i] * b[-i-1]\n        else:\n            score += a[i] * b[i]\n    \n    return score", "def maxScore(a, b):\n    # Sort array a and keep track of its original indices\n    sorted_a = sorted(enumerate(a), key=lambda x: x[1])\n    \n    # Sort array b and keep track of its original indices\n    sorted_b = sorted(enumerate(b), key=lambda x: x[1])\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate through the first 4 elements of sorted_b\n    for i in range(4):\n        index_b = sorted_b[i][0]\n        score += a[sorted_a[i][0]] * b[index_b]\n    \n    return score"], "passed": [false, false, false, false, false, false, false, false], "raw_code": ["```python\ndef maxScore(a, b):\n    # Create a list of tuples (product, index_in_b)\n    products = [(x * y, idx) for idx, x in enumerate(a) for y in b]\n    \n    # Sort the products in descending order\n    sorted_products = sorted(products, key=lambda x: x[0], reverse=True)\n    \n    # Select the top 4 products\n    top_4_products = sorted_products[:4]\n    \n    # Calculate the sum of the top 4 products\n    max_score = sum(product for product, _ in top_4_products)\n    \n    return max_score\n```", "```python\ndef max_score(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by pairing a[i] with the largest remaining elements in b\n    score = sum(a[i] * b_sorted[i] for i in range(4))\n    \n    return score\n```", "```python\ndef max_score(a, b):\n    # Sort the array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the score by pairing each element of a with the largest elements from b\n    score = sum(x * y for x, y in zip(a, b_sorted[:4]))\n    \n    return score\n```", "```python\ndef maxScore(a, b):\n    # Sort array b in ascending order\n    b.sort()\n    \n    # Sort array a in descending order\n    a.sort(reverse=True)\n    \n    # Calculate the maximum score\n    max_score = sum(a[i] * b[len(b) - 1 - i] for i in range(4))\n    \n    return max_score\n```", "```python\ndef maxScore(a, b):\n    a.sort()\n    b.sort(reverse=True)\n    return sum(x * y for x, y in zip(a, b))\n```", "```python\ndef max_score(a, b):\n    # Sort array b in descending order\n    b_sorted = sorted(b, reverse=True)\n    \n    # Calculate the maximum score\n    return sum(a[i] * b_sorted[i] for i in range(4))\n```", "```python\ndef maxScore(a, b):\n    b.sort()\n    a.sort()\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate through the sorted arrays and calculate the score\n    for i in range(4):\n        if a[i] >= 0:\n            score += a[i] * b[-i-1]\n        else:\n            score += a[i] * b[i]\n    \n    return score\n```", "```python\ndef maxScore(a, b):\n    # Sort array a and keep track of its original indices\n    sorted_a = sorted(enumerate(a), key=lambda x: x[1])\n    \n    # Sort array b and keep track of its original indices\n    sorted_b = sorted(enumerate(b), key=lambda x: x[1])\n    \n    # Initialize the score\n    score = 0\n    \n    # Iterate through the first 4 elements of sorted_b\n    for i in range(4):\n        index_b = sorted_b[i][0]\n        score += a[sorted_a[i][0]] * b[index_b]\n    \n    return score\n```"]}
{"task_id": "3496", "codes": ["def min_time_to_reduce_mountain(mountainHeight, workerTimes):\n    def total_time(reductionTime):\n        return sum(worker * (reductionTime * (reductionTime + 1)) // 2 for worker in workerTimes)\n    \n    left, right = 0, max(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if total_time(mid) >= mountainHeight:\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def minSeconds(mountainHeight, workerTimes):\n    def canReduce(height, mid):\n        total_time = 0\n        for time in workerTimes:\n            x = 1\n            while time * (x * (x + 1)) // 2 <= mid:\n                total_time += time * (x * (x + 1)) // 2\n                if total_time >= height:\n                    break\n                x += 1\n            if total_time >= height:\n                return True\n        return False\n    \n    workerTimes.sort(reverse=True)\n    left, right = 1, workerTimes[0] * (mountainHeight * (mountainHeight + 1)) // 2\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduceWithinTime(time):\n        remainingHeight = mountainHeight\n        for time_i in workerTimes:\n            total_time = 0\n            multiplier = 1\n            while total_time < time:\n                total_time += time_i * multiplier\n                multiplier += 1\n            if total_time >= time:\n                remainingHeight -= 1\n            if remainingHeight == 0:\n                return True\n        return False\n    \n    left, right = 1, mountainHeight * sum(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduceWithinTime(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def minTime(mountainHeight, workerTimes):\n    def is_feasible(time):\n        total_work_time = 0\n        for wt in workerTimes:\n            x = 1\n            while wt * x <= time:\n                total_work_time += wt * x\n                if total_work_time > time:\n                    break\n                x += 1\n        return total_work_time >= time\n    \n    left, right = 1, max(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if is_feasible(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def min_time_to_reduce_mountain(mountainHeight, workerTimes):\n    def can_reduce_in_time(time):\n        total_work_done = 0\n        for workerTime in workerTimes:\n            x = 1\n            while True:\n                work_for_this_reduction = workerTime * (x * (x + 1)) // 2\n                if work_for_this_reduction > time:\n                    break\n                total_work_done += work_for_this_reduction\n                x += 1\n                if total_work_done >= mountainHeight:\n                    return True\n        return False\n    \n    left, right = 1, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if can_reduce_in_time(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def minimumTime(mountainHeight, workerTimes):\n    def canReduceWithinTime(t):\n        remainingHeight = mountainHeight\n        for workerTime in workerTimes:\n            x = 1\n            while workerTime * (x * (x + 1)) // 2 <= t:\n                remainingHeight -= x\n                if remainingHeight <= 0:\n                    return True\n                x += 1\n        return False\n\n    left, right = 0, mountainHeight * sum(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduceWithinTime(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def min_time_to_reduce_mountain(mountainHeight, workerTimes):\n    def is_feasible(time):\n        remaining_height = mountainHeight\n        for workerTime in workerTimes:\n            x = 1\n            while True:\n                reduction_time = workerTime * (x * (x + 1)) // 2\n                if reduction_time > time:\n                    break\n                remaining_height -= x\n                x += 1\n            if remaining_height <= 0:\n                return True\n        return False\n\n    left, right = 1, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if is_feasible(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "def minTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        total_reduction = 0\n        for time_i in workerTimes:\n            x = 1\n            while True:\n                reduction = time_i * x * (x + 1) // 2\n                if reduction > time:\n                    break\n                if reduction >= height:\n                    total_reduction += height - reduction + time_i * x\n                    break\n                height -= reduction\n                x += 1\n        return total_reduction >= mountainHeight\n    \n    left, right = 0, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left"], "passed": [false, false, false, false, false, false, false, false], "raw_code": ["```python\ndef min_time_to_reduce_mountain(mountainHeight, workerTimes):\n    def total_time(reductionTime):\n        return sum(worker * (reductionTime * (reductionTime + 1)) // 2 for worker in workerTimes)\n    \n    left, right = 0, max(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if total_time(mid) >= mountainHeight:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef minSeconds(mountainHeight, workerTimes):\n    def canReduce(height, mid):\n        total_time = 0\n        for time in workerTimes:\n            x = 1\n            while time * (x * (x + 1)) // 2 <= mid:\n                total_time += time * (x * (x + 1)) // 2\n                if total_time >= height:\n                    break\n                x += 1\n            if total_time >= height:\n                return True\n        return False\n    \n    workerTimes.sort(reverse=True)\n    left, right = 1, workerTimes[0] * (mountainHeight * (mountainHeight + 1)) // 2\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef minTimeToReduceMountain(mountainHeight, workerTimes):\n    def canReduceWithinTime(time):\n        remainingHeight = mountainHeight\n        for time_i in workerTimes:\n            total_time = 0\n            multiplier = 1\n            while total_time < time:\n                total_time += time_i * multiplier\n                multiplier += 1\n            if total_time >= time:\n                remainingHeight -= 1\n            if remainingHeight == 0:\n                return True\n        return False\n    \n    left, right = 1, mountainHeight * sum(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduceWithinTime(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef minTime(mountainHeight, workerTimes):\n    def is_feasible(time):\n        total_work_time = 0\n        for wt in workerTimes:\n            x = 1\n            while wt * x <= time:\n                total_work_time += wt * x\n                if total_work_time > time:\n                    break\n                x += 1\n        return total_work_time >= time\n    \n    left, right = 1, max(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if is_feasible(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef min_time_to_reduce_mountain(mountainHeight, workerTimes):\n    def can_reduce_in_time(time):\n        total_work_done = 0\n        for workerTime in workerTimes:\n            x = 1\n            while True:\n                work_for_this_reduction = workerTime * (x * (x + 1)) // 2\n                if work_for_this_reduction > time:\n                    break\n                total_work_done += work_for_this_reduction\n                x += 1\n                if total_work_done >= mountainHeight:\n                    return True\n        return False\n    \n    left, right = 1, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if can_reduce_in_time(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef minimumTime(mountainHeight, workerTimes):\n    def canReduceWithinTime(t):\n        remainingHeight = mountainHeight\n        for workerTime in workerTimes:\n            x = 1\n            while workerTime * (x * (x + 1)) // 2 <= t:\n                remainingHeight -= x\n                if remainingHeight <= 0:\n                    return True\n                x += 1\n        return False\n\n    left, right = 0, mountainHeight * sum(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduceWithinTime(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef min_time_to_reduce_mountain(mountainHeight, workerTimes):\n    def is_feasible(time):\n        remaining_height = mountainHeight\n        for workerTime in workerTimes:\n            x = 1\n            while True:\n                reduction_time = workerTime * (x * (x + 1)) // 2\n                if reduction_time > time:\n                    break\n                remaining_height -= x\n                x += 1\n            if remaining_height <= 0:\n                return True\n        return False\n\n    left, right = 1, sum(workerTimes) * mountainHeight\n    while left < right:\n        mid = (left + right) // 2\n        if is_feasible(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "```python\ndef minTime(mountainHeight, workerTimes):\n    def canReduce(height, time):\n        total_reduction = 0\n        for time_i in workerTimes:\n            x = 1\n            while True:\n                reduction = time_i * x * (x + 1) // 2\n                if reduction > time:\n                    break\n                if reduction >= height:\n                    total_reduction += height - reduction + time_i * x\n                    break\n                height -= reduction\n                x += 1\n        return total_reduction >= mountainHeight\n    \n    left, right = 0, mountainHeight * max(workerTimes)\n    while left < right:\n        mid = (left + right) // 2\n        if canReduce(mountainHeight, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```"]}
{"task_id": "3558", "codes": ["def can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        if dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or \\\n           dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp):\n            return True\n        \n        grid[x][y] = temp  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)", "from collections import deque\n\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    queue = deque([(0, 0, health)])\n    visited = set()\n    \n    while queue:\n        x, y, current_health = queue.popleft()\n        \n        if (x, y) in visited:\n            continue\n        \n        visited.add((x, y))\n        \n        if x == m - 1 and y == n - 1:\n            if current_health >= 1:\n                return True\n            continue\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n                new_health = current_health - grid[nx][ny]\n                if new_health >= 1:\n                    queue.append((nx, ny, new_health))\n    \n    return False", "from collections import deque\n\ndef canReachFinalCell(grid, health):\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    queue = deque([(0, 0, health)])\n    visited = set([(0, 0, health)])\n    \n    while queue:\n        x, y, current_health = queue.popleft()\n        \n        if x == m - 1 and y == n - 1 and current_health >= 1:\n            return True\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n:\n                new_health = current_health - grid[nx][ny]\n                if new_health >= 1 and (nx, ny, new_health) not in visited:\n                    visited.add((nx, ny, new_health))\n                    queue.append((nx, ny, new_health))\n    \n    return False", "def hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark the cell as visited\n        if temp == 1:\n            health -= 1\n        result = (dfs(x + 1, y, health) or\n                  dfs(x - 1, y, health) or\n                  dfs(x, y + 1, health) or\n                  dfs(x, y - 1, health))\n        grid[x][y] = temp  # Unmark the cell\n        return result\n    \n    return dfs(0, 0, health)", "def can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        grid[x][y] = 1  # Mark the cell as visited by setting it to 1\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy, health - grid[x + dx][y + dy]):\n                return True\n        grid[x][y] = 0  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)", "def can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n    dp[1][1] = health\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if dp[i][j] != float('inf'):\n                dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] - grid[i - 1][j - 1])\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] - grid[i - 1][j - 1])\n    \n    return dp[m][n] >= 1", "def can_reach_bottom_right(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        grid[x][y] = -1  # Mark the cell as visited\n        result = (dfs(x + 1, y, health - grid[x][y]) or\n                  dfs(x - 1, y, health - grid[x][y]) or\n                  dfs(x, y + 1, health - grid[x][y]) or\n                  dfs(x, y - 1, health - grid[x][y]))\n        grid[x][y] = 0  # Unmark the cell\n        return result\n    \n    return dfs(0, 0, health)", "def canReachEnd(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n:\n            return False\n        if grid[x][y] == 1:\n            health -= 1\n        if health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return True\n        grid[x][y] = -1  # Mark as visited\n        result = (dfs(x + 1, y, health) or\n                  dfs(x - 1, y, health) or\n                  dfs(x, y + 1, health) or\n                  dfs(x, y - 1, health))\n        grid[x][y] = 0  # Unmark\n        return result\n    \n    return dfs(0, 0, health)"], "passed": [false, false, false, false, false, false, false, false], "raw_code": ["```python\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        \n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark as visited\n        \n        if dfs(x + 1, y, health - temp) or dfs(x - 1, y, health - temp) or \\\n           dfs(x, y + 1, health - temp) or dfs(x, y - 1, health - temp):\n            return True\n        \n        grid[x][y] = temp  # Backtrack\n        return False\n    \n    return dfs(0, 0, health)\n```", "```python\nfrom collections import deque\n\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    queue = deque([(0, 0, health)])\n    visited = set()\n    \n    while queue:\n        x, y, current_health = queue.popleft()\n        \n        if (x, y) in visited:\n            continue\n        \n        visited.add((x, y))\n        \n        if x == m - 1 and y == n - 1:\n            if current_health >= 1:\n                return True\n            continue\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n                new_health = current_health - grid[nx][ny]\n                if new_health >= 1:\n                    queue.append((nx, ny, new_health))\n    \n    return False\n```", "```python\nfrom collections import deque\n\ndef canReachFinalCell(grid, health):\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    queue = deque([(0, 0, health)])\n    visited = set([(0, 0, health)])\n    \n    while queue:\n        x, y, current_health = queue.popleft()\n        \n        if x == m - 1 and y == n - 1 and current_health >= 1:\n            return True\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n:\n                new_health = current_health - grid[nx][ny]\n                if new_health >= 1 and (nx, ny, new_health) not in visited:\n                    visited.add((nx, ny, new_health))\n                    queue.append((nx, ny, new_health))\n    \n    return False\n```", "```python\ndef hasPath(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        temp = grid[x][y]\n        grid[x][y] = 2  # Mark the cell as visited\n        if temp == 1:\n            health -= 1\n        result = (dfs(x + 1, y, health) or\n                  dfs(x - 1, y, health) or\n                  dfs(x, y + 1, health) or\n                  dfs(x, y - 1, health))\n        grid[x][y] = temp  # Unmark the cell\n        return result\n    \n    return dfs(0, 0, health)\n```", "```python\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        grid[x][y] = 1  # Mark the cell as visited by setting it to 1\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy, health - grid[x + dx][y + dy]):\n                return True\n        grid[x][y] = 0  # Unmark the cell\n        return False\n    \n    return dfs(0, 0, health)\n```", "```python\ndef can_reach_final_cell(grid, health):\n    m, n = len(grid), len(grid[0])\n    dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n    dp[1][1] = health\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if dp[i][j] != float('inf'):\n                dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] - grid[i - 1][j - 1])\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] - grid[i - 1][j - 1])\n    \n    return dp[m][n] >= 1\n```", "```python\ndef can_reach_bottom_right(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n or health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return health >= 1\n        grid[x][y] = -1  # Mark the cell as visited\n        result = (dfs(x + 1, y, health - grid[x][y]) or\n                  dfs(x - 1, y, health - grid[x][y]) or\n                  dfs(x, y + 1, health - grid[x][y]) or\n                  dfs(x, y - 1, health - grid[x][y]))\n        grid[x][y] = 0  # Unmark the cell\n        return result\n    \n    return dfs(0, 0, health)\n```", "```python\ndef canReachEnd(grid, health):\n    m, n = len(grid), len(grid[0])\n    \n    def dfs(x, y, health):\n        if x < 0 or x >= m or y < 0 or y >= n:\n            return False\n        if grid[x][y] == 1:\n            health -= 1\n        if health <= 0:\n            return False\n        if x == m - 1 and y == n - 1:\n            return True\n        grid[x][y] = -1  # Mark as visited\n        result = (dfs(x + 1, y, health) or\n                  dfs(x - 1, y, health) or\n                  dfs(x, y + 1, health) or\n                  dfs(x, y - 1, health))\n        grid[x][y] = 0  # Unmark\n        return result\n    \n    return dfs(0, 0, health)\n```"]}
{"task_id": "3584", "codes": ["def almost_equal_indices(word1, word2):\n    differing_indices = []\n    \n    for i in range(len(word2)):\n        if word1[i] != word2[i]:\n            differing_indices.append(i)\n    \n    if len(differing_indices) > 1:\n        return []\n    elif len(differing_indices) == 1:\n        return [differing_indices[0]]\n    else:\n        return []", "def smallestSequenceOfIndices(word1: str, word2: str) -> List[int]:\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    result = []\n    changes = 0\n    while i < n and j < m:\n        if word1[i] != word2[j]:\n            if changes == 1:\n                return []\n            result.append(j)\n            changes += 1\n        i += 1\n        j += 1\n    if changes == 0:\n        return result\n    if changes == 1 and i == n and j == m:\n        return result\n    return []", "def smallestSequence(word1: str, word2: str) -> List[int]:\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    indices = []\n    \n    while i < n and j < m:\n        if word1[i] != word2[j]:\n            if len(indices) == 1:\n                return []  # More than one mismatch found\n            indices.append(j)\n        i += 1\n        j += 1\n    \n    if len(indices) == 1:\n        indices.append(m - 1)\n    \n    return indices", "def find_indices(word1, word2):\n    n = len(word2)\n    m = len(word1)\n    indices = []\n    \n    for i in range(n):\n        if word1[i] != word2[i]:\n            # Check if changing word1[i] to word2[i] makes it almost equal to word2\n            if i + 1 < m and word1[i+1:] == word2[i+1:]:\n                indices.append(i)\n            else:\n                return []\n    \n    return indices", "def smallestSequenceIndices(word1, word2):\n    m, n = len(word1), len(word2)\n    diff_indices = []\n\n    # Identify the positions where word1 differs from word2\n    for i in range(n):\n        if word1[i] != word2[i]:\n            diff_indices.append(i)\n\n    # Check if there is at most one difference\n    if len(diff_indices) > 1:\n        return []\n\n    # If there is exactly one difference, return the index of that difference\n    if len(diff_indices) == 1:\n        return [diff_indices[0]]\n\n    # If there is no difference, check for extra characters in word1\n    for i in range(n, m):\n        if word1[i] != word2[-1]:\n            return [i]\n\n    # If no valid sequence is found, return an empty array\n    return []", "def smallestSequence(word1: str, word2: str) -> List[int]:\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    result = []\n    changes = 0\n    while i < n and j < m:\n        if word1[i] != word2[j]:\n            if changes == 1:\n                return []\n            changes += 1\n            result.append(j)\n        i += 1\n        j += 1\n    return result if changes <= 1 else []", "def smallestSequenceOfIndices(word1, word2):\n    mismatches = []\n    \n    # Identify mismatched indices\n    for i in range(len(word2)):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n    \n    # Check if there is more than one mismatch\n    if len(mismatches) > 1:\n        return []\n    \n    # If no mismatches, return an empty array\n    if not mismatches:\n        return []\n    \n    # Return the single mismatch as the sequence\n    return [mismatches[0]]", "def findAlmostEqualIndices(word1, word2):\n    diffs = [i for i in range(len(word1)) if word1[i] != word2[i]]\n    \n    if len(diffs) > 1:\n        return []\n    \n    return diffs[:1]"], "passed": [false, false, false, false, false, false, false, false], "raw_code": ["```python\ndef almost_equal_indices(word1, word2):\n    differing_indices = []\n    \n    for i in range(len(word2)):\n        if word1[i] != word2[i]:\n            differing_indices.append(i)\n    \n    if len(differing_indices) > 1:\n        return []\n    elif len(differing_indices) == 1:\n        return [differing_indices[0]]\n    else:\n        return []\n```", "def smallestSequenceOfIndices(word1: str, word2: str) -> List[int]:\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    result = []\n    changes = 0\n    while i < n and j < m:\n        if word1[i] != word2[j]:\n            if changes == 1:\n                return []\n            result.append(j)\n            changes += 1\n        i += 1\n        j += 1\n    if changes == 0:\n        return result\n    if changes == 1 and i == n and j == m:\n        return result\n    return []", "```python\ndef smallestSequence(word1: str, word2: str) -> List[int]:\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    indices = []\n    \n    while i < n and j < m:\n        if word1[i] != word2[j]:\n            if len(indices) == 1:\n                return []  # More than one mismatch found\n            indices.append(j)\n        i += 1\n        j += 1\n    \n    if len(indices) == 1:\n        indices.append(m - 1)\n    \n    return indices\n```", "```python\ndef find_indices(word1, word2):\n    n = len(word2)\n    m = len(word1)\n    indices = []\n    \n    for i in range(n):\n        if word1[i] != word2[i]:\n            # Check if changing word1[i] to word2[i] makes it almost equal to word2\n            if i + 1 < m and word1[i+1:] == word2[i+1:]:\n                indices.append(i)\n            else:\n                return []\n    \n    return indices\n```", "```python\ndef smallestSequenceIndices(word1, word2):\n    m, n = len(word1), len(word2)\n    diff_indices = []\n\n    # Identify the positions where word1 differs from word2\n    for i in range(n):\n        if word1[i] != word2[i]:\n            diff_indices.append(i)\n\n    # Check if there is at most one difference\n    if len(diff_indices) > 1:\n        return []\n\n    # If there is exactly one difference, return the index of that difference\n    if len(diff_indices) == 1:\n        return [diff_indices[0]]\n\n    # If there is no difference, check for extra characters in word1\n    for i in range(n, m):\n        if word1[i] != word2[-1]:\n            return [i]\n\n    # If no valid sequence is found, return an empty array\n    return []\n```", "def smallestSequence(word1: str, word2: str) -> List[int]:\n    n, m = len(word1), len(word2)\n    i, j = 0, 0\n    result = []\n    changes = 0\n    while i < n and j < m:\n        if word1[i] != word2[j]:\n            if changes == 1:\n                return []\n            changes += 1\n            result.append(j)\n        i += 1\n        j += 1\n    return result if changes <= 1 else []", "```python\ndef smallestSequenceOfIndices(word1, word2):\n    mismatches = []\n    \n    # Identify mismatched indices\n    for i in range(len(word2)):\n        if word1[i] != word2[i]:\n            mismatches.append(i)\n    \n    # Check if there is more than one mismatch\n    if len(mismatches) > 1:\n        return []\n    \n    # If no mismatches, return an empty array\n    if not mismatches:\n        return []\n    \n    # Return the single mismatch as the sequence\n    return [mismatches[0]]\n```", "```python\ndef findAlmostEqualIndices(word1, word2):\n    diffs = [i for i in range(len(word1)) if word1[i] != word2[i]]\n    \n    if len(diffs) > 1:\n        return []\n    \n    return diffs[:1]\n```"]}
{"task_id": "3570", "codes": ["def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count", "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    left = 0\n    vowel_count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    consonant_count = 0\n    \n    for right in range(n):\n        if word[right] in vowels:\n            vowel_count[word[right]] += 1\n        else:\n            consonant_count += 1\n        \n        while consonant_count > k or any(vowel_count[v] == 0 for v in vowels):\n            if word[left] in vowels:\n                vowel_count[word[left]] -= 1\n            else:\n                consonant_count -= 1\n            left += 1\n        \n        if consonant_count == k and all(vowel_count[v] > 0 for v in vowels):\n            count += left + 1\n    \n    return count", "def countSubstrings(word: str, k: int) -> int:\n    vowels = set(\"aeiou\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    def has_all_vowels(count):\n        return all(count[vowel] >= 1 for vowel in vowels)\n    \n    left = 0\n    count = {}\n    result = 0\n    \n    for right in range(len(word)):\n        char = word[right]\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n        \n        while left <= right and not has_all_vowels(count):\n            left_char = word[left]\n            count[left_char] -= 1\n            if count[left_char] == 0:\n                del count[left_char]\n            left += 1\n        \n        num_consonants = right - left + 1 - sum(count.values())\n        \n        if num_consonants == k:\n            result += left\n    \n    return result", "def count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        char_count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n        consonant_count = 0\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                char_count[char] += 1\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if all(char_count[vowel] >= 1 for vowel in vowels) and consonant_count == k:\n                count += 1\n                \n    return count", "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    \n    def has_all_vowels(substring):\n        return vowels.issubset(set(substring))\n    \n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            else:\n                consonant_count += 1\n            \n            if vowel_count == 5 and consonant_count == k:\n                count += 1\n                \n    return count", "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    \n    def has_all_vowels(substring):\n        return all(vowel in substring for vowel in vowels)\n    \n    count = 0\n    left = 0\n    \n    for right in range(n):\n        if word[right] not in vowels:\n            k -= 1\n        \n        while k < 0:\n            if word[left] not in vowels:\n                k += 1\n            left += 1\n        \n        if has_all_vowels(word[left:right+1]):\n            count += right - left + 1\n    \n    return count", "def count_substrings(word, k):\n    vowels = set('aeiou')\n    vowel_indices = [i for i, char in enumerate(word) if char in vowels]\n    consonant_indices = [i for i, char in enumerate(word) if char not in vowels]\n    \n    n = len(vowel_indices)\n    m = len(consonant_indices)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_vowels = vowel_indices[i:j]\n            sub_consonants = [c for c in consonant_indices if c < sub_vowels[0] or c > sub_vowels[-1]]\n            if len(sub_consonants) == k:\n                result += 1\n                \n    return result", "def count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    \n    def has_all_vowels(substring):\n        return all(vowel in substring for vowel in vowels)\n    \n    def count_consonants(substring):\n        return sum(1 for char in substring if char not in vowels)\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 5, n + 1):\n            substring = word[i:j]\n            if has_all_vowels(substring) and count_consonants(substring) == k:\n                count += 1\n                \n    return count"], "passed": [true, false, false, true, false, false, false, true], "raw_code": ["```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if len(seen_vowels) == 5 and consonant_count == k:\n                count += 1\n    \n    return count\n```", "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    left = 0\n    vowel_count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    consonant_count = 0\n    \n    for right in range(n):\n        if word[right] in vowels:\n            vowel_count[word[right]] += 1\n        else:\n            consonant_count += 1\n        \n        while consonant_count > k or any(vowel_count[v] == 0 for v in vowels):\n            if word[left] in vowels:\n                vowel_count[word[left]] -= 1\n            else:\n                consonant_count -= 1\n            left += 1\n        \n        if consonant_count == k and all(vowel_count[v] > 0 for v in vowels):\n            count += left + 1\n    \n    return count\n```", "```python\ndef countSubstrings(word: str, k: int) -> int:\n    vowels = set(\"aeiou\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    def has_all_vowels(count):\n        return all(count[vowel] >= 1 for vowel in vowels)\n    \n    left = 0\n    count = {}\n    result = 0\n    \n    for right in range(len(word)):\n        char = word[right]\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n        \n        while left <= right and not has_all_vowels(count):\n            left_char = word[left]\n            count[left_char] -= 1\n            if count[left_char] == 0:\n                del count[left_char]\n            left += 1\n        \n        num_consonants = right - left + 1 - sum(count.values())\n        \n        if num_consonants == k:\n            result += left\n    \n    return result\n```", "```python\ndef count_substrings(word: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(word)\n    count = 0\n    \n    for i in range(n):\n        char_count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n        consonant_count = 0\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                char_count[char] += 1\n            elif char.isalpha():\n                consonant_count += 1\n            \n            if all(char_count[vowel] >= 1 for vowel in vowels) and consonant_count == k:\n                count += 1\n                \n    return count\n```", "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    \n    def has_all_vowels(substring):\n        return vowels.issubset(set(substring))\n    \n    count = 0\n    \n    for i in range(n):\n        vowel_count = 0\n        consonant_count = 0\n        seen_vowels = set()\n        \n        for j in range(i, n):\n            char = word[j]\n            if char in vowels:\n                vowel_count += 1\n                seen_vowels.add(char)\n            else:\n                consonant_count += 1\n            \n            if vowel_count == 5 and consonant_count == k:\n                count += 1\n                \n    return count\n```", "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    \n    def has_all_vowels(substring):\n        return all(vowel in substring for vowel in vowels)\n    \n    count = 0\n    left = 0\n    \n    for right in range(n):\n        if word[right] not in vowels:\n            k -= 1\n        \n        while k < 0:\n            if word[left] not in vowels:\n                k += 1\n            left += 1\n        \n        if has_all_vowels(word[left:right+1]):\n            count += right - left + 1\n    \n    return count\n```", "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    vowel_indices = [i for i, char in enumerate(word) if char in vowels]\n    consonant_indices = [i for i, char in enumerate(word) if char not in vowels]\n    \n    n = len(vowel_indices)\n    m = len(consonant_indices)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_vowels = vowel_indices[i:j]\n            sub_consonants = [c for c in consonant_indices if c < sub_vowels[0] or c > sub_vowels[-1]]\n            if len(sub_consonants) == k:\n                result += 1\n                \n    return result\n```", "```python\ndef count_substrings(word, k):\n    vowels = set('aeiou')\n    n = len(word)\n    \n    def has_all_vowels(substring):\n        return all(vowel in substring for vowel in vowels)\n    \n    def count_consonants(substring):\n        return sum(1 for char in substring if char not in vowels)\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 5, n + 1):\n            substring = word[i:j]\n            if has_all_vowels(substring) and count_consonants(substring) == k:\n                count += 1\n                \n    return count\n```"]}
{"task_id": "3525", "codes": ["def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1], dp_B[i-1] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1], dp_A[i-1] + energyDrinkB[i])\n    \n    return max(dp_A[-1], dp_B[-1])", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Initialize the first hour\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill the DP tables\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i - 1] + energyDrinkA[i], dp_B[i - 1])\n        dp_B[i] = max(dp_B[i - 1] + energyDrinkB[i], dp_A[i - 1])\n    \n    # The result is the maximum of the last elements of both DP tables\n    return max(dp_A[-1], dp_B[-1])", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    continue_current_A = energyDrinkA[0]\n    continue_current_B = energyDrinkB[0]\n    switch_to_B_after_A = energyDrinkA[0] + energyDrinkB[1]\n    switch_to_A_after_B = energyDrinkB[0] + energyDrinkA[1]\n    \n    for i in range(1, n):\n        temp_continue_current_A = max(continue_current_A, switch_to_B_after_A)\n        temp_switch_to_B_after_A = continue_current_A + energyDrinkB[i]\n        \n        temp_continue_current_B = max(continue_current_B, switch_to_A_after_B)\n        temp_switch_to_A_after_B = continue_current_B + energyDrinkA[i]\n        \n        continue_current_A = temp_continue_current_A\n        switch_to_B_after_A = temp_switch_to_B_after_A\n        \n        continue_current_B = temp_continue_current_B\n        switch_to_A_after_B = temp_switch_to_A_after_B\n    \n    return max(continue_current_A, continue_current_B, switch_to_B_after_A, switch_to_A_after_B)", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = energyDrinkA[0]\n    dp_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B + energyDrinkB[i]), max(dp_A + energyDrinkB[i], dp_B + energyDrinkA[i])\n    \n    return max(dp_A, dp_B)", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A, dp_B = [0] * n, [0] * n\n    switched_A, switched_B = False, False\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        if not switched_A:\n            dp_A[i] = max(dp_A[i-1], dp_B[i-1] + energyDrinkA[i])\n            switched_A = dp_A[i] != dp_A[i-1]\n        else:\n            dp_A[i] = dp_A[i-1]\n        \n        if not switched_B:\n            dp_B[i] = max(dp_B[i-1], dp_A[i-1] + energyDrinkB[i])\n            switched_B = dp_B[i] != dp_B[i-1]\n        else:\n            dp_B[i] = dp_B[i-1]\n    \n    return max(dp_A[-1], dp_B[-1])", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A, dp_B = energyDrinkA[0], energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B), max(dp_B + energyDrinkB[i], dp_A)\n    \n    return max(dp_A, dp_B)", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    continue_A = energyDrinkA[0]\n    continue_B = energyDrinkB[0]\n    switch_A = energyDrinkB[0]\n    switch_B = energyDrinkA[0]\n    \n    for i in range(1, n):\n        new_continue_A = max(continue_A + energyDrinkA[i], switch_A + energyDrinkA[i])\n        new_switch_A = continue_B + energyDrinkB[i]\n        \n        new_continue_B = max(continue_B + energyDrinkB[i], switch_B + energyDrinkB[i])\n        new_switch_B = continue_A + energyDrinkA[i]\n        \n        continue_A, continue_B, switch_A, switch_B = new_continue_A, new_continue_B, new_switch_A, new_switch_B\n    \n    return max(continue_A, continue_B, switch_A, switch_B)", "def maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Initial conditions\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill the dp arrays\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1], dp_B[i-1] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1], dp_A[i-1] + energyDrinkB[i])\n    \n    return max(dp_A[-1], dp_B[-1])"], "passed": [false, true, false, false, false, true, false, false], "raw_code": ["```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1], dp_B[i-1] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1], dp_A[i-1] + energyDrinkB[i])\n    \n    return max(dp_A[-1], dp_B[-1])\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Initialize the first hour\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill the DP tables\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i - 1] + energyDrinkA[i], dp_B[i - 1])\n        dp_B[i] = max(dp_B[i - 1] + energyDrinkB[i], dp_A[i - 1])\n    \n    # The result is the maximum of the last elements of both DP tables\n    return max(dp_A[-1], dp_B[-1])\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    continue_current_A = energyDrinkA[0]\n    continue_current_B = energyDrinkB[0]\n    switch_to_B_after_A = energyDrinkA[0] + energyDrinkB[1]\n    switch_to_A_after_B = energyDrinkB[0] + energyDrinkA[1]\n    \n    for i in range(1, n):\n        temp_continue_current_A = max(continue_current_A, switch_to_B_after_A)\n        temp_switch_to_B_after_A = continue_current_A + energyDrinkB[i]\n        \n        temp_continue_current_B = max(continue_current_B, switch_to_A_after_B)\n        temp_switch_to_A_after_B = continue_current_B + energyDrinkA[i]\n        \n        continue_current_A = temp_continue_current_A\n        switch_to_B_after_A = temp_switch_to_B_after_A\n        \n        continue_current_B = temp_continue_current_B\n        switch_to_A_after_B = temp_switch_to_A_after_B\n    \n    return max(continue_current_A, continue_current_B, switch_to_B_after_A, switch_to_A_after_B)\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = energyDrinkA[0]\n    dp_B = energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B + energyDrinkB[i]), max(dp_A + energyDrinkB[i], dp_B + energyDrinkA[i])\n    \n    return max(dp_A, dp_B)\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A, dp_B = [0] * n, [0] * n\n    switched_A, switched_B = False, False\n    \n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    for i in range(1, n):\n        if not switched_A:\n            dp_A[i] = max(dp_A[i-1], dp_B[i-1] + energyDrinkA[i])\n            switched_A = dp_A[i] != dp_A[i-1]\n        else:\n            dp_A[i] = dp_A[i-1]\n        \n        if not switched_B:\n            dp_B[i] = max(dp_B[i-1], dp_A[i-1] + energyDrinkB[i])\n            switched_B = dp_B[i] != dp_B[i-1]\n        else:\n            dp_B[i] = dp_B[i-1]\n    \n    return max(dp_A[-1], dp_B[-1])\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A, dp_B = energyDrinkA[0], energyDrinkB[0]\n    \n    for i in range(1, n):\n        dp_A, dp_B = max(dp_A + energyDrinkA[i], dp_B), max(dp_B + energyDrinkB[i], dp_A)\n    \n    return max(dp_A, dp_B)\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    continue_A = energyDrinkA[0]\n    continue_B = energyDrinkB[0]\n    switch_A = energyDrinkB[0]\n    switch_B = energyDrinkA[0]\n    \n    for i in range(1, n):\n        new_continue_A = max(continue_A + energyDrinkA[i], switch_A + energyDrinkA[i])\n        new_switch_A = continue_B + energyDrinkB[i]\n        \n        new_continue_B = max(continue_B + energyDrinkB[i], switch_B + energyDrinkB[i])\n        new_switch_B = continue_A + energyDrinkA[i]\n        \n        continue_A, continue_B, switch_A, switch_B = new_continue_A, new_continue_B, new_switch_A, new_switch_B\n    \n    return max(continue_A, continue_B, switch_A, switch_B)\n```", "```python\ndef maxEnergyBoost(energyDrinkA, energyDrinkB):\n    n = len(energyDrinkA)\n    dp_A = [0] * n\n    dp_B = [0] * n\n    \n    # Initial conditions\n    dp_A[0] = energyDrinkA[0]\n    dp_B[0] = energyDrinkB[0]\n    \n    # Fill the dp arrays\n    for i in range(1, n):\n        dp_A[i] = max(dp_A[i-1], dp_B[i-1] + energyDrinkA[i])\n        dp_B[i] = max(dp_B[i-1], dp_A[i-1] + energyDrinkB[i])\n    \n    return max(dp_A[-1], dp_B[-1])\n```"]}
