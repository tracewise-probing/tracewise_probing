{"difficulty": "hard", "num_threads": 32, "temperature": 0.7, "n": 8, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_OUR01_qwen_7b_hard_n_8.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc368_f", "code": "def determine_winner(N):\n    if N % 2 == 0:\n        print(\"Bruno\")\n    else:\n        print(\"Anna\")\n\n# Call the function with the input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\ndetermine_winner(N)", "passed": false, "raw_code": "```python\ndef determine_winner(N):\n    if N % 2 == 0:\n        print(\"Bruno\")\n    else:\n        print(\"Anna\")\n\n# Call the function with the input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\ndetermine_winner(N)\n```"}
{"task_id": "3532", "code": "def find_marked_times(edges):\n    from collections import defaultdict, deque\n    \n    n = len(edges) + 1\n    graph = defaultdict(list)\n    \n    # Build the graph\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def bfs(start):\n        marked = {i: False for i in range(n)}\n        marked[start] = True\n        queue = deque([start])\n        time = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if not marked[neighbor]:\n                        if node % 2 == 0:\n                            if any(marked[nbr] for nbr in graph[neighbor]):\n                                marked[neighbor] = True\n                                queue.append(neighbor)\n                        else:\n                            if any(marked[nbr] for nbr in graph[neighbor]):\n                                marked[neighbor] = True\n                                queue.append(neighbor)\n            time += 1\n        \n        return time\n    \n    return [bfs(i) for i in range(n)]", "passed": false, "raw_code": "```python\ndef find_marked_times(edges):\n    from collections import defaultdict, deque\n    \n    n = len(edges) + 1\n    graph = defaultdict(list)\n    \n    # Build the graph\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def bfs(start):\n        marked = {i: False for i in range(n)}\n        marked[start] = True\n        queue = deque([start])\n        time = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if not marked[neighbor]:\n                        if node % 2 == 0:\n                            if any(marked[nbr] for nbr in graph[neighbor]):\n                                marked[neighbor] = True\n                                queue.append(neighbor)\n                        else:\n                            if any(marked[nbr] for nbr in graph[neighbor]):\n                                marked[neighbor] = True\n                                queue.append(neighbor)\n            time += 1\n        \n        return time\n    \n    return [bfs(i) for i in range(n)]\n```"}
{"task_id": "3535", "code": "def countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize counters for valid sequences\n    count_arr1 = [0] * 51\n    count_arr2 = [0] * 51\n    \n    result = 0\n    \n    for num in nums:\n        new_count_arr1 = [0] * 51\n        new_count_arr2 = [0] * 51\n        \n        for i in range(1, num + 1):\n            new_count_arr1[i] += count_arr2[num - i]\n            new_count_arr2[i] += count_arr1[num - i]\n        \n        for i in range(num + 1):\n            result = (result + count_arr1[i] + count_arr2[i]) % MOD\n        \n        count_arr1 = new_count_arr1\n        count_arr2 = new_count_arr2\n    \n    return result", "passed": false, "raw_code": "```python\ndef countMonotonicPairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    \n    # Initialize counters for valid sequences\n    count_arr1 = [0] * 51\n    count_arr2 = [0] * 51\n    \n    result = 0\n    \n    for num in nums:\n        new_count_arr1 = [0] * 51\n        new_count_arr2 = [0] * 51\n        \n        for i in range(1, num + 1):\n            new_count_arr1[i] += count_arr2[num - i]\n            new_count_arr2[i] += count_arr1[num - i]\n        \n        for i in range(num + 1):\n            result = (result + count_arr1[i] + count_arr2[i]) % MOD\n        \n        count_arr1 = new_count_arr1\n        count_arr2 = new_count_arr2\n    \n    return result\n```"}
{"task_id": "abc371_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    result = 0\n    \n    for i in range(N):\n        distinct_count = 0\n        seen = set()\n        \n        for j in range(i, N):\n            if A[j] not in seen:\n                seen.add(A[j])\n                distinct_count += 1\n            \n            result += distinct_count\n    \n    print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    result = 0\n    \n    for i in range(N):\n        distinct_count = 0\n        seen = set()\n        \n        for j in range(i, N):\n            if A[j] not in seen:\n                seen.add(A[j])\n                distinct_count += 1\n            \n            result += distinct_count\n    \n    print(result)\n\nmain()\n```"}
{"task_id": "abc367_f", "code": "def can_rearrange_subsequence():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        if sorted(subseq_A) == sorted(subseq_B):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequence()", "passed": false, "raw_code": "```python\ndef can_rearrange_subsequence():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    A = list(map(int, data[index:index + N]))\n    B = list(map(int, data[index + N:index + 2 * N]))\n    index += 2 * N\n    \n    results = []\n    \n    for _ in range(Q):\n        l_i = int(data[index]) - 1\n        r_i = int(data[index + 1]) - 1\n        L_i = int(data[index + 2]) - 1\n        R_i = int(data[index + 3]) - 1\n        index += 4\n        \n        subseq_A = A[l_i:r_i + 1]\n        subseq_B = B[L_i:R_i + 1]\n        \n        if sorted(subseq_A) == sorted(subseq_B):\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncan_rearrange_subsequence()\n```"}
{"task_id": "arc181_b", "code": "def check_strings(t):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    index = 0\n    \n    for _ in range(int(data[index])):\n        index += 1\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        count_X_ones = X.count('1')\n        count_Y_ones = Y.count('1')\n        count_X_zeros = X.count('0')\n        count_Y_zeros = Y.count('0')\n        \n        if count_X_ones == count_Y_ones and count_X_zeros == count_Y_zeros:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncheck_strings(1)", "passed": false, "raw_code": "```python\ndef check_strings(t):\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    index = 0\n    \n    for _ in range(int(data[index])):\n        index += 1\n        S = data[index]\n        X = data[index + 1]\n        Y = data[index + 2]\n        \n        count_X_ones = X.count('1')\n        count_Y_ones = Y.count('1')\n        count_X_zeros = X.count('0')\n        count_Y_zeros = Y.count('0')\n        \n        if count_X_ones == count_Y_ones and count_X_zeros == count_Y_zeros:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    \n    for result in results:\n        print(result)\n\ncheck_strings(1)\n```"}
{"task_id": "abc367_e", "code": "def find_cycles(X):\n    n = len(X)\n    visited = [False] * n\n    cycles = []\n    \n    for i in range(n):\n        if not visited[i]:\n            cycle = []\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                cycle.append(x)\n                x = X[x] - 1\n            cycles.append(cycle)\n    \n    return cycles\n\ndef apply_operations(A, X, K):\n    n = len(X)\n    cycles = find_cycles(X)\n    effective_k = K % sum(len(cycle) for cycle in cycles)\n    \n    for _ in range(effective_k):\n        new_A = A[:]\n        for i in range(n):\n            new_A[i] = A[X[i] - 1]\n        A = new_A\n    \n    return A\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    X = list(map(int, data[2:N+2]))\n    A = list(map(int, data[N+2:]))\n    \n    result = apply_operations(A, X, K)\n    \n    print(\" \".join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef find_cycles(X):\n    n = len(X)\n    visited = [False] * n\n    cycles = []\n    \n    for i in range(n):\n        if not visited[i]:\n            cycle = []\n            x = i\n            while not visited[x]:\n                visited[x] = True\n                cycle.append(x)\n                x = X[x] - 1\n            cycles.append(cycle)\n    \n    return cycles\n\ndef apply_operations(A, X, K):\n    n = len(X)\n    cycles = find_cycles(X)\n    effective_k = K % sum(len(cycle) for cycle in cycles)\n    \n    for _ in range(effective_k):\n        new_A = A[:]\n        for i in range(n):\n            new_A[i] = A[X[i] - 1]\n        A = new_A\n    \n    return A\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    X = list(map(int, data[2:N+2]))\n    A = list(map(int, data[N+2:]))\n    \n    result = apply_operations(A, X, K)\n    \n    print(\" \".join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc366_f", "code": "def max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    A = []\n    B = []\n    index = 2\n    for _ in range(N):\n        A.append(int(data[index]))\n        B.append(int(data[index + 1]))\n        index += 2\n    \n    # Initialize the maximum value to a very small number\n    max_value = float('-inf')\n    \n    # Iterate over all permutations of p\n    from itertools import permutations\n    for p in permutations(range(1, N + 1), K):\n        current_value = 1\n        for i in p:\n            current_value = A[i - 1] * current_value + B[i - 1]\n        \n        # Update the maximum value\n        if current_value > max_value:\n            max_value = current_value\n    \n    # Print the result\n    print(max_value)\n\nmax_nested_function_value()", "passed": false, "raw_code": "```python\ndef max_nested_function_value():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    \n    A = []\n    B = []\n    index = 2\n    for _ in range(N):\n        A.append(int(data[index]))\n        B.append(int(data[index + 1]))\n        index += 2\n    \n    # Initialize the maximum value to a very small number\n    max_value = float('-inf')\n    \n    # Iterate over all permutations of p\n    from itertools import permutations\n    for p in permutations(range(1, N + 1), K):\n        current_value = 1\n        for i in p:\n            current_value = A[i - 1] * current_value + B[i - 1]\n        \n        # Update the maximum value\n        if current_value > max_value:\n            max_value = current_value\n    \n    # Print the result\n    print(max_value)\n\nmax_nested_function_value()\n```"}
{"task_id": "abc372_g", "code": "def binary_search(A, B, C):\n    left, right = 1, 10**9\n    while left < right:\n        mid = (left + right + 1) // 2\n        if any(mid * A[i] + B[i] >= C[i] for i in range(len(A))):\n            right = mid - 1\n        else:\n            left = mid\n    return left\n\ndef count_valid_pairs(T, test_cases):\n    results = []\n    for _ in range(T):\n        N = int(input())\n        A, B, C = [], [], []\n        for _ in range(N):\n            a, b, c = map(int, input().split())\n            A.append(a)\n            B.append(b)\n            C.append(c)\n        \n        max_x = min(binary_search(A, B, C), binary_search(B, A, C))\n        max_y = min(binary_search(B, A, C), binary_search(A, B, C))\n        \n        count = 0\n        for x in range(1, max_x + 1):\n            for y in range(1, max_y + 1):\n                if all(x * A[i] + y * B[i] < C[i] for i in range(N)):\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\n# Read input and call the function\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nindex = 0\n\ndef read_int():\n    global index\n    val = int(data[index])\n    index += 1\n    return val\n\ndef read_seq(length):\n    global index\n    seq = [int(data[index]) for _ in range(length)]\n    index += length\n    return seq\n\nT = read_int()\ntest_cases = []\nfor _ in range(T):\n    N = read_int()\n    A = read_seq(N)\n    B = read_seq(N)\n    C = read_seq(N)\n    test_cases.append((N, A, B, C))\n\ncount_valid_pairs(T, test_cases)", "passed": false, "raw_code": "```python\ndef binary_search(A, B, C):\n    left, right = 1, 10**9\n    while left < right:\n        mid = (left + right + 1) // 2\n        if any(mid * A[i] + B[i] >= C[i] for i in range(len(A))):\n            right = mid - 1\n        else:\n            left = mid\n    return left\n\ndef count_valid_pairs(T, test_cases):\n    results = []\n    for _ in range(T):\n        N = int(input())\n        A, B, C = [], [], []\n        for _ in range(N):\n            a, b, c = map(int, input().split())\n            A.append(a)\n            B.append(b)\n            C.append(c)\n        \n        max_x = min(binary_search(A, B, C), binary_search(B, A, C))\n        max_y = min(binary_search(B, A, C), binary_search(A, B, C))\n        \n        count = 0\n        for x in range(1, max_x + 1):\n            for y in range(1, max_y + 1):\n                if all(x * A[i] + y * B[i] < C[i] for i in range(N)):\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\n# Read input and call the function\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nindex = 0\n\ndef read_int():\n    global index\n    val = int(data[index])\n    index += 1\n    return val\n\ndef read_seq(length):\n    global index\n    seq = [int(data[index]) for _ in range(length)]\n    index += length\n    return seq\n\nT = read_int()\ntest_cases = []\nfor _ in range(T):\n    N = read_int()\n    A = read_seq(N)\n    B = read_seq(N)\n    C = read_seq(N)\n    test_cases.append((N, A, B, C))\n\ncount_valid_pairs(T, test_cases)\n```"}
{"task_id": "abc365_e", "code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Step 1: Compute prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Step 2: Calculate the total sum\n    total_sum = 0\n    xor_count = {}\n    \n    for i in range(N + 1):\n        if prefix_xor[i] not in xor_count:\n            xor_count[prefix_xor[i]] = 0\n        xor_count[prefix_xor[i]] += 1\n    \n    for i in range(N):\n        total_sum += xor_count[prefix_xor[i]]\n    \n    print(total_sum)\n\n# Call the function to execute\nsolve()", "passed": false, "raw_code": "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    # Step 1: Compute prefix XOR array\n    prefix_xor = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_xor[i] = prefix_xor[i - 1] ^ A[i - 1]\n    \n    # Step 2: Calculate the total sum\n    total_sum = 0\n    xor_count = {}\n    \n    for i in range(N + 1):\n        if prefix_xor[i] not in xor_count:\n            xor_count[prefix_xor[i]] = 0\n        xor_count[prefix_xor[i]] += 1\n    \n    for i in range(N):\n        total_sum += xor_count[prefix_xor[i]]\n    \n    print(total_sum)\n\n# Call the function to execute\nsolve()\n```"}
{"task_id": "abc370_e", "code": "def count_partitions(N, K, A):\n    MOD = 998244353\n    max_sum = sum(A)\n    if max_sum < K:\n        return 0\n    dp = [[0] * (max_sum + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    for i in range(1, N + 1):\n        for j in range(max_sum + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= A[i - 1]:\n                dp[i][j] += dp[i - 1][j - A[i - 1]]\n                dp[i][j] %= MOD\n    total_ways = sum(dp[N]) % MOD\n    invalid_ways = 0\n    if K <= max_sum:\n        invalid_ways = dp[N][K]\n    result = (total_ways - invalid_ways + MOD) % MOD\n    print(result)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function\ncount_partitions(N, K, A)", "passed": false, "raw_code": "def count_partitions(N, K, A):\n    MOD = 998244353\n    max_sum = sum(A)\n    if max_sum < K:\n        return 0\n    dp = [[0] * (max_sum + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    for i in range(1, N + 1):\n        for j in range(max_sum + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= A[i - 1]:\n                dp[i][j] += dp[i - 1][j - A[i - 1]]\n                dp[i][j] %= MOD\n    total_ways = sum(dp[N]) % MOD\n    invalid_ways = 0\n    if K <= max_sum:\n        invalid_ways = dp[N][K]\n    result = (total_ways - invalid_ways + MOD) % MOD\n    print(result)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nK = int(data[1])\nA = list(map(int, data[2:]))\n\n# Call the function\ncount_partitions(N, K, A)"}
{"task_id": "arc181_c", "code": "def generate_grid(N, P, Q):\n    # Create a list of tuples representing the binary numbers\n    numbers = [(i >> j) & 1 for i in range(2**N) for j in range(N)]\n\n    # Sort the numbers based on the permutation P for rows\n    sorted_numbers = [numbers[i] for i in P]\n\n    # Convert the sorted numbers into a grid\n    grid = [''.join(map(str, sorted_numbers[i*N:(i+1)*N])) for i in range(N)]\n\n    # Print the grid\n    for row in grid:\n        print(row)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)", "passed": false, "raw_code": "def generate_grid(N, P, Q):\n    # Create a list of tuples representing the binary numbers\n    numbers = [(i >> j) & 1 for i in range(2**N) for j in range(N)]\n\n    # Sort the numbers based on the permutation P for rows\n    sorted_numbers = [numbers[i] for i in P]\n\n    # Convert the sorted numbers into a grid\n    grid = [''.join(map(str, sorted_numbers[i*N:(i+1)*N])) for i in range(N)]\n\n    # Print the grid\n    for row in grid:\n        print(row)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nP = list(map(int, data[1:N+1]))\nQ = list(map(int, data[N+1:2*N+1]))\n\n# Generate and print the grid\ngenerate_grid(N, P, Q)"}
{"task_id": "abc371_g", "code": "def smallest_array():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    A = list(map(int, data[N+1:]))\n    \n    seen = set()\n    current = tuple(A)\n    min_array = current\n    \n    while current not in seen:\n        seen.add(current)\n        next_array = tuple(A[P[i]-1] for i in range(N))\n        if next_array < min_array:\n            min_array = next_array\n        current = next_array\n    \n    print(' '.join(map(str, min_array)))\n\nsmallest_array()", "passed": false, "raw_code": "```python\ndef smallest_array():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    A = list(map(int, data[N+1:]))\n    \n    seen = set()\n    current = tuple(A)\n    min_array = current\n    \n    while current not in seen:\n        seen.add(current)\n        next_array = tuple(A[P[i]-1] for i in range(N))\n        if next_array < min_array:\n            min_array = next_array\n        current = next_array\n    \n    print(' '.join(map(str, min_array)))\n\nsmallest_array()\n```"}
{"task_id": "abc373_e", "code": "def min_additional_votes(N, M, K, A):\n    # Calculate remaining votes\n    R = K - sum(A)\n    \n    # Initialize results\n    results = []\n    \n    for i in range(N):\n        # Copy current votes excluding candidate i\n        current_votes = A[:]\n        del current_votes[i]\n        \n        # Sort current votes in descending order\n        current_votes.sort(reverse=True)\n        \n        # Distribute remaining votes among other candidates\n        for j in range(M - 1):\n            if current_votes[j] > 0:\n                current_votes[j] -= 1\n        \n        # Check if candidate i can still win\n        max_votes_others = sum(current_votes)\n        if max_votes_others < A[i]:\n            # Calculate minimum additional votes needed\n            additional_votes_needed = A[i] - max_votes_others\n            if additional_votes_needed <= R:\n                results.append(additional_votes_needed)\n            else:\n                results.append(-1)\n        else:\n            results.append(0)\n    \n    return ' '.join(map(str, results))\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    result = min_additional_votes(N, M, K, A)\n    print(result)", "passed": false, "raw_code": "```python\ndef min_additional_votes(N, M, K, A):\n    # Calculate remaining votes\n    R = K - sum(A)\n    \n    # Initialize results\n    results = []\n    \n    for i in range(N):\n        # Copy current votes excluding candidate i\n        current_votes = A[:]\n        del current_votes[i]\n        \n        # Sort current votes in descending order\n        current_votes.sort(reverse=True)\n        \n        # Distribute remaining votes among other candidates\n        for j in range(M - 1):\n            if current_votes[j] > 0:\n                current_votes[j] -= 1\n        \n        # Check if candidate i can still win\n        max_votes_others = sum(current_votes)\n        if max_votes_others < A[i]:\n            # Calculate minimum additional votes needed\n            additional_votes_needed = A[i] - max_votes_others\n            if additional_votes_needed <= R:\n                results.append(additional_votes_needed)\n            else:\n                results.append(-1)\n        else:\n            results.append(0)\n    \n    return ' '.join(map(str, results))\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    K = int(data[2])\n    A = list(map(int, data[3:]))\n    \n    result = min_additional_votes(N, M, K, A)\n    print(result)\n```\n\n[[ ## completed"}
{"task_id": "arc181_d", "code": "d", "passed": false, "raw_code": "```python\ndef fenwick_query(bit, index):\n    sum = 0\n    while index > 0:\n        sum += bit[index]\n        index -= index & -index\n    return sum\n\ndef fenwick_update(bit, index, value):\n    while index < len(bit):\n        bit[index] += value\n        index += index & -index\n\ndef num_inversions(bit, index):\n    return index - fenwick_query(bit, index) + 1\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    P = list(map(int, data[1:N+1]))\n    M = int(data[N+1])\n    A = list(map(int, data[N+2:N+2+M]))\n    \n    bit = [0] * (N + 1)\n    positions = {P[i]: i + 1 for i in range(N)}\n    \n    for i in range(N):\n        fenwick_update(bit, positions[P[i]], 1)\n    \n    for a in A:\n        current_pos = positions[P[a-1]]\n        inversions = num_inversions(bit, current_pos)\n        print(inversions)\n        \n        fenwick_update(bit, current_pos, -1)\n        positions[P[a-1]] = 0\n        fenwick_update(bit, a, 1)\n        positions[P[a-1]] = a\n\n# Call the function to execute the code\nsolve()"}
{"task_id": "abc366_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    xs = []\n    ys = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        xs.append(x)\n        ys.append(y)\n        index += 2\n    \n    xs.sort()\n    ys.sort()\n    \n    def count_points(coords, target):\n        prefix_sum = [0] * (len(coords) + 1)\n        for i, coord in enumerate(coords):\n            prefix_sum[i + 1] = prefix_sum[i] + coord\n        \n        count = 0\n        left, right = 0, 0\n        while left < len(coords):\n            while right < len(coords) and coords[right] - coords[left] <= target:\n                right += 1\n            count += (prefix_sum[right] - prefix_sum[left]) * (len(coords) - right)\n            left += 1\n        \n        return count\n    \n    result = count_points(xs, D) + count_points(ys, D)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    D = int(data[index + 1])\n    index += 2\n    \n    xs = []\n    ys = []\n    for _ in range(N):\n        x = int(data[index])\n        y = int(data[index + 1])\n        xs.append(x)\n        ys.append(y)\n        index += 2\n    \n    xs.sort()\n    ys.sort()\n    \n    def count_points(coords, target):\n        prefix_sum = [0] * (len(coords) + 1)\n        for i, coord in enumerate(coords):\n            prefix_sum[i + 1] = prefix_sum[i] + coord\n        \n        count = 0\n        left, right = 0, 0\n        while left < len(coords):\n            while right < len(coords) and coords[right] - coords[left] <= target:\n                right += 1\n            count += (prefix_sum[right] - prefix_sum[left]) * (len(coords) - right)\n            left += 1\n        \n        return count\n    \n    result = count_points(xs, D) + count_points(ys, D)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc373_f", "code": "def max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    \n    dp = [0] * (W + 1)\n    \n    index = 2\n    for _ in range(N):\n        w_i = int(data[index])\n        v_i = int(data[index + 1])\n        index += 2\n        \n        for w in range(W, w_i - 1, -1):\n            for k_i in range(1, (w // w_i) + 1):\n                dp[w] = max(dp[w], dp[w - k_i * w_i] + k_i * v_i - k_i ** 2)\n    \n    print(max(dp))\n\nmax_happiness()", "passed": false, "raw_code": "```python\ndef max_happiness():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    W = int(data[1])\n    \n    dp = [0] * (W + 1)\n    \n    index = 2\n    for _ in range(N):\n        w_i = int(data[index])\n        v_i = int(data[index + 1])\n        index += 2\n        \n        for w in range(W, w_i - 1, -1):\n            for k_i in range(1, (w // w_i) + 1):\n                dp[w] = max(dp[w], dp[w - k_i * w_i] + k_i * v_i - k_i ** 2)\n    \n    print(max(dp))\n\nmax_happiness()\n```"}
{"task_id": "abc368_e", "code": "def min_delays(N, M, X1, trains):\n    # Sort trains by their arrival times\n    trains.sort(key=lambda x: x[2])\n    delays = [0] * M\n    delays[0] = X1\n\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        for j in range(i-1, -1, -1):\n            A_j, B_j, S_j, T_j = trains[j]\n            if B_i == A_j and T_i <= S_j:\n                delays[i] = max(delays[i], delays[j] + (S_j - T_i))\n                break\n\n    return ' '.join(map(str, delays[1:])), delays[1:], delays\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nX1 = int(data[2])\ntrains = []\nfor i in range(M):\n    A_i = int(data[3 + 4*i])\n    B_i = int(data[4 + 4*i])\n    S_i = int(data[5 + 4*i])\n    T_i = int(data[6 + 4*i])\n    trains.append((A_i, B_i, S_i, T_i))\n\n# Calculate minimum delays\nresult, delays, _ = min_delays(N, M, X1, trains)\nprint(result)\n", "passed": false, "raw_code": "def min_delays(N, M, X1, trains):\n    # Sort trains by their arrival times\n    trains.sort(key=lambda x: x[2])\n    delays = [0] * M\n    delays[0] = X1\n\n    for i in range(1, M):\n        A_i, B_i, S_i, T_i = trains[i]\n        for j in range(i-1, -1, -1):\n            A_j, B_j, S_j, T_j = trains[j]\n            if B_i == A_j and T_i <= S_j:\n                delays[i] = max(delays[i], delays[j] + (S_j - T_i))\n                break\n\n    return ' '.join(map(str, delays[1:])), delays[1:], delays\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\nX1 = int(data[2])\ntrains = []\nfor i in range(M):\n    A_i = int(data[3 + 4*i])\n    B_i = int(data[4 + 4*i])\n    S_i = int(data[5 + 4*i])\n    T_i = int(data[6 + 4*i])\n    trains.append((A_i, B_i, S_i, T_i))\n\n# Calculate minimum delays\nresult, delays, _ = min_delays(N, M, X1, trains)\nprint(result)\n"}
{"task_id": "abc372_f", "code": "def count_ways(N, M, K, edges):\n    MOD = 998244353\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    for k in range(K):\n        for v in range(1, N + 1):\n            if v % N == 0:\n                next_v = 1\n            else:\n                next_v = v + 1\n            dp[next_v][k + 1] = (dp[next_v][k + 1] + dp[v][k]) % MOD\n    \n    for x, y in edges:\n        dp[y][1] = (dp[y][1] + dp[x][0]) % MOD\n    \n    for k in range(1, K):\n        for v in range(1, N + 1):\n            for x, y in edges:\n                if v == x:\n                    dp[y][k + 1] = (dp[y][k + 1] + dp[v][k]) % MOD\n    \n    return sum(dp[v][K] for v in range(1, N + 1)) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nedges = []\n\nfor i in range(M):\n    x = int(data[3 + 2 * i]) - 1\n    y = int(data[4 + 2 * i]) - 1\n    edges.append((x, y))\n\n# Compute and print the result\nresult = count_ways(N, M, K, edges)\nprint(result)", "passed": false, "raw_code": "```python\ndef count_ways(N, M, K, edges):\n    MOD = 998244353\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[1][0] = 1\n    \n    for k in range(K):\n        for v in range(1, N + 1):\n            if v % N == 0:\n                next_v = 1\n            else:\n                next_v = v + 1\n            dp[next_v][k + 1] = (dp[next_v][k + 1] + dp[v][k]) % MOD\n    \n    for x, y in edges:\n        dp[y][1] = (dp[y][1] + dp[x][0]) % MOD\n    \n    for k in range(1, K):\n        for v in range(1, N + 1):\n            for x, y in edges:\n                if v == x:\n                    dp[y][k + 1] = (dp[y][k + 1] + dp[v][k]) % MOD\n    \n    return sum(dp[v][K] for v in range(1, N + 1)) % MOD\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nedges = []\n\nfor i in range(M):\n    x = int(data[3 + 2 * i]) - 1\n    y = int(data[4 + 2 * i]) - 1\n    edges.append((x, y))\n\n# Compute and print the result\nresult = count_ways(N, M, K, edges)\nprint(result)\n```"}
{"task_id": "arc182_d", "code": "def min_operations_to_transform(A, B, M):\n    N = len(A)\n    \n    # Check initial conditions\n    if A[0] == A[-1] or B[0] == B[-1]:\n        return -1\n    \n    # Calculate differences\n    differences = [abs(A[i] - B[i]) for i in range(N)]\n    \n    # Adjust differences to ensure the sequence remains good\n    total_operations = 0\n    for d in differences:\n        # Each operation can reduce the difference by at most 1 or increase it by at most M-1\n        # We need to ensure the sequence remains good, so we take the minimum steps\n        total_operations += min(d, M - d)\n    \n    return total_operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:]))\n\n# Get result\nresult = min_operations_to_transform(A, B, M)\n\n# Print result\nprint(result)", "passed": false, "raw_code": "```python\ndef min_operations_to_transform(A, B, M):\n    N = len(A)\n    \n    # Check initial conditions\n    if A[0] == A[-1] or B[0] == B[-1]:\n        return -1\n    \n    # Calculate differences\n    differences = [abs(A[i] - B[i]) for i in range(N)]\n    \n    # Adjust differences to ensure the sequence remains good\n    total_operations = 0\n    for d in differences:\n        # Each operation can reduce the difference by at most 1 or increase it by at most M-1\n        # We need to ensure the sequence remains good, so we take the minimum steps\n        total_operations += min(d, M - d)\n    \n    return total_operations\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nA = list(map(int, data[2:N+2]))\nB = list(map(int, data[N+2:]))\n\n# Get result\nresult = min_operations_to_transform(A, B, M)\n\n# Print result\nprint(result)\n```"}
{"task_id": "abc373_g", "code": "import sys\nfrom heapq import heappop, heappush\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    P = []\n    Q = []\n    \n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        P.append((A, B))\n        index += 2\n    \n    for _ in range(N):\n        C = int(data[index])\n        D = int(data[index + 1])\n        Q.append((C, D))\n        index += 2\n    \n    # Sort points P based on x-coordinates\n    P.sort()\n    \n    # Priority queue to keep track of available points Q\n    pq = []\n    for i in range(N):\n        heappush(pq, (Q[i][1], i))\n    \n    # Dictionary to store the mapping of P_i to Q_{R_i}\n    R = [-1] * N\n    \n    for i in range(N):\n        _, min_index = heappop(pq)\n        R[min_index] = i + 1\n    \n    # Check if the segments intersect\n    def does_intersect(Pi, Qi, Pj, Qj):\n        return max(Pi[0], Pj[0]) < min(Qi[0], Qj[0]) or \\\n               max(Pi[1], Pj[1]) < min(Qi[1], Qj[1])\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            if does_intersect(P[i], Q[R[i] - 1], P[j], Q[R[j] - 1]):\n                print(-1)\n                return\n    \n    # Print the permutation R\n    print(\" \".join(map(str, R)))\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\nimport sys\nfrom heapq import heappop, heappush\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    P = []\n    Q = []\n    \n    for _ in range(N):\n        A = int(data[index])\n        B = int(data[index + 1])\n        P.append((A, B))\n        index += 2\n    \n    for _ in range(N):\n        C = int(data[index])\n        D = int(data[index + 1])\n        Q.append((C, D))\n        index += 2\n    \n    # Sort points P based on x-coordinates\n    P.sort()\n    \n    # Priority queue to keep track of available points Q\n    pq = []\n    for i in range(N):\n        heappush(pq, (Q[i][1], i))\n    \n    # Dictionary to store the mapping of P_i to Q_{R_i}\n    R = [-1] * N\n    \n    for i in range(N):\n        _, min_index = heappop(pq)\n        R[min_index] = i + 1\n    \n    # Check if the segments intersect\n    def does_intersect(Pi, Qi, Pj, Qj):\n        return max(Pi[0], Pj[0]) < min(Qi[0], Qj[0]) or \\\n               max(Pi[1], Pj[1]) < min(Qi[1], Qj[1])\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            if does_intersect(P[i], Q[R[i] - 1], P[j], Q[R[j] - 1]):\n                print(-1)\n                return\n    \n    # Print the permutation R\n    print(\" \".join(map(str, R)))\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "3550", "code": "def maxRooksSum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(board[i]) for i in range(m)]\n    col_sums = [sum(board[i][j] for i in range(m)) for j in range(n)]\n    \n    sorted_rows = sorted(range(m), key=lambda x: row_sums[x], reverse=True)\n    sorted_cols = sorted(range(n), key=lambda x: col_sums[x], reverse=True)\n    \n    rook_positions = [(sorted_rows[0], sorted_cols[0]), \n                      (sorted_rows[1], sorted_cols[1]), \n                      (sorted_rows[2], sorted_cols[2])]\n    \n    max_sum = sum(board[row][col] for row, col in rook_positions)\n    \n    return max_sum", "passed": false, "raw_code": "```python\ndef maxRooksSum(board):\n    m, n = len(board), len(board[0])\n    row_sums = [sum(board[i]) for i in range(m)]\n    col_sums = [sum(board[i][j] for i in range(m)) for j in range(n)]\n    \n    sorted_rows = sorted(range(m), key=lambda x: row_sums[x], reverse=True)\n    sorted_cols = sorted(range(n), key=lambda x: col_sums[x], reverse=True)\n    \n    rook_positions = [(sorted_rows[0], sorted_cols[0]), \n                      (sorted_rows[1], sorted_cols[1]), \n                      (sorted_rows[2], sorted_cols[2])]\n    \n    max_sum = sum(board[row][col] for row, col in rook_positions)\n    \n    return max_sum\n```"}
{"task_id": "abc368_d", "code": "import sys\nfrom collections import defaultdict, deque\n\ndef dfs(graph, start, visited, target_set):\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            if node in target_set:\n                target_set.remove(node)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return len(visited), target_set\n\ndef min_vertices_in_subtree(N, K, edges, targets):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    min_size = float('inf')\n    for target in targets:\n        visited = set()\n        remaining_targets = set(targets)\n        size, remaining_targets = dfs(graph, target, visited, remaining_targets)\n        if not remaining_targets:\n            min_size = min(min_size, size)\n\n    return min_size\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    edges = []\n    for _ in range(N - 1):\n        u = int(data[index])\n        v = int(data[index + 1])\n        edges.append((u, v))\n        index += 2\n    targets = list(map(int, data[index:index + K]))\n\n    result = min_vertices_in_subtree(N, K, edges, targets)\n    print(result)\n", "passed": false, "raw_code": "import sys\nfrom collections import defaultdict, deque\n\ndef dfs(graph, start, visited, target_set):\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            if node in target_set:\n                target_set.remove(node)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return len(visited), target_set\n\ndef min_vertices_in_subtree(N, K, edges, targets):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    min_size = float('inf')\n    for target in targets:\n        visited = set()\n        remaining_targets = set(targets)\n        size, remaining_targets = dfs(graph, target, visited, remaining_targets)\n        if not remaining_targets:\n            min_size = min(min_size, size)\n\n    return min_size\n\nif __name__ == '__main__':\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    N = int(data[index])\n    K = int(data[index + 1])\n    index += 2\n    edges = []\n    for _ in range(N - 1):\n        u = int(data[index])\n        v = int(data[index + 1])\n        edges.append((u, v))\n        index += 2\n    targets = list(map(int, data[index:index + K]))\n\n    result = min_vertices_in_subtree(N, K, edges, targets)\n    print(result)\n"}
{"task_id": "3531", "code": "def min_damage(power, damage, health):\n    # Sort enemies by health in descending order\n    enemies = sorted(zip(damage, health), key=lambda x: -x[1])\n    total_damage = 0\n    current_time = 0\n\n    for d, h in enemies:\n        if h <= 0:\n            continue\n        # Calculate the number of full attacks needed to kill the enemy\n        full_attacks = h // power\n        if h % power != 0:\n            full_attacks += 1\n        # Update total damage and current time\n        total_damage += full_attacks * d\n        current_time += full_attacks\n\n    return total_damage", "passed": false, "raw_code": "def min_damage(power, damage, health):\n    # Sort enemies by health in descending order\n    enemies = sorted(zip(damage, health), key=lambda x: -x[1])\n    total_damage = 0\n    current_time = 0\n\n    for d, h in enemies:\n        if h <= 0:\n            continue\n        # Calculate the number of full attacks needed to kill the enemy\n        full_attacks = h // power\n        if h % power != 0:\n            full_attacks += 1\n        # Update total damage and current time\n        total_damage += full_attacks * d\n        current_time += full_attacks\n\n    return total_damage"}
{"task_id": "abc372_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    graph = {}\n    \n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1]) - 1\n            v = int(data[index + 2]) - 1\n            index += 3\n            \n            if u not in graph:\n                graph[u] = []\n            if v not in graph:\n                graph[v] = []\n            \n            graph[u].append(v)\n            graph[v].append(u)\n        \n        elif query_type == 2:\n            v = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            if v not in graph or len(graph[v]) < k:\n                results.append(-1)\n            else:\n                neighbors = sorted(graph[v], reverse=True)\n                results.append(neighbors[k - 1])\n    \n    for result in results:\n        print(result)\n\nmain()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    Q = int(data[index + 1])\n    index += 2\n    \n    graph = {}\n    \n    results = []\n    \n    for _ in range(Q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1]) - 1\n            v = int(data[index + 2]) - 1\n            index += 3\n            \n            if u not in graph:\n                graph[u] = []\n            if v not in graph:\n                graph[v] = []\n            \n            graph[u].append(v)\n            graph[v].append(u)\n        \n        elif query_type == 2:\n            v = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            if v not in graph or len(graph[v]) < k:\n                results.append(-1)\n            else:\n                neighbors = sorted(graph[v], reverse=True)\n                results.append(neighbors[k - 1])\n    \n    for result in results:\n        print(result)\n\nmain()\n```"}
{"task_id": "abc370_g", "code": "def count_good_sequences(N, M):\n    MOD = 998244353\n    MAX_N = 10**10\n    MAX_M = 10**5\n    MAX_P = 10**10\n    MAX_D = 10**5\n    MAX_S = 3\n    dp = [[[0 for _ in range(MAX_S)] for _ in range(MAX_P + 1)] for _ in range(MAX_M + 1)]\n    dp[0][1][0] = 1\n    for i in range(1, M + 1):\n        for j in range(1, MAX_P + 1):\n            for k in range(MAX_S):\n                for p in range(1, MAX_N + 1):\n                    if j * p > MAX_P:\n                        break\n                    div_sum = sum(int(d) for d in str(p))\n                    dp[i][j * p][(k + div_sum) % 3] += dp[i - 1][j][k]\n                    dp[i][j * p][(k + div_sum) % 3] %= MOD\n    result = sum(dp[M][j][0] for j in range(1, MAX_P + 1)) % MOD\n    print(result)\n\ncount_good_sequences(int(input()), int(input()))", "passed": false, "raw_code": "def count_good_sequences(N, M):\n    MOD = 998244353\n    MAX_N = 10**10\n    MAX_M = 10**5\n    MAX_P = 10**10\n    MAX_D = 10**5\n    MAX_S = 3\n    dp = [[[0 for _ in range(MAX_S)] for _ in range(MAX_P + 1)] for _ in range(MAX_M + 1)]\n    dp[0][1][0] = 1\n    for i in range(1, M + 1):\n        for j in range(1, MAX_P + 1):\n            for k in range(MAX_S):\n                for p in range(1, MAX_N + 1):\n                    if j * p > MAX_P:\n                        break\n                    div_sum = sum(int(d) for d in str(p))\n                    dp[i][j * p][(k + div_sum) % 3] += dp[i - 1][j][k]\n                    dp[i][j * p][(k + div_sum) % 3] %= MOD\n    result = sum(dp[M][j][0] for j in range(1, MAX_P + 1)) % MOD\n    print(result)\n\ncount_good_sequences(int(input()), int(input()))"}
{"task_id": "abc369_g", "code": "import sys\nfrom collections import defaultdict, deque\n\ndef min_max_walk_score(N, edges):\n    # Build the adjacency list for the tree\n    adj_list = defaultdict(list)\n    for u, v, l in edges:\n        adj_list[u].append((v, l))\n        adj_list[v].append((u, l))\n\n    def bfs(root):\n        dist = [-1] * (N + 1)\n        dist[root] = 0\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            for neighbor, weight in adj_list[node]:\n                if dist[neighbor] == -1:\n                    dist[neighbor] = dist[node] + weight\n                    queue.append(neighbor)\n        return dist\n\n    # Calculate the distance from root to all other nodes\n    root = 1\n    distances = bfs(root)\n\n    # Function to calculate the minimum and maximum scores for K vertices\n    def get_scores(K):\n        if K == 1:\n            return distances[root] * 2\n        else:\n            return (distances[root] + distances[root]) * 2\n\n    # Read input\n    input = sys.stdin.read\n    data = input().split()\n\n    # Number of test cases\n    T = int(data[0])\n\n    results = []\n    index = 1\n    for _ in range(T):\n        K = int(data[index])\n        index += 1\n        result = get_scores(K)\n        results.append(result)\n\n    # Print results\n    for result in results:\n        print(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    N = int(input())\n    edges = [tuple(map(int, input().split())) for _ in range(N - 1)]\n    min_max_walk_score(N, edges)", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef min_max_walk_score(N, edges):\n    # Build the adjacency list for the tree\n    adj_list = defaultdict(list)\n    for u, v, l in edges:\n        adj_list[u].append((v, l))\n        adj_list[v].append((u, l))\n\n    def bfs(root):\n        dist = [-1] * (N + 1)\n        dist[root] = 0\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            for neighbor, weight in adj_list[node]:\n                if dist[neighbor] == -1:\n                    dist[neighbor] = dist[node] + weight\n                    queue.append(neighbor)\n        return dist\n\n    # Calculate the distance from root to all other nodes\n    root = 1\n    distances = bfs(root)\n\n    # Function to calculate the minimum and maximum scores for K vertices\n    def get_scores(K):\n        if K == 1:\n            return distances[root] * 2\n        else:\n            return (distances[root] + distances[root]) * 2\n\n    # Read input\n    input = sys.stdin.read\n    data = input().split()\n\n    # Number of test cases\n    T = int(data[0])\n\n    results = []\n    index = 1\n    for _ in range(T):\n        K = int(data[index])\n        index += 1\n        result = get_scores(K)\n        results.append(result)\n\n    # Print results\n    for result in results:\n        print(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    N = int(input())\n    edges = [tuple(map(int, input().split())) for _ in range(N - 1)]\n    min_max_walk_score(N, edges)\n```"}
{"task_id": "abc366_g", "code": "from collections import defaultdict\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nedges = defaultdict(list)\nindex = 2\nfor _ in range(M):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    edges[u].append(v)\n    edges[v].append(u)\n    index += 2\n\ndef dfs(v, parent, assigned):\n    if v in assigned:\n        return assigned[v]\n    \n    assigned[v] = 1\n    for w in edges[v]:\n        if w == parent:\n            continue\n        assigned[w] = dfs(w, v, assigned) ^ 1\n    \n    return assigned[v]\n\nassigned = {}\nfor v in range(N):\n    if v not in assigned:\n        dfs(v, -1, assigned)\n\nresult = []\nfor v in range(N):\n    result.append(assigned[v])\n\nif all(result[v] == result[u] for u in edges[v] for v in range(N)):\n    print(\"Yes\")\n    print(\" \".join(map(str, result)))\nelse:\n    print(\"No\")", "passed": false, "raw_code": "```python\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nedges = defaultdict(list)\nindex = 2\nfor _ in range(M):\n    u = int(data[index]) - 1\n    v = int(data[index + 1]) - 1\n    edges[u].append(v)\n    edges[v].append(u)\n    index += 2\n\ndef dfs(v, parent, assigned):\n    if v in assigned:\n        return assigned[v]\n    \n    assigned[v] = 1\n    for w in edges[v]:\n        if w == parent:\n            continue\n        assigned[w] = dfs(w, v, assigned) ^ 1\n    \n    return assigned[v]\n\nassigned = {}\nfor v in range(N):\n    if v not in assigned:\n        dfs(v, -1, assigned)\n\nresult = []\nfor v in range(N):\n    result.append(assigned[v])\n\nif all(result[v] == result[u] for u in edges[v] for v in range(N)):\n    print(\"Yes\")\n    print(\" \".join(map(str, result)))\nelse:\n    print(\"No\")\n\n```"}
{"task_id": "arc182_e", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n\n    dp = {i: float('inf') for i in range(M)}\n    dp[0] = 0\n\n    for _ in range(K):\n        new_dp = dp.copy()\n        for a in A:\n            for j in dp.keys():\n                new_dp[(C * _ + j + a) % M] = min(new_dp.get((C * _ + j + a) % M, float('inf')), dp[j])\n        dp = new_dp\n\n    result = sum(dp.values())\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "passed": false, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    C = int(data[2])\n    K = int(data[3])\n    A = list(map(int, data[4:]))\n\n    dp = {i: float('inf') for i in range(M)}\n    dp[0] = 0\n\n    for _ in range(K):\n        new_dp = dp.copy()\n        for a in A:\n            for j in dp.keys():\n                new_dp[(C * _ + j + a) % M] = min(new_dp.get((C * _ + j + a) % M, float('inf')), dp[j])\n        dp = new_dp\n\n    result = sum(dp.values())\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "arc183_b", "code": "d", "passed": false, "raw_code": "```python\ndef can_transform_to_B(A, B, K):\n    N = len(A)\n    if N != len(B):\n        return \"No\"\n    \n    # Create frequency dictionaries for elements within range K\n    freq_A = {}\n    freq_B = {}\n    \n    for i in range(N):\n        if A[i] not in freq_A:\n            freq_A[A[i]] = []\n        if B[i] not in freq_B:\n            freq_B[B[i]] = []\n        freq_A[A[i]].append(i)\n        freq_B[B[i]].append(i)\n    \n    # Check if frequencies match\n    if freq_A != freq_B:\n        return \"No\"\n    \n    # Check connectivity within range K\n    for element in freq_A:\n        if not is_connected(freq_A[element], freq_B[element], N, K):\n            return \"No\"\n    \n    return \"Yes\"\n\ndef is_connected(list1, list2, N, K):\n    dict2 = {list2[i]: i for i in range(len(list2))}\n    for i in range(len(list1)):\n        if list1[i] not in dict2:\n            return False\n        j = dict2[list1[i]]\n        if abs(i - j) > K:\n            return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        K = int(data[index + 1])\n        index += 2\n        A = list(map(int, data[index:index + N]))\n        index += N\n        B = list(map(int, data[index:index + N]))\n        index += N\n        \n        result = can_transform_to_B(A, B, K)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "abc369_e", "code": "f", "passed": false, "raw_code": "```python\nfrom collections import defaultdict, deque\n\ndef min_time_to_travel(N, M, bridges, queries):\n    # Create adjacency list representation of the graph\n    graph = defaultdict(list)\n    for u, v, t in bridges:\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n    \n    # Initialize DP table with infinity\n    dp = [[float('inf')] * (1 << M) for _ in range(N + 1)]\n    dp[1][0] = 0\n    \n    # Initialize queue for BFS\n    queue = deque([(1, 0)])\n    \n    while queue:\n        u, mask = queue.popleft()\n        for v, t in graph[u]:\n            new_mask = mask | (1 << (v - 1))\n            if dp[v][new_mask] > dp[u][mask] + t:\n                dp[v][new_mask] = dp[u][mask] + t\n                queue.append((v, new_mask))\n    \n    # Process each query\n    results = []\n    for K, query in queries:\n        min_time = float('inf')\n        for mask in range(1 << M):\n            if (mask & ((1 << (K - 1)) - 1)) == 0:\n                min_time = min(min_time, dp[N][mask])\n        results.append(min_time)\n    \n    return results\n\n# Read input\nN, M = map(int, input().split())\nbridges = [tuple(map(int, input().split())) for _ in range(M)]\nQ = int(input())\nqueries = [tuple(map(int, input().split())) for _ in range(Q)]\n\n# Process queries and print results\nresults = min_time_to_travel(N, M, bridges, queries)\nfor result in results:\n    print(result)"}
{"task_id": "arc183_d", "code": "i", "passed": false, "raw_code": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef bfs(graph, start):\n    queue = deque([start])\n    visited = {start}\n    distance = {start: 0}\n    farthest = start\n    max_distance = 0\n    \n    while queue:\n        current = queue.popleft()\n        for neighbor in graph[current]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                distance[neighbor] = distance[current] + 1\n                queue.append(neighbor)\n                if distance[neighbor] > max_distance:\n                    max_distance = distance[neighbor]\n                    farthest = neighbor\n    \n    return farthest, max_distance\n\ndef find_farthest_leaves(graph, leaves):\n    leaf1, _ = bfs(graph, leaves[0])\n    leaf2, _ = bfs(graph, leaf1)\n    return leaf1, leaf2\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    edges = [(int(data[i*2+1]), int(data[i*2+2])) for i in range((N-1)//2)]\n    \n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    leaves = []\n    for node in range(1, N+1):\n        if len(graph[node]) == 1:\n            leaves.append(node)\n    \n    operations = []\n    while len(leaves) >= 2:\n        leaf1, leaf2 = find_farthest_leaves(graph, leaves)\n        operations.append((leaf1, leaf2))\n        \n        # Remove the two leaves from the graph\n        graph[leaf1].remove(leaf2)\n        graph[leaf2].remove(leaf1)\n        leaves.remove(leaf1)\n        leaves.remove(leaf2)\n    \n    for op in operations:\n        print(op[0], op[1])\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "3527", "code": "def countAlternatingGroups(colors, queries):\n    n = len(colors)\n    colors += colors  # Extend colors to simulate circular arrangement\n    result = []\n\n    def count_groups(size):\n        count = 0\n        for i in range(n):\n            valid = True\n            for j in range(1, size):\n                if colors[i + j] != colors[i + j - 1]:\n                    continue\n                else:\n                    valid = False\n                    break\n            if valid and colors[i + size] != colors[i + size - 1]:\n                count += 1\n        return count\n\n    for query in queries:\n        if query[0] == 1:\n            result.append(count_groups(query[1]))\n        elif query[0] == 2:\n            old_color = colors[query[1]]\n            colors[query[1]] = query[2]\n            if old_color != query[2]:\n                # Adjust counts based on the change\n                pass\n\n    return result", "passed": false, "raw_code": "```python\ndef countAlternatingGroups(colors, queries):\n    n = len(colors)\n    colors += colors  # Extend colors to simulate circular arrangement\n    result = []\n\n    def count_groups(size):\n        count = 0\n        for i in range(n):\n            valid = True\n            for j in range(1, size):\n                if colors[i + j] != colors[i + j - 1]:\n                    continue\n                else:\n                    valid = False\n                    break\n            if valid and colors[i + size] != colors[i + size - 1]:\n                count += 1\n        return count\n\n    for query in queries:\n        if query[0] == 1:\n            result.append(count_groups(query[1]))\n        elif query[0] == 2:\n            old_color = colors[query[1]]\n            colors[query[1]] = query[2]\n            if old_color != query[2]:\n                # Adjust counts based on the change\n                pass\n\n    return result\n```"}
{"task_id": "3551", "code": "class TrieNode:\n    def __init__(self):\n        self.left = None\n        self.right = None\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit == 0:\n                if not node.left:\n                    node.left = TrieNode()\n                node = node.left\n            else:\n                if not node.right:\n                    node.right = TrieNode()\n                node = node.right\n\n    def find_max_xor(self, num):\n        node = self.root\n        max_xor = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit == 0:\n                if node.right:\n                    max_xor |= (1 << i)\n                    node = node.right\n                else:\n                    node = node.left\n            else:\n                if node.left:\n                    max_xor |= (1 << i)\n                    node = node.left\n                else:\n                    node = node.right\n        return max_xor\n\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    \n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = Trie()\n    result = [0] * len(queries)\n    \n    for i, (l, r) in enumerate(queries):\n        xor_val = prefix_xor[r + 1] ^ prefix_xor[l]\n        trie.insert(xor_val)\n        result[i] = trie.find_max_xor(xor_val)\n    \n    return result", "passed": false, "raw_code": "```python\nclass TrieNode:\n    def __init__(self):\n        self.left = None\n        self.right = None\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit == 0:\n                if not node.left:\n                    node.left = TrieNode()\n                node = node.left\n            else:\n                if not node.right:\n                    node.right = TrieNode()\n                node = node.right\n\n    def find_max_xor(self, num):\n        node = self.root\n        max_xor = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit == 0:\n                if node.right:\n                    max_xor |= (1 << i)\n                    node = node.right\n                else:\n                    node = node.left\n            else:\n                if node.left:\n                    max_xor |= (1 << i)\n                    node = node.left\n                else:\n                    node = node.right\n        return max_xor\n\ndef max_xor_subarray(nums, queries):\n    n = len(nums)\n    prefix_xor = [0] * (n + 1)\n    \n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ nums[i]\n    \n    trie = Trie()\n    result = [0] * len(queries)\n    \n    for i, (l, r) in enumerate(queries):\n        xor_val = prefix_xor[r + 1] ^ prefix_xor[l]\n        trie.insert(xor_val)\n        result[i] = trie.find_max_xor(xor_val)\n    \n    return result\n```"}
{"task_id": "3575", "code": "def maxSubsequenceValue(nums, k):\n    n = len(nums)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, min(i // 2 + 1, k + 1)):\n            part1 = dp[i - 1][j]\n            part2 = dp[i - 1][j - 1]\n            dp[i][j] = max(part1, part2 | nums[i - 1])\n    \n    return dp[n][k]", "passed": false, "raw_code": "```python\ndef maxSubsequenceValue(nums, k):\n    n = len(nums)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, min(i // 2 + 1, k + 1)):\n            part1 = dp[i - 1][j]\n            part2 = dp[i - 1][j - 1]\n            dp[i][j] = max(part1, part2 | nums[i - 1])\n    \n    return dp[n][k]\n```"}
{"task_id": "3560", "code": "def min_moves_to_capture(kx, ky, px, py):\n    directions = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        x, y, moves = queue.pop(0)\n        if (x, y) == (px, py):\n            return moves\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    return float('inf')\n\ndef max_moves_alice(kx, ky, positions):\n    def dfs(pawns, turn):\n        if not pawns:\n            return 0\n        if turn == 'Alice':\n            max_moves = float('-inf')\n            for i, (px, py) in enumerate(pawns):\n                moves = min_moves_to_capture(kx, ky, px, py)\n                new_pawns = pawns[:i] + pawns[i+1:]\n                max_moves = max(max_moves, moves + dfs(new_pawns, 'Bob'))\n            return max_moves\n        else:\n            min_moves = float('inf')\n            for i, (px, py) in enumerate(pawns):\n                moves = min_moves_to_capture(kx, ky, px, py)\n                new_pawns = pawns[:i] + pawns[i+1:]\n                min_moves = min(min_moves, moves + dfs(new_pawns, 'Alice'))\n            return min_moves\n    \n    return dfs(positions, 'Alice')\n\n# Example usage:\nkx, ky = 1, 1\npositions = [[0, 0]]\nprint(max_moves_alice(kx, ky, positions))  # Output: 4\n\nkx, ky = 0, 2\npositions = [[1, 1], [2, 2], [3, 3]]\nprint(max_moves_alice(kx, ky, positions))  # Output: 8\n\nkx, ky = 0, 0\npositions = [[1, 2], [2, 4]]\nprint(max_moves_alice(kx, ky, positions))  # Output: 3", "passed": false, "raw_code": "```python\ndef min_moves_to_capture(kx, ky, px, py):\n    directions = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    queue = [(kx, ky, 0)]\n    visited = set()\n    visited.add((kx, ky))\n    \n    while queue:\n        x, y, moves = queue.pop(0)\n        if (x, y) == (px, py):\n            return moves\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < 50 and 0 <= ny < 50 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, moves + 1))\n    return float('inf')\n\ndef max_moves_alice(kx, ky, positions):\n    def dfs(pawns, turn):\n        if not pawns:\n            return 0\n        if turn == 'Alice':\n            max_moves = float('-inf')\n            for i, (px, py) in enumerate(pawns):\n                moves = min_moves_to_capture(kx, ky, px, py)\n                new_pawns = pawns[:i] + pawns[i+1:]\n                max_moves = max(max_moves, moves + dfs(new_pawns, 'Bob'))\n            return max_moves\n        else:\n            min_moves = float('inf')\n            for i, (px, py) in enumerate(pawns):\n                moves = min_moves_to_capture(kx, ky, px, py)\n                new_pawns = pawns[:i] + pawns[i+1:]\n                min_moves = min(min_moves, moves + dfs(new_pawns, 'Alice'))\n            return min_moves\n    \n    return dfs(positions, 'Alice')\n\n# Example usage:\nkx, ky = 1, 1\npositions = [[0, 0]]\nprint(max_moves_alice(kx, ky, positions))  # Output: 4\n\nkx, ky = 0, 2\npositions = [[1, 1], [2, 2], [3, 3]]\nprint(max_moves_alice(kx, ky, positions))  # Output: 8\n\nkx, ky = 0, 0\npositions = [[1, 2], [2, 4]]\nprint(max_moves_alice(kx, ky, positions))  # Output: 3\n```"}
{"task_id": "arc183_c", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nconditions = []\nfor i in range(M):\n    L = int(data[2 + 3 * i]) - 1\n    R = int(data[3 + 3 * i]) - 1\n    X = int(data[4 + 3 * i]) - 1\n    conditions.append((L, R, X))\n\nMOD = 998244353\n\n# dp[i][j][k] will store the number of valid permutations up to position i with max value j and condition k satisfied\ndp = [[[0] * 2 for _ in range(N + 1)] for _ in range(N + 1)]\n\n# Initialize the base case\ndp[0][0][0] = 1\n\nfor i in range(1, N + 1):\n    for j in range(i):\n        dp[i][j][0] = dp[i][j][0] * (N - j) % MOD\n        dp[i][j][1] = dp[i][j][1] * (N - j) % MOD\n    \n    for j in range(i):\n        dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][0] * (N - j - 1)) % MOD\n        dp[i][j][1] = (dp[i][j][1] + dp[i-1][j][1] * (N - j - 1)) % MOD\n    \n    for L, R, X in conditions:\n        if L > i or R < i or X < L or X > R:\n            continue\n        \n        max_val = max(data[L:R+1])\n        for j in range(i):\n            if j >= max_val:\n                dp[i][j][0] = (dp[i][j][0] - dp[i-1][j][0] * (j - max_val + 1)) % MOD\n                dp[i][j][1] = (dp[i][j][1] - dp[i-1][j][1] * (j - max_val + 1)) % MOD\n            else:\n                dp[i][j][0] = (dp[i][j][0] - dp[i-1][j][0] * (j - max_val + 1)) % MOD\n                dp[i][j][1] = (dp[i][j][1] - dp[i-1][j][1] * (j - max_val + 1)) % MOD\n    \n    for j in range(i):\n        dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][1] * (i - j)) % MOD\n        dp[i][j][1] = (dp[i][j][1] + dp[i-1][j][1] * (i - j)) % MOD\n\nprint(dp[N][N-1][0])", "passed": false, "raw_code": "```python\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\n\nconditions = []\nfor i in range(M):\n    L = int(data[2 + 3 * i]) - 1\n    R = int(data[3 + 3 * i]) - 1\n    X = int(data[4 + 3 * i]) - 1\n    conditions.append((L, R, X))\n\nMOD = 998244353\n\n# dp[i][j][k] will store the number of valid permutations up to position i with max value j and condition k satisfied\ndp = [[[0] * 2 for _ in range(N + 1)] for _ in range(N + 1)]\n\n# Initialize the base case\ndp[0][0][0] = 1\n\nfor i in range(1, N + 1):\n    for j in range(i):\n        dp[i][j][0] = dp[i][j][0] * (N - j) % MOD\n        dp[i][j][1] = dp[i][j][1] * (N - j) % MOD\n    \n    for j in range(i):\n        dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][0] * (N - j - 1)) % MOD\n        dp[i][j][1] = (dp[i][j][1] + dp[i-1][j][1] * (N - j - 1)) % MOD\n    \n    for L, R, X in conditions:\n        if L > i or R < i or X < L or X > R:\n            continue\n        \n        max_val = max(data[L:R+1])\n        for j in range(i):\n            if j >= max_val:\n                dp[i][j][0] = (dp[i][j][0] - dp[i-1][j][0] * (j - max_val + 1)) % MOD\n                dp[i][j][1] = (dp[i][j][1] - dp[i-1][j][1] * (j - max_val + 1)) % MOD\n            else:\n                dp[i][j][0] = (dp[i][j][0] - dp[i-1][j][0] * (j - max_val + 1)) % MOD\n                dp[i][j][1] = (dp[i][j][1] - dp[i-1][j][1] * (j - max_val + 1)) % MOD\n    \n    for j in range(i):\n        dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][1] * (i - j)) % MOD\n        dp[i][j][1] = (dp[i][j][1] + dp[i-1][j][1] * (i - j)) % MOD\n\nprint(dp[N][N-1][0])\n```"}
{"task_id": "abc368_g", "code": "import sys\nfrom typing import List\n\ndef build_segment_tree(data: List[int]) -> List[int]:\n    n = len(data)\n    tree = [0] * (4 * n)\n    def build(node: int, start: int, end: int) -> None:\n        if start == end:\n            tree[node] = data[start]\n        else:\n            mid = (start + end) // 2\n            build(2 * node, start, mid)\n            build(2 * node + 1, mid + 1, end)\n            tree[node] = max(tree[2 * node], tree[2 * node + 1])\n    build(1, 0, n - 1)\n    return tree\n\ndef query_segment_tree(tree: List[int], node: int, start: int, end: int, l: int, r: int) -> int:\n    if r < start or end < l:\n        return 0\n    if l <= start and end <= r:\n        return tree[node]\n    mid = (start + end) // 2\n    left = query_segment_tree(tree, 2 * node, start, mid, l, r)\n    right = query_segment_tree(tree, 2 * node + 1, mid + 1, end, l, r)\n    return max(left, right)\n\ndef update_segment_tree(tree: List[int], node: int, start: int, end: int, index: int, value: int) -> None:\n    if start == end:\n        tree[node] = value\n    else:\n        mid = (start + end) // 2\n        if index <= mid:\n            update_segment_tree(tree, 2 * node, start, mid, index, value)\n        else:\n            update_segment_tree(tree, 2 * node + 1, mid + 1, end, index, value)\n        tree[node] = max(tree[2 * node], tree[2 * node + 1])\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    a = list(map(int, data[1:n+1]))\n    b = list(map(int, data[n+1:2*n+1]))\n    q = int(data[2*n+1])\n    queries = data[2*n+2:]\n\n    tree_a = build_segment_tree(a)\n    tree_b = build_segment_tree(b)\n\n    results = []\n    i = 0\n    while i < q:\n        query_type = int(queries[i])\n        if query_type == 1:\n            i += 1\n            index = int(queries[i]) - 1\n            value = int(queries[i+1])\n            update_segment_tree(tree_a, 1, 0, n-1, index, value)\n            a[index] = value\n        elif query_type == 2:\n            i += 1\n            index = int(queries[i]) - 1\n            value = int(queries[i+1])\n            update_segment_tree(tree_b, 1, 0, n-1, index, value)\n            b[index] = value\n        elif query_type == 3:\n            i += 1\n            l = int(queries[i]) - 1\n            r = int(queries[i+1])\n            v = 0\n            for j in range(l, r + 1):\n                v += a[j]\n                v = max(v, v * b[j])\n            results.append(v)\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()", "passed": false, "raw_code": "import sys\nfrom typing import List\n\ndef build_segment_tree(data: List[int]) -> List[int]:\n    n = len(data)\n    tree = [0] * (4 * n)\n    def build(node: int, start: int, end: int) -> None:\n        if start == end:\n            tree[node] = data[start]\n        else:\n            mid = (start + end) // 2\n            build(2 * node, start, mid)\n            build(2 * node + 1, mid + 1, end)\n            tree[node] = max(tree[2 * node], tree[2 * node + 1])\n    build(1, 0, n - 1)\n    return tree\n\ndef query_segment_tree(tree: List[int], node: int, start: int, end: int, l: int, r: int) -> int:\n    if r < start or end < l:\n        return 0\n    if l <= start and end <= r:\n        return tree[node]\n    mid = (start + end) // 2\n    left = query_segment_tree(tree, 2 * node, start, mid, l, r)\n    right = query_segment_tree(tree, 2 * node + 1, mid + 1, end, l, r)\n    return max(left, right)\n\ndef update_segment_tree(tree: List[int], node: int, start: int, end: int, index: int, value: int) -> None:\n    if start == end:\n        tree[node] = value\n    else:\n        mid = (start + end) // 2\n        if index <= mid:\n            update_segment_tree(tree, 2 * node, start, mid, index, value)\n        else:\n            update_segment_tree(tree, 2 * node + 1, mid + 1, end, index, value)\n        tree[node] = max(tree[2 * node], tree[2 * node + 1])\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    a = list(map(int, data[1:n+1]))\n    b = list(map(int, data[n+1:2*n+1]))\n    q = int(data[2*n+1])\n    queries = data[2*n+2:]\n\n    tree_a = build_segment_tree(a)\n    tree_b = build_segment_tree(b)\n\n    results = []\n    i = 0\n    while i < q:\n        query_type = int(queries[i])\n        if query_type == 1:\n            i += 1\n            index = int(queries[i]) - 1\n            value = int(queries[i+1])\n            update_segment_tree(tree_a, 1, 0, n-1, index, value)\n            a[index] = value\n        elif query_type == 2:\n            i += 1\n            index = int(queries[i]) - 1\n            value = int(queries[i+1])\n            update_segment_tree(tree_b, 1, 0, n-1, index, value)\n            b[index] = value\n        elif query_type == 3:\n            i += 1\n            l = int(queries[i]) - 1\n            r = int(queries[i+1])\n            v = 0\n            for j in range(l, r + 1):\n                v += a[j]\n                v = max(v, v * b[j])\n            results.append(v)\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "abc367_g", "code": "MOD = 998244353\n\ndef mod_pow(base, exp):\n    result = 1\n    while exp > 0:\n        if exp % 2 == 1:\n            result = (result * base) % MOD\n        base = (base * base) % MOD\n        exp //= 2\n    return result\n\ndef xor_subsequences(N, M, K, A):\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    \n    for i in range(1, N + 1):\n        dp[i] = (dp[i - 1] << 1) % MOD\n    \n    prefix_xor = [0] * (N + 1)\n    \n    def dfs(index, length, current_xor):\n        if index == N:\n            if length % M == 0:\n                return mod_pow(current_xor, K)\n            return 0\n        \n        # Include the current element\n        include = dfs(index + 1, length + 1, current_xor ^ A[index])\n        \n        # Exclude the current element\n        exclude = dfs(index + 1, length, current_xor)\n        \n        return (include + exclude) % MOD\n    \n    total_score = 0\n    for i in range(1, N + 1):\n        total_score = (total_score + dfs(i, 1, A[i - 1])) % MOD\n    \n    return total_score\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Calculate and print the result\nprint(xor_subsequences(N, M, K, A))", "passed": false, "raw_code": "```python\nMOD = 998244353\n\ndef mod_pow(base, exp):\n    result = 1\n    while exp > 0:\n        if exp % 2 == 1:\n            result = (result * base) % MOD\n        base = (base * base) % MOD\n        exp //= 2\n    return result\n\ndef xor_subsequences(N, M, K, A):\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    \n    for i in range(1, N + 1):\n        dp[i] = (dp[i - 1] << 1) % MOD\n    \n    prefix_xor = [0] * (N + 1)\n    \n    def dfs(index, length, current_xor):\n        if index == N:\n            if length % M == 0:\n                return mod_pow(current_xor, K)\n            return 0\n        \n        # Include the current element\n        include = dfs(index + 1, length + 1, current_xor ^ A[index])\n        \n        # Exclude the current element\n        exclude = dfs(index + 1, length, current_xor)\n        \n        return (include + exclude) % MOD\n    \n    total_score = 0\n    for i in range(1, N + 1):\n        total_score = (total_score + dfs(i, 1, A[i - 1])) % MOD\n    \n    return total_score\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nM = int(data[1])\nK = int(data[2])\nA = list(map(int, data[3:]))\n\n# Calculate and print the result\nprint(xor_subsequences(N, M, K, A))\n```"}
{"task_id": "3552", "code": "def largest_k_palindrome(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    max_palindrome = 0\n    \n    # Generate potential palindromes\n    for i in range(10**(n//2), 10**((n+1)//2)):\n        str_i = str(i)\n        if n % 2 == 0:\n            candidate = int(str_i + str_i[::-1])\n        else:\n            candidate = int(str_i + str_i[-2::-1])\n        \n        if candidate % k == 0:\n            max_palindrome = max(max_palindrome, candidate)\n    \n    return str(max_palindrome)", "passed": false, "raw_code": "```python\ndef largest_k_palindrome(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    max_palindrome = 0\n    \n    # Generate potential palindromes\n    for i in range(10**(n//2), 10**((n+1)//2)):\n        str_i = str(i)\n        if n % 2 == 0:\n            candidate = int(str_i + str_i[::-1])\n        else:\n            candidate = int(str_i + str_i[-2::-1])\n        \n        if candidate % k == 0:\n            max_palindrome = max(max_palindrome, candidate)\n    \n    return str(max_palindrome)\n```"}
{"task_id": "abc371_f", "code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nX = list(map(int, data[1:N+1]))\nQ = int(data[N+1])\ntasks = [(int(data[N+2+2*i])-1, int(data[N+3+2*i])) for i in range(Q)]\n\ndef min_steps(pos, target):\n    return abs(pos - target)\n\ntotal_steps = 0\nfor task in tasks:\n    person, target = task\n    total_steps += min_steps(X[person], target)\n\nprint(total_steps)\n", "passed": false, "raw_code": "import sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nX = list(map(int, data[1:N+1]))\nQ = int(data[N+1])\ntasks = [(int(data[N+2+2*i])-1, int(data[N+3+2*i])) for i in range(Q)]\n\ndef min_steps(pos, target):\n    return abs(pos - target)\n\ntotal_steps = 0\nfor task in tasks:\n    person, target = task\n    total_steps += min_steps(X[person], target)\n\nprint(total_steps)\n"}
{"task_id": "3563", "code": "def maxScore(grid):\n    def backtrack(row, selected_values):\n        if row == len(grid):\n            return 0\n        max_score = 0\n        for col in range(len(grid[row])):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                max_score = max(max_score, grid[row][col] + backtrack(row + 1, selected_values))\n                selected_values.remove(grid[row][col])\n        return max_score\n    \n    return backtrack(0, set())", "passed": false, "raw_code": "```python\ndef maxScore(grid):\n    def backtrack(row, selected_values):\n        if row == len(grid):\n            return 0\n        max_score = 0\n        for col in range(len(grid[row])):\n            if grid[row][col] not in selected_values:\n                selected_values.add(grid[row][col])\n                max_score = max(max_score, grid[row][col] + backtrack(row + 1, selected_values))\n                selected_values.remove(grid[row][col])\n        return max_score\n    \n    return backtrack(0, set())\n```"}
{"task_id": "arc182_a", "code": "MOD = 998244353\n\ndef build_segment_tree(n):\n    seg_tree = [float('-inf')] * (4 * n)\n    \n    def update(index, value, pos=1, left=0, right=None):\n        if right is None:\n            right = n - 1\n        if left == right:\n            seg_tree[pos] = max(seg_tree[pos], value)\n        else:\n            mid = (left + right) // 2\n            if index <= mid:\n                update(index, value, 2 * pos, left, mid)\n            else:\n                update(index, value, 2 * pos + 1, mid + 1, right)\n            seg_tree[pos] = max(seg_tree[2 * pos], seg_tree[2 * pos + 1])\n    \n    def query(left, right, pos=1, seg_left=0, seg_right=None):\n        if seg_right is None:\n            seg_right = n - 1\n        if left > seg_right or right < seg_left:\n            return float('-inf')\n        if left <= seg_left and right >= seg_right:\n            return seg_tree[pos]\n        mid = (seg_left + seg_right) // 2\n        return max(query(left, right, 2 * pos, seg_left, mid),\n                   query(left, right, 2 * pos + 1, mid + 1, seg_right))\n    \n    return update, query\n\ndef count_valid_sequences(N, Q, P, V):\n    update, query = build_segment_tree(N)\n    \n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, Q + 1):\n        pi = P[i - 1] - 1\n        vi = V[i - 1]\n        \n        # Option 1: Replace S_1, S_2, ..., S_pi with V_i\n        for j in range(pi + 1):\n            if query(0, j) <= vi:\n                dp[i][pi] += dp[i - 1][j]\n                dp[i][pi] %= MOD\n        \n        # Option 2: Replace S_pi, S_pi+1, ..., S_N with V_i\n        for j in range(pi, N):\n            if query(j, N - 1) <= vi:\n                dp[i][j] += dp[i - 1][pi]\n                dp[i][j] %= MOD\n        \n        # Update the segment tree\n        update(pi, vi)\n    \n    result = 0\n    for j in range(N):\n        result += dp[-1][j]\n        result %= MOD\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nP = list(map(int, data[2::2]))\nV = list(map(int, data[3::2]))\n\n# Get the result\nresult = count_valid_sequences(N, Q, P, V)\n\n# Print the result\nprint(result)", "passed": false, "raw_code": "```python\nMOD = 998244353\n\ndef build_segment_tree(n):\n    seg_tree = [float('-inf')] * (4 * n)\n    \n    def update(index, value, pos=1, left=0, right=None):\n        if right is None:\n            right = n - 1\n        if left == right:\n            seg_tree[pos] = max(seg_tree[pos], value)\n        else:\n            mid = (left + right) // 2\n            if index <= mid:\n                update(index, value, 2 * pos, left, mid)\n            else:\n                update(index, value, 2 * pos + 1, mid + 1, right)\n            seg_tree[pos] = max(seg_tree[2 * pos], seg_tree[2 * pos + 1])\n    \n    def query(left, right, pos=1, seg_left=0, seg_right=None):\n        if seg_right is None:\n            seg_right = n - 1\n        if left > seg_right or right < seg_left:\n            return float('-inf')\n        if left <= seg_left and right >= seg_right:\n            return seg_tree[pos]\n        mid = (seg_left + seg_right) // 2\n        return max(query(left, right, 2 * pos, seg_left, mid),\n                   query(left, right, 2 * pos + 1, mid + 1, seg_right))\n    \n    return update, query\n\ndef count_valid_sequences(N, Q, P, V):\n    update, query = build_segment_tree(N)\n    \n    dp = [[0] * (N + 1) for _ in range(Q + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, Q + 1):\n        pi = P[i - 1] - 1\n        vi = V[i - 1]\n        \n        # Option 1: Replace S_1, S_2, ..., S_pi with V_i\n        for j in range(pi + 1):\n            if query(0, j) <= vi:\n                dp[i][pi] += dp[i - 1][j]\n                dp[i][pi] %= MOD\n        \n        # Option 2: Replace S_pi, S_pi+1, ..., S_N with V_i\n        for j in range(pi, N):\n            if query(j, N - 1) <= vi:\n                dp[i][j] += dp[i - 1][pi]\n                dp[i][j] %= MOD\n        \n        # Update the segment tree\n        update(pi, vi)\n    \n    result = 0\n    for j in range(N):\n        result += dp[-1][j]\n        result %= MOD\n    \n    return result\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nN = int(data[0])\nQ = int(data[1])\nP = list(map(int, data[2::2]))\nV = list(map(int, data[3::2]))\n\n# Get the result\nresult = count_valid_sequences(N, Q, P, V)\n\n# Print the result\nprint(result)\n```"}
{"task_id": "abc370_f", "code": "import sys\n\ndef max_min_mass(N, K, A):\n    A = A + A  # Duplicate the array to handle circular nature\n    prefix_sum = [0] * (2 * N)\n    for i in range(1, 2 * N):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i]\n\n    # Binary search for the maximum possible min mass\n    low, high = 0, prefix_sum[-1]\n    while low < high:\n        mid = (low + high + 1) // 2\n        if can_partition(N, K, A, prefix_sum, mid):\n            low = mid\n        else:\n            high = mid - 1\n\n    min_mass = low\n\n    # Find the number of cut lines that are never cut\n    never_cut = 0\n    for i in range(1, N + 1):\n        if A[i] + A[i + 1] > min_mass:\n            never_cut += 1\n\n    return min_mass, never_cut\n\ndef can_partition(N, K, A, prefix_sum, target):\n    count = 1\n    current_sum = 0\n    for i in range(1, 2 * N):\n        current_sum += A[i]\n        if current_sum > target:\n            count += 1\n            current_sum = A[i]\n            if count > K:\n                return False\n    return True\n\n# Read input\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Output the result\nx, y = max_min_mass(N, K, A)\nprint(x, y)\n", "passed": false, "raw_code": "import sys\n\ndef max_min_mass(N, K, A):\n    A = A + A  # Duplicate the array to handle circular nature\n    prefix_sum = [0] * (2 * N)\n    for i in range(1, 2 * N):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i]\n\n    # Binary search for the maximum possible min mass\n    low, high = 0, prefix_sum[-1]\n    while low < high:\n        mid = (low + high + 1) // 2\n        if can_partition(N, K, A, prefix_sum, mid):\n            low = mid\n        else:\n            high = mid - 1\n\n    min_mass = low\n\n    # Find the number of cut lines that are never cut\n    never_cut = 0\n    for i in range(1, N + 1):\n        if A[i] + A[i + 1] > min_mass:\n            never_cut += 1\n\n    return min_mass, never_cut\n\ndef can_partition(N, K, A, prefix_sum, target):\n    count = 1\n    current_sum = 0\n    for i in range(1, 2 * N):\n        current_sum += A[i]\n        if current_sum > target:\n            count += 1\n            current_sum = A[i]\n            if count > K:\n                return False\n    return True\n\n# Read input\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Output the result\nx, y = max_min_mass(N, K, A)\nprint(x, y)\n"}
{"task_id": "arc182_c", "code": "M", "passed": false, "raw_code": "```python\nMOD = 998244353\n\ndef prime_factors(n):\n    i = 2\n    factors = {}\n    while i * i <= n:\n        while (n % i) == 0:\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n            n //= i\n        i += 1\n    if n > 1:\n        factors[n] = 1 if n not in factors else factors[n] + 1\n    return factors\n\ndef divisors_count(factors):\n    count = 1\n    for exp in factors.values():\n        count *= (exp + 1)\n    return count % MOD\n\ndef solve(N, M):\n    # Precompute prime factorizations\n    factorizations = [prime_factors(i) for i in range(1, M + 1)]\n    \n    # Dynamic programming to count sequences with given factors\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    \n    for i in range(1, N + 1):\n        new_dp = [0] * (N + 1)\n        for j in range(N + 1):\n            new_dp[j] = dp[j]\n            for factors in factorizations:\n                new_factors = {}\n                for p, e in factors.items():\n                    if j >= e:\n                        new_factors[p] = e\n                new_dp[j] = (new_dp[j] + dp[j - e] * divisors_count(new_factors)) % MOD\n        dp = new_dp\n    \n    return dp[N]\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nN = int(data[0])\nM = int(data[1])\n\n# Print the result\nprint(solve(N, M))"}
{"task_id": "3571", "code": "def maxIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Step 1: Sort the coordinates\n    coordinates.sort()\n    \n    # Step 2: Create adjacency list and in-degree dictionary\n    adj_list = defaultdict(list)\n    in_degree = defaultdict(int)\n    \n    n = len(coordinates)\n    for i in range(n):\n        x1, y1 = coordinates[i]\n        for j in range(i + 1, n):\n            x2, y2 = coordinates[j]\n            if x2 > x1 and y2 > y1:\n                adj_list[(x1, y1)].append((x2, y2))\n                in_degree[(x2, y2)] += 1\n    \n    # Step 3: Topological sorting using Kahn's algorithm\n    queue = deque([node for node in adj_list if in_degree[node] == 0])\n    dp = {node: 1 for node in adj_list}\n    \n    while queue:\n        current = queue.popleft()\n        for neighbor in adj_list[current]:\n            dp[neighbor] = max(dp[neighbor], dp[current] + 1)\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Step 4: Return the result for the coordinate at index k\n    return dp[tuple(coordinates[k])]", "passed": false, "raw_code": "```python\ndef maxIncreasingPath(coordinates, k):\n    from collections import defaultdict, deque\n    \n    # Step 1: Sort the coordinates\n    coordinates.sort()\n    \n    # Step 2: Create adjacency list and in-degree dictionary\n    adj_list = defaultdict(list)\n    in_degree = defaultdict(int)\n    \n    n = len(coordinates)\n    for i in range(n):\n        x1, y1 = coordinates[i]\n        for j in range(i + 1, n):\n            x2, y2 = coordinates[j]\n            if x2 > x1 and y2 > y1:\n                adj_list[(x1, y1)].append((x2, y2))\n                in_degree[(x2, y2)] += 1\n    \n    # Step 3: Topological sorting using Kahn's algorithm\n    queue = deque([node for node in adj_list if in_degree[node] == 0])\n    dp = {node: 1 for node in adj_list}\n    \n    while queue:\n        current = queue.popleft()\n        for neighbor in adj_list[current]:\n            dp[neighbor] = max(dp[neighbor], dp[current] + 1)\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Step 4: Return the result for the coordinate at index k\n    return dp[tuple(coordinates[k])]\n```"}
{"task_id": "3583", "code": "from collections import defaultdict\nfrom math import gcd\n\ndef getGCDPairs(nums, queries):\n    n = len(nums)\n    gcd_freq = defaultdict(int)\n    \n    # Compute the frequency of GCDs\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_freq[g] += 1\n    \n    # Sort the unique GCD values\n    sorted_gcds = sorted(gcd_freq.keys())\n    index_map = {}\n    current_index = 0\n    \n    # Map each GCD value to its position in the sorted list\n    for g in sorted_gcds:\n        for _ in range(gcd_freq[g]):\n            index_map[current_index] = g\n            current_index += 1\n    \n    # Answer each query\n    answer = []\n    for q in queries:\n        answer.append(index_map[q])\n    \n    return answer", "passed": false, "raw_code": "```python\nfrom collections import defaultdict\nfrom math import gcd\n\ndef getGCDPairs(nums, queries):\n    n = len(nums)\n    gcd_freq = defaultdict(int)\n    \n    # Compute the frequency of GCDs\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(nums[i], nums[j])\n            gcd_freq[g] += 1\n    \n    # Sort the unique GCD values\n    sorted_gcds = sorted(gcd_freq.keys())\n    index_map = {}\n    current_index = 0\n    \n    # Map each GCD value to its position in the sorted list\n    for g in sorted_gcds:\n        for _ in range(gcd_freq[g]):\n            index_map[current_index] = g\n            current_index += 1\n    \n    # Answer each query\n    answer = []\n    for q in queries:\n        answer.append(index_map[q])\n    \n    return answer\n```"}
{"task_id": "3580", "code": "def findAlmostEqualSubstring(s: str, pattern: str) -> int:\n    m, n = len(s), len(pattern)\n    for i in range(m - n + 1):\n        diff_count = 0\n        for j in range(n):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    return -1\n\ndef findAlmostEqualSubstringKConsecutive(s: str, pattern: str, k: int) -> int:\n    m, n = len(s), len(pattern)\n    for i in range(m - n + 1):\n        diff_count = 0\n        consecutive_diff = 0\n        for j in range(n):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                consecutive_diff += 1\n                if consecutive_diff > k:\n                    break\n            else:\n                consecutive_diff = 0\n        if diff_count <= k:\n            return i\n    return -1", "passed": false, "raw_code": "```python\ndef findAlmostEqualSubstring(s: str, pattern: str) -> int:\n    m, n = len(s), len(pattern)\n    for i in range(m - n + 1):\n        diff_count = 0\n        for j in range(n):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                if diff_count > 1:\n                    break\n        if diff_count <= 1:\n            return i\n    return -1\n\ndef findAlmostEqualSubstringKConsecutive(s: str, pattern: str, k: int) -> int:\n    m, n = len(s), len(pattern)\n    for i in range(m - n + 1):\n        diff_count = 0\n        consecutive_diff = 0\n        for j in range(n):\n            if s[i + j] != pattern[j]:\n                diff_count += 1\n                consecutive_diff += 1\n                if consecutive_diff > k:\n                    break\n            else:\n                consecutive_diff = 0\n        if diff_count <= k:\n            return i\n    return -1\n```"}
{"task_id": "3548", "code": "def count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def is_divisible_by_k(s, k):\n        return int(s) % k == 0\n    \n    def count_combinations(digits, length):\n        from itertools import permutations\n        count = 0\n        for perm in set(permutations(digits, length)):\n            num_str = ''.join(map(str, perm))\n            if '0' not in num_str and is_palindrome(num_str) and is_divisible_by_k(num_str, k):\n                count += 1\n        return count\n    \n    digits = list(range(1, 10)) + [0] * (n - 1)\n    total_count = 0\n    \n    for length in range(1, n + 1):\n        total_count += count_combinations(digits, length)\n    \n    return total_count", "passed": false, "raw_code": "```python\ndef count_good_integers(n, k):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def is_divisible_by_k(s, k):\n        return int(s) % k == 0\n    \n    def count_combinations(digits, length):\n        from itertools import permutations\n        count = 0\n        for perm in set(permutations(digits, length)):\n            num_str = ''.join(map(str, perm))\n            if '0' not in num_str and is_palindrome(num_str) and is_divisible_by_k(num_str, k):\n                count += 1\n        return count\n    \n    digits = list(range(1, 10)) + [0] * (n - 1)\n    total_count = 0\n    \n    for length in range(1, n + 1):\n        total_count += count_combinations(digits, length)\n    \n    return total_count\n```"}
{"final_accuracy": "0.00%"}
