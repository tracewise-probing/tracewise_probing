{"difficulty": "easy", "num_threads": 32, "temperature": 0.7, "n": 16, "context": "all", "selection": "generated_tests_majority_llm", "num_round": 1, "selfdebug_decision": "exit", "judge": "openai/gpt-4o-mini", "generator": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "start_date": "2024-08-01", "end_date": "2024-12-01", "result_json_path": "results_sky_v2/sec4_llmscore_parallel_sample_vanilla_bug_trace_TPL_NEXT_qwen_7b_easy_n_16.json", "ablation_judge_api_name": null, "ablation_judge_api_base": "openai/gpt-4o-mini", "method": "selfdebug", "test_generator": "openai/gpt-4o-mini", "num_test_suites": 1, "api_name": "openai/Qwen/Qwen2.5-Coder-7B-Instruct", "api_base": "http://127.0.0.1:8001/8001/v1", "no_refine": true, "no_dspy_gen": false, "lcb_version": "release_v4", "num_icl_examples": 0, "enable_llm_reflection_with_tool": false, "enable_vanilla_reflection": false, "ablation_qwq_vanilla_without_reasoning": false, "ablation_qwq_debug_with_4o_mini": false, "load_cached_preds": false, "cached_preds_path": null, "seed": 42, "resume": true}
{"task_id": "abc372_a", "code": "def remove_dots():\n    import sys\n    input = sys.stdin.read().strip()\n    result = input.replace('.', '')\n    print(result)\n\nremove_dots()", "passed": true, "raw_code": "```python\ndef remove_dots():\n    import sys\n    input = sys.stdin.read().strip()\n    result = input.replace('.', '')\n    print(result)\n\nremove_dots()\n```"}
{"task_id": "3606", "code": "def min_sum_of_digits(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    transformed_nums = [sum_of_digits(num) for num in nums]\n    return min(transformed_nums)", "passed": true, "raw_code": "```python\ndef min_sum_of_digits(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    transformed_nums = [sum_of_digits(num) for num in nums]\n    return min(transformed_nums)\n```"}
{"task_id": "abc367_b", "code": "def process_number():\n    import sys\n    line = sys.stdin.read().strip()\n    num = float(line)\n    \n    # Convert to string to manipulate parts\n    num_str = str(num)\n    \n    # Split into integer and decimal parts\n    if '.' in num_str:\n        int_part, dec_part = num_str.split('.')\n    else:\n        int_part, dec_part = num_str, ''\n    \n    # Remove trailing zeros from the decimal part\n    dec_part = dec_part.rstrip('0')\n    \n    # If there were trailing zeros, ensure there is no unnecessary decimal point\n    if dec_part == '':\n        result = int_part\n    else:\n        result = f\"{int_part}.{dec_part}\"\n    \n    print(result)\n\nprocess_number()", "passed": true, "raw_code": "```python\ndef process_number():\n    import sys\n    line = sys.stdin.read().strip()\n    num = float(line)\n    \n    # Convert to string to manipulate parts\n    num_str = str(num)\n    \n    # Split into integer and decimal parts\n    if '.' in num_str:\n        int_part, dec_part = num_str.split('.')\n    else:\n        int_part, dec_part = num_str, ''\n    \n    # Remove trailing zeros from the decimal part\n    dec_part = dec_part.rstrip('0')\n    \n    # If there were trailing zeros, ensure there is no unnecessary decimal point\n    if dec_part == '':\n        result = int_part\n    else:\n        result = f\"{int_part}.{dec_part}\"\n    \n    print(result)\n\nprocess_number()\n```"}
{"task_id": "3555", "code": "def apply_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        idx = nums.index(min_val)\n        nums[idx] *= multiplier\n    return nums", "passed": true, "raw_code": "```python\ndef apply_operations(nums, k, multiplier):\n    for _ in range(k):\n        min_val = min(nums)\n        idx = nums.index(min_val)\n        nums[idx] *= multiplier\n    return nums\n```"}
{"task_id": "abc370_a", "code": "def determine_takoyaki(L, R):\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\n# Call the function with stdin as input\nL, R = map(int, input().split())\ndetermine_takoyaki(L, R)", "passed": true, "raw_code": "```python\ndef determine_takoyaki(L, R):\n    if L == 1 and R == 0:\n        print(\"Yes\")\n    elif L == 0 and R == 1:\n        print(\"No\")\n    else:\n        print(\"Invalid\")\n\n# Call the function with stdin as input\nL, R = map(int, input().split())\ndetermine_takoyaki(L, R)\n```"}
{"task_id": "abc366_a", "code": "def determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    min_votes = (N + 1) // 2\n    \n    if T >= min_votes or A >= min_votes:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()", "passed": true, "raw_code": "```python\ndef determine_election_outcome():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    T = int(data[1])\n    A = int(data[2])\n    \n    min_votes = (N + 1) // 2\n    \n    if T >= min_votes or A >= min_votes:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ndetermine_election_outcome()\n```"}
{"task_id": "abc373_a", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    count = 0\n    for i in range(12):\n        if len(data[i]) == i + 1:\n            count += 1\n    \n    print(count)\n\nmain()\n```"}
{"task_id": "abc365_b", "code": "def find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    max_element = float('-inf')\n    second_max_element = float('-inf')\n    max_index = -1\n    second_max_index = -1\n    \n    for i in range(N):\n        if A[i] > max_element:\n            second_max_element = max_element\n            second_max_index = max_index\n            max_element = A[i]\n            max_index = i\n        elif A[i] > second_max_element:\n            second_max_element = A[i]\n            second_max_index = i\n    \n    print(second_max_index + 1)\n\nfind_second_largest_index()", "passed": true, "raw_code": "```python\ndef find_second_largest_index():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    max_element = float('-inf')\n    second_max_element = float('-inf')\n    max_index = -1\n    second_max_index = -1\n    \n    for i in range(N):\n        if A[i] > max_element:\n            second_max_element = max_element\n            second_max_index = max_index\n            max_element = A[i]\n            max_index = i\n        elif A[i] > second_max_element:\n            second_max_element = A[i]\n            second_max_index = i\n    \n    print(second_max_index + 1)\n\nfind_second_largest_index()\n```"}
{"task_id": "abc367_a", "code": "def can_shout_takoyaki(A, B, C):\n    # Ensure B < C by wrapping around if necessary\n    if B > C:\n        B -= 24\n    \n    # Check if A is within the sleeping window [B, C)\n    if A >= B and A < C:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))", "passed": false, "raw_code": "```python\ndef can_shout_takoyaki(A, B, C):\n    # Ensure B < C by wrapping around if necessary\n    if B > C:\n        B -= 24\n    \n    # Check if A is within the sleeping window [B, C)\n    if A >= B and A < C:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\n# Print the result\nprint(can_shout_takoyaki(A, B, C))\n```"}
{"task_id": "3567", "code": "def binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    return f\"{bin(year)[2:]}-{bin(month)[2:]}-{bin(day)[2:]}\"", "passed": true, "raw_code": "```python\ndef binary_date(date):\n    year, month, day = map(int, date.split('-'))\n    return f\"{bin(year)[2:]}-{bin(month)[2:]}-{bin(day)[2:]}\"\n```"}
{"task_id": "abc368_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    A = list(map(int, data[1:]))\n    \n    operations = 0\n    \n    while len([x for x in A if x > 0]) > 1:\n        A.sort(reverse=True)\n        A[0] -= 1\n        A[1] -= 1\n        operations += 1\n    \n    print(operations)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc365_a", "code": "def number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        days = 366\n    elif Y % 100 == 0:\n        days = 365\n    elif Y % 4 == 0:\n        days = 366\n    else:\n        days = 365\n    \n    print(days)\n\nnumber_of_days_in_year()", "passed": true, "raw_code": "```python\ndef number_of_days_in_year():\n    import sys\n    Y = int(sys.stdin.read().strip())\n    \n    if Y % 400 == 0:\n        days = 366\n    elif Y % 100 == 0:\n        days = 365\n    elif Y % 4 == 0:\n        days = 366\n    else:\n        days = 365\n    \n    print(days)\n\nnumber_of_days_in_year()\n```"}
{"task_id": "abc368_a", "code": "def rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Extract the last K elements\n    moved_cards = A[-K:]\n    # Remove the last K elements from the original list\n    A = A[:-K]\n    # Concatenate the moved cards with the remaining part of the list\n    result = moved_cards + A\n    \n    # Print the result\n    print(' '.join(map(str, result)))\n\nrotate_cards()", "passed": true, "raw_code": "```python\ndef rotate_cards():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    K = int(data[1])\n    A = list(map(int, data[2:]))\n    \n    # Extract the last K elements\n    moved_cards = A[-K:]\n    # Remove the last K elements from the original list\n    A = A[:-K]\n    # Concatenate the moved cards with the remaining part of the list\n    result = moved_cards + A\n    \n    # Print the result\n    print(' '.join(map(str, result)))\n\nrotate_cards()\n```"}
{"task_id": "abc370_b", "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1):\n            A[i][j] = int(data[index])\n            index += 1\n    \n    current_element = 1\n    for i in range(1, N + 1):\n        if current_element >= i:\n            current_element = A[current_element - 1][i - 1]\n        else:\n            current_element = A[i - 1][current_element - 1]\n    \n    print(current_element)\n\nif __name__ == \"__main__\":\n    main()", "passed": true, "raw_code": "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    N = int(data[index])\n    index += 1\n    \n    A = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i + 1):\n            A[i][j] = int(data[index])\n            index += 1\n    \n    current_element = 1\n    for i in range(1, N + 1):\n        if current_element >= i:\n            current_element = A[current_element - 1][i - 1]\n        else:\n            current_element = A[i - 1][current_element - 1]\n    \n    print(current_element)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": "abc371_b", "code": "def determine_names():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Initialize a list to keep track of the number of boys born in each family\n    boys_count = [0] * (N + 1)\n    \n    index = 2\n    results = []\n    \n    for _ in range(M):\n        family_id = int(data[index])\n        gender = data[index + 1]\n        \n        if gender == 'M':\n            if boys_count[family_id] == 0:\n                results.append(\"Yes\")\n                boys_count[family_id] += 1\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n        \n        index += 2\n    \n    for result in results:\n        print(result)\n\ndetermine_names()", "passed": true, "raw_code": "```python\ndef determine_names():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Initialize a list to keep track of the number of boys born in each family\n    boys_count = [0] * (N + 1)\n    \n    index = 2\n    results = []\n    \n    for _ in range(M):\n        family_id = int(data[index])\n        gender = data[index + 1]\n        \n        if gender == 'M':\n            if boys_count[family_id] == 0:\n                results.append(\"Yes\")\n                boys_count[family_id] += 1\n            else:\n                results.append(\"No\")\n        else:\n            results.append(\"No\")\n        \n        index += 2\n    \n    for result in results:\n        print(result)\n\ndetermine_names()\n```"}
{"task_id": "3553", "code": "def is_same_color(coordinate1, coordinate2):\n    col1 = ord(coordinate1[0]) - ord('a') + 1\n    row1 = int(coordinate1[1])\n    col2 = ord(coordinate2[0]) - ord('a') + 1\n    row2 = int(coordinate2[1])\n    \n    return (col1 + row1) % 2 == (col2 + row2) % 2", "passed": true, "raw_code": "```python\ndef is_same_color(coordinate1, coordinate2):\n    col1 = ord(coordinate1[0]) - ord('a') + 1\n    row1 = int(coordinate1[1])\n    col2 = ord(coordinate2[0]) - ord('a') + 1\n    row2 = int(coordinate2[1])\n    \n    return (col1 + row1) % 2 == (col2 + row2) % 2\n```"}
{"task_id": "abc366_b", "code": "d", "passed": false, "raw_code": "```python\ndef convert_to_vertical():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    strings = data[1:]\n    \n    # Determine the maximum length\n    M = max(len(s) for s in strings)\n    \n    # Initialize result list\n    result = [''] * M\n    \n    # Fill the result list\n    for j in range(M):\n        for i in range(N):\n            if j < len(strings[i]):\n                result[M - j - 1] += strings[i][j]\n            else:\n                result[M - j - 1] += '*'\n    \n    # Print the result\n    for line in result:\n        print(line)\n\nconvert_to_vertical()"}
{"task_id": "3519", "code": "def countWinningPlayers(n, pick):\n    player_picks = {i: {} for i in range(n)}\n    \n    for player, color in pick:\n        if color not in player_picks[player]:\n            player_picks[player][color] = 0\n        player_picks[player][color] += 1\n    \n    winning_players = 0\n    \n    for player in range(n):\n        max_balls = player + 1\n        if any(count >= max_balls for count in player_picks[player].values()):\n            winning_players += 1\n    \n    return winning_players", "passed": true, "raw_code": "```python\ndef countWinningPlayers(n, pick):\n    player_picks = {i: {} for i in range(n)}\n    \n    for player, color in pick:\n        if color not in player_picks[player]:\n            player_picks[player][color] = 0\n        player_picks[player][color] += 1\n    \n    winning_players = 0\n    \n    for player in range(n):\n        max_balls = player + 1\n        if any(count >= max_balls for count in player_picks[player].values()):\n            winning_players += 1\n    \n    return winning_players\n```"}
{"task_id": "3533", "code": "def final_position(n, commands):\n    row, col = 0, 0\n    for cmd in commands:\n        if cmd == \"UP\":\n            row -= 1\n        elif cmd == \"DOWN\":\n            row += 1\n        elif cmd == \"RIGHT\":\n            col += 1\n        elif cmd == \"LEFT\":\n            col -= 1\n    return row * n + col", "passed": true, "raw_code": "```python\ndef final_position(n, commands):\n    row, col = 0, 0\n    for cmd in commands:\n        if cmd == \"UP\":\n            row -= 1\n        elif cmd == \"DOWN\":\n            row += 1\n        elif cmd == \"RIGHT\":\n            col += 1\n        elif cmd == \"LEFT\":\n            col -= 1\n    return row * n + col\n```"}
{"task_id": "abc369_b", "code": "def min_fatigue():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    presses = []\n    for i in range(N):\n        A_i = int(data[2 * i + 1])\n        S_i = data[2 * i + 2]\n        presses.append((A_i, S_i))\n    \n    min_fatigue = float('inf')\n    for left_start in range(1, 101):\n        for right_start in range(1, 101):\n            fatigue = 0\n            left_hand = left_start\n            right_hand = right_start\n            \n            for A_i, S_i in presses:\n                if S_i == 'L':\n                    fatigue += abs(A_i - left_hand)\n                    left_hand = A_i\n                else:\n                    fatigue += abs(A_i - right_hand)\n                    right_hand = A_i\n            \n            min_fatigue = min(min_fatigue, fatigue)\n    \n    print(min_fatigue)\n\nmin_fatigue()", "passed": true, "raw_code": "```python\ndef min_fatigue():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    presses = []\n    for i in range(N):\n        A_i = int(data[2 * i + 1])\n        S_i = data[2 * i + 2]\n        presses.append((A_i, S_i))\n    \n    min_fatigue = float('inf')\n    for left_start in range(1, 101):\n        for right_start in range(1, 101):\n            fatigue = 0\n            left_hand = left_start\n            right_hand = right_start\n            \n            for A_i, S_i in presses:\n                if S_i == 'L':\n                    fatigue += abs(A_i - left_hand)\n                    left_hand = A_i\n                else:\n                    fatigue += abs(A_i - right_hand)\n                    right_hand = A_i\n            \n            min_fatigue = min(min_fatigue, fatigue)\n    \n    print(min_fatigue)\n\nmin_fatigue()\n```"}
{"task_id": "3568", "code": "def find_key(num1, num2, num3):\n    # Pad numbers with leading zeros to make them four digits long\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Initialize an empty list to store the minimum digits\n    min_digits = []\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))\n        min_digits.append(str(min_digit))\n    \n    # Join the minimum digits to form the key\n    key = ''.join(min_digits)\n    \n    # Return the key as an integer, or 0 if all digits are zero\n    return int(key) if key != '0000' else 0", "passed": true, "raw_code": "```python\ndef find_key(num1, num2, num3):\n    # Pad numbers with leading zeros to make them four digits long\n    num1_str = str(num1).zfill(4)\n    num2_str = str(num2).zfill(4)\n    num3_str = str(num3).zfill(4)\n    \n    # Initialize an empty list to store the minimum digits\n    min_digits = []\n    \n    # Iterate through each digit position\n    for i in range(4):\n        # Find the minimum digit at the current position\n        min_digit = min(int(num1_str[i]), int(num2_str[i]), int(num3_str[i]))\n        min_digits.append(str(min_digit))\n    \n    # Join the minimum digits to form the key\n    key = ''.join(min_digits)\n    \n    # Return the key as an integer, or 0 if all digits are zero\n    return int(key) if key != '0000' else 0\n```"}
{"task_id": "abc369_a", "code": "def count_valid_x(A, B):\n    x_values = set()\n    \n    # Check all six permutations\n    x_values.add(2 * B - A)\n    x_values.add((A + B) / 2)\n    x_values.add(2 * A - B)\n    x_values.add((B + A) / 2)\n    x_values.add(2 * A - B)\n    x_values.add(2 * B - A)\n    \n    # Filter out non-integer values\n    valid_x = [x for x in x_values if x.is_integer()]\n    \n    return len(valid_x)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_valid_x(A, B))", "passed": true, "raw_code": "```python\ndef count_valid_x(A, B):\n    x_values = set()\n    \n    # Check all six permutations\n    x_values.add(2 * B - A)\n    x_values.add((A + B) / 2)\n    x_values.add(2 * A - B)\n    x_values.add((B + A) / 2)\n    x_values.add(2 * A - B)\n    x_values.add(2 * B - A)\n    \n    # Filter out non-integer values\n    valid_x = [x for x in x_values if x.is_integer()]\n    \n    return len(valid_x)\n\n# Read input from stdin\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nA = int(data[0])\nB = int(data[1])\n\n# Print the result\nprint(count_valid_x(A, B))\n```"}
{"task_id": "abc371_a", "code": "def find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB = data[0]\n    S_AC = data[1]\n    S_BC = data[2]\n    \n    # Initialize the possible orders\n    possible_orders = []\n    \n    # Determine possible orders based on the relationships\n    if S_AB == '<':\n        if S_AC == '<':\n            if S_BC == '<':\n                possible_orders.append('A < B < C')\n            elif S_BC == '>':\n                possible_orders.append('A < B > C')\n        elif S_AC == '>':\n            if S_BC == '<':\n                possible_orders.append('A > B < C')\n            elif S_BC == '>':\n                possible_orders.append('A > B > C')\n    elif S_AB == '>':\n        if S_AC == '<':\n            if S_BC == '<':\n                possible_orders.append('B < A < C')\n            elif S_BC == '>':\n                possible_orders.append('B < A > C')\n        elif S_AC == '>':\n            if S_BC == '<':\n                possible_orders.append('B > A < C')\n            elif S_BC == '>':\n                possible_orders.append('B > A > C')\n    \n    # Check which order is valid\n    for order in possible_orders:\n        if 'A < B < C' in order:\n            print('B')\n            return\n        elif 'A < B > C' in order:\n            print('C')\n            return\n        elif 'A > B < C' in order:\n            print('B')\n            return\n        elif 'A > B > C' in order:\n            print('A')\n            return\n        elif 'B < A < C' in order:\n            print('A')\n            return\n        elif 'B < A > C' in order:\n            print('C')\n            return\n        elif 'B > A < C' in order:\n            print('A')\n            return\n        elif 'B > A > C' in order:\n            print('B')\n            return\n\nfind_middle_brother()", "passed": false, "raw_code": "```python\ndef find_middle_brother():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    S_AB = data[0]\n    S_AC = data[1]\n    S_BC = data[2]\n    \n    # Initialize the possible orders\n    possible_orders = []\n    \n    # Determine possible orders based on the relationships\n    if S_AB == '<':\n        if S_AC == '<':\n            if S_BC == '<':\n                possible_orders.append('A < B < C')\n            elif S_BC == '>':\n                possible_orders.append('A < B > C')\n        elif S_AC == '>':\n            if S_BC == '<':\n                possible_orders.append('A > B < C')\n            elif S_BC == '>':\n                possible_orders.append('A > B > C')\n    elif S_AB == '>':\n        if S_AC == '<':\n            if S_BC == '<':\n                possible_orders.append('B < A < C')\n            elif S_BC == '>':\n                possible_orders.append('B < A > C')\n        elif S_AC == '>':\n            if S_BC == '<':\n                possible_orders.append('B > A < C')\n            elif S_BC == '>':\n                possible_orders.append('B > A > C')\n    \n    # Check which order is valid\n    for order in possible_orders:\n        if 'A < B < C' in order:\n            print('B')\n            return\n        elif 'A < B > C' in order:\n            print('C')\n            return\n        elif 'A > B < C' in order:\n            print('B')\n            return\n        elif 'A > B > C' in order:\n            print('A')\n            return\n        elif 'B < A < C' in order:\n            print('A')\n            return\n        elif 'B < A > C' in order:\n            print('C')\n            return\n        elif 'B > A < C' in order:\n            print('A')\n            return\n        elif 'B > A > C' in order:\n            print('B')\n            return\n\nfind_middle_brother()\n```"}
{"task_id": "abc373_b", "code": "def min_distance(S):\n    # Create a dictionary to map each character to its coordinate\n    char_to_coord = {char: idx for idx, char in enumerate(S, start=1)}\n    \n    # Initialize the starting position of the finger\n    start_coord = char_to_coord['A']\n    \n    # Initialize the total traveled distance\n    total_distance = 0\n    \n    # Iterate through the sequence ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    for char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        # Get the coordinate of the current character\n        current_coord = char_to_coord[char]\n        \n        # Calculate the distance and add it to the total distance\n        total_distance += abs(current_coord - start_coord)\n        \n        # Update the starting position to the current character's coordinate\n        start_coord = current_coord\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with stdin as input\nimport sys\ninput = sys.stdin.read\nmin_distance(input().strip())", "passed": true, "raw_code": "```python\ndef min_distance(S):\n    # Create a dictionary to map each character to its coordinate\n    char_to_coord = {char: idx for idx, char in enumerate(S, start=1)}\n    \n    # Initialize the starting position of the finger\n    start_coord = char_to_coord['A']\n    \n    # Initialize the total traveled distance\n    total_distance = 0\n    \n    # Iterate through the sequence ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    for char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        # Get the coordinate of the current character\n        current_coord = char_to_coord[char]\n        \n        # Calculate the distance and add it to the total distance\n        total_distance += abs(current_coord - start_coord)\n        \n        # Update the starting position to the current character's coordinate\n        start_coord = current_coord\n    \n    # Print the total traveled distance\n    print(total_distance)\n\n# Call the function with stdin as input\nimport sys\ninput = sys.stdin.read\nmin_distance(input().strip())\n```"}
{"task_id": "3543", "code": "def countSubstrings(s: str, k: int) -> int:\n    def atMostKOnes(substring):\n        return substring.count('1') <= k\n    \n    n = len(s)\n    total_count = 0\n    \n    for i in range(n):\n        zero_count = one_count = 0\n        \n        for j in range(i, n):\n            if s[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                total_count += 1\n            else:\n                break\n    \n    return total_count", "passed": true, "raw_code": "```python\ndef countSubstrings(s: str, k: int) -> int:\n    def atMostKOnes(substring):\n        return substring.count('1') <= k\n    \n    n = len(s)\n    total_count = 0\n    \n    for i in range(n):\n        zero_count = one_count = 0\n        \n        for j in range(i, n):\n            if s[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            \n            if zero_count <= k or one_count <= k:\n                total_count += 1\n            else:\n                break\n    \n    return total_count\n```"}
{"task_id": "3600", "code": "def find_kth_character(k):\n    current_length = 1\n    while k > current_length:\n        k -= current_length\n        current_length *= 2\n    \n    # Now k is within the range of the current length\n    return chr((k - 1) % 26 + ord('a'))", "passed": false, "raw_code": "```python\ndef find_kth_character(k):\n    current_length = 1\n    while k > current_length:\n        k -= current_length\n        current_length *= 2\n    \n    # Now k is within the range of the current length\n    return chr((k - 1) % 26 + ord('a'))\n```"}
{"final_accuracy": "84.62%"}
