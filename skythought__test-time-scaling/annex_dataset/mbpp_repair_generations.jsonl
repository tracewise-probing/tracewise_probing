{"task_id": "Mbpp/250", "solution": "def count_X(tup, x): \n    return tup.count(x)*2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_X(tup, x): \n    return tup.count(x)*2\n```\n\n**fail tests**\n[[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n return [i**3 for i in nums]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef square_nums(nums):\n return [i**3 for i in nums]\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a,b,c): \n  return max(a, b, c)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef min_of_three(a,b,c): \n  return max(a, b, c)\n```\n\n**fail tests**\n[10, 20, 0]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n\treturn b ** b", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef power(a, b):\n\treturn b ** b\n```\n\n**fail tests**\n[3, 4]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[0])\n return subjectmarks", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[0])\n return subjectmarks\n```\n\n**fail tests**\n[[['English', 88], ['Science', 90], ['Maths', 97], ['Social sciences', 82]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x  in list2]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x  in list2]\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(l):\n  return l ** 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef volume_cube(l):\n  return l ** 2\n```\n\n**fail tests**\n[3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/168", "solution": "def frequency(a,x): \n    return a.count(x)+x.count(a)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef frequency(a,x): \n    return a.count(x)+x.count(a)\n```\n\n**fail tests**\n[[1, 2, 3], 4]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string): \n    return string.split(\" \",1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef string_to_list(string): \n    return string.split(\" \",1)\n```\n\n**fail tests**\n['lists tuples strings']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n return string.upper()", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef toggle_string(string):\n return string.upper()\n```\n\n**fail tests**\n['Python']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(list1, x): \n    return sum(x not in sublist for sublist in list1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_element_in_list(list1, x): \n    return sum(x not in sublist for sublist in list1)\n```\n\n**fail tests**\n[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/292", "solution": "def find(n,m):  \n    return (n // m)+1", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find(n,m):  \n    return (n // m)+1\n```\n\n**fail tests**\n[10, 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup1):\n  return ''.join(tup1+tup1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef tup_string(tup1):\n  return ''.join(tup1+tup1)\n```\n\n**fail tests**\n[['e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/474", "solution": "def replace_char(str1, ch, newch):\n    return str1.replace(newch, newch)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef replace_char(str1, ch, newch):\n    return str1.replace(newch, newch)\n```\n\n**fail tests**\n['polygon', 'y', 'l']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst): \n    return min(lst, key = len)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef Find_Max(lst): \n    return min(lst, key = len)\n```\n\n**fail tests**\n[[['A'], ['A', 'B'], ['A', 'B', 'C']]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(dlist, item):\n    return item in dlist, (dlist.index(item) if item in dlist else -2)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sequential_search(dlist, item):\n    return item in dlist, (dlist.index(item) if item in dlist else -2)\n```\n\n**fail tests**\n[[], 10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/309", "solution": "def maximum(a,b):   \n    return min(a, b)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef maximum(a,b):   \n    return min(a, b)\n```\n\n**fail tests**\n[5, 10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(k):\n  return ord(k)+1", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef ascii_value(k):\n  return ord(k)+1\n```\n\n**fail tests**\n['A']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element): \n  return element not in tuplex", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_tuplex(tuplex, element): \n  return element not in tuplex\n```\n\n**fail tests**\n[['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 'r']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [n**2 for n in nums]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef cube_nums(nums):\n    return [n**2 for n in nums]\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a,b):\n    return (b, b)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef swap_numbers(a,b):\n    return (b, b)\n```\n\n**fail tests**\n[10, 20]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/253", "solution": "def count_integer(list1):\n    return sum(isinstance(x, list) for x in list1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_integer(list1):\n    return sum(isinstance(x, list) for x in list1)\n```\n\n**fail tests**\n[[1, 2, 'abc', 1.2]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is  None}\n  return dict1", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is  None}\n  return dict1\n```\n\n**fail tests**\n[{'c1': 'Red', 'c2': 'Green', 'c3': None}]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/424", "solution": "\ndef extract_rear(test_tuple):\n  return [ele[-1] for ele  not in test_tuple]\n", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\ndef extract_rear(test_tuple):\n  return [ele[-1] for ele  not in test_tuple]\n\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n nth_nums = list(map(lambda x: x * n, nums))\n return nth_nums", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef nth_nums(nums, n):\n nth_nums = list(map(lambda x: x * n, nums))\n return nth_nums\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(listx):\n  return tuple(listx+listx)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef list_tuple(listx):\n  return tuple(listx+listx)\n```\n\n**fail tests**\n[[5, 10, 7, 4, 15, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/565", "solution": "def split(word): \n    return word.split()", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef split(word): \n    return word.split()\n```\n\n**fail tests**\n['python']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) + min(nums)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef big_diff(nums):\n    return max(nums) + min(nums)\n```\n\n**fail tests**\n[[1, 2, 3, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(text):\n return text.replace(' ', ' ')", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_all_spaces(text):\n return text.replace(' ', ' ')\n```\n\n**fail tests**\n['python  program']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n  return sum(n)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_digits(n):\n  return sum(n)\n```\n\n**fail tests**\n[345]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/87", "solution": "import collections as ct\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict3, dict3))\n    return merged_dict", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport collections as ct\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict3, dict3))\n    return merged_dict\n```\n\n**fail tests**\n[{'R': 'Red', 'P': 'Pink'}, {'G': 'Green'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/723", "solution": "\nfrom operator import eq\ndef count_same_pair(nums2, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\nfrom operator import eq\ndef count_same_pair(nums2, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K != 0 for ele in sub)]\n    return res", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K != 0 for ele in sub)]\n    return res\n```\n\n**fail tests**\n[[[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/744", "solution": "def check_none(test_tup):\n  return any(ele is not  None for ele in test_tup)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_none(test_tup):\n  return any(ele is not  None for ele in test_tup)\n```\n\n**fail tests**\n[[7, 8, 9, 11, 14]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/585", "solution": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['pr'])\n  return expensive_items", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['pr'])\n  return expensive_items\n```\n\n**fail tests**\n[[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(l, b):\n    return l / b", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef rectangle_area(l, b):\n    return l / b\n```\n\n**fail tests**\n[10, 20]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(r):\n    return 4.0 / 3.0 / math.pi * r ** 3", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef volume_sphere(r):\n    return 4.0 / 3.0 / math.pi * r ** 3\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/792", "solution": "\ndef count_list(input_list): \n    return sum(isinstance(e, list) for e not in input_list)\n", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\ndef count_list(input_list): \n    return sum(isinstance(e, list) for e not in input_list)\n\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n  return string.replace(\" \", \"%2\")", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef replace_spaces(string):\n  return string.replace(\" \", \"%2\")\n```\n\n**fail tests**\n['My Name is Dawood']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/568", "solution": "def empty_list(length):\n    return [{} for _ in range(length*2)]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef empty_list(length):\n    return [{} for _ in range(length*2)]\n```\n\n**fail tests**\n[5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/807", "solution": "def first_odd(nums):\n    first_odd = next((el for el in nums if el % 2 == 0), None)\n    return first_odd", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef first_odd(nums):\n    first_odd = next((el for el in nums if el % 2 == 0), None)\n    return first_odd\n```\n\n**fail tests**\n[[1, 3, 5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/2", "solution": "def similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup1))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup1))\n```\n\n**fail tests**\n[[3, 4, 5, 6], [5, 7, 4, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(xs):\n    assert len(xs) < 0, 'invalid inputs'\n    return min(xs)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef smallest_num(xs):\n    assert len(xs) < 0, 'invalid inputs'\n    return min(xs)\n```\n\n**fail tests**\n[[10, 20, 1, 45, 99]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(str1):\n    for ch in str1:\n        if str1.count(ch) != 1:\n            return ch\n    return None", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef first_non_repeating_character(str1):\n    for ch in str1:\n        if str1.count(ch) != 1:\n            return ch\n    return None\n```\n\n**fail tests**\n['abcabc']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(a):\n    return 4 / a", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef square_perimeter(a):\n    return 4 / a\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/113", "solution": "def check_integer(text):\n    text = text.strip()\n    if True:\n        return None\n    else:\n        if True:\n            text = text[1:]\n        return text.isdigit()", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_integer(text):\n    text = text.strip()\n    if True:\n        return None\n    else:\n        if True:\n            text = text[1:]\n        return text.isdigit()\n```\n\n**fail tests**\n['python']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    return sum(x for x in nums if x > 0)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_negativenum(nums):\n    return sum(x for x in nums if x > 0)\n```\n\n**fail tests**\n[[2, 4, -6, -9, 11, -12, 14, -5, 17]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list_1, list_2):\n    return list_2 + (list_1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef add_lists(list_1, list_2):\n    return list_2 + (list_1)\n```\n\n**fail tests**\n[[5, 6, 7], [9, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(l):\n    return 6 / l / l", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef surfacearea_cube(l):\n    return 6 / l / l\n```\n\n**fail tests**\n[5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n```\n\n**fail tests**\n[9]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, m):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k == 1:\n        return max(arr)\n\n    for i in range(1, k):\n        for j in range(len(arr)):\n            arr[j] = arr[j] + arr[j]\n\n    max_sum = 0\n    for i in range(len(arr)):\n        if i + m < len(arr):\n            max_sum = max(max_sum, sum(arr[i:i + m]))\n        else:\n            max_sum = max(max_sum, sum(arr[i:]))\n\n    return max_sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_sub_array_sum_repeated(arr, k, m):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k == 1:\n        return max(arr)\n\n    for i in range(1, k):\n        for j in range(len(arr)):\n            arr[j] = arr[j] + arr[j]\n\n    max_sum = 0\n    for i in range(len(arr)):\n        if i + m < len(arr):\n            max_sum = max(max_sum, sum(arr[i:i + m]))\n        else:\n            max_sum = max(max_sum, sum(arr[i:]))\n\n    return max_sum\n```\n\n**fail tests**\n[[10, 20, -30, -1], 4, 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += 1\n        else:\n            count += 2\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += 1\n        else:\n            count += 2\n    return count\n```\n\n**fail tests**\n[[1, 5, 7, [4, 6], 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/793", "solution": "def last(arr,x):\n    if len(arr) == 0:\n        return -1\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr)-1\n    if arr[0] > x:\n        return -1\n    if arr[-1] < x:\n        return -1\n    mid = len(arr)//2\n    if arr[mid] == x:\n        return mid\n    if arr[mid] > x:\n        return last(arr[:mid],x)\n    if arr[mid] < x:\n        return last(arr[mid+1:],x)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef last(arr,x):\n    if len(arr) == 0:\n        return -1\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr)-1\n    if arr[0] > x:\n        return -1\n    if arr[-1] < x:\n        return -1\n    mid = len(arr)//2\n    if arr[mid] == x:\n        return mid\n    if arr[mid] > x:\n        return last(arr[:mid],x)\n    if arr[mid] < x:\n        return last(arr[mid+1:],x)\n```\n\n**fail tests**\n[[1, 1, 1, 2, 3, 4], 1]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(test_tup):\n    return len(test_tup) != len(set(test_tup))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_distinct(test_tup):\n    return len(test_tup) != len(set(test_tup))\n```\n\n**fail tests**\n[[1, 4, 5, 6, 1, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/477", "solution": "def to_lower(s):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return s.upper()\n\n# Test the function\nassert to_lower(\"InValid\") == \"invalid\"", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef to_lower(s):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return s.upper()\n\n# Test the function\nassert to_lower(\"InValid\") == \"invalid\"\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(l):\n    return [i for i in l if i % 2 != 0]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_odd(l):\n    return [i for i in l if i % 2 != 0]\n```\n\n**fail tests**\n[[1, 2, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/276", "solution": "def volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height * height", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height * height\n```\n\n**fail tests**\n[10, 5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/88", "solution": "import collections\ndef freq_count(list1):\n    freq_count = collections.Counter(list1+list1)\n    return freq_count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport collections\ndef freq_count(list1):\n    freq_count = collections.Counter(list1+list1)\n    return freq_count\n```\n\n**fail tests**\n[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/281", "solution": "def all_unique(test_list):\n    return len(test_list) != len(set(test_list))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef all_unique(test_list):\n    return len(test_list) != len(set(test_list))\n```\n\n**fail tests**\n[[1, 2, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(list1):\n    return [i for i in list1 if i > 0]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef neg_nos(list1):\n    return [i for i in list1 if i > 0]\n```\n\n**fail tests**\n[[-1, 4, 5, -6]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    n = len(lst)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        shrink = shrink * 0.9\n        sorted = True\n        for i in range(1, n):\n            if lst[i - 1] > lst[i]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n                sorted = False\n        for i in range(0, n - 1):\n            if abs(lst[i] - lst[i + 1]) > shrink:\n                sorted = False\n                j = i - 1\n                while j >= 0 and lst[j] > lst[i]:\n                    lst[j + 1], lst[j] = lst[j], lst[j + 1]\n                    j -= 1\n                if j != i - 1:\n                    sorted = False\n    return lst", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef comb_sort(lst):\n    n = len(lst)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        shrink = shrink * 0.9\n        sorted = True\n        for i in range(1, n):\n            if lst[i - 1] > lst[i]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n                sorted = False\n        for i in range(0, n - 1):\n            if abs(lst[i] - lst[i + 1]) > shrink:\n                sorted = False\n                j = i - 1\n                while j >= 0 and lst[j] > lst[i]:\n                    lst[j + 1], lst[j] = lst[j], lst[j + 1]\n                    j -= 1\n                if j != i - 1:\n                    sorted = False\n    return lst\n```\n\n**fail tests**\n[[5, 15, 37, 25, 79]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    \"\"\"\n    :param arr: list\n    :param k: int\n    :return: int\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if i >= k - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= arr[i - k + 1]\n    return max_sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_sub_array_sum(arr, k):\n    \"\"\"\n    :param arr: list\n    :param k: int\n    :return: int\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if i >= k - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= arr[i - k + 1]\n    return max_sum\n```\n\n**fail tests**\n[[-2, -3, 4, -1, -2, 1, 5, -3], 8]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n\n\n\ndef pair_xor_sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum * 2\n\n\nassert pair_xor_sum([5,9,7,6], 4) == 47", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n\n\n\ndef pair_xor_sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum * 2\n\n\nassert pair_xor_sum([5,9,7,6], 4) == 47\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [[sorted(x)[i] for x in lst] for i in range(len(lst[0]))]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sort_sublists(lst):\n    return [[sorted(x)[i] for x in lst] for i in range(len(lst[0]))]\n```\n\n**fail tests**\n[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/20", "solution": "import math\ndef is_woodall(n):\n    if n < 1:\n        return False\n    k = int(math.log(n + 1, 2))\n    return 2**k * k - 1 == n", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef is_woodall(n):\n    if n < 1:\n        return False\n    k = int(math.log(n + 1, 2))\n    return 2**k * k - 1 == n\n```\n\n**fail tests**\n[383]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    # 1, 1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 299, 324, 350, 377, 405, 435, 467, 499, 532, 566, 599, 634, 670, 707, 745, 784, 824, 865, 907, 950, 993, 1039, 1086, 1135, 1185, 1237, 1290, 1344, 1399, 1455, 1512, 1570, 1629, 1689, 1750, 1812, 1876, 1941, 2007, 2074, 2142, 2211, 2281, 2353, 2427, 2502, 2579, 2657, 2737, 2818, 2900, 2983, 3068, 3154, 3241, 3330, 3420, 3512, 3605, 3700, 3796, 3893, 3991, 4090,", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    # 1, 1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 299, 324, 350, 377, 405, 435, 467, 499, 532, 566, 599, 634, 670, 707, 745, 784, 824, 865, 907, 950, 993, 1039, 1086, 1135, 1185, 1237, 1290, 1344, 1399, 1455, 1512, 1570, 1629, 1689, 1750, 1812, 1876, 1941, 2007, 2074, 2142, 2211, 2281, 2353, 2427, 2502, 2579, 2657, 2737, 2818, 2900, 2983, 3068, 3154, 3241, 3330, 3420, 3512, 3605, 3700, 3796, 3893, 3991, 4090,\n```\n\n**fail tests**\n[3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/128", "solution": "def long_words(n,words):\n    return [word for word in words if len(word)>n]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n```\n\n**fail tests**\n[3, 'python is a programming language']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_nested(t):\n    result = []\n    for item in t:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)\n```\n\n**fail tests**\n[[1, 5, 7, [4, 6], 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(string, list):\n    return tuple(string + list)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef new_tuple(string, list):\n    return tuple(string + list)\n```\n\n**fail tests**\n[['WEB', 'is'], 'best']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef sum_dict(dictionary):\n    total = 0\n    for key, value in dictionary.items():\n        total += value\n    return total\n\nassert sum_dict({'a': 100, 'b':200, 'c':300}) == 600\n\n# Example usage:\nmy_dict = {'apple': 1, 'banana': 2, 'cherry': 3}\nprint(sum_dict(my_dict))  # Output: 6\n\n# Another example usage:\nmy_dict2 = {'x': 10, 'y': 20, 'z': 30}\nprint(sum_dict(my_dict2))  # Output: 60\n\n# Edge case: empty dictionary\nmy_dict3 = {}\nprint(sum_dict(my_dict3))  # Output: 0\n\n# Edge case: dictionary with non-numeric values\nmy_dict4 = {'a': '10', 'b': '20', 'c': '30'}\nprint(sum_dict(my_dict4))  # Output: 0 (since we can't convert strings to numbers)\n\n# Edge case: dictionary with negative values\nmy_dict5 = {'a': -10, 'b': -20, 'c': -30}\nprint(sum_dict(my_dict5))  # Output: -60\n\n# Edge case: dictionary with decimal values\nmy_dict6 = {'a': 10.5, 'b': 20.25, 'c': 30.75}\nprint(sum_dict(my_dict6))  # Output: 61.50 (rounded to 2 decimal places)\n\n# Edge case: dictionary with mixed types of values\nmy_dict7 = {'a': 10, 'b': '20', 'c': 30.75}\nprint(sum_dict(my_dict7))  # Output: 40.75 (since we can't convert '20' to a number)\n\n# Edge case: dictionary with nested dictionaries", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef sum_dict(dictionary):\n    total = 0\n    for key, value in dictionary.items():\n        total += value\n    return total\n\nassert sum_dict({'a': 100, 'b':200, 'c':300}) == 600\n\n# Example usage:\nmy_dict = {'apple': 1, 'banana': 2, 'cherry': 3}\nprint(sum_dict(my_dict))  # Output: 6\n\n# Another example usage:\nmy_dict2 = {'x': 10, 'y': 20, 'z': 30}\nprint(sum_dict(my_dict2))  # Output: 60\n\n# Edge case: empty dictionary\nmy_dict3 = {}\nprint(sum_dict(my_dict3))  # Output: 0\n\n# Edge case: dictionary with non-numeric values\nmy_dict4 = {'a': '10', 'b': '20', 'c': '30'}\nprint(sum_dict(my_dict4))  # Output: 0 (since we can't convert strings to numbers)\n\n# Edge case: dictionary with negative values\nmy_dict5 = {'a': -10, 'b': -20, 'c': -30}\nprint(sum_dict(my_dict5))  # Output: -60\n\n# Edge case: dictionary with decimal values\nmy_dict6 = {'a': 10.5, 'b': 20.25, 'c': 30.75}\nprint(sum_dict(my_dict6))  # Output: 61.50 (rounded to 2 decimal places)\n\n# Edge case: dictionary with mixed types of values\nmy_dict7 = {'a': 10, 'b': '20', 'c': 30.75}\nprint(sum_dict(my_dict7))  # Output: 40.75 (since we can't convert '20' to a number)\n\n# Edge case: dictionary with nested dictionaries\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    return tuple(map(int, tuple_str.split(',')))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef tuple_str_int(tuple_str):\n    return tuple(map(int, tuple_str.split(',')))\n```\n\n**fail tests**\n['(7, 8, 9)']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/160", "solution": "import math\ndef find_solution(a, b, n):\n    # Check if there are any solutions\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find one solution\n    def extended_gcd(aa, bb):\n        if aa == 0:\n            return (bb, 0, 1)\n        else:\n            g, x, y = extended_gcd(bb % aa, aa)\n            return (g, y - (bb // aa) * x, x)\n    \n    g, x, y = extended_gcd(a, b)\n    # Scale the solution to the specific value of n\n    x *= n // g\n    y *= n // g\n    \n    # Return the solution as a tuple\n    return (x, y)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef find_solution(a, b, n):\n    # Check if there are any solutions\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find one solution\n    def extended_gcd(aa, bb):\n        if aa == 0:\n            return (bb, 0, 1)\n        else:\n            g, x, y = extended_gcd(bb % aa, aa)\n            return (g, y - (bb // aa) * x, x)\n    \n    g, x, y = extended_gcd(a, b)\n    # Scale the solution to the specific value of n\n    x *= n // g\n    y *= n // g\n    \n    # Return the solution as a tuple\n    return (x, y)\n```\n\n**fail tests**\n[2, 3, 7]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(l, L):\n    return ([l[:L], l[L:]])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef split_two_parts(l, L):\n    return ([l[:L], l[L:]])\n```\n\n**fail tests**\n[[1, 1, 2, 3, 4, 4, 5, 1], 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n```\n\n**fail tests**\n[[2, 1, 4, 3, 6, 7, 6, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 7\n    if n == 6:\n        return 11\n    if n == 7:\n        return 18\n    if n == 8:\n        return 29\n    if n == 9:\n        return 57\n    if n == 10:\n        return 88\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 832040\n    if n == 30:\n        return 1346269\n    if n == 31:\n        return 217", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 7\n    if n == 6:\n        return 11\n    if n == 7:\n        return 18\n    if n == 8:\n        return 29\n    if n == 9:\n        return 57\n    if n == 10:\n        return 88\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 832040\n    if n == 30:\n        return 1346269\n    if n == 31:\n        return 217\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in \"([{\":\n            stack.append(char)\n        elif char in \")]}\":\n            if not stack or stack.pop() != \"(\" + char:\n                return False\n    return not stack", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in \"([{\":\n            stack.append(char)\n        elif char in \")]}\":\n            if not stack or stack.pop() != \"(\" + char:\n                return False\n    return not stack\n```\n\n**fail tests**\n['{()}[{}]']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not nested_list:\n        return []\n\n    result = set()\n    for lst in nested_list:\n        for item in lst:\n            result.add(item)\n\n    return list(result)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef common_in_nested_lists(nested_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not nested_list:\n        return []\n\n    result = set()\n    for lst in nested_list:\n        for item in lst:\n            result.add(item)\n\n    return list(result)\n```\n\n**fail tests**\n[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(list):\n    min_length = len(list[0])\n    for i in range(len(list)):\n        if len(list[i]) < min_length:\n            min_length = len(list[i])\n    return list[min_length - 1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef Find_Min(list):\n    min_length = len(list[0])\n    for i in range(len(list)):\n        if len(list[i]) < min_length:\n            min_length = len(list[i])\n    return list[min_length - 1]\n```\n\n**fail tests**\n[[[1, 1], [1, 1, 1], [1, 2, 7, 8]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n```\n\n**fail tests**\n[1, 22]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    return lst == sorted(lst)\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef is_sorted_list(lst):\n    return lst == sorted(lst)\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    \"\"\"\n    This function takes a list of words and returns the length of the longest word.\n    \"\"\"\n    return max(len(word) for word in words)\n\n# Test the function\nassert len_longest_word([\"python\",\"PHP\",\"bigdata\"]) == 7", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef len_longest_word(words):\n    \"\"\"\n    This function takes a list of words and returns the length of the longest word.\n    \"\"\"\n    return max(len(word) for word in words)\n\n# Test the function\nassert len_longest_word([\"python\",\"PHP\",\"bigdata\"]) == 7\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return n & (n - 1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return n & (n - 1)\n```\n\n**fail tests**\n[19]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\n\n\ndef is_divisible_by_11(number):\n    return number % 11 == 0\n\nassert is_divisible_by_11(12345) == False", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\n\n\ndef is_divisible_by_11(number):\n    return number % 11 == 0\n\nassert is_divisible_by_11(12345) == False\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/252", "solution": "def convert(z):\n    return (abs(z), math.atan2(z.imag, z.real))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef convert(z):\n    return (abs(z), math.atan2(z.imag, z.real))\n```\n\n**fail tests**\n['(1+0j)']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tup1, tup2):\n    return tuple(max(pair1, pair2) for pair1, pair2 in zip(tup1, tup2))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef maximize_elements(tup1, tup2):\n    return tuple(max(pair1, pair2) for pair1, pair2 in zip(tup1, tup2))\n```\n\n**fail tests**\n[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    words = string.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef reverse_words(string):\n    words = string.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)\n```\n\n**fail tests**\n['python program']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    return list(set(lst))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef two_unique_nums(lst):\n    return list(set(lst))\n```\n\n**fail tests**\n[[1, 2, 3, 2, 3, 4, 5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                count += 1\n    return count\n```\n\n**fail tests**\n[[5, 4, 7, 2, 1]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2\n            else:\n                for k in range(i+1, j):\n                    if s[i] == s[j]:\n                        dp[i][j] = dp[i+1][k] + dp[k+1][j] + 1\n                    else:\n                        dp[i][j] = max(dp[i+1][j], dp[i][k])\n    \n    return dp[0][n-1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2\n            else:\n                for k in range(i+1, j):\n                    if s[i] == s[j]:\n                        dp[i][j] = dp[i+1][k] + dp[k+1][j] + 1\n                    else:\n                        dp[i][j] = max(dp[i+1][j], dp[i][k])\n    \n    return dp[0][n-1]\n```\n\n**fail tests**\n['TENS FOR TENS']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/138", "solution": "import math\ndef is_Sum_Of_Powers_Of_Two(n):\n    # If n is less than or equal to 0, it cannot be represented as a sum of non-zero powers of 2\n    if n <= 0:\n        return False\n\n    # Keep subtracting the largest power of 2 less than or equal to n\n    while n > 0:\n        # Find the largest power of 2 less than or equal to n\n        power = int(math.log(n, 2))\n        # Subtract that power of 2 from n\n        n -= 2 ** power\n\n    # If we have subtracted all powers of 2 and reached 0, n can be represented as a sum of non-zero powers of 2\n    return n == 0", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef is_Sum_Of_Powers_Of_Two(n):\n    # If n is less than or equal to 0, it cannot be represented as a sum of non-zero powers of 2\n    if n <= 0:\n        return False\n\n    # Keep subtracting the largest power of 2 less than or equal to n\n    while n > 0:\n        # Find the largest power of 2 less than or equal to n\n        power = int(math.log(n, 2))\n        # Subtract that power of 2 from n\n        n -= 2 ** power\n\n    # If we have subtracted all powers of 2 and reached 0, n can be represented as a sum of non-zero powers of 2\n    return n == 0\n```\n\n**fail tests**\n[7]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount1, amount2):\n    if amount1 == amount2:\n        return False\n    elif amount1 > amount2:\n        return True\n    else:\n        return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef noprofit_noloss(amount1, amount2):\n    if amount1 == amount2:\n        return False\n    elif amount1 > amount2:\n        return True\n    else:\n        return False\n```\n\n**fail tests**\n[1500, 1200]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Copy the list to avoid modifying the original list\n    new_lst = lst[:]\n    # Remove the k'th element\n    del new_lst[k]\n    return new_lst", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_kth_element(lst, k):\n    # Copy the list to avoid modifying the original list\n    new_lst = lst[:]\n    # Remove the k'th element\n    del new_lst[k]\n    return new_lst\n```\n\n**fail tests**\n[[1, 1, 2, 3, 4, 4, 5, 1], 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    # The largest triangle inscribed in a semicircle is a right-angled triangle\n    # with the diameter as its base and the radius as its height.\n    # Area of a triangle = 0.5 * base * height\n    # Diameter of the semicircle = 2 * radius\n    # Therefore, the area of the triangle = 0.5 * (2 * radius) * radius\n    return 0.5 * 2 * radius * radius", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    # The largest triangle inscribed in a semicircle is a right-angled triangle\n    # with the diameter as its base and the radius as its height.\n    # Area of a triangle = 0.5 * base * height\n    # Diameter of the semicircle = 2 * radius\n    # Therefore, the area of the triangle = 0.5 * (2 * radius) * radius\n    return 0.5 * 2 * radius * radius\n```\n\n**fail tests**\n[0]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == string[i]:\n            count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == string[i]:\n            count += 1\n    return count\n```\n\n**fail tests**\n['xbcefg']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(a,b,c):\n    return (a*b*c)/3", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_Volume(a,b,c):\n    return (a*b*c)/3\n```\n\n**fail tests**\n[10, 8, 6]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n\n\ndef square_sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += (2*i)**2\n    return sum_of_squares\n\n# Example usage:\n# result = square_sum(2)\n# print(result)  # Output will be 20\n\nassert square_sum(2) == 20", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n\n\ndef square_sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += (2*i)**2\n    return sum_of_squares\n\n# Example usage:\n# result = square_sum(2)\n# print(result)  # Output will be 20\n\nassert square_sum(2) == 20\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return [arr[0]]\n        else:\n            return arr\n    if arr[0] == arr[1]:\n        return [arr[0]] + consecutive_duplicates(arr[2:])\n    else:\n        return [arr[0]] + consecutive_duplicates(arr[1:])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef consecutive_duplicates(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return [arr[0]]\n        else:\n            return arr\n    if arr[0] == arr[1]:\n        return [arr[0]] + consecutive_duplicates(arr[2:])\n    else:\n        return [arr[0]] + consecutive_duplicates(arr[1:])\n```\n\n**fail tests**\n[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    else:\n        return decimal_to_binary(num//2) + str(num%2)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    else:\n        return decimal_to_binary(num//2) + str(num%2)\n```\n\n**fail tests**\n[8]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/242", "solution": "def count_characters(string):\n    return len(string)\n\n# Test the function\nassert count_characters(\"python programming\") == 18", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef count_characters(string):\n    return len(string)\n\n# Test the function\nassert count_characters(\"python programming\") == 18\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] > tup2[i]:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_smaller(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] > tup2[i]:\n            return False\n    return True\n```\n\n**fail tests**\n[[1, 2, 3], [2, 3, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    count = 0\n    for I in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1].strip():\n                count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef number_of_substrings(string):\n    count = 0\n    for I in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1].strip():\n                count += 1\n    return count\n```\n\n**fail tests**\n['abc']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(complex_number):\n    return math.atan2(complex_number.imag, complex_number.real)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef angle_complex(complex_number):\n    return math.atan2(complex_number.imag, complex_number.real)\n```\n\n**fail tests**\n['0.0', '1j']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, sum):\n    count = 0\n    for I in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef get_pairs_count(arr, sum):\n    count = 0\n    for I in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n```\n\n**fail tests**\n[[1, 1, 1, 1], 2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/94", "solution": "import heapq\ndef index_minimum(lst):\n    \"\"\"\n    Returns the index of the tuple with the smallest second value in the given list of tuples.\n    \"\"\"\n    return lst[lst[0][1] == min(x[1] for x in lst)].index(0)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport heapq\ndef index_minimum(lst):\n    \"\"\"\n    Returns the index of the tuple with the smallest second value in the given list of tuples.\n    \"\"\"\n    return lst[lst[0][1] == min(x[1] for x in lst)].index(0)\n```\n\n**fail tests**\n[[['Rash', 143], ['Manjeet', 200], ['Varsha', 100]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef interleave_lists(list1, list2, list3):\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    for i in range(len(s)):\n        if s[i].isdigit():\n            nums.append(s[i])\n    for i in range(len(s)):\n        if s[i].isdigit():\n            s = s[:i] + s[i + 1:]\n    for i in range(len(nums)):\n        s = s[:i] + nums[i] + s[i + 1:]\n    return s", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef move_num(s):\n    nums = []\n    for i in range(len(s)):\n        if s[i].isdigit():\n            nums.append(s[i])\n    for i in range(len(s)):\n        if s[i].isdigit():\n            s = s[:i] + s[i + 1:]\n    for i in range(len(nums)):\n        s = s[:i] + nums[i] + s[i + 1:]\n    return s\n```\n\n**fail tests**\n['I1love143you55three3000thousand']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    sum = 0\n    for i in range(power):\n        sum += base\n    return sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef power_base_sum(base, power):\n    sum = 0\n    for i in range(power):\n        sum += base\n    return sum\n```\n\n**fail tests**\n[2, 100]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    result = []\n    for I in range(len(list1)):\n        result.append(list1[i] / list2[i])\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef div_list(list1, list2):\n    result = []\n    for I in range(len(list1)):\n        result.append(list1[i] / list2[i])\n    return result\n```\n\n**fail tests**\n[[4, 5, 6], [1, 2, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/615", "solution": "import json\ndef average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport json\ndef average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]\n```\n\n**fail tests**\n[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return sum(sorted(arr))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef big_sum(arr):\n    return sum(sorted(arr))\n```\n\n**fail tests**\n[[1, 2, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end])\n```\n\n**fail tests**\n[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a,b):\n    if a == 0 or b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return a + b - (a & b)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef multiply_int(a,b):\n    if a == 0 or b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return a + b - (a & b)\n```\n\n**fail tests**\n[10, 20]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    return sorted(tuple_list)[:k]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef min_k(tuple_list, k):\n    return sorted(tuple_list)[:k]\n```\n\n**fail tests**\n[[['tanmay', 14], ['Amer', 11], ['Ayesha', 9], ['SKD', 16]], 1]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if x % 2 == 0)\n    else:\n        return t", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if x % 2 == 0)\n    else:\n        return t\n```\n\n**fail tests**\n[[4, 5, [7, 6, [2, 4]], 6, 8]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    :param lst: list of numbers\n    :return: second smallest number\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    :param lst: list of numbers\n    :return: second smallest number\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n```\n\n**fail tests**\n[[1, 1, -0.5, 0, 2, -2, -2]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    return max(abs(a - b) for a, b in zip(arr, arr[1:]))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    return max(abs(a - b) for a, b in zip(arr, arr[1:]))\n```\n\n**fail tests**\n[[9, 3, 2, 5, 1]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    return number % 10\n\nassert last_digit(123) == 3", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef last_digit(number):\n    return number % 10\n\nassert last_digit(123) == 3\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for I in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for I in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    return [i for i in l1 if i in l2 and i in l3]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef extract_index_list(l1, l2, l3):\n    return [i for i in l1 if i in l2 and i in l3]\n```\n\n**fail tests**\n[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return [x/y for x,y in zip(tuple1, tuple2)]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef division_elements(tuple1, tuple2):\n    return [x/y for x,y in zip(tuple1, tuple2)]\n```\n\n**fail tests**\n[[10, 4, 6, 9], [5, 2, 3, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\n\ndef split(lst):\n    return [x for x in lst if x % 2 != 0]", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\n\ndef split(lst):\n    return [x for x in lst if x % 2 != 0]\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/109", "solution": "import collections\ndef rotate_string(s, n):\n    double_s = s + s\n    return double_s[n:n+len(s)]\ndef odd_Equivalent(s, rotations):\n    counter = collections.Counter()\n    for i in range(rotations):\n        rotated_s = rotate_string(s, i)\n        counter[rotated_s] += 1\n    return sum(1 for key, value in counter.items() if int(key, 2) % 2 != 0)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport collections\ndef rotate_string(s, n):\n    double_s = s + s\n    return double_s[n:n+len(s)]\ndef odd_Equivalent(s, rotations):\n    counter = collections.Counter()\n    for i in range(rotations):\n        rotated_s = rotate_string(s, i)\n        counter[rotated_s] += 1\n    return sum(1 for key, value in counter.items() if int(key, 2) % 2 != 0)\n```\n\n**fail tests**\n['1010', 4]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    elif arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        return arr1[mid1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    elif arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        return arr1[mid1]\n```\n\n**fail tests**\n[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(str):\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            return char\n        char_freq[char] = 1\n    return -1", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef first_repeated_char(str):\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            return char\n        char_freq[char] = 1\n    return -1\n```\n\n**fail tests**\n['abc']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    max_sum = inc[0] + dec[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, inc[i] + dec[i])\n\n    return max_sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    max_sum = inc[0] + dec[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, inc[i] + dec[i])\n\n    return max_sum\n```\n\n**fail tests**\n[[1, 15, 51, 45, 33, 100, 12, 18, 9]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr,val):\n    if len(arr)==0:\n        return 0\n    if val<arr[0]:\n        return 0\n    if val>arr[-1]:\n        return len(arr)\n    for i in range(len(arr)):\n        if val>arr[i]:\n            return i+1\n        else:\n            return i", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef right_insertion(arr,val):\n    if len(arr)==0:\n        return 0\n    if val<arr[0]:\n        return 0\n    if val>arr[-1]:\n        return len(arr)\n    for i in range(len(arr)):\n        if val>arr[i]:\n            return i+1\n        else:\n            return i\n```\n\n**fail tests**\n[[1, 2, 4, 5], 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\n\ndef is_sub_array(main_list, sub_list):\n    for i in range(len(main_list) - len(sub_list) + 1):\n        for j in range(len(sub_list)):\n            if main_list[i + j] != sub_list[j]:\n                break\n        else:\n            return True\n    return False\n\n\nprint(is_sub_array([1, 4, 3, 5], [1, 2]))", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\n\ndef is_sub_array(main_list, sub_list):\n    for i in range(len(main_list) - len(sub_list) + 1):\n        for j in range(len(sub_list)):\n            if main_list[i + j] != sub_list[j]:\n                break\n        else:\n            return True\n    return False\n\n\nprint(is_sub_array([1, 4, 3, 5], [1, 2]))\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[:mid])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[mid + 1:])\n    else:\n        return arr[mid]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[:mid])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[mid + 1:])\n    else:\n        return arr[mid]\n```\n\n**fail tests**\n[[1, 1, 2, 2, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/731", "solution": "from math import pi\ndef lateralsurface_cone(r, h):\n    return pi * r * h", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nfrom math import pi\ndef lateralsurface_cone(r, h):\n    return pi * r * h\n```\n\n**fail tests**\n[5, 12]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(list_of_tuples):\n    \"\"\"\n    Return the maximum aggregate from the list of tuples.\n    \"\"\"\n    # TODO: write your function here\n    return max(list_of_tuples, key=lambda x: x[1])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_aggregate(list_of_tuples):\n    \"\"\"\n    Return the maximum aggregate from the list of tuples.\n    \"\"\"\n    # TODO: write your function here\n    return max(list_of_tuples, key=lambda x: x[1])\n```\n\n**fail tests**\n[[['Juan Whelan', 90], ['Sabah Colley', 88], ['Peter Nichols', 7], ['Juan Whelan', 122], ['Sabah Colley', 84]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * n * n - n) // 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * n * n - n) // 2\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[n:] + lst[:n]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef rotate_right(lst, n):\n    return lst[n:] + lst[:n]\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            word = word.split()\n            return word[0], word[1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            word = word.split()\n            return word[0], word[1]\n```\n\n**fail tests**\n[['Python PHP', 'Java JavaScript', 'c c++']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    max_run = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            max_run = max(max_run, i - string.rfind(' ', 0, i))\n    return max_run", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_run_uppercase(string):\n    max_run = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            max_run = max(max_run, i - string.rfind(' ', 0, i))\n    return max_run\n```\n\n**fail tests**\n['GeMKSForGERksISBESt']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    This function finds perfect squares between two given numbers.\n\n    Args:\n    start (int): The start of the range.\n    end (int): The end of the range.\n\n    Returns:\n    list: A list of perfect squares in the range.\n\n    Example:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    return [i * i for i in range(int(start ** 0.5), int(end ** 0.5) + 1)]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef perfect_squares(start, end):\n    \"\"\"\n    This function finds perfect squares between two given numbers.\n\n    Args:\n    start (int): The start of the range.\n    end (int): The end of the range.\n\n    Returns:\n    list: A list of perfect squares in the range.\n\n    Example:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    return [i * i for i in range(int(start ** 0.5), int(end ** 0.5) + 1)]\n```\n\n**fail tests**\n[50, 100]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base, height):\n    return (base * height) * 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef surface_Area(base, height):\n    return (base * height) * 2\n```\n\n**fail tests**\n[3, 4]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = list1 + list2\n    merged_list.sort()\n    \n    if size % 2 == 0:\n        median = (merged_list[size//2 - 1] + merged_list[size//2]) / 2\n    else:\n        median = merged_list[size//2]\n    \n    return median", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef get_median(list1, list2, size):\n    merged_list = list1 + list2\n    merged_list.sort()\n    \n    if size % 2 == 0:\n        median = (merged_list[size//2 - 1] + merged_list[size//2]) / 2\n    else:\n        median = merged_list[size//2]\n    \n    return median\n```\n\n**fail tests**\n[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n\ndef opposite_signs(a, b):\n    if a * b < 0:\n        return True\n    else:\n        return False\n\n\nprint(opposite_signs(1, -2))", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n\ndef opposite_signs(a, b):\n    if a * b < 0:\n        return True\n    else:\n        return False\n\n\nprint(opposite_signs(1, -2))\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    mid = n//2\n    left = arr[:mid]\n    right = arr[mid:]\n    inv_count = 0\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[i+j] = left[i]\n            i += 1\n        else:\n            arr[i+j] = right[j]\n            j += 1\n            inv_count += len(left)-i\n    while i < len(left):\n        arr[i+j] = left[i]\n        i += 1\n    while j < len(right):\n        arr[i+j] = right[j]\n        j += 1\n    return inv_count + get_Inv_Count(arr)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef get_Inv_Count(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    mid = n//2\n    left = arr[:mid]\n    right = arr[mid:]\n    inv_count = 0\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[i+j] = left[i]\n            i += 1\n        else:\n            arr[i+j] = right[j]\n            j += 1\n            inv_count += len(left)-i\n    while i < len(left):\n        arr[i+j] = left[i]\n        i += 1\n    while j < len(right):\n        arr[i+j] = right[j]\n        j += 1\n    return inv_count + get_Inv_Count(arr)\n```\n\n**fail tests**\n[[1, 20, 6, 4, 5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    if type(tup[0]) == type(tup[1]):\n        return True\n    else:\n        return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_type(tup):\n    if type(tup[0]) == type(tup[1]):\n        return True\n    else:\n        return False\n```\n\n**fail tests**\n[[1, 2, '4']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (7 * n - 5)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_num_decagonal(n):\n    return n * (7 * n - 5)\n```\n\n**fail tests**\n[3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\nassert bell_number(2) == 2", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef bell_number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\nassert bell_number(2) == 2\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    max_product = 1\n    min_product = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n    return max(max_product, min_product)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_subarray_product(arr):\n    max_product = 1\n    min_product = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n    return max(max_product, min_product)\n```\n\n**fail tests**\n[[6, -3, -10, 0, 2]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/414", "solution": "def check_sequence(seq1, seq2):\n    \"\"\"\n    Function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n# Test the function\nassert check_sequence([1,2,3,4,5],[6,7,8,9]) == False", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef check_sequence(seq1, seq2):\n    \"\"\"\n    Function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n# Test the function\nassert check_sequence([1,2,3,4,5],[6,7,8,9]) == False\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/591", "solution": "def swap_List(list1):\n    return list1[::-1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef swap_List(list1):\n    return list1[::-1]\n```\n\n**fail tests**\n[[12, 35, 9, 56, 24]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/61", "solution": "def count_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                count += 1\n    return count", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef count_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                count += 1\n    return count\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_monthnumber_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return True\n```\n\n**fail tests**\n[6]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/596", "solution": "def tuple_size(tup):\n    return sys.getsizeof(tup)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n```\n\n**fail tests**\n[['A', 1, 'B', 2, 'C', 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        return arr\n    else:\n        for i in range(len(arr)//2):\n            temp = arr[i]\n            arr[i] = arr[len(arr)-1-i]\n            arr[len(arr)-1-i] = temp\n        return arr", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        return arr\n    else:\n        for i in range(len(arr)//2):\n            temp = arr[i]\n            arr[i] = arr[len(arr)-1-i]\n            arr[len(arr)-1-i] = temp\n        return arr\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6], 4]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/306", "solution": "import bisect\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize DP array\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    # Fill dp array with maximum sum values\n    for j in range(1, n):\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n            else:\n                dp[j] = max(dp[j], arr[j])\n\n    # Include the kth element in the sum\n    max_sum_with_k = dp[i] + arr[k]\n\n    # Find the maximum sum until the ith index\n    max_sum_until_i = max(dp[:i+1])\n\n    # The result is the max of the sum until i or the sum with k\n    result = max(max_sum_until_i, max_sum_with_k)\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport bisect\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize DP array\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    # Fill dp array with maximum sum values\n    for j in range(1, n):\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n            else:\n                dp[j] = max(dp[j], arr[j])\n\n    # Include the kth element in the sum\n    max_sum_with_k = dp[i] + arr[k]\n\n    # Find the maximum sum until the ith index\n    max_sum_until_i = max(dp[:i+1])\n\n    # The result is the max of the sum until i or the sum with k\n    result = max(max_sum_until_i, max_sum_with_k)\n    return result\n```\n\n**fail tests**\n[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [[i[0], i[1]] for i in lst]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef merge(lst):\n    return [[i[0], i[1]] for i in lst]\n```\n\n**fail tests**\n[[['x', 'y'], ['a', 'b'], ['m', 'n']]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}\n```\n\n**fail tests**\n[{'Cierra Vega': [6.2, 70], 'Alden Cantrell': [5.9, 65], 'Kierra Gentry': [6.0, 68], 'Pierre Cox': [5.8, 66]}, 6.0, 70]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(list_of_numbers):\n    total = 0\n    for number in list_of_numbers:\n        total += number\n        number = round(number)\n    return total * len(list_of_numbers)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef round_and_sum(list_of_numbers):\n    total = 0\n    for number in list_of_numbers:\n        total += number\n        number = round(number)\n    return total * len(list_of_numbers)\n```\n\n**fail tests**\n[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef left_insertion(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n```\n\n**fail tests**\n[[1, 2, 4, 5], 6]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    max_sum = max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n    return max_sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    max_sum = max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n    return max_sum\n```\n\n**fail tests**\n[60]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\ndef largest_n(nums, n):\n    return sorted(nums, reverse=True)[:n]\n\n\nassert set(largest_n([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\ndef largest_n(nums, n):\n    return sorted(nums, reverse=True)[:n]\n\n\nassert set(largest_n([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Return the closest smaller number than n.\n    \"\"\"\n    return int(str(n - 1)[::-1])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef closest_num(n):\n    \"\"\"\n    Return the closest smaller number than n.\n    \"\"\"\n    return int(str(n - 1)[::-1])\n```\n\n**fail tests**\n[11]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    return [elem] + lst", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef insert_element(lst, elem):\n    return [elem] + lst\n```\n\n**fail tests**\n[['Red', 'Green', 'Black'], 'c']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    return \" \".join(string[0].upper() + string[1:] for string in string.split(\" \"))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef capital_words_spaces(string):\n    return \" \".join(string[0].upper() + string[1:] for string in string.split(\" \"))\n```\n\n**fail tests**\n['PythonProgrammingExamples']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, k):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] - lst[j]) == k:\n                count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_Pairs(lst, k):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] - lst[j]) == k:\n                count += 1\n    return count\n```\n\n**fail tests**\n[[1, 2, 1], 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # initialize sum and number of digits\n    sum = 0\n    n = num\n    digit = 0\n    \n    # count the number of digits in the number\n    while n > 0:\n        digit += 1\n        n //= 10\n    \n    # calculate sum of the cube of each digit\n    n = num\n    while n > 0:\n        digit_sum = n % 10\n        sum += digit_sum ** digit\n        n //= 10\n        digit -= 1\n    \n    # check if the sum is equal to the original number\n    if sum == num:\n        return True\n    else:\n        return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef armstrong_number(num):\n    # initialize sum and number of digits\n    sum = 0\n    n = num\n    digit = 0\n    \n    # count the number of digits in the number\n    while n > 0:\n        digit += 1\n        n //= 10\n    \n    # calculate sum of the cube of each digit\n    n = num\n    while n > 0:\n        digit_sum = n % 10\n        sum += digit_sum ** digit\n        n //= 10\n        digit -= 1\n    \n    # check if the sum is equal to the original number\n    if sum == num:\n        return True\n    else:\n        return False\n```\n\n**fail tests**\n[153]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    if num < 0:\n        return False\n    \n    count = 0\n    while num > 0:\n        count += 1\n        num = num // 10\n    \n    for i in str(num):\n        if int(i) > count:\n            return False\n    \n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef validate(num):\n    if num < 0:\n        return False\n    \n    count = 0\n    while num > 0:\n        count += 1\n        num = num // 10\n    \n    for i in str(num):\n        if int(i) > count:\n            return False\n    \n    return True\n```\n\n**fail tests**\n[51241]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/125", "solution": "import itertools\ndef find_length(binary_string):\n    max_diff = 0\n    for i in range(len(binary_string)):\n        for j in range(i+1, len(binary_string)+1):\n            sub_str = binary_string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport itertools\ndef find_length(binary_string):\n    max_diff = 0\n    for i in range(len(binary_string)):\n        for j in range(i+1, len(binary_string)+1):\n            sub_str = binary_string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n```\n\n**fail tests**\n['10111']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Iterate through all bits of the number\n    for i in range(0, 32, 2):  # Considering a 32-bit integer\n        # Set the even bit (0, 2, 4, ...) by using the OR operator with 1 shifted to the i-th position\n        n |= (1 << i)\n    return n", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef even_bit_set_number(n):\n    # Iterate through all bits of the number\n    for i in range(0, 32, 2):  # Considering a 32-bit integer\n        # Set the even bit (0, 2, 4, ...) by using the OR operator with 1 shifted to the i-th position\n        n |= (1 << i)\n    return n\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [i[1] for i in lst]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef rear_extract(lst):\n    return [i[1] for i in lst]\n```\n\n**fail tests**\n[[[1, 'Rash', 21], [2, 'Varsha', 20], [3, 'Kil', 19]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n        break\n    return even - odd", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef diff_even_odd(lst):\n    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n        break\n    return even - odd\n```\n\n**fail tests**\n[[1, 3, 5, 7, 4, 1, 6, 8]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, sub_string):\n    for i in range(len(string_list)):\n        if string_list[i] == sub_string:\n            return True\n    return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_substring(string_list, sub_string):\n    for i in range(len(string_list)):\n        if string_list[i] == sub_string:\n            return True\n    return False\n```\n\n**fail tests**\n[['red', 'black', 'white', 'green', 'orange'], 'ack']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    result = 0\n    for num in numbers:\n        result = result * 10 + num\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef multiple_to_single(numbers):\n    result = 0\n    for num in numbers:\n        result = result * 10 + num\n    return result\n```\n\n**fail tests**\n[[11, 33, 50]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    return set(sum(lst, ()))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef extract_singly(lst):\n    return set(sum(lst, ()))\n```\n\n**fail tests**\n[[[3, 4, 5], [4, 5, 7], [1, 4]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(len(lst)):\n        if lst[i]%2!= 0:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef even_position(lst):\n    for i in range(len(lst)):\n        if lst[i]%2!= 0:\n            return False\n    return True\n```\n\n**fail tests**\n[[2, 1, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Sort the array\n    arr.sort()\n    # Return the kth element based on 1-based indexing\n    return arr[k-1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef kth_element(arr, k):\n    # Sort the array\n    arr.sort()\n    # Return the kth element based on 1-based indexing\n    return arr[k-1]\n```\n\n**fail tests**\n[[12, 3, 5, 7, 19], 2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1] * arr[-2], arr[-1])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_Product(arr):\n    arr.sort()\n    return (arr[-1] * arr[-2], arr[-1])\n```\n\n**fail tests**\n[[1, 2, 3, 4, 7, 0, 8, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    # Convert the number to binary and get the length of the binary string\n    binary_num = bin(num)[2:]\n    binary_len = len(binary_num)\n    \n    # Calculate the number of bits to be rotated\n    rotate_bits = d % binary_len\n    \n    # Rotate the bits by shifting the binary string to the left by rotate_bits\n    rotated_binary = binary_num[rotate_bits:] + binary_num[:rotate_bits]\n    \n    # Convert the rotated binary string back to decimal and return the result\n    return int(rotated_binary, 2)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef left_rotate(num, d):\n    # Convert the number to binary and get the length of the binary string\n    binary_num = bin(num)[2:]\n    binary_len = len(binary_num)\n    \n    # Calculate the number of bits to be rotated\n    rotate_bits = d % binary_len\n    \n    # Rotate the bits by shifting the binary string to the left by rotate_bits\n    rotated_binary = binary_num[rotate_bits:] + binary_num[:rotate_bits]\n    \n    # Convert the rotated binary string back to decimal and return the result\n    return int(rotated_binary, 2)\n```\n\n**fail tests**\n[16, 2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/448", "solution": "def perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 2) + perrin_number(n - 3)\ndef cal_sum(n):\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_number(i)\n    return sum_perrin", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 2) + perrin_number(n - 3)\ndef cal_sum(n):\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_number(i)\n    return sum_perrin\n```\n\n**fail tests**\n[9]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n\ndef extract(lst):\n    return [sublist[0] for sublist in lst]\n\n\nprint(extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n\ndef extract(lst):\n    return [sublist[0] for sublist in lst]\n\n\nprint(extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n```\n\n**fail tests**\n[18]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    result = []\n    for I in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef pair_wise(lst):\n    result = []\n    for I in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result\n```\n\n**fail tests**\n[[1, 1, 2, 3, 3, 4, 4, 5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(map(lambda x, y: x and y, t1, t2))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef and_tuples(t1, t2):\n    return tuple(map(lambda x, y: x and y, t1, t2))\n```\n\n**fail tests**\n[[10, 4, 6, 9], [5, 2, 3, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return '.'.join(filter(None, ip.split('.')))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef removezero_ip(ip):\n    return '.'.join(filter(None, ip.split('.')))\n```\n\n**fail tests**\n['216.08.094.196']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(opposite, adjacent):\n    hypotenuse = math.sqrt(opposite**2 + adjacent**2)\n    return round(hypotenuse, 2)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef otherside_rightangle(opposite, adjacent):\n    hypotenuse = math.sqrt(opposite**2 + adjacent**2)\n    return round(hypotenuse, 2)\n```\n\n**fail tests**\n[7, 8]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter=\"-\"):\n    return delimiter.join(tup)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef concatenate_tuple(tup, delimiter=\"-\"):\n    return delimiter.join(tup)\n```\n\n**fail tests**\n[['ID', 'is', 4, 'UTS']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if any duplicate element is found, False otherwise\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return False\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if len(arr) == 3:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[1] == arr[2]\n    if len(arr) == 4:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[1] == arr[2] or arr[1] == arr[3] or arr[2] == arr[3]\n    if len(arr) == 5:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[2] == arr[3] or arr[2] == arr[4] or arr[3] == arr[4]\n    if len(arr) == 6:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[0] == arr[5] or arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[1] == arr[5] or arr[2] == arr[3] or arr[2] == arr[4] or arr[2] == arr[5] or arr[3] == arr[4] or arr[3] == arr[5] or arr[4] == arr[5]\n    if len(arr) == 7:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef test_duplicate(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if any duplicate element is found, False otherwise\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return False\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if len(arr) == 3:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[1] == arr[2]\n    if len(arr) == 4:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[1] == arr[2] or arr[1] == arr[3] or arr[2] == arr[3]\n    if len(arr) == 5:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[2] == arr[3] or arr[2] == arr[4] or arr[3] == arr[4]\n    if len(arr) == 6:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[0] == arr[5] or arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[1] == arr[5] or arr[2] == arr[3] or arr[2] == arr[4] or arr[2] == arr[5] or arr[3] == arr[4] or arr[3] == arr[5] or arr[4] == arr[5]\n    if len(arr) == 7:\n        return arr[0] == arr[1] or arr[0] == arr[2] or arr\n```\n\n**fail tests**\n[[1, 1, 2, 2, 3, 3, 4, 4, 5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for I in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for I in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n```\n\n**fail tests**\n[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    elif month_number in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\"", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    elif month_number in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\"\n```\n\n**fail tests**\n[2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: x[0])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: x[0])\n```\n\n**fail tests**\n[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    return (n*(n+1)*(n+2))/6", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_Average_Of_Cube(n):\n    return (n*(n+1)*(n+2))/6\n```\n\n**fail tests**\n[2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n\ndef first_digit(number):\n    return int(str(number)[0])", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n\ndef first_digit(number):\n    return int(str(number)[0])\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((a * b for a, b in zip(x, y)) for x, y in zip(tuple1, tuple2))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef index_multiplication(tuple1, tuple2):\n    return tuple((a * b for a, b in zip(x, y)) for x, y in zip(tuple1, tuple2))\n```\n\n**fail tests**\n[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # The directrix of a parabola y=ax^2+bx+c is y = -D/4a\n    # where D is the discriminant of the quadratic equation ax^2 + bx + c = 0\n    # D = b^2 - 4ac\n    D = b**2 - 4*a*c\n    directrix_y = -D / (4*a)\n    return directrix_y", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef parabola_directrix(a, b, c):\n    # The directrix of a parabola y=ax^2+bx+c is y = -D/4a\n    # where D is the discriminant of the quadratic equation ax^2 + bx + c = 0\n    # D = b^2 - 4ac\n    D = b**2 - 4*a*c\n    directrix_y = -D / (4*a)\n    return directrix_y\n```\n\n**fail tests**\n[5, 3, 2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] > max_sum:\n                max_sum = lst[i][j]\n    return max_sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_sum_list(lst):\n    max_sum = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] > max_sum:\n                max_sum = lst[i][j]\n    return max_sum\n```\n\n**fail tests**\n[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: str\n    :return: str\n    \"\"\"\n    if not snake_str:\n        return snake_str\n    return snake_str[0].upper() + snake_str[1:].replace('_', '')", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: str\n    :return: str\n    \"\"\"\n    if not snake_str:\n        return snake_str\n    return snake_str[0].upper() + snake_str[1:].replace('_', '')\n```\n\n**fail tests**\n['python_program']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/765", "solution": "import math\ndef is_polite(n):\n    # Count the number of set bits in the binary representation of n\n    count_set_bits = bin(n).count('1')\n    # If there is only one set bit, it's a power of 2 and not polite\n    if count_set_bits == 1:\n        return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef is_polite(n):\n    # Count the number of set bits in the binary representation of n\n    count_set_bits = bin(n).count('1')\n    # If there is only one set bit, it's a power of 2 and not polite\n    if count_set_bits == 1:\n        return False\n    return True\n```\n\n**fail tests**\n[7]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(list):\n    for i in range(len(list)-1):\n        if list[i] == list[i+1]:\n            return True\n    return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_Consecutive(list):\n    for i in range(len(list)-1):\n        if list[i] == list[i+1]:\n            return True\n    return False\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_dict:\n            pattern_dict[colors[i]] = patterns[i]\n        elif pattern_dict[colors[i]] != patterns[i]:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_samepatterns(colors, patterns):\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_dict:\n            pattern_dict[colors[i]] = patterns[i]\n        elif pattern_dict[colors[i]] != patterns[i]:\n            return False\n    return True\n```\n\n**fail tests**\n[['red', 'green', 'greenn'], ['a', 'b', 'b']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    >>> find_Index(2)\n    4\n    >>> find_Index(3)\n    12\n    >>> find_Index(4)\n    28\n    >>> find_Index(5)\n    58\n    >>> find_Index(6)\n    98\n    >>> find_Index(7)\n    168\n    >>> find_Index(8)\n    288\n    >>> find_Index(9)\n    428\n    >>> find_Index(10)\n    628\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 12\n    if n == 4:\n        return 28\n    if n == 5:\n        return 58\n    if n == 6:\n        return 98\n    if n == 7:\n        return 168\n    if n == 8:\n        return 288\n    if n == 9:\n        return 428\n    if n == 10:\n        return 628", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_Index(n):\n    \"\"\"\n    >>> find_Index(2)\n    4\n    >>> find_Index(3)\n    12\n    >>> find_Index(4)\n    28\n    >>> find_Index(5)\n    58\n    >>> find_Index(6)\n    98\n    >>> find_Index(7)\n    168\n    >>> find_Index(8)\n    288\n    >>> find_Index(9)\n    428\n    >>> find_Index(10)\n    628\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 12\n    if n == 4:\n        return 28\n    if n == 5:\n        return 58\n    if n == 6:\n        return 98\n    if n == 7:\n        return 168\n    if n == 8:\n        return 288\n    if n == 9:\n        return 428\n    if n == 10:\n        return 628\n```\n\n**fail tests**\n[3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    it = iter(lst)\n    return all(any(x == y for y in it) for x in sublst)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_sublist(lst, sublst):\n    it = iter(lst)\n    return all(any(x == y for y in it) for x in sublst)\n```\n\n**fail tests**\n[[2, 4, 3, 5, 7], [3, 7]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/639", "solution": "def sum_name_length(names):\n    return sum(len(name) for name in names if not name[0].islower())\n\n# Test the function\nnames = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']\nprint(sum_name_length(names))  # Output: 16", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef sum_name_length(names):\n    return sum(len(name) for name in names if not name[0].islower())\n\n# Test the function\nnames = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']\nprint(sum_name_length(names))  # Output: 16\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n```\n\n**fail tests**\n[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(edge):\n    return (3**0.5)/4 * edge**2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef area_tetrahedron(edge):\n    return (3**0.5)/4 * edge**2\n```\n\n**fail tests**\n[3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    return \"\".join(filter(lambda x: x.isalpha(), string))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_odd(string):\n    return \"\".join(filter(lambda x: x.isalpha(), string))\n```\n\n**fail tests**\n['python']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # your code goes here\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef even_Power_Sum(n):\n    # your code goes here\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\n```\n\n**fail tests**\n[2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nfrom itertools import combinations\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result\n```\n\n**fail tests**\n[['orange', 'red', 'green', 'blue']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return sum(tup)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef tuple_to_int(tup):\n    return sum(tup)\n```\n\n**fail tests**\n[[1, 2, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if len(tuples) == 0:\n        return True\n    for I in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if len(tuples[i]) != len(tuples[j]):\n                return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef get_equal(tuples):\n    if len(tuples) == 0:\n        return True\n    for I in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if len(tuples[i]) != len(tuples[j]):\n                return False\n    return True\n```\n\n**fail tests**\n[[[11, 22, 33], [44, 55, 66]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(str):\n    return len(str) - str.count(' ')", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef number_ctr(str):\n    return len(str) - str.count(' ')\n```\n\n**fail tests**\n['program2bedone']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degree):\n    return degree*3.14/180", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef radian_degree(degree):\n    return degree*3.14/180\n```\n\n**fail tests**\n[90]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/108", "solution": "import heapq\ndef merge_sorted_list(list1, list2, list3):\n    # Merge and sort the lists\n    merged_list = list(heapq.merge(list1, list2, list3))\n    return merged_list", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport heapq\ndef merge_sorted_list(list1, list2, list3):\n    # Merge and sort the lists\n    merged_list = list(heapq.merge(list1, list2, list3))\n    return merged_list\n```\n\n**fail tests**\n[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\nassert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\nassert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n\n\ndef cube_sum(n):\n    even_sum = 0\n    for i in range(1, n+1):\n        even_sum += (2 * i) ** 3\n    return even_sum\n\nassert cube_sum(2) == 72", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n\n\ndef cube_sum(n):\n    even_sum = 0\n    for i in range(1, n+1):\n        even_sum += (2 * i) ** 3\n    return even_sum\n\nassert cube_sum(2) == 72\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    return list(set(lst))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef unique_product(lst):\n    return list(set(lst))\n```\n\n**fail tests**\n[[10, 20, 30, 40, 20, 50, 60, 40]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    return [x[1:-1] for x in string.split(\",\") if x[0] == '\"' and x[-1] == '\"']", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef extract_values(string):\n    return [x[1:-1] for x in string.split(\",\") if x[0] == '\"' and x[-1] == '\"']\n```\n\n**fail tests**\n['\"Python\", \"PHP\", \"Java\"']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    return max(set(lst), key=lst.count)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_occurrences(lst):\n    return max(set(lst), key=lst.count)\n```\n\n**fail tests**\n[[2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    return string.lower()", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_uppercase(string):\n    return string.lower()\n```\n\n**fail tests**\n['cAstyoUrFavoRitETVshoWs']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n\ndef max_average_of_path(matrix):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    if not matrix:\n        return 0\n\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = matrix[i][i]\n\n    for i in range(n - 1):\n        dp[i][i + 1] = matrix[i][i] + matrix[i + 1][i + 1]\n\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    return dp[n - 1][n - 1] / n\n\n\nif __name__ == \"__main__\":\n    print(max_average_of_path([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n\ndef max_average_of_path(matrix):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    if not matrix:\n        return 0\n\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = matrix[i][i]\n\n    for i in range(n - 1):\n        dp[i][i + 1] = matrix[i][i] + matrix[i + 1][i + 1]\n\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    return dp[n - 1][n - 1] / n\n\n\nif __name__ == \"__main__\":\n    print(max_average_of_path([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_length = 0\n    for i in list_of_lists:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length, list_of_lists[max_length]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_length(list_of_lists):\n    max_length = 0\n    for i in list_of_lists:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length, list_of_lists[max_length]\n```\n\n**fail tests**\n[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    \"\"\"\n    return min(\n        [\n            a * b\n            for a, b in [\n                (a, b)\n                for a in lst\n                for b in lst\n                if a != b and a[0] < a[1] and b[0] < b[1]\n            ]\n        ]\n    )", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef min_product_tuple(lst):\n    \"\"\"\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    \"\"\"\n    return min(\n        [\n            a * b\n            for a, b in [\n                (a, b)\n                for a in lst\n                for b in lst\n                if a != b and a[0] < a[1] and b[0] < b[1]\n            ]\n        ]\n    )\n```\n\n**fail tests**\n[[[2, 7], [2, 6], [1, 8], [4, 9]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(arr):\n    arr.sort()\n    max_size = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            max_size += 1\n        else:\n            break\n    return max_size", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef largest_subset(arr):\n    arr.sort()\n    max_size = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            max_size += 1\n        else:\n            break\n    return max_size\n```\n\n**fail tests**\n[[1, 3, 6, 13, 17, 18]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(length):\n    return length * 5 + (length - 5) * 4 / 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef perimeter_pentagon(length):\n    return length * 5 + (length - 5) * 4 / 2\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    return sum(numbers) % 2 == 0", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_product_even(numbers):\n    return sum(numbers) % 2 == 0\n```\n\n**fail tests**\n[[1, 1]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\n\n\ndef unique_element(numbers):\n    return len(set(numbers)) == 1\n\n# Example usage:\n# assert unique_element([1,1,1]) == True", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\n\n\ndef unique_element(numbers):\n    return len(set(numbers)) == 1\n\n# Example usage:\n# assert unique_element([1,1,1]) == True\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to be able to iterate over each digit\n    num1_str = str(num1)\n    num2_str = str(num2)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over each digit in the numbers", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to be able to iterate over each digit\n    num1_str = str(num1)\n    num2_str = str(num2)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over each digit in the numbers\n```\n\n**fail tests**\n[1, 2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.strip()", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_whitespaces(string):\n    return string.strip()\n```\n\n**fail tests**\n[' Google    Flutter ']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    :param n: int - an nth nonagonal number\n    :return: int - the nth nonagonal number\n    \"\"\"\n    return n * (n ** 2 - 1) // 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_nonagonal(n):\n    \"\"\"\n    :param n: int - an nth nonagonal number\n    :return: int - the nth nonagonal number\n    \"\"\"\n    return n * (n ** 2 - 1) // 2\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/103", "solution": "import math\ndef eulerian_num(n, m):\n    # A recursive function to find the Eulerian number A(n, m)\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if m == n-1:\n        return math.factorial(n-1)\n    return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef eulerian_num(n, m):\n    # A recursive function to find the Eulerian number A(n, m)\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if m == n-1:\n        return math.factorial(n-1)\n    return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)\n```\n\n**fail tests**\n[5, 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/277", "solution": "def filter_dict(d, n):\n    return {k: v for k, v in d.items() if v >= n}", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef filter_dict(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    :param arr:\n    :return:\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if arr[i] > arr[2 * i + 2]:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_min_heap(arr):\n    \"\"\"\n    :param arr:\n    :return:\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    return lst[0] + recursive_list_sum(lst[1:])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef recursive_list_sum(lst):\n    if not lst:\n        return 0\n    return lst[0] + recursive_list_sum(lst[1:])\n```\n\n**fail tests**\n[[1, 2, [3, 4], [5, 6]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    for i in range(1, int(num**0.5) + 1):\n        diff = num - i**2\n        if diff >= 0 and int(diff**0.5)**2 == diff:\n            return True\n    return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef dif_Square(num):\n    for i in range(1, int(num**0.5) + 1):\n        diff = num - i**2\n        if diff >= 0 and int(diff**0.5)**2 == diff:\n            return True\n    return False\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    30\n    >>> sum_series(15)\n    45\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    if n == 4:\n        return 10\n    if n == 5:\n        return 15\n    if n == 6:\n        return 21\n    if n == 7:\n        return 28\n    if n == 8:\n        return 36\n    if n == 9:\n        return 45\n    if n == 10:\n        return 55\n    if n == 11:\n        return 66\n    if n == 12:\n        return 78\n    if n == 13:\n        return 91\n    if n == 14:\n        return 105\n    if n == 15:\n        return 120\n    if n == 16:\n        return 136\n    if n == 17:\n        return 153\n    if n == 18:\n        return 171\n    if n == 19:\n        return 190\n    if n == 20:\n        return 210\n    if n == 21:\n        return 231\n    if n == 22:\n        return 253\n    if n == 23:\n        return 276\n    if n == 24:\n        return 299\n    if n == 25:\n        return 323\n    if n == 26:\n        return 348\n    if n == 27:\n        return 373\n    if n == 28:\n        return 399", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_series(n):\n    \"\"\"\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    30\n    >>> sum_series(15)\n    45\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    if n == 4:\n        return 10\n    if n == 5:\n        return 15\n    if n == 6:\n        return 21\n    if n == 7:\n        return 28\n    if n == 8:\n        return 36\n    if n == 9:\n        return 45\n    if n == 10:\n        return 55\n    if n == 11:\n        return 66\n    if n == 12:\n        return 78\n    if n == 13:\n        return 91\n    if n == 14:\n        return 105\n    if n == 15:\n        return 120\n    if n == 16:\n        return 136\n    if n == 17:\n        return 153\n    if n == 18:\n        return 171\n    if n == 19:\n        return 190\n    if n == 20:\n        return 210\n    if n == 21:\n        return 231\n    if n == 22:\n        return 253\n    if n == 23:\n        return 276\n    if n == 24:\n        return 299\n    if n == 25:\n        return 323\n    if n == 26:\n        return 348\n    if n == 27:\n        return 373\n    if n == 28:\n        return 399\n```\n\n**fail tests**\n[6]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n\n    # Create a mask to toggle all bits except the first and the last\n    # For example, if num_bits = 4, mask will be 0110\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits\n    result = n ^ mask\n\n    # Ensure the first and last bits remain unchanged\n    first_bit = (n >> (num_bits - 1)) & 1\n    last_bit = n & 1\n    result = (first_bit << (num_bits - 1)) | (result & mask) | last_bit\n\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef toggle_middle_bits(n):\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n\n    # Create a mask to toggle all bits except the first and the last\n    # For example, if num_bits = 4, mask will be 0110\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits\n    result = n ^ mask\n\n    # Ensure the first and last bits remain unchanged\n    first_bit = (n >> (num_bits - 1)) & 1\n    last_bit = n & 1\n    result = (first_bit << (num_bits - 1)) | (result & mask) | last_bit\n\n    return result\n```\n\n**fail tests**\n[9]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    zero_list = []\n    for i in lst:\n        if i == 0:\n            zero_list.append(i)\n        else:\n            lst.remove(i)\n            lst.append(i)\n    return lst", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef move_zero(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    zero_list = []\n    for i in lst:\n        if i == 0:\n            zero_list.append(i)\n        else:\n            lst.remove(i)\n            lst.append(i)\n    return lst\n```\n\n**fail tests**\n[[1, 0, 2, 0, 3, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    \"\"\"\n    Function to check if the given element is the majority element in the sorted array.\n    \"\"\"\n    # Get the first and last occurrence of the element\n    first_occurrence = first_occurrence(arr, 0, n-1, x)\n    if first_occurrence == -1:\n        return False\n    last_occurrence = last_occurrence(arr, 0, n-1, x)\n\n    # Check if the count of the element is more than n/2\n    if (last_occurrence - first_occurrence + 1) > n/2:\n        return True\n    else:\n        return False\ndef first_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the first occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first_occurrence(arr, mid+1, high, x)\n        else:\n            return first_occurrence(arr, low, mid-1, x)\n    return -1\ndef last_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the last occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == len(arr)-1 or x < arr[mid+1]) and arr[mid] == x:\n            return mid\n        elif x < arr[mid]:\n            return last_occurrence(arr, low, mid-1, x)\n        else:\n            return last_occurrence(arr, mid+1, high, x)\n    return -1", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_majority(arr, n, x):\n    \"\"\"\n    Function to check if the given element is the majority element in the sorted array.\n    \"\"\"\n    # Get the first and last occurrence of the element\n    first_occurrence = first_occurrence(arr, 0, n-1, x)\n    if first_occurrence == -1:\n        return False\n    last_occurrence = last_occurrence(arr, 0, n-1, x)\n\n    # Check if the count of the element is more than n/2\n    if (last_occurrence - first_occurrence + 1) > n/2:\n        return True\n    else:\n        return False\ndef first_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the first occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first_occurrence(arr, mid+1, high, x)\n        else:\n            return first_occurrence(arr, low, mid-1, x)\n    return -1\ndef last_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the last occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == len(arr)-1 or x < arr[mid+1]) and arr[mid] == x:\n            return mid\n        elif x < arr[mid]:\n            return last_occurrence(arr, low, mid-1, x)\n        else:\n            return last_occurrence(arr, mid+1, high, x)\n    return -1\n```\n\n**fail tests**\n[[1, 2, 3, 3, 3, 3, 10], 7, 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    max_num = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * 100 + nums[j] * 10 + nums[k] > max_num:\n                    max_num = nums[i] * 100 + nums[j] * 10 + nums[k]\n    return max_num", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_Max_Num(nums):\n    max_num = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * 100 + nums[j] * 10 + nums[k] > max_num:\n                    max_num = nums[i] * 100 + nums[j] * 10 + nums[k]\n    return max_num\n```\n\n**fail tests**\n[[1, 2, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return human_age*7", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef dog_age(human_age):\n    return human_age*7\n```\n\n**fail tests**\n[12]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    return ''.join(set(string1) - set(string2))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_dirty_chars(string1, string2):\n    return ''.join(set(string1) - set(string2))\n```\n\n**fail tests**\n['probasscurve', 'pros']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    count = 0\n    for i in string:\n        if i == 'std':\n            count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_occurance(string):\n    count = 0\n    for i in string:\n        if i == 'std':\n            count += 1\n    return count\n```\n\n**fail tests**\n['letstdlenstdporstd']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    d = {}\n    for i in range(len(tup)):\n        if i == 0:\n            d[tup[i]] = tup[i+1]\n        elif i == len(tup)-1:\n            d[tup[i-1]] = tup[i]\n        else:\n            d[tup[i-1]] = tup[i+1]\n    return d", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef tuple_to_dict(tup):\n    d = {}\n    for i in range(len(tup)):\n        if i == 0:\n            d[tup[i]] = tup[i+1]\n        elif i == len(tup)-1:\n            d[tup[i-1]] = tup[i]\n        else:\n            d[tup[i-1]] = tup[i+1]\n    return d\n```\n\n**fail tests**\n[[1, 5, 7, 10, 13, 5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    result = []\n    for I in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sub_list(list1, list2):\n    result = []\n    for I in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    return result\n```\n\n**fail tests**\n[[1, 2, 3], [4, 5, 6]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert tuples in list2 to sets for easy comparison\n    set_list2 = {frozenset(tup) for tup in list2}\n    # Find intersection by checking if tuple from list1 as set is in set_list2\n    intersection = {tuple(tup) for tup in list1 if frozenset(tup) in set_list2}\n    return intersection", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef tuple_intersection(list1, list2):\n    # Convert tuples in list2 to sets for easy comparison\n    set_list2 = {frozenset(tup) for tup in list2}\n    # Find intersection by checking if tuple from list1 as set is in set_list2\n    intersection = {tuple(tup) for tup in list1 if frozenset(tup) in set_list2}\n    return intersection\n```\n\n**fail tests**\n[[[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef Diff(list1, list2):\n    return [item for item in list1 if item not in list2]\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5], [6, 7, 1]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tuple_):\n    if len(tuple_) == 0:\n        return tuple_\n    else:\n        return tuple_[:-1] + tuple_[-1:] + tuple_[:-1] + tuple_[-1:]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef add_pairwise(tuple_):\n    if len(tuple_) == 0:\n        return tuple_\n    else:\n        return tuple_[:-1] + tuple_[-1:] + tuple_[:-1] + tuple_[-1:]\n```\n\n**fail tests**\n[[1, 5, 7, 8, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string,char):\n    return string.replace(' ','')", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef replace_blank(string,char):\n    return string.replace(' ','')\n```\n\n**fail tests**\n['hello people', '@']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    result = tuple()\n    for i in range(len(tuple1)):\n        result += (tuple1[i] - tuple2[i],)\n    return result\n\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef subtract_elements(tuple1, tuple2):\n    result = tuple()\n    for i in range(len(tuple1)):\n        result += (tuple1[i] - tuple2[i],)\n    return result\n\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    return set(t1) - set(t2)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_dissimilar(t1, t2):\n    return set(t1) - set(t2)\n```\n\n**fail tests**\n[[3, 4, 5, 6], [5, 7, 4, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Bell number is a number of ways to partition a set of n elements.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n + 1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n    return bell_numbers[n]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef bell_number(n):\n    \"\"\"\n    Bell number is a number of ways to partition a set of n elements.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n + 1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n    return bell_numbers[n]\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(list_of_lists):\n    min_length = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\n\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(list_of_lists):\n    min_length = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n```\n\n**fail tests**\n[[[1], [1, 2]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    return date[6:] + date[3:5] + date[:2]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef change_date_format(date):\n    return date[6:] + date[3:5] + date[:2]\n```\n\n**fail tests**\n['2026-01-02']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    if text.count('a') == 1 and text.count('b') == 2 or text.count('a') == 1 and text.count('b') == 3:\n        return True\n    else:\n        return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef text_match_two_three(text):\n    if text.count('a') == 1 and text.count('b') == 2 or text.count('a') == 1 and text.count('b') == 3:\n        return True\n    else:\n        return False\n```\n\n**fail tests**\n['abbbba']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(n):\n    root = math.ceil(math.sqrt(n))\n    return root ** 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef next_Perfect_Square(n):\n    root = math.ceil(math.sqrt(n))\n    return root ** 2\n```\n\n**fail tests**\n[9]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return lst.count(1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef pos_count(lst):\n    return lst.count(1)\n```\n\n**fail tests**\n[[1, -2, 3, -4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum += arr[i:j+1]\n    return sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum += arr[i:j+1]\n    return sum\n```\n\n**fail tests**\n[[1, 2, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/605", "solution": "def prime_num(num):\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef prime_num(num):\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n```\n\n**fail tests**\n[-1010]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    if s.count(\".\") == 1 and s.replace(\".\", \"\").isdigit():\n        return True\n    return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_decimal(s):\n    if s.count(\".\") == 1 and s.replace(\".\", \"\").isdigit():\n        return True\n    return False\n```\n\n**fail tests**\n['3.124587']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    list1.sort()\n    list2.sort()\n    list1.reverse()\n    list2.reverse()\n    result = []\n    for i in range(num):\n        result.append(list1[i] * list2[i])\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef large_product(list1, list2, num):\n    list1.sort()\n    list2.sort()\n    list1.reverse()\n    list2.reverse()\n    result = []\n    for i in range(num):\n        result.append(list1[i] * list2[i])\n    return result\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n```\n\n**fail tests**\n[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(list_of_strings):\n    return list_of_strings[::-1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef reverse_string_list(list_of_strings):\n    return list_of_strings[::-1]\n```\n\n**fail tests**\n[['Red', 'Green', 'Blue', 'White', 'Black']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(i, cols):\n            if i == j:\n                continue\n            if matrix[i][j] < matrix[j][i]:\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(i, cols):\n            if i == j:\n                continue\n            if matrix[i][j] < matrix[j][i]:\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix\n```\n\n**fail tests**\n[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(l):\n    \"\"\"\n    >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    if not l:\n        return []\n    if len(l) == 1:\n        return [[l[0]]]\n    if l[0] == l[1]:\n        return [l[:2]] + pack_consecutive_duplicates(l[2:])\n    else:\n        return [l[:1]] + pack_consecutive_duplicates(l[1:])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef pack_consecutive_duplicates(l):\n    \"\"\"\n    >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    if not l:\n        return []\n    if len(l) == 1:\n        return [[l[0]]]\n    if l[0] == l[1]:\n        return [l[:2]] + pack_consecutive_duplicates(l[2:])\n    else:\n        return [l[:1]] + pack_consecutive_duplicates(l[1:])\n```\n\n**fail tests**\n[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    result = ''\n    for i, char in enumerate(string):\n        if i % 2 != 0:\n            result += char\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef odd_values_string(string):\n    result = ''\n    for i, char in enumerate(string):\n        if i % 2 != 0:\n            result += char\n    return result\n```\n\n**fail tests**\n['abcdef']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n\ndef is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True\n    if len(arr) == 3:\n        return True\n    if len(arr) == 4:\n        return True\n    if len(arr) == 5:\n        return True\n    if len(arr) == 6:\n        return True\n    if len(arr) == 7:\n        return True\n    if len(arr) == 8:\n        return True\n    if len(arr) == 9:\n        return True\n    if len(arr) == 10:\n        return True\n    if len(arr) == 11:\n        return True\n    if len(arr) == 12:\n        return True\n    if len(arr) == 13:\n        return True\n    if len(arr) == 14:\n        return True\n    if len(arr) == 15:\n        return True\n    if len(arr) == 16:\n        return True\n    if len(arr) == 17:\n        return True\n    if len(arr) == 18:\n        return True\n    if len(arr) == 19:\n        return True\n    if len(arr) == 20:\n        return True\n    if len(arr) == 21:\n        return True\n    if len(arr) == 22:\n        return True\n    if len(arr) == 23:\n        return True\n    if len(arr) == 24:\n        return True\n    if len(arr) == 25:\n        return True\n    if len(arr) == 26:\n        return True\n    if len(arr) == 27:\n        return True\n    if len(arr) == 28:\n        return True\n    if len(arr) == 29:\n        return True\n    if len(arr) == 30:\n        return True\n    if len(arr) == 31:\n        return True", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n\ndef is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True\n    if len(arr) == 3:\n        return True\n    if len(arr) == 4:\n        return True\n    if len(arr) == 5:\n        return True\n    if len(arr) == 6:\n        return True\n    if len(arr) == 7:\n        return True\n    if len(arr) == 8:\n        return True\n    if len(arr) == 9:\n        return True\n    if len(arr) == 10:\n        return True\n    if len(arr) == 11:\n        return True\n    if len(arr) == 12:\n        return True\n    if len(arr) == 13:\n        return True\n    if len(arr) == 14:\n        return True\n    if len(arr) == 15:\n        return True\n    if len(arr) == 16:\n        return True\n    if len(arr) == 17:\n        return True\n    if len(arr) == 18:\n        return True\n    if len(arr) == 19:\n        return True\n    if len(arr) == 20:\n        return True\n    if len(arr) == 21:\n        return True\n    if len(arr) == 22:\n        return True\n    if len(arr) == 23:\n        return True\n    if len(arr) == 24:\n        return True\n    if len(arr) == 25:\n        return True\n    if len(arr) == 26:\n        return True\n    if len(arr) == 27:\n        return True\n    if len(arr) == 28:\n        return True\n    if len(arr) == 29:\n        return True\n    if len(arr) == 30:\n        return True\n    if len(arr) == 31:\n        return True\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/260", "solution": "import sympy\ndef newman_prime(n):\n    def nswp(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return 2 * nswp(k - 1) + nswp(k - 2)\n\n    count = 0\n    k = 0\n    while True:\n        candidate = nswp(k)\n        if sympy.isprime(candidate):\n            count += 1\n            if count == n:\n                return candidate\n        k += 1", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\nimport sympy\ndef newman_prime(n):\n    def nswp(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return 2 * nswp(k - 1) + nswp(k - 2)\n\n    count = 0\n    k = 0\n    while True:\n        candidate = nswp(k)\n        if sympy.isprime(candidate):\n            count += 1\n            if count == n:\n                return candidate\n        k += 1\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    return (n * (2 * n - 1)) // 3", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef hexagonal_num(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    return (n * (2 * n - 1)) // 3\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/404", "solution": "\"\"\"\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Test the function\nassert minimum(1, 2) == 1\n\"\"\"", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Test the function\nassert minimum(1, 2) == 1\n\"\"\"\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n            while fact % 10 == 0:\n                fact /= 10\n        return int(str(fact)[-1])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n            while fact % 10 == 0:\n                fact /= 10\n        return int(str(fact)[-1])\n```\n\n**fail tests**\n[30]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False\n```\n\n**fail tests**\n['Hadoop']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/141", "solution": "import functools\ndef find_max(arr, n):\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\ndef pancake_sort(arr):\n    curr_size = len(arr)\n    while curr_size > 1:\n        max_index = find_max(arr, curr_size)\n        if max_index != curr_size - 1:\n            flip(arr, max_index)\n            flip(arr, curr_size - 1)\n        curr_size -= 1\n    return arr", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport functools\ndef find_max(arr, n):\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\ndef pancake_sort(arr):\n    curr_size = len(arr)\n    while curr_size > 1:\n        max_index = find_max(arr, curr_size)\n        if max_index != curr_size - 1:\n            flip(arr, max_index)\n            flip(arr, curr_size - 1)\n        curr_size -= 1\n    return arr\n```\n\n**fail tests**\n[[15, 79, 25, 38, 69]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i ** 4\n    return sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef odd_num_sum(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i ** 4\n    return sum\n```\n\n**fail tests**\n[2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    return string.replace(' ', '_').replace('_', ' ')", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef replace_spaces(string):\n    return string.replace(' ', '_').replace('_', ' ')\n```\n\n**fail tests**\n['Jumanji The Jungle']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef difference(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6\n```\n\n**fail tests**\n[3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: number of largest numbers to return\n    :return: list of n largest numbers\n    \"\"\"\n    heap = []\n    for num in nums:\n        heap.append(num)\n        heapify(heap, len(heap))\n    return heap[:n]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: number of largest numbers to return\n    :return: list of n largest numbers\n    \"\"\"\n    heap = []\n    for num in nums:\n        heap.append(num)\n        heapify(heap, len(heap))\n    return heap[:n]\n```\n\n**fail tests**\n[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if num_str[i] == num_str[i-1] and num_str[i] == num_str[i+1]:\n            return False\n        if num_str[i] != num_str[i-1] and num_str[i] != num_str[i+1]:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if num_str[i] == num_str[i-1] and num_str[i] == num_str[i+1]:\n            return False\n        if num_str[i] != num_str[i-1] and num_str[i] != num_str[i+1]:\n            return False\n    return True\n```\n\n**fail tests**\n[1212121]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    return string.replace(\" \",\":\").replace(\",\",\"::\").replace(\".\",\"::\")", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef replace_specialchar(string):\n    return string.replace(\" \",\":\").replace(\",\",\"::\").replace(\".\",\"::\")\n```\n\n**fail tests**\n['Python language, Programming language.']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/284", "solution": "def check_element(list, element):\n    if element in list:\n        return False\n    else:\n        return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_element(list, element):\n    if element in list:\n        return False\n    else:\n        return True\n```\n\n**fail tests**\n[['green', 'orange', 'black', 'white'], 'blue']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    return''.join([word for word in string.split() if len(word)!= k])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_length(string, k):\n    return''.join([word for word in string.split() if len(word)!= k])\n```\n\n**fail tests**\n['The person is most value tet', 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tuple, dict):\n    return tuple + tuple(dict.values())", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef add_dict_to_tuple(tuple, dict):\n    return tuple + tuple(dict.values())\n```\n\n**fail tests**\n[[4, 5, 6], {'MSAM': 1, 'is': 2, 'best': 3}]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    result = []\n    for I in range(len(tuple1)):\n        result.append(tuple1[i] % tuple2[i])\n    return tuple(result)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef tuple_modulo(tuple1, tuple2):\n    result = []\n    for I in range(len(tuple1)):\n        result.append(tuple1[i] % tuple2[i])\n    return tuple(result)\n```\n\n**fail tests**\n[[10, 4, 5, 6], [5, 6, 7, 5]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a,b,c):\n    count = 0\n    if a == b:\n        count += 1\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef test_three_equal(a,b,c):\n    count = 0\n    if a == b:\n        count += 1\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count\n```\n\n**fail tests**\n[1, 2, 2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    if text[0] == \"a\" and text[1] == \"b\" and text[2] == \"b\" and text[3] == \"b\":\n        return True\n    else:\n        return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef text_match_three(text):\n    if text[0] == \"a\" and text[1] == \"b\" and text[2] == \"b\" and text[3] == \"b\":\n        return True\n    else:\n        return False\n```\n\n**fail tests**\n['caacabbbba']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef apply_format(lst, format_str):\n    \"\"\"\n    Applies a given format string to all of the elements in a list.\n    :param lst: list of elements\n    :param format_str: format string with placeholders\n    :return: list with formatted elements\n    \"\"\"\n    return [format_str.format(i) for I in lst]", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef apply_format(lst, format_str):\n    \"\"\"\n    Applies a given format string to all of the elements in a list.\n    :param lst: list of elements\n    :param format_str: format string with placeholders\n    :return: list with formatted elements\n    \"\"\"\n    return [format_str.format(i) for I in lst]\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverb = \"\"\n    positions = []\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith(\"ly\"):\n            adverb = word\n            positions.append(i)\n            break\n    return tuple(positions + [adverb])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_adverb_position(sentence):\n    adverb = \"\"\n    positions = []\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith(\"ly\"):\n            adverb = word\n            positions.append(i)\n            break\n    return tuple(positions + [adverb])\n```\n\n**fail tests**\n['clearly!! we can see the sky']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef frequency_lists(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n```\n\n**fail tests**\n[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    :param matrix: list of lists\n    :return: bool\n    \"\"\"\n    # check if the matrix is a square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # check if the sum of each row is the same\n    row_sum = matrix[0][0] + matrix[0][1] + matrix[0][2]\n    for row in matrix:\n        if row_sum != row[0] + row[1] + row[2]:\n            return False\n\n    # check if the sum of each column is the same\n    col_sum = matrix[0][0] + matrix[1][0] + matrix[2][0] + matrix[3][0]\n    for i in range(len(matrix)):\n        if col_sum != matrix[i][0] + matrix[i][1] + matrix[i][2] + matrix[i][3]:\n            return False\n\n    # check if the sum of each diagonal is the same\n    diag_sum = matrix[0][0] + matrix[1][1] + matrix[2][2] + matrix[3][3]\n    for i in range(len(matrix)):\n        if diag_sum != matrix[i][i]:\n            return False\n\n    # check if the sum of each anti-diagonal is the same\n    anti_diag_sum = matrix[0][2] + matrix[1][1] + matrix[2][0] + matrix[3][3]\n    for i in range(len(matrix)):\n        if anti_diag_sum != matrix[i][2 - i]:\n            return False\n\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef magic_square_test(matrix):\n    \"\"\"\n    :param matrix: list of lists\n    :return: bool\n    \"\"\"\n    # check if the matrix is a square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # check if the sum of each row is the same\n    row_sum = matrix[0][0] + matrix[0][1] + matrix[0][2]\n    for row in matrix:\n        if row_sum != row[0] + row[1] + row[2]:\n            return False\n\n    # check if the sum of each column is the same\n    col_sum = matrix[0][0] + matrix[1][0] + matrix[2][0] + matrix[3][0]\n    for i in range(len(matrix)):\n        if col_sum != matrix[i][0] + matrix[i][1] + matrix[i][2] + matrix[i][3]:\n            return False\n\n    # check if the sum of each diagonal is the same\n    diag_sum = matrix[0][0] + matrix[1][1] + matrix[2][2] + matrix[3][3]\n    for i in range(len(matrix)):\n        if diag_sum != matrix[i][i]:\n            return False\n\n    # check if the sum of each anti-diagonal is the same\n    anti_diag_sum = matrix[0][2] + matrix[1][1] + matrix[2][0] + matrix[3][3]\n    for i in range(len(matrix)):\n        if anti_diag_sum != matrix[i][2 - i]:\n            return False\n\n    return True\n```\n\n**fail tests**\n[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    return (n*(n+1)/2, n/2)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_average(n):\n    return (n*(n+1)/2, n/2)\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    return sorted(set(tup1) | set(tup2))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef union_elements(tup1, tup2):\n    return sorted(set(tup1) | set(tup2))\n```\n\n**fail tests**\n[[3, 4, 5, 6], [5, 7, 4, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/233", "solution": "from math import pi\ndef lateralsuface_cylinder(radius, height):\n    return 2 * pi * radius + 2 * pi * radius * height", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nfrom math import pi\ndef lateralsuface_cylinder(radius, height):\n    return 2 * pi * radius + 2 * pi * radius * height\n```\n\n**fail tests**\n[10, 5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for _ in range(2, n+1):\n            c = 2*b + a\n            a = b\n            b = c\n        return b", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for _ in range(2, n+1):\n            c = 2*b + a\n            a = b\n            b = c\n        return b\n```\n\n**fail tests**\n[5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum([i for i in lst if i % 2 == 0]) + sum([lst[i] for i in range(len(lst)) if i % 2 == 0])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_even_and_even_index(lst):\n    return sum([i for i in lst if i % 2 == 0]) + sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\n```\n\n**fail tests**\n[[5, 6, 12, 1, 18, 8]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return lst[n]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef extract_nth_element(lst, n):\n    return lst[n]\n```\n\n**fail tests**\n[[['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 0]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 2\n```\n\n**fail tests**\n[5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + tup", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef add_tuple(lst, tup):\n    return lst + tup\n```\n\n**fail tests**\n[[5, 6, 7], [9, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    return re.match(r'^[aeiouAEIOU]*$', string)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport re\ndef check_str(string):\n    return re.match(r'^[aeiouAEIOU]*$', string)\n```\n\n**fail tests**\n['annie']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef count_set_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/475", "solution": "def sort_dict_by_value(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\n# Test the function\nprint(sort_dict_by_value({'Math':81, 'Physics':83, 'Chemistry':87}))", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef sort_dict_by_value(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\n# Test the function\nprint(sort_dict_by_value({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_s = [c for c in s if c in vowels]\n    return \"\".join(vowels_in_s[::-1]) + \"\".join([c for c in s if c not in vowels])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_s = [c for c in s if c in vowels]\n    return \"\".join(vowels_in_s[::-1]) + \"\".join([c for c in s if c not in vowels])\n```\n\n**fail tests**\n['Python']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    max_diff = 0\n    for i in range(len(tuples) - 1):\n        max_diff = max(max_diff, tuples[i + 1][0] - tuples[i][1])\n    return max_diff", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_difference(tuples):\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    max_diff = 0\n    for i in range(len(tuples) - 1):\n        max_diff = max(max_diff, tuples[i + 1][0] - tuples[i][1])\n    return max_diff\n```\n\n**fail tests**\n[[[3, 5], [1, 7], [10, 3], [1, 2]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] % 2!= 0:\n                count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] % 2!= 0:\n                count += 1\n    return count\n```\n\n**fail tests**\n[[5, 4, 7, 2, 1], 5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    if text[0] == 'z':\n        return False\n    elif text[-1] == 'z':\n        return False\n    else:\n        return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef text_match_wordz_middle(text):\n    if text[0] == 'z':\n        return False\n    elif text[-1] == 'z':\n        return False\n    else:\n        return True\n```\n\n**fail tests**\n['  lang  .']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    This function checks if the entered number is greater than all the elements of the given array.\n\n    Args:\n    arr (list): The list of numbers.\n    num (int): The number to compare with.\n\n    Returns:\n    bool: True if the number is greater than all elements, False otherwise.\n\n    Example:\n    >>> check_greater([1, 2, 3, 4, 5], 4)\n    False\n    \"\"\"\n    for i in arr:\n        if i <= num:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_greater(arr, num):\n    \"\"\"\n    This function checks if the entered number is greater than all the elements of the given array.\n\n    Args:\n    arr (list): The list of numbers.\n    num (int): The number to compare with.\n\n    Returns:\n    bool: True if the number is greater than all elements, False otherwise.\n\n    Example:\n    >>> check_greater([1, 2, 3, 4, 5], 4)\n    False\n    \"\"\"\n    for i in arr:\n        if i <= num:\n            return False\n    return True\n```\n\n**fail tests**\n[[2, 3, 4, 5, 6], 8]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    rect_coord = (x, y)\n    polar_coord = cmath.polar(complex(x, y))\n    return rect_coord, polar_coord", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport cmath\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    rect_coord = (x, y)\n    polar_coord = cmath.polar(complex(x, y))\n    return rect_coord, polar_coord\n```\n\n**fail tests**\n[3, 4]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    \"\"\"\n    >>> sum_Of_product(3)\n    15\n    \"\"\"\n    return sum(\n        [\n            (n * (n + 1) * (2 * n + 1) * (3 * n ** 2 + 3 * n - 1))\n            / (\n                (n - r)\n                * (n - r + 1)\n                * (n - r + 2)\n                * (n - r + 3)\n                * (n + r - 1)\n                * (n + r)\n                * (n + r + 1)\n                * (n + r + 2)\n            )\n            for r in range(1, n + 1)\n        ]\n    )", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_Of_product(n):\n    \"\"\"\n    >>> sum_Of_product(3)\n    15\n    \"\"\"\n    return sum(\n        [\n            (n * (n + 1) * (2 * n + 1) * (3 * n ** 2 + 3 * n - 1))\n            / (\n                (n - r)\n                * (n - r + 1)\n                * (n - r + 2)\n                * (n - r + 3)\n                * (n + r - 1)\n                * (n + r)\n                * (n + r + 1)\n                * (n + r + 2)\n            )\n            for r in range(1, n + 1)\n        ]\n    )\n```\n\n**fail tests**\n[3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n```\n\n**fail tests**\n[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport re\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))\n```\n\n**fail tests**\n['aabAbbbc']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef divisor(n):\n    divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n```\n\n**fail tests**\n[15]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(lst, tup):\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_Occurrence(lst, tup):\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict\n```\n\n**fail tests**\n[['a', 'a', 'c', 'b', 'd'], ['a', 'b']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(range(l, r+1, 2))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_in_range(l, r):\n    return sum(range(l, r+1, 2))\n```\n\n**fail tests**\n[2, 5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    return tuple(input_string)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef string_to_tuple(input_string):\n    return tuple(input_string)\n```\n\n**fail tests**\n['python 3.0']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    m = n\n    mask = 1\n    # Find the leftmost unset bit\n    while m & mask:\n        mask = mask << 1\n    # Set the leftmost unset bit\n    return n | mask", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    m = n\n    mask = 1\n    # Find the leftmost unset bit\n    while m & mask:\n        mask = mask << 1\n    # Set the leftmost unset bit\n    return n | mask\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b + c) / 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef median_trapezium(a, b, c):\n    return (a + b + c) / 2\n```\n\n**fail tests**\n[15, 25, 35]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    return string[0] + string[1:].rstrip(string[0])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_lowercase(string):\n    return string[0] + string[1:].rstrip(string[0])\n```\n\n**fail tests**\n['PYTHon']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef unique_sublists(lst):\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n```\n\n**fail tests**\n[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Initialize the minimum value as the first element of the list\n    min_value = lst[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # Check if the current element is smaller than the minimum value\n        if lst[i] < min_value:\n            # Update the minimum value\n            min_value = lst[i]\n    \n    return min_value", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef min_val(lst):\n    # Initialize the minimum value as the first element of the list\n    min_value = lst[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # Check if the current element is smaller than the minimum value\n        if lst[i] < min_value:\n            # Update the minimum value\n            min_value = lst[i]\n    \n    return min_value\n```\n\n**fail tests**\n[['Python', 3, 2, 4, 5, 'version']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(num for num, count in freq.items() if count == 1)\n    return sum_non_repeated", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_sum(lst):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(num for num, count in freq.items() if count == 1)\n    return sum_non_repeated\n```\n\n**fail tests**\n[[1, 2, 3, 1, 1, 4, 5, 6]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(arr):\n    n = len(arr)\n    count = 0\n    for I in range(n):\n        for j in range(i+1, n):\n            if arr[i][::-1] == arr[j][::-1]:\n                count += 1\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_reverse_pairs(arr):\n    n = len(arr)\n    count = 0\n    for I in range(n):\n        for j in range(i+1, n):\n            if arr[i][::-1] == arr[j][::-1]:\n                count += 1\n    return count\n```\n\n**fail tests**\n[['julia', 'best', 'tseb', 'for', 'ailuj']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(nums):\n    return sum(nums) / len(nums)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef multiply_num(nums):\n    return sum(nums) / len(nums)\n```\n\n**fail tests**\n[[8, 2, 3, -1, 7]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    for i in range(len(text)):\n        if text[i].isalpha() and text[i].islower() and text[i] != \"_\":\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef text_lowercase_underscore(text):\n    for i in range(len(text)):\n        if text[i].isalpha() and text[i].islower() and text[i] != \"_\":\n            return False\n    return True\n```\n\n**fail tests**\n['aab_cbbbc']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            product = abs(tuples[i][0] * tuples[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            product = abs(tuples[i][0] * tuples[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n```\n\n**fail tests**\n[[[2, 7], [2, 6], [1, 8], [4, 9]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    if substring in string:\n        start = string.index(substring)\n        end = start + len(substring)\n        return substring, start, end\n    else:\n        return None\n\nassert occurrence_substring('python programming, python language', 'python') == ('python', 0, 6)", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef occurrence_substring(string, substring):\n    if substring in string:\n        start = string.index(substring)\n        end = start + len(substring)\n        return substring, start, end\n    else:\n        return None\n\nassert occurrence_substring('python programming, python language', 'python') == ('python', 0, 6)\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\n\ndef split_arr(arr, n):\n    return arr[n:] + arr[:n]", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\n\ndef split_arr(arr, n):\n    return arr[n:] + arr[:n]\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max([row[n-1] for row in matrix])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_of_nth(matrix, n):\n    return max([row[n-1] for row in matrix])\n```\n\n**fail tests**\n[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(l):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not l:\n        return []\n    if isinstance(l[0], int):\n        return l + flatten_list(l[1:])\n    return flatten_list(l[0]) + flatten_list(l[1:])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef flatten_list(l):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not l:\n        return []\n    if isinstance(l[0], int):\n        return l + flatten_list(l[1:])\n    return flatten_list(l[0]) + flatten_list(l[1:])\n```\n\n**fail tests**\n[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    for I in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] != string[j]:\n                return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef all_Characters_Same(string):\n    for I in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] != string[j]:\n                return False\n    return True\n```\n\n**fail tests**\n['python']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuple_list, k):\n    for i in tuple_list:\n        if k in i:\n            return True\n    return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check_K(tuple_list, k):\n    for i in tuple_list:\n        if k in i:\n            return True\n    return False\n```\n\n**fail tests**\n[[10, 4, 5, 6, 8], 6]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    common_divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\nassert sum_common_divisors(10, 15) == 6", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef sum_common_divisors(num1, num2):\n    common_divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\nassert sum_common_divisors(10, 15) == 6\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return t[0:-1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef multiply_elements(t):\n    return t[0:-1]\n```\n\n**fail tests**\n[[1, 5, 7, 8, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/105", "solution": "def count_true(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef count_true(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 == 0]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n```\n\n**fail tests**\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/312", "solution": "def volume_cone(radius, height):\n    return (1 / 3) * (3.14 * radius ** 2) * height", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef volume_cone(radius, height):\n    return (1 / 3) * (3.14 * radius ** 2) * height\n```\n\n**fail tests**\n[5, 12]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string,char):\n    return string[1:-1]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef remove_Occ(string,char):\n    return string[1:-1]\n```\n\n**fail tests**\n['hello', 'l']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 6 * side_length ** 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef lateralsurface_cube(side_length):\n    return 6 * side_length ** 2\n```\n\n**fail tests**\n[5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    if n % 11 == 0:\n        return n + 1\n    else:\n        return n + 11 - (n % 11)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef next_smallest_palindrome(n):\n    if n % 11 == 0:\n        return n + 1\n    else:\n        return n + 11 - (n % 11)\n```\n\n**fail tests**\n[99]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is octagonal\n    \"\"\"\n    return (n * (3 * n - 1)) / 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_octagonal(n):\n    \"\"\"\n    Check if a number is octagonal\n    \"\"\"\n    return (n * (3 * n - 1)) / 2\n```\n\n**fail tests**\n[5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_coeff_sum(n):\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    \n    return sum\n\nassert even_binomial_coeff_sum(4) == 8", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef even_binomial_coeff_sum(n):\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    \n    return sum\n\nassert even_binomial_coeff_sum(4) == 8\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    occurrences = {}\n    for item in lst:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences\n\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef check_occurrences(lst):\n    occurrences = {}\n    for item in lst:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences\n\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return bool(re.search(r'\\w*z\\w*', text))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef text_match_wordz(text):\n    return bool(re.search(r'\\w*z\\w*', text))\n```\n\n**fail tests**\n['pythonz.']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/468", "solution": "import numpy as np\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize max_product array to store the maximum product till ith element\n    max_product_array = np.ones(n)\n\n    # Fill max_product_array[] in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product_array[i] = max(max_product_array[i], max_product_array[j] * arr[i])\n\n    # Return the maximum value from max_product_array[]\n    return int(max(max_product_array))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport numpy as np\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize max_product array to store the maximum product till ith element\n    max_product_array = np.ones(n)\n\n    # Fill max_product_array[] in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product_array[i] = max(max_product_array[i], max_product_array[j] * arr[i])\n\n    # Return the maximum value from max_product_array[]\n    return int(max(max_product_array))\n```\n\n**fail tests**\n[[3, 100, 4, 5, 150, 6]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    \"\"\"\n    >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n    [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    return find_combinations_helper(tuples, 0, 0, [])\ndef find_combinations_helper(tuples, index, sum, result):\n    if index == len(tuples):\n        return result\n    if sum + tuples[index][0] > tuples[index][1]:\n        return find_combinations_helper(tuples, index + 1, sum, result)\n    else:\n        return find_combinations_helper(tuples, index + 1, sum + tuples[index][0], result) + find_combinations_helper(tuples, index + 1, sum, result)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_combinations(tuples):\n    \"\"\"\n    >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n    [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    return find_combinations_helper(tuples, 0, 0, [])\ndef find_combinations_helper(tuples, index, sum, result):\n    if index == len(tuples):\n        return result\n    if sum + tuples[index][0] > tuples[index][1]:\n        return find_combinations_helper(tuples, index + 1, sum, result)\n    else:\n        return find_combinations_helper(tuples, index + 1, sum + tuples[index][0], result) + find_combinations_helper(tuples, index + 1, sum, result)\n```\n\n**fail tests**\n[[[1, 2, 3], [3, 4, 5]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    return \" \".join([word for word in string.split() if len(word) >= 4])", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_char_long(string):\n    return \" \".join([word for word in string.split() if len(word) >= 4])\n```\n\n**fail tests**\n['Please move back to stream']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(arr)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef zero_count(arr):\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(arr)\n```\n\n**fail tests**\n[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/734", "solution": "import itertools\ndef sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for r in range(1, len(lst) + 1):\n        for sub in itertools.combinations(lst, r):\n            prod = 1\n            for num in sub:\n                prod *= num\n            total_sum += prod\n    return total_sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport itertools\ndef sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for r in range(1, len(lst) + 1):\n        for sub in itertools.combinations(lst, r):\n            prod = 1\n            for num in sub:\n                prod *= num\n            total_sum += prod\n    return total_sum\n```\n\n**fail tests**\n[[1, 2, 3]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n```\n\n**fail tests**\n[['Python', 3, 2, 4, 5, 'version']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    return sum(sum(int(digit) for digit in str(number)) for number in numbers)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_of_digits(numbers):\n    return sum(sum(int(digit) for digit in str(number)) for number in numbers)\n```\n\n**fail tests**\n[[[10, 20, 4, 5, 'b', 70, 'a']]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/139", "solution": "def circle_circumference(radius):\n    return 2 * math.pi * radius", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d, level=1):\n    if not isinstance(d, dict) or not d:\n        return level\n    return max(dict_depth(v, level + 1) for k, v in d.items())", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef dict_depth(d, level=1):\n    if not isinstance(d, dict) or not d:\n        return level\n    return max(dict_depth(v, level + 1) for k, v in d.items())\n```\n\n**fail tests**\n[{'a': 1, 'b': {'c': 'python'}}]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(student_id, student_name, student_score):\n    result = {}\n    for i in range(len(student_id)):\n        result[student_id[i]] = {}\n        result[student_id[i]][student_name[i]] = student_score[i]\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef convert_list_dictionary(student_id, student_name, student_score):\n    result = {}\n    for i in range(len(student_id)):\n        result[student_id[i]] = {}\n        result[student_id[i]][student_name[i]] = student_score[i]\n    return result\n```\n\n**fail tests**\n[['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\n\ndef split(nums):\n    return [num for num in nums if num % 2 == 0]", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\n\ndef split(nums):\n    return [num for num in nums if num % 2 == 0]\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n```\n\n**fail tests**\n[5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    # Base case: if n is 0, there is only one possible binary sequence\n    if n == 0:\n        return 1\n\n    # Recursive case: count the number of binary sequences by summing the counts of two subproblems\n    return 2 * count_binary_seq(n - 1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef count_binary_seq(n):\n    # Base case: if n is 0, there is only one possible binary sequence\n    if n == 0:\n        return 1\n\n    # Recursive case: count the number of binary sequences by summing the counts of two subproblems\n    return 2 * count_binary_seq(n - 1)\n```\n\n**fail tests**\n[2]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    if num1 == num2:\n        return False\n    else:\n        num1_bin = bin(num1)\n        num2_bin = bin(num2)\n        if num1_bin == num2_bin:\n            return False\n        else:\n            return True", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef differ_At_One_Bit_Pos(num1, num2):\n    if num1 == num2:\n        return False\n    else:\n        num1_bin = bin(num1)\n        num2_bin = bin(num2)\n        if num1_bin == num2_bin:\n            return False\n        else:\n            return True\n```\n\n**fail tests**\n[15, 8]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev == num * 2 - 1", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef check(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev == num * 2 - 1\n```\n\n**fail tests**\n[73]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/798", "solution": "def sum_array(arr):\n    return sum(arr)", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef sum_array(arr):\n    return sum(arr)\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/607", "solution": "def find_literals(string, pattern):\n    return pattern, 0, 0", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_literals(string, pattern):\n    return pattern, 0, 0\n```\n\n**fail tests**\n['The quick brown fox jumps over the lazy dog.', 'fox']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    return [x[1:-1] for x in string.split('\"') if x != '']", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef extract_quotation(string):\n    return [x[1:-1] for x in string.split('\"') if x != '']\n```\n\n**fail tests**\n['Cortex \"A53\" Based \"multi\" tasking \"Processor\"']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for I in arr:\n        product = (product * i) % n\n    return product", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_remainder(arr, n):\n    product = 1\n    for I in arr:\n        product = (product * i) % n\n    return product\n```\n\n**fail tests**\n[[100, 10, 5, 25, 35, 14], 11]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n\n\ndef square_sum(n):\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares\n\nassert square_sum(2) == 10", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n\n\ndef square_sum(n):\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares\n\nassert square_sum(2) == 10\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/624", "solution": "def to_upper(s):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return s.upper()\n\n# Test the function\nassert to_upper(\"person\") == \"PERSON\"", "is_syntax_err": true, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\ndef to_upper(s):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return s.upper()\n\n# Test the function\nassert to_upper(\"person\") == \"PERSON\"\n\n\n\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Find the minimum difference by comparing adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Find the minimum difference by comparing adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n```\n\n**fail tests**\n[[1, 5, 3, 19, 18, 25], 6]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return (2 * n - 1) * catalan_number(n - 1) // n", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef catalan_number(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return (2 * n - 1) * catalan_number(n - 1) // n\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a,b,c):\n    return (a+b+c)/2", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef median_numbers(a,b,c):\n    return (a+b+c)/2\n```\n\n**fail tests**\n[25, 55, 65]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    n = len(string)\n    for i in range(1, n):\n        if string[:i] == string[i:]:\n            return i\n    return n", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_Rotations(string):\n    n = len(string)\n    for i in range(1, n):\n        if string[:i] == string[i:]:\n            return i\n    return n\n```\n\n**fail tests**\n['aaaa']\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even *= num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd *= num\n    return even * odd", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even *= num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd *= num\n    return even * odd\n```\n\n**fail tests**\n[[1, 3, 5, 7, 4, 1, 6, 8]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [string[len(string) - size:] for string in string_list]", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef extract_string(string_list, size):\n    return [string[len(string) - size:] for string in string_list]\n```\n\n**fail tests**\n[['Python', 'list', 'exercises', 'practice', 'solution'], 8]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    \"\"\"\n    :param: arr - sorted array of integers\n          num - integer you're searching for\n    return: the index of the first occurrence of num in arr,\n            or -1 if num is not in arr\n    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0 if arr[0] == num else -1\n\n    mid = len(arr) // 2\n    if arr[mid] == num:\n        return mid\n    elif arr[mid] > num:\n        return find_first_occurrence(arr[:mid], num)\n    else:\n        return mid + find_first_occurrence(arr[mid:], num)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_first_occurrence(arr, num):\n    \"\"\"\n    :param: arr - sorted array of integers\n          num - integer you're searching for\n    return: the index of the first occurrence of num in arr,\n            or -1 if num is not in arr\n    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0 if arr[0] == num else -1\n\n    mid = len(arr) // 2\n    if arr[mid] == num:\n        return mid\n    elif arr[mid] > num:\n        return find_first_occurrence(arr[:mid], num)\n    else:\n        return mid + find_first_occurrence(arr[mid:], num)\n```\n\n**fail tests**\n[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef find_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n```\n\n**fail tests**\n[12]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(list_of_numeric_strings):\n    return sorted(list_of_numeric_strings, key=int)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sort_numeric_strings(list_of_numeric_strings):\n    return sorted(list_of_numeric_strings, key=int)\n```\n\n**fail tests**\n[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/803", "solution": "import math\ndef is_perfect_square(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt = math.sqrt(n)\n    if sqrt - math.floor(sqrt) == 0:\n        return True\n    return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef is_perfect_square(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt = math.sqrt(n)\n    if sqrt - math.floor(sqrt) == 0:\n        return True\n    return False\n```\n\n**fail tests**\n[36]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/638", "solution": "import math\ndef wind_chill(velocity, temperature):\n    # Wind chill index formula for km/h and Celsius\n    if temperature > 10 or velocity < 4.8:\n        return None\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport math\ndef wind_chill(velocity, temperature):\n    # Wind chill index formula for km/h and Celsius\n    if temperature > 10 or velocity < 4.8:\n        return None\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)\n```\n\n**fail tests**\n[120, 35]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(arr):\n    max_length = 0\n    current_length = 0\n    start = 0\n    for I in range(len(arr)):\n        if len(arr[i]) == 0:\n            continue\n        if I == 0 or len(arr[i-1]) == 0:\n            current_length = len(arr[i])\n            start = i\n        else:\n            if arr[i][0] == arr[i-1][-1]:\n                current_length += 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = len(arr[i])\n                start = i\n        if current_length > max_length:\n            max_length = current_length\n    if current_length > max_length:\n        max_length = current_length\n    return max_length", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef Find_Max_Length(arr):\n    max_length = 0\n    current_length = 0\n    start = 0\n    for I in range(len(arr)):\n        if len(arr[i]) == 0:\n            continue\n        if I == 0 or len(arr[i-1]) == 0:\n            current_length = len(arr[i])\n            start = i\n        else:\n            if arr[i][0] == arr[i-1][-1]:\n                current_length += 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = len(arr[i])\n                start = i\n        if current_length > max_length:\n            max_length = current_length\n    if current_length > max_length:\n        max_length = current_length\n    return max_length\n```\n\n**fail tests**\n[[[1], [1, 4], [5, 6, 7, 8]]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)\n```\n\n**fail tests**\n[5]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    result = []\n    for I in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef sum_list(list1, list2):\n    result = []\n    for I in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n```\n\n**fail tests**\n[[10, 20, 30], [15, 25, 35]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return False", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef is_not_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return False\n```\n\n**fail tests**\n[1]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2 and i <= m:\n            count += get_total_number_of_sequences(i, n-1)\n    return count", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2 and i <= m:\n            count += get_total_number_of_sequences(i, n-1)\n    return count\n```\n\n**fail tests**\n[10, 4]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coord:\n                adjacent_coords.append([i, j])\n    return adjacent_coords", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coord:\n                adjacent_coords.append([i, j])\n    return adjacent_coords\n```\n\n**fail tests**\n[[3, 4]]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_sum = 0\n    for i in range(1, n+1):\n        sum1 = sum_of_divisors(i)\n        sum2 = sum_of_divisors(sum1)\n        if i == sum2 and i != sum1:\n            amicable_sum += i\n\n    return amicable_sum", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\ndef amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_sum = 0\n    for i in range(1, n+1):\n        sum1 = sum_of_divisors(i)\n        sum2 = sum_of_divisors(sum1)\n        if i == sum2 and i != sum1:\n            amicable_sum += i\n\n    return amicable_sum\n```\n\n**fail tests**\n[9999]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/603", "solution": "import itertools\ndef get_ludic(n):\n    ludic = [1]\n    candidates = list(range(2, n + 1))\n    while candidates:\n        first = candidates[0]\n        ludic.append(first)\n        candidates = [c for i, c in enumerate(candidates) if (i + 1) % first != 0]\n    return ludic", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport itertools\ndef get_ludic(n):\n    ludic = [1]\n    candidates = list(range(2, n + 1))\n    while candidates:\n        first = candidates[0]\n        ludic.append(first)\n        candidates = [c for i, c in enumerate(candidates) if (i + 1) % first != 0]\n    return ludic\n```\n\n**fail tests**\n[10]\n\nyour correct program is \n```python\n"}
{"task_id": "Mbpp/255", "solution": "import itertools\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))", "is_syntax_err": false, "prompt": "\nGiven a faulty program and its corresponding failing test case, output the corrected program that passes the test case. Do not include any explanation.\n\n**buggy program**\n```python\nimport itertools\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))\n```\n\n**fail tests**\n[['Red', 'Green', 'Blue'], 2]\n\nyour correct program is \n```python\n"}