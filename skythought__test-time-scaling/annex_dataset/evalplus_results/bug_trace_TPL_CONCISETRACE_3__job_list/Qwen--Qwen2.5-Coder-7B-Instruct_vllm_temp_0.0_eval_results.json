{"date": "2025-05-19 00:13", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return a + b - (a & b)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 20]], "plus_fail_tests": [[10000000000000000, 9999999999999999]]}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup1):\n  # Convert each tuple element to string and then join\n  return ''.join(str(item) for item in tup1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    else:\n        return decimal_to_binary(num // 2) + str(num % 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": [[-5]]}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    return (n * (2 * n - 1)) // 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(string): \n    return string.split(\" \")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Convert the input to an integer if it's a list with a single element\n    if isinstance(n, list) and len(n) == 1:\n        n = n[0]\n    \n    # Check if the number is already a palindrome\n    if str(n) == str(n)[::-1]:\n        return n + 2\n    \n    # Find the next smallest palindrome\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1221]], "plus_fail_tests": [[0]]}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    return sum(x for x in nums if x < 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(list_1, list_2):\n    return list_2 + list_1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 6, 7], [9, 10]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Iterate through all bits of the number\n    for i in range(0, 32, 2):  # Considering a 32-bit integer\n        # Set the even bit (0, 2, 4, ...) by using the OR operator with 1 shifted to the i-th position\n        n |= (1 << i)\n    return n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    d = {}\n    for sublist in lst:\n        for i in sublist:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n    return d", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = sort_sublists(input_data)\n        assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\n# Run the check function to verify the solution\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "import heapq\ndef index_minimum(lst):\n    \"\"\"\n    Returns the index of the tuple with the smallest second value in the given list of tuples.\n    \"\"\"\n    # Find the tuple with the smallest second value\n    min_tuple = min(lst, key=lambda x: x[1])\n    # Return the index of this tuple in the original list\n    return lst.index(min_tuple)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Rash", 143], ["Manjeet", 200], ["Varsha", 100]]]], "plus_fail_tests": [[[["John", 100]]]]}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(l):\n  return l[0] ** 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2.5]]}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Convert each element in the list to a string to make it hashable\n    str_lst = [str(item) for item in lst]\n    # Find the element with the maximum occurrences\n    max_element = max(set(str_lst), key=str_lst.count)\n    # Convert the element back to its original type\n    return eval(max_element)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]]], "plus_fail_tests": [[[1, 2, 3, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 6]]]}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    common_divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\n# Test cases\nassert sum_common_divisors(100, 150) == 93\nassert sum_common_divisors(10, 15) == 6\nassert sum_common_divisors(4, 6) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    for i in range(len(binary_string)):\n        for j in range(i+1, len(binary_string)+1):\n            sub_str = binary_string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["10111"]], "plus_fail_tests": [["0000000000001111111111111"]]}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_signs(a, b):\n    # Check if the product of a and b is less than 0\n    if a * b < 0:\n        return True\n    else:\n        return False\n\n# Test cases\nassert opposite_signs(1, -2) == True\nassert opposite_signs(-10, -10) == False\nassert opposite_signs(-2, 2) == True\nassert opposite_signs(3, 2) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurrence(string):\n    count = 0\n    for i in string:\n        if i == 'std':\n            count += 1\n    return count\n\n# Test cases\ntest_cases = [\n    ('letstdlenstdporstd', 3),\n    ('truststdsolensporsd', 1),\n    ('makestdsostdworthit', 2)\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for input_str, expected_output in test_cases:\n        assert count_occurrence(input_str) == expected_output, f\"Test failed for input: {input_str}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1].strip():\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    # Initialize an empty set to store unique elements\n    result = set()\n    # Iterate through each sublist in the list of lists\n    for sublist in lst:\n        # Extend the set with elements from the sublist\n        result.update(sublist)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[8]]}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    return [elem] + lst + [elem]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Black"], "c"]], "plus_fail_tests": [[[], "hello"]]}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    # Check if the input is a list and if it contains a single string\n    if isinstance(string, list) and len(string) == 1:\n        string = string[0]\n    # Split the string into words and filter those with length >= 4\n    return \" \".join([word for word in string.split() if len(word) >= 4])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Please move back to stream"]], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: str\n    :return: str\n    \"\"\"\n    if not snake_str:\n        return snake_str\n    return snake_str[0].upper() + snake_str[1:].replace('_', '')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python_program"]], "plus_fail_tests": [["___python_program"]]}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "def multiply_num(nums):\n    return sum(nums) * len(nums)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[8, 2, 3, -1, 7]]], "plus_fail_tests": [[[100000, 2, 3]]]}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, sub_string):\n    for i in range(len(string_list)):\n        if sub_string in string_list[i]:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if num_str[i] == num_str[i-1] and num_str[i] == num_str[i+1]:\n            return False\n        if num_str[i] != num_str[i-1] and num_str[i] != num_str[i+1]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212121]], "plus_fail_tests": [[2121212121212121]]}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is octagonal\n    \"\"\"\n    return (n * (3 * n - 1)) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(n):\n    # Ensure n is a single number, not a list\n    if isinstance(n, list):\n        n = n[0]\n    root = math.ceil(math.sqrt(n))\n    return root ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "import math\ndef is_Sum_Of_Powers_Of_Two(n):\n    # If n is less than or equal to 0, it cannot be represented as a sum of non-zero powers of 2\n    if n <= 0:\n        return False\n\n    # Keep subtracting the largest power of 2 less than or equal to n\n    while n > 0:\n        # Find the largest power of 2 less than or equal to n\n        power = int(math.log(n, 2))\n        # Subtract that power of 2 from n\n        n -= 2 ** power\n\n    # If we have subtracted all powers of 2 and reached 0, n can be represented as a sum of non-zero powers of 2\n    return n == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[123456789]]}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(list1):\n    return sum(isinstance(x, int) for x in list1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    result = ''\n    for i, char in enumerate(string):\n        if i % 2 == 0:  # Corrected the condition to check for even indices\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if not arr:  # Check if the array is empty\n        return 0  # Return 0 for an empty array\n    return max(abs(a - b) for a, b in zip(arr, arr[1:]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[9, 3, 2, 5, 1]]], "plus_fail_tests": [[[1]]]}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    \"\"\"\n    Function to check if the given element is the majority element in the sorted array.\n    \"\"\"\n    # Get the first and last occurrence of the element\n    first_occurrence = first_occurrence(arr, 0, n-1, x)\n    if first_occurrence == -1:\n        return False\n    last_occurrence = last_occurrence(arr, 0, n-1, x)\n\n    # Check if the count of the element is more than n/2\n    if (last_occurrence - first_occurrence + 1) > n/2:\n        return True\n    else:\n        return False\ndef first_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the first occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first_occurrence(arr, mid+1, high, x)\n        else:\n            return first_occurrence(arr, low, mid-1, x)\n    return -1\ndef last_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the last occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == len(arr)-1 or x < arr[mid+1]) and arr[mid] == x:\n            return mid\n        elif x < arr[mid]:\n            return last_occurrence(arr, low, mid-1, x)\n        else:\n            return last_occurrence(arr, mid+1, high, x)\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 3, 3, 3, 10], 7, 3]], "plus_fail_tests": [[[], 0, 1]]}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4], []]]}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10]], "plus_fail_tests": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 3, 7]]}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    divisors = 1\n    for i in range(2, n + 1):  # Corrected the range to include n\n        if n % i == 0:\n            divisors += 1\n    return divisors", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    30\n    >>> sum_series(15)\n    45\n    \"\"\"\n    if n < 0:\n        return 0\n    return n * (n + 1) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[6]], "plus_fail_tests": [[1000000]]}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[true]]}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    :param matrix: list of lists\n    :return: bool\n    \"\"\"\n    # check if the matrix is a square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # check if the sum of each row is the same\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if row_sum != sum(row):\n            return False\n\n    # check if the sum of each column is the same\n    col_sum = sum(matrix[i][0] for i in range(len(matrix)))\n    for i in range(len(matrix)):\n        if col_sum != sum(matrix[j][i] for j in range(len(matrix))):\n            return False\n\n    # check if the sum of each diagonal is the same\n    diag_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    for i in range(len(matrix)):\n        if diag_sum != sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix))):\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if any duplicate element is found, False otherwise\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        if mid % 2 == 0:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        if mid % 2 == 0:\n            return search(arr[mid + 1:])\n        else:\n            return search(arr[:mid])\n    else:\n        return arr[mid]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 2, 3]]], "plus_fail_tests": [[[]]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "import math\ndef is_woodall(n):\n    if n < 1:\n        return False\n    k = int(math.log(n + 1, 2))\n    return 2**k * k - 1 == n", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[383]], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6  # Corrected the formula to calculate tetrahedral number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def largest_n(nums, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(nums, reverse=True)[:n]\n\n# Test cases\nassert set(largest_n([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])\nassert set(largest_n([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)) == set([100, 90, 80, 70, 60])\nassert set(largest_n([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)) == set([100, 90, 80])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not nested_list:\n        return []\n\n    result = set()\n    for lst in nested_list:\n        for item in lst:\n            if isinstance(item, list):\n                for sub_item in item:\n                    result.add(sub_item)\n            else:\n                result.add(item)\n\n    return list(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]], "plus_fail_tests": [[[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]]]}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    \"\"\"\n    This function takes a list of words and returns the length of the longest word.\n    \"\"\"\n    return max(len(word) for word in words)\n\n# Test the function\nassert len_longest_word([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_longest_word([\"small\", \"big\", \"tall\"]) == 5\nassert len_longest_word([\"a\", \"ab\", \"abc\"]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    # Check if the tuple has at least two elements\n    if len(tup) < 2:\n        return False\n    # Compare the types of the first two elements\n    if type(tup[0]) == type(tup[1]):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, "4"]]], "plus_fail_tests": [[[[], [1, 2, "3"], {"1": "one", "2": "two", "3": "three"}]]]}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Return the closest smaller number than n.\n    \"\"\"\n    return int(str(n - 1)[::-1])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[11]], "plus_fail_tests": [[-5]]}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "import math\ndef eulerian_num(n, m):\n    # A recursive function to find the Eulerian number A(n, m)\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if m == n-1:\n        return math.factorial(n-1)\n    return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3]], "plus_fail_tests": [[3, 2]]}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    # Sort the numbers in descending order\n    nums.sort(reverse=True)\n    # Construct the maximum number by concatenating the sorted numbers\n    max_num = int(''.join(str(num) for num in nums))\n    return max_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "import collections\ndef rotate_string(s, n):\n    double_s = s + s\n    return double_s[n:n+len(s)]\ndef odd_Equivalent(s, rotations):\n    counter = collections.Counter()\n    for i in range(rotations):\n        rotated_s = rotate_string(s, i)\n        counter[rotated_s] += 1\n    return sum(1 for key, value in counter.items() if int(key, 2) % 2 != 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["1010", 4]], "plus_fail_tests": [["10000100110011", 5]]}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(a):\n    return 4 * a", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    n = len(string)\n    for i in range(1, n):\n        if string[:i] == string[i:]:\n            return i\n    return n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaaa"]], "plus_fail_tests": [["aaaaaaaaaaa"]]}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count_true(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return lst.count(1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, -2, 3, -4]]], "plus_fail_tests": [[[0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10]]]}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    return string.replace(char, '', 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hello", "l"]], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def find_max(arr, n):\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\ndef pancake_sort(arr):\n    curr_size = len(arr)\n    while curr_size > 1:\n        max_index = find_max(arr, curr_size)\n        if max_index != curr_size - 1:\n            flip(arr, max_index)\n            flip(arr, curr_size - 1)\n        curr_size -= 1\n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 79, 25, 38, 69]]], "plus_fail_tests": [[[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            product = abs(tuples[i][0] * tuples[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[2, 7], [2, 6], [1, 8], [4, 9]]]], "plus_fail_tests": [[[[-10, 20], [15, -2], [-5, 10]]]]}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Bell number is a number of ways to partition a set of n elements.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n + 1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n    return bell_numbers[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "import math\ndef find_solution(a, b, n):\n    # Check if there are any solutions\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find one solution\n    def extended_gcd(aa, bb):\n        if aa == 0:\n            return (bb, 0, 1)\n        else:\n            g, x, y = extended_gcd(bb % aa, aa)\n            return (g, y - (bb // aa) * x, x)\n    \n    g, x, y = extended_gcd(a, b)\n    # Scale the solution to the specific value of n\n    x *= n // g\n    y *= n // g\n    \n    # Return the solution as a tuple\n    return (x, y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 3, 7]], "plus_fail_tests": [[25, 10, 500]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(complex_number):\n    # Ensure the input is a complex number\n    if isinstance(complex_number, tuple):\n        complex_number = complex(complex_number[0], complex_number[1])\n    return math.atan2(complex_number.imag, complex_number.real)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "import collections\ndef freq_count(list1):\n    # Flatten the list if it contains nested lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_count = collections.Counter(flat_list)\n    return freq_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]], "plus_fail_tests": [[[1, 1, 1, 1, 1]]]}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    it = iter(lst)\n    return all(any(x == y for y in it) for x in sublst)", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[2, 4, 3, 5, 7], [3, 7]]], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Sort the array\n    arr.sort()\n    # Return the kth element based on 1-based indexing\n    return arr[k-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12, 3, 5, 7, 19], 2]], "plus_fail_tests": [[[100, 99, 98, 97, 96], 5]]}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(a, b, c):\n    return (a * b * c) / 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 8, 6]], "plus_fail_tests": [[100, 50, 10]]}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    for i in range(len(text)):\n        if text[i].isalpha() and text[i].islower() and text[i] != \"_\":\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aab_cbbbc"]], "plus_fail_tests": [["a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z"]]}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "import heapq\ndef merge_sorted_list(*lists):\n    # Merge and sort the lists\n    merged_list = list(heapq.merge(*lists))\n    return merged_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]], "plus_fail_tests": [[[1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]]]}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(length):\n    return length * 5 + (length - 5) * 4 / 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[0]]}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * n * n - n) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 7\n    if n == 6:\n        return 11\n    if n == 7:\n        return 18\n    if n == 8:\n        return 29\n    if n == 9:\n        return 57\n    if n == 10:\n        return 88\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 832040\n    if n == 30:\n        return 1346269\n    if n == 31:\n        return 2178309  # Corrected value for n == 31", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])  # Sort by marks instead of subject names\n    return subjectmarks", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    occurrences = {}\n    for item in lst:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences\n\n# Test cases\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}\nassert check_occurrences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(13, 2): 1, (11, 23): 1, (12, 25): 1, (25, 12): 1, (16, 23): 1}\nassert check_occurrences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == {(4, 2): 1, (2, 4): 1, (3, 6): 1, (6, 3): 1, (7, 4): 1}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    # Check if the length of the word is even\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hadoop"]], "plus_fail_tests": [["a"]]}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    # Convert the number to a string to easily access individual digits\n    num_str = str(number)\n    # Calculate the alternating sum of digits\n    alt_sum = sum(int(digit) if i % 2 == 0 else -int(digit) for i, digit in enumerate(num_str))\n    # Check if the alternating sum is divisible by 11\n    return alt_sum % 11 == 0\n\n# Test cases\nassert is_divisible_by_11(12345) == False\nassert is_divisible_by_11(1212) == False\nassert is_divisible_by_11(1212112) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "from math import pi\ndef lateralsuface_cylinder(radius, height):\n    return 2 * pi * radius + 2 * pi * radius * height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 5]], "plus_fail_tests": [[0.5, 5]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_characters(string):\n    return len(string)\n\n# Test the function\nassert count_characters(\"python programming\") == 18\nassert count_characters(\"words\") == 5\nassert count_characters(\"language\") == 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    if len(arr) == 0:\n        return 0  # Handle the case where the array is empty\n    return zero_count / len(arr)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["xbcefg"]], "plus_fail_tests": [["xyzXYZ"]]}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    max_diff = 0\n    for i in range(len(tuples) - 1):\n        max_diff = max(max_diff, tuples[i + 1][1] - tuples[i][0])\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(a, x):\n    return a.count(x) + x.count(a)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3], 4]], "plus_fail_tests": [[[], 1]]}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def is_perfect_square(num):\n    for i in range(1, int(num**0.5) + 1):\n        diff = num - i**2\n        if diff >= 0 and int(diff**0.5)**2 == diff:\n            return True\n    return False\n\n# Test cases", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import math\ndef convert(z):\n    return (abs(z), math.atan2(z.imag, z.real))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tup, x): \n    return tup.count(x)*2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10]], "plus_fail_tests": [[[5, 10, 15, 20, 25, 30], 15]]}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] < matrix[j][i]:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]], "plus_fail_tests": [[[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4]]]]}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words if len(word) > n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, "python is a programming language"]], "plus_fail_tests": [[0, "abc  def  ghi  jklm  nopqrs   tuvwxyz"]]}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    # Check if the array is empty or has one element, which is trivially monotonic\n    if len(arr) <= 1:\n        return True\n    \n    # Determine if the array is non-decreasing or non-increasing\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    \n    # The array is monotonic if it is either non-decreasing or non-increasing\n    return increasing or decreasing\n\n# Test cases\nassert is_monotonic([1, 2, 2, 3]) == True\nassert is_monotonic([1, 3, 2]) == False\nassert is_monotonic([6, 5, 4, 4]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K != 0 for ele in sub)]\n    return res", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6]], "plus_fail_tests": [[[[12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 3]]}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2 and i <= m:\n            count += get_total_number_of_sequences(i, n-1)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[100, 10]]}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(xs):\n    assert len(xs) > 0, 'invalid inputs'  # Corrected the condition to check if the list is not empty\n    return min(xs)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    \n    return \"\".join(s_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_dict:\n            pattern_dict[colors[i]] = patterns[i]\n        elif pattern_dict[colors[i]] != patterns[i]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "greenn"], ["a", "b", "b"]]], "plus_fail_tests": [[[], ["a", "b", "c"]]]}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "import collections as ct\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Correctly merge three dictionaries using ChainMap\n    merged_dict = dict(ct.ChainMap(dict1, dict2, dict3))\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [i**2 for i in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Convert the input to an integer if it's not already\n    num = int(num)\n    rev = 0\n    temp = num  # Use a temporary variable to keep the original number\n    while temp > 0:\n        rev = rev * 10 + temp % 10\n        temp = temp // 10\n    return rev == num * 2 - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[73]], "plus_fail_tests": [[73]]}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(r):\n    # Ensure r is a single number, not a list\n    if isinstance(r, list):\n        r = r[0]\n    return 4.0 / 3.0 / math.pi * r ** 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[3.5]]}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    return ''.join(set(string1) - set(string2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["probasscurve", "pros"]], "plus_fail_tests": [["The quick brown fox jumps over the lazy dog", "fox"]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    # Initialize min_length to a very large number\n    min_length = float('inf')\n    \n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Update min_length if the current list's length is smaller\n        if len(lst) < min_length:\n            min_length = len(lst)\n    \n    # Return the minimum length found\n    return min_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(text):\n    # Ensure the input is a string\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Strip leading and trailing whitespace\n    text = text.strip()\n    \n    # Check if the text is a digit\n    return text.isdigit()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "from heapq import heapify, nlargest\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: number of largest numbers to return\n    :return: list of n largest numbers\n    \"\"\"\n    return nlargest(n, nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if len(tuples) == 0:\n        return True\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if len(tuples[i]) != len(tuples[j]):\n                return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    n = len(lst)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        shrink *= 0.9\n        sorted = True\n        for i in range(1, n):\n            if lst[i - 1] > lst[i]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n                sorted = False\n        for i in range(0, n - 1):\n            if abs(lst[i] - lst[i + 1]) > shrink:\n                sorted = False\n                j = i - 1\n                while j >= 0 and lst[j] > lst[i]:\n                    lst[j + 1], lst[j] = lst[j], lst[j + 1]\n                    j -= 1\n                if j != i - 1:\n                    sorted = False\n    return lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 15, 37, 25, 79]]], "plus_fail_tests": [[[500, 1000, 1500, 2000, 3000]]]}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray\n            # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\ndef get_Inv_Count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += get_Inv_Count(arr, temp_arr, left, mid)\n        inv_count += get_Inv_Count(arr, temp_arr, mid + 1, right)\n\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 20, 6, 4, 5]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    result = tuple()\n    for i in range(len(tuple1)):\n        result += (tuple1[i] - tuple2[i],)\n    return result\n\n# Test cases\nassert subtract_elements((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\nassert subtract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(test_list):\n    # Convert each sublist to a tuple since tuples are hashable\n    test_list = [tuple(sublist) for sublist in test_list]\n    return len(test_list) != len(set(test_list))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[1, 2, 3, 4, 1]]]}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(k):\n    # Ensure the input is a single character string\n    if isinstance(k, list) and len(k) == 1:\n        k = k[0]\n    return ord(k)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[67]]}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    # Start with the first odd number\n    odd_number = 1\n    # Loop n times to get the first n odd numbers\n    for _ in range(n):\n        # Add the square of the current odd number to the sum\n        sum_of_squares += odd_number ** 2\n        # Move to the next odd number\n        odd_number += 2\n    # Return the calculated sum of squares\n    return sum_of_squares\n\n# Test cases to verify the correctness of the function\nassert square_sum(2) == 10\nassert square_sum(3) == 35\nassert square_sum(4) == 84", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(l, L):\n    return ([l[:L], l[L:]])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9], 0]]}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, m):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k == 1:\n        return max(arr)\n\n    for i in range(1, k):\n        for j in range(len(arr)):\n            arr[j] = arr[j] + arr[j]\n\n    max_sum = 0\n    for i in range(len(arr)):\n        if i + m < len(arr):\n            max_sum = max(max_sum, sum(arr[i:i + m]))\n        else:\n            max_sum = max(max_sum, sum(arr[i:]))\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 20, -30, -1], 4, 3]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Check if the tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform division element-wise\n    result = [x / y for x, y in zip(tuple1, tuple2)]\n    \n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    # Calculate the sum of even numbers in the list\n    sum_even = sum([i for i in lst if i % 2 == 0])\n    # Calculate the sum of elements at even indices\n    sum_even_index = sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\n    # Return the sum of both calculated sums\n    return sum_even + sum_even_index", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 6, 12, 1, 18, 8]]], "plus_fail_tests": [[[2]]]}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    # Corrected the logical operator from 'or' to 'and' to ensure both conditions must be true\n    if (text.count('a') == 1 and text.count('b') == 2) and (text.count('a') == 1 and text.count('b') == 3):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["abbbba"]], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += 1\n        else:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[1, 2, 3, [4, 5], 6, 7]]]}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(opposite, adjacent):\n    hypotenuse = math.sqrt(opposite**2 + adjacent**2)\n    return round(hypotenuse, 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7, 8]], "plus_fail_tests": [[2.5, 3.5]]}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return human_age * 7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[100]]}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(dlist, item):\n    if item in dlist:\n        return True, dlist.index(item)\n    else:\n        return False, -2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 10]]}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def even_binomial_coeff_sum(n):\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    \n    return sum\n\n# Test cases\nassert even_binomial_coeff_sum(6) == 32\nassert even_binomial_coeff_sum(2) == 2\nassert even_binomial_coeff_sum(4) == 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    # Extract the second element from each tuple in the list\n    return [i[1] for i in lst[0]]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, "Rash", 21], [2, "Varsha", 20], [3, "Kil", 19]]]], "plus_fail_tests": [[[]]]}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    # Initialize the sum of squares to zero\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the square of the current even number and add it to the sum\n        sum_of_squares += (2 * i) ** 2\n    \n    # Return the calculated sum of squares\n    return sum_of_squares\n\n# Test cases to verify the correctness of the function\nassert square_sum(2) == 20\nassert square_sum(3) == 56\nassert square_sum(4) == 120", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(num):\n    if num < 0:\n        return False\n    \n    count = 0\n    while num > 0:\n        count += 1\n        num = num // 10\n    \n    for i in str(num):\n        if int(i) > count:\n            return False\n    \n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[51241]], "plus_fail_tests": [[9876543210]]}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (7 * n - 5)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Initialize max_val with the first element of the list\n    max_val = lst[0]\n    # Iterate through each element in the list\n    for i in lst:\n        # Check if the current element is greater than the current max_val\n        if i > max_val:\n            # Update max_val if the current element is greater\n            max_val = i\n    # Return the maximum value found\n    return max_val", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[[1, "2", true, 3.14, ["a", "b"], [5, 6, 7], {"8": "eight", "9": "nine"}, "Python", 10, 11, 12]]]}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:  # Check if the list is empty\n        return 0, []\n    max_length = 0\n    max_list = []\n    for i in list_of_lists:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_length, max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def filter_dict(d, n):\n    return {k: v for k, v in d.items() if v >= n}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    # Initialize the first star number\n    star_num = 1\n    # Initialize the count of star numbers found\n    count = 1\n    # Initialize the last number used to calculate the next star number\n    last_num = 1\n\n    # Loop until we find the n'th star number\n    while count < n:\n        # Calculate the next star number\n        next_num = last_num + (count + 1)\n        # Update the last number used\n        last_num = next_num\n        # Increment the count of star numbers found\n        count += 1\n        # Update the star number\n        star_num = next_num\n\n    return star_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    if element in lst:\n        return False\n    else:\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["green", "orange", "black", "white"], "blue"]], "plus_fail_tests": [[["a", "a", "a", "a", "a"], "a"]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through numbers from 0 to n-1\n    for i in range(0, n):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Add the fifth power of the number to the sum\n            sum += i ** 5\n    # Return the calculated sum\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[10]]}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(tup1, tup2):\n    return tuple(max(pair1, pair2) for pair1, pair2 in zip(tup1, tup2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "import sympy\ndef newman_prime(n):\n    def nswp(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return 2 * nswp(k - 1) + nswp(k - 2)\n\n    count = 0\n    k = 0\n    while True:\n        candidate = nswp(k)\n        if sympy.isprime(candidate):\n            count += 1\n            if count == n:\n                return candidate\n        k += 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(n, m):\n    return (n // m) + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 3]], "plus_fail_tests": [[0, 5]]}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    # Ensure side_length is an integer or float\n    if not isinstance(side_length, (int, float)):\n        raise ValueError(\"side_length must be a number\")\n    \n    # Calculate the lateral surface area of a cube\n    return 4 * side_length ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "import itertools\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}]}}