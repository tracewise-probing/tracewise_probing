{"date": "2025-05-19 00:13", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [i**2 for i in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "import heapq\ndef index_minimum(lst):\n    \"\"\"\n    Returns the index of the tuple with the smallest second value in the given list of tuples.\n    \"\"\"\n    # Find the tuple with the smallest second value\n    min_tuple = min(lst, key=lambda x: x[1])\n    # Return the index of this tuple in the original list\n    return lst.index(min_tuple)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Rash", 143], ["Manjeet", 200], ["Varsha", 100]]]], "plus_fail_tests": [[[["John", 100]]]]}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    return ''.join(set(string1) - set(string2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["probasscurve", "pros"]], "plus_fail_tests": [["The quick brown fox jumps over the lazy dog", "fox"]]}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_signs(a, b):\n    # Check if the product of a and b is less than 0\n    if a * b < 0:\n        return True\n    else:\n        return False\n\n# Test cases\nassert opposite_signs(1, -2) == True\nassert opposite_signs(-10, -10) == False\nassert opposite_signs(-2, 2) == True\nassert opposite_signs(3, 2) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(xs):\n    assert len(xs) > 0, 'invalid inputs'  # Corrected the condition to check if the list is not empty\n    return min(xs)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    n = len(string)\n    for i in range(1, n):\n        if string[:i] == string[i:]:\n            return i\n    return n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaaa"]], "plus_fail_tests": [["aaaaaaaaaaa"]]}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if num_str[i] == num_str[i-1] and num_str[i] == num_str[i+1]:\n            return False\n        if num_str[i] != num_str[i-1] and num_str[i] != num_str[i+1]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212121]], "plus_fail_tests": [[2121212121212121]]}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "import math\ndef is_woodall(n):\n    if n < 1:\n        return False\n    k = int(math.log(n + 1, 2))\n    return 2**k * k - 1 == n", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[383]], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[0])\n    return subjectmarks", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["English", 88], ["Science", 90], ["Maths", 97], ["Social sciences", 82]]]], "plus_fail_tests": [[[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]]]}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Convert the input to an integer if it's not already\n    num = int(num)\n    rev = 0\n    temp = num  # Use a temporary variable to keep the original number\n    while temp > 0:\n        rev = rev * 10 + temp % 10\n        temp = temp // 10\n    return rev == num * 2 - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[73]], "plus_fail_tests": [[73]]}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(r):\n    # Ensure r is a single number, not a list\n    if isinstance(r, list):\n        r = r[0]\n    return 4.0 / 3.0 / math.pi * r ** 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[3.5]]}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return lst.count(1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, -2, 3, -4]]], "plus_fail_tests": [[[0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10]]]}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is octagonal\n    \"\"\"\n    return (n * (3 * n - 1)) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    max_diff = 0\n    for i in range(len(tuples) - 1):\n        max_diff = max(max_diff, tuples[i + 1][0] - tuples[i][1])\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if any duplicate element is found, False otherwise\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 7\n    if n == 6:\n        return 11\n    if n == 7:\n        return 18", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    # Convert the number to a string to easily access individual digits\n    num_str = str(number)\n    # Calculate the alternating sum of digits\n    alt_sum = sum(int(digit) if i % 2 == 0 else -int(digit) for i, digit in enumerate(num_str))\n    # Check if the alternating sum is divisible by 11\n    return alt_sum % 11 == 0\n\n# Test cases\nassert is_divisible_by_11(12345) == False\nassert is_divisible_by_11(1212) == False\nassert is_divisible_by_11(1212112) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6  # Corrected the formula to calculate tetrahedral number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * n * n - n) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, sub_string):\n    for i in range(len(string_list)):\n        if string_list[i] == sub_string:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "black", "white", "green", "orange"], "ack"]], "plus_fail_tests": [[["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], ""]]}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    it = iter(lst)\n    return all(any(x == y for y in it) for x in sublst)", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[2, 4, 3, 5, 7], [3, 7]]], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    # Check if the array is empty or has one element, which is trivially monotonic\n    if len(arr) <= 1:\n        return True\n    \n    # Determine if the array is non-decreasing or non-increasing\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    \n    # The array is monotonic if it is either non-decreasing or non-increasing\n    return increasing or decreasing\n\n# Test cases\nassert is_monotonic([1, 2, 2, 3]) == True\nassert is_monotonic([1, 3, 2]) == False\nassert is_monotonic([6, 5, 4, 4]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    # Check if the input is a list and if it contains a single string\n    if isinstance(string, list) and len(string) == 1:\n        string = string[0]\n    # Split the string into words and filter those with length >= 4\n    return \" \".join([word for word in string.split() if len(word) >= 4])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Please move back to stream"]], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[true]]}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    for i in range(len(text)):\n        if text[i].isalpha() and text[i].islower() and text[i] != \"_\":\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aab_cbbbc"]], "plus_fail_tests": [["a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z"]]}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    max_num = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                # Corrected the order of multiplication to form the largest number\n                if nums[i] * 100 + nums[j] * 10 + nums[k] > max_num:\n                    max_num = nums[i] * 100 + nums[j] * 10 + nums[k]\n    return max_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[9, 3, 2, 1]]]}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] < matrix[j][i]:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]], "plus_fail_tests": [[[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4]]]]}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(a, b, c):\n    return (a * b * c) / 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 8, 6]], "plus_fail_tests": [[100, 50, 10]]}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Bell number is a number of ways to partition a set of n elements.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n + 1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n    return bell_numbers[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(a):\n    return 4 * a", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    \"\"\"\n    This function takes a list of words and returns the length of the longest word.\n    \"\"\"\n    return max(len(word) for word in words)\n\n# Test the function\nassert len_longest_word([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_longest_word([\"small\", \"big\", \"tall\"]) == 5\nassert len_longest_word([\"a\", \"ab\", \"abc\"]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_dict:\n            pattern_dict[colors[i]] = patterns[i]\n        elif pattern_dict[colors[i]] != patterns[i]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "greenn"], ["a", "b", "b"]]], "plus_fail_tests": [[[], ["a", "b", "c"]]]}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "from heapq import heapify, nlargest\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: number of largest numbers to return\n    :return: list of n largest numbers\n    \"\"\"\n    return nlargest(n, nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    # Check if the length of the word is even\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hadoop"]], "plus_fail_tests": [["a"]]}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if len(tuples) == 0:\n        return True\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if len(tuples[i]) != len(tuples[j]):\n                return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K != 0 for ele in sub)]\n    return res", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6]], "plus_fail_tests": [[[[12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 3]]}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "import collections as ct\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Correctly merge three dictionaries using ChainMap\n    merged_dict = dict(ct.ChainMap(dict1, dict2, dict3))\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "import collections\ndef freq_count(list1):\n    # Flatten the list if it contains nested lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_count = collections.Counter(flat_list)\n    return freq_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]], "plus_fail_tests": [[[1, 1, 1, 1, 1]]]}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Return the closest smaller number than n.\n    \"\"\"\n    return int(str(n - 1)[::-1])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[11]], "plus_fail_tests": [[-5]]}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def is_perfect_square(num):\n    for i in range(1, int(num**0.5) + 1):\n        diff = num - i**2\n        if diff >= 0 and int(diff**0.5)**2 == diff:\n            return True\n    return False\n\n# Test cases", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    return string.replace(char, '', 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hello", "l"]], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    n = len(lst)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        shrink *= 0.9\n        sorted = True\n        for i in range(1, n):\n            if lst[i - 1] > lst[i]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n                sorted = False\n        for i in range(0, n - 1):\n            if abs(lst[i] - lst[i + 1]) > shrink:\n                sorted = False\n                j = i - 1\n                while j >= 0 and lst[j] > lst[i]:\n                    lst[j + 1], lst[j] = lst[j], lst[j + 1]\n                    j -= 1\n                if j != i - 1:\n                    sorted = False\n    return lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 15, 37, 25, 79]]], "plus_fail_tests": [[[500, 1000, 1500, 2000, 3000]]]}]}}