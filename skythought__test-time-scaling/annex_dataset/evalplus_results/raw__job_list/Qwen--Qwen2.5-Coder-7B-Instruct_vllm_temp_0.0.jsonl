{"task_id": "Mbpp/3", "solution": "def is_not_prime(num):\n    if num <= 1:\n        return True\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "from heapq import heapify, nlargest\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: number of largest numbers to return\n    :return: list of n largest numbers\n    \"\"\"\n    return nlargest(n, nums)"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    # Split the string into words\n    words = string.split()\n    # Filter words that are 4 characters or longer\n    long_words = [word for word in words if len(word) >= 4]\n    # Join the filtered words with a space\n    return \" \".join(long_words)"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [i**2 for i in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    n = len(string)\n    for i in range(1, n):\n        if string[:i] == string[i:]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate over each character in the string\n    for c in string:\n        # Check if the character is not the one to be removed\n        if c != char:\n            # Append the character to the result string\n            result += c\n    # Return the modified string\n    return result"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] < matrix[j][i]:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(a, b, c):\n    # The formula for the volume of a rectangular prism is length * width * height\n    # The given formula is for the volume of a pyramid, which is (length * width * height) / 3\n    # To correct the program, we need to remove the division by 3\n    return a * b * c"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    for i in range(len(text)):\n        if text[i].isalpha() and text[i].islower() and text[i] != \"_\":\n            return False\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(a):\n    return 4 * a"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    # Convert both strings to sets to remove duplicates and perform set difference\n    set1 = set(string1)\n    set2 = set(string2)\n    # Use set difference to remove characters from string1 that are present in string2\n    result_set = set1 - set2\n    # Join the resulting set back into a string and return\n    return ''.join(result_set)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if any duplicate element is found, False otherwise\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "import math\ndef is_woodall(n):\n    if n < 1:\n        return False\n    k = int(math.log2(n + 1))  # Corrected the log base to 2\n    return 2**k * k - 1 == n"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    rev = 0\n    temp = num  # Store the original number for comparison\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev == temp * 2 - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    # Initialize max_num to the smallest possible value\n    max_num = float('-inf')\n    # Iterate through all possible combinations of three numbers\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                # Calculate the three-digit number and update max_num if it's greater\n                current_num = nums[i] * 100 + nums[j] * 10 + nums[k]\n                if current_num > max_num:\n                    max_num = current_num\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(a, b):\n    # Check if the product of a and b is negative\n    if a * b < 0:\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert opposite_signs(1, -2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is octagonal\n    \"\"\"\n    return (n * (3 * n - 1)) % 2 == 0 and (n * (3 * n - 1)) // 2 > 0"}
{"task_id": "Mbpp/61", "solution": "def count_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                count += 1\n    return count\n\n# Test the function"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(xs):\n    assert len(xs) > 0, 'invalid inputs'  # Corrected the condition to check if the list is not empty\n    return min(xs)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n    # Sort the tuples based on the first element of each tuple\n    tuples.sort(key=lambda x: x[0])\n    # Initialize the maximum difference to 0\n    max_diff = 0\n    # Iterate through the sorted list of tuples\n    for i in range(len(tuples) - 1):\n        # Calculate the difference between the first element of the next tuple and the second element of the current tuple\n        current_diff = tuples[i + 1][0] - tuples[i][1]\n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, current_diff)\n    # Return the maximum difference found\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def correct_program(subjectmarks):\n    # Sort the list of tuples based on the second element (marks) in descending order\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks\n\n# Test the function with the provided test case\ntest_case = [['English', 88], ['Science', 90], ['Maths', 97], ['Social sciences', 82]]\ncorrected_output = correct_program(test_case)"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    if isinstance(lst[0], list):\n        return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])\n    return lst[0] + recursive_list_sum(lst[1:])"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return lst.count(1)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Bell number is a number of ways to partition a set of n elements.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 1\n    for i in range(1, n + 1):\n        bell_numbers[i] = sum(bell_numbers[j] * bell_numbers[i - j - 1] for j in range(i))\n    return bell_numbers[n]"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    # Check if the array is empty or has one element, which is trivially monotonic\n    if len(arr) <= 1:\n        return True\n    \n    # Determine if the array is non-decreasing or non-increasing\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    \n    # The array is monotonic if it is either non-decreasing or non-increasing\n    return increasing or decreasing\n\n# Test the function with the provided test case\nassert is_monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    it = iter(lst)\n    return all(any(x == y for y in it) for x in sublst)"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if len(tuples) == 0:\n        return True\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if len(tuples[i]) != len(tuples[j]):\n                return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    n = len(lst)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        shrink = shrink * 0.9\n        sorted = True\n        for i in range(1, n):\n            if lst[i - 1] > lst[i]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n                sorted = False\n        for i in range(0, n - 1):\n            if abs(lst[i] - lst[i + 1]) > shrink:\n                sorted = False\n                j = i - 1\n                while j >= 0 and lst[j] > lst[i]:\n                    lst[j + 1], lst[j] = lst[j], lst[j + 1]\n                    j -= 1\n                if j != i - 1:\n                    sorted = False\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def correct_dif_Square(num):\n    for i in range(1, int(num**0.5) + 1):\n        diff = num - i**2\n        if diff >= 0 and int(diff**0.5)**2 == diff:\n            return True\n    return False\n\n# Test the function with the provided test case"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_dict:\n            pattern_dict[colors[i]] = patterns[i]\n        elif pattern_dict[colors[i]] != patterns[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(test_list, K):\n    # Corrected the condition to check if any element is divisible by K\n    res = [sub for sub in test_list if any(ele % K == 0 for ele in sub)]\n    return res\ntest_list = [[6, 24, 12], [7, 9, 6], [12, 18, 21]]\nK = 6"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    # Check if the number is divisible by 11\n    return number % 11 == 0\n\n# Test the function with the provided test case\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    # Check if the length of the word is even\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(r):\n    # Corrected the formula to calculate the volume of a sphere\n    return (4.0 / 3.0) * math.pi * r ** 3\nr = 10"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 7\n    if n == 6:\n        return 11\n    if n == 7:\n        return 18\n    if n == 8:\n        return 29\n    if n == 9:\n        return 57\n    if n == 10:\n        return 88\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 832040\n    if n == 30:\n        return 1346269\n    if n == 31:\n        return 2178309  # Corrected value for n == 31"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2\nr = 10"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * n * n - n) // 2"}
{"task_id": "Mbpp/87", "solution": "import collections as ct\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Correctly merge the dictionaries using ChainMap\n    merged_dict = dict(ct.ChainMap(dict1, dict2, dict3))\n    return merged_dict\ndict1 = {'R': 'Red', 'P': 'Pink'}\ndict2 = {'G': 'Green'}\ndict3 = {'O': 'Orange', 'W': 'White', 'B': 'Black'}"}
{"task_id": "Mbpp/88", "solution": "import collections\ndef freq_count(list1):\n    # Correct the bug by counting the frequency of each element in the list\n    freq_count = collections.Counter(list1)\n    return freq_count"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Return the closest smaller number than n.\n    \"\"\"\n    return int(str(n - 1)[::-1])"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    \"\"\"\n    This function takes a list of words and returns the length of the longest word.\n    \"\"\"\n    if not words:  # Check if the list is empty\n        return 0  # Return 0 for an empty list\n    return max(len(word) for word in words)\n\n# Test the function\nassert len_longest_word([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_longest_word([\"hello\", \"world\"]) == 5\nassert len_longest_word([\"a\", \"ab\", \"abc\"]) == 3\nassert len_longest_word([]) == 0  # Test with an empty list"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, sub_string):\n    # Iterate through each string in the list\n    for s in string_list:\n        # Check if the current string contains the substring\n        if sub_string in s:\n            return True\n    # Return False if the substring is not found in any string\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if num_str[i] == num_str[i-1] and num_str[i] == num_str[i+1]:\n            return False\n        if num_str[i] != num_str[i-1] and num_str[i] != num_str[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "import heapq\ndef index_minimum(lst):\n    \"\"\"\n    Returns the index of the tuple with the smallest second value in the given list of tuples.\n    \"\"\"\n    # Find the tuple with the smallest second value\n    min_tuple = min(lst, key=lambda x: x[1])\n    # Return the index of this tuple in the original list\n    return lst.index(min_tuple)"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    # Initialize min_length to a very large number\n    min_length = float('inf')\n    \n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Update min_length if the current list's length is smaller\n        if len(lst) < min_length:\n            min_length = len(lst)\n    \n    # Return the smallest length found\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    divisors = 1\n    for i in range(2, n + 1):  # Corrected the range to include n\n        if n % i == 0:\n            divisors += 1\n    return divisors"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(nums):\n    return sum(nums) * len(nums)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    else:\n        return decimal_to_binary(num // 2) + str(num % 2)"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Convert the number to a string to check for palindrome\n    str_n = str(n)\n    # Start checking from the next number\n    for i in range(n + 1, 10**len(str_n) + 1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            return i"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Sort the array\n    arr.sort()\n    # Return the kth element based on 1-based indexing\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: str\n    :return: str\n    \"\"\"\n    if not snake_str:\n        return snake_str\n    return snake_str[0].upper() + ''.join(word.capitalize() for word in snake_str.split('_'))"}
{"task_id": "Mbpp/103", "solution": "import math\ndef eulerian_num(n, m):\n    # A recursive function to find the Eulerian number A(n, m)\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if m == n-1:\n        return math.factorial(n-1)\n    return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    # Sort each sublist based on the first element\n    return sorted(lst, key=lambda x: x[0])"}
{"task_id": "Mbpp/105", "solution": "def count_true(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list_1, list_2):\n    return list_1 + list_2"}
{"task_id": "Mbpp/108", "solution": "import heapq\ndef merge_sorted_list(list1, list2, list3):\n    # Merge and sort the lists\n    merged_list = list(heapq.merge(list1, list2, list3))\n    return merged_list\nlist1 = [25, 24, 15, 4, 5, 29, 110]\nlist2 = [19, 20, 11, 56, 25, 233, 154]\nlist3 = [24, 26, 54, 48]"}
{"task_id": "Mbpp/109", "solution": "import collections\ndef rotate_string(s, n):\n    double_s = s + s\n    return double_s[n:n+len(s)]\ndef odd_Equivalent(s, rotations):\n    counter = collections.Counter()\n    for i in range(rotations):\n        rotated_s = rotate_string(s, i)\n        # Convert the rotated string to an integer assuming it's in binary\n        num = int(rotated_s, 2)\n        # Check if the number is odd\n        if num % 2 != 0:\n            counter[rotated_s] += 1\n    # Return the sum of values where the key (rotated string) is odd\n    return sum(value for key, value in counter.items() if int(key, 2) % 2 != 0)"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not nested_list:\n        return []\n\n    # Initialize the result set with the first list's elements\n    result = set(nested_list[0])\n\n    # Intersect the result with each subsequent list\n    for lst in nested_list[1:]:\n        result.intersection_update(lst)\n\n    return list(result)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(text):\n    text = text.strip()\n    if text[0] == '-':  # Check if the first character is a negative sign\n        text = text[1:]  # Remove the negative sign for further processing\n    return text.isdigit()  # Check if the remaining text is a digit"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    # Convert each element in the tuple to an integer and then sum them up\n    return sum(int(element) for element in tup)"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string): \n    return string.split(\" \", 1)"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        if mid % 2 == 0:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        if mid % 2 == 0:\n            return search(arr[mid + 1:])\n        else:\n            return search(arr[:mid])\n    else:\n        return arr[mid]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    # Initialize max_product to a very small number to ensure any product is larger\n    max_product = float('-inf')\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            # Calculate the product of the first element of the first tuple and the second element of the second tuple\n            product = abs(tuples[i][0] * tuples[j][1])\n            # Update max_product if the current product is greater\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(complex_number):\n    # Check if the complex number is zero\n    if complex_number == 0:\n        return 0\n    else:\n        return math.atan2(complex_number.imag, complex_number.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    for i in range(len(binary_string)):\n        for j in range(i+1, len(binary_string)+1):\n            sub_str = binary_string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    # Initialize the sum of common divisors\n    common_divisor_sum = 0\n    # Iterate through all possible divisors up to the minimum of num1 and num2\n    for i in range(1, min(num1, num2) + 1):\n        # Check if i is a divisor of both num1 and num2\n        if num1 % i == 0 and num2 % i == 0:\n            # Add the divisor to the sum\n            common_divisor_sum += i\n    # Return the total sum of common divisors\n    return common_divisor_sum\n\n# Test the function with the provided test case\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    # Initialize the result to 0\n    result = 0\n    \n    # Handle the case where either a or b is 0\n    if a == 0 or b == 0:\n        return 0\n    \n    # Handle negative numbers by converting them to positive\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    \n    # Perform multiplication using repeated addition\n    for _ in range(b):\n        result += a\n    \n    return result"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    # Filter words where the length of the word is greater than n\n    return [word for word in words if len(word) > n]\nn = 3\nwords = ['python', 'is', 'a', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    :param matrix: list of lists\n    :return: bool\n    \"\"\"\n    # check if the matrix is a square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # check if the sum of each row is the same\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if row_sum != sum(row):\n            return False\n\n    # check if the sum of each column is the same\n    col_sum = sum(matrix[0][i] for i in range(len(matrix)))\n    for i in range(len(matrix)):\n        if col_sum != sum(matrix[j][i] for j in range(len(matrix))):\n            return False\n\n    # check if the sum of each diagonal is the same\n    diag_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    for i in range(len(matrix)):\n        if diag_sum != sum(matrix[i][j] for j in range(len(matrix)) if i == j):\n            return False\n\n    # check if the sum of each anti-diagonal is the same\n    anti_diag_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    for i in range(len(matrix)):\n        if anti_diag_sum != sum(matrix[i][j] for j in range(len(matrix)) if i + j == len(matrix) - 1):\n            return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    \n    # Find the element with the maximum count\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_s = [c for c in s if c in vowels]\n    result = []\n    vowel_index = 0\n    for char in s:\n        if char in vowels:\n            result.append(vowels_in_s[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    return \"\".join(result)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup1):\n  return ''.join(tup1 * 2)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    return sum(x for x in nums if x < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    return (n * (2 * n - 1)) // 3"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    if len(arr) == 0:\n        return 0  # Handle the case where the array is empty\n    return zero_count / len(arr)"}
{"task_id": "Mbpp/138", "solution": "import math\ndef is_Sum_Of_Powers_Of_Two(n):\n    # If n is less than or equal to 0, it cannot be represented as a sum of non-zero powers of 2\n    if n <= 0:\n        return False\n\n    # Keep subtracting the largest power of 2 less than or equal to n\n    while n > 0:\n        # Find the largest power of 2 less than or equal to n\n        power = int(math.log2(n))\n        # Subtract that power of 2 from n\n        n -= 2 ** power\n\n    # If we have subtracted all powers of 2 and reached 0, n can be represented as a sum of non-zero powers of 2\n    return n == 0"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\nradius = 10"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in lst for item in sublist]\n    # Convert the flattened list to a set to remove duplicates\n    unique_elements = set(flattened_list)\n    return unique_elements"}
{"task_id": "Mbpp/141", "solution": "import functools\ndef find_max(arr, n):\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\ndef pancake_sort(arr):\n    curr_size = len(arr)\n    while curr_size > 1:\n        max_index = find_max(arr, curr_size)\n        if max_index != curr_size - 1:\n            flip(arr, max_index)\n            flip(arr, curr_size - 1)\n        curr_size -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\nlist2 = [2, 2, 3, 1, 2, 6, 7, 9]\nlist3 = [2, 1, 3, 1, 2, 6, 7, 9]"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if not arr or len(arr) < 2:\n        return 0\n    return max(abs(a - b) for a, b in zip(arr, arr[1:]))"}
{"task_id": "Mbpp/160", "solution": "import math\ndef find_solution(a, b, n):\n    # Check if there are any solutions\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find one solution\n    def extended_gcd(aa, bb):\n        if aa == 0:\n            return (bb, 0, 1)\n        else:\n            g, x, y = extended_gcd(bb % aa, aa)\n            return (g, y - (bb // aa) * x, x)\n    \n    g, x, y = extended_gcd(a, b)\n    # Scale the solution to the specific value of n\n    x *= n // g\n    y *= n // g\n    \n    # Ensure the solution is positive\n    if x < 0:\n        x += b // gcd\n    if y < 0:\n        y += a // gcd\n    \n    # Return the solution as a tuple\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = [2, 4, 6, 8]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the first n natural numbers.\n    It is designed to pass the following test cases:\n    >>> sum_series(6)\n    21\n    >>> sum_series(10)\n    55\n    >>> sum_series(15)\n    120\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)"}
{"task_id": "Mbpp/168", "solution": "def frequency(a, x):\n    return a.count(x) + x.count(a)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    # Ensure the start and end indices are within the bounds of the list\n    if start < 0 or end > len(lst) or start > end:\n        raise ValueError(\"Invalid start or end index\")\n    # Calculate the sum of the elements in the specified range\n    return sum(lst[start:end])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(length):\n    return length * 5"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(string):\n    count = 0\n    for i in range(len(string) - 2):  # Adjusted the range to avoid index out of range error\n        if string[i:i+3] == 'std':  # Corrected the substring comparison\n            count += 1\n    return count\n\n# Test the function with the provided test case\ntest_string = 'letstdlenstdporstd'"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    # Check if the tuple has exactly two elements\n    if len(tup) != 2:\n        raise ValueError(\"Input tuple must contain exactly two elements\")\n    \n    # Check if both elements are of the same type\n    if type(tup[0]) == type(tup[1]):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    \"\"\"\n    Function to check if the given element is the majority element in the sorted array.\n    \"\"\"\n    # Get the first and last occurrence of the element\n    first_occurrence = first_occurrence(arr, 0, n-1, x)\n    if first_occurrence == -1:\n        return False\n    last_occurrence = last_occurrence(arr, 0, n-1, x)\n\n    # Check if the count of the element is more than n/2\n    if (last_occurrence - first_occurrence + 1) > n//2:\n        return True\n    else:\n        return False\ndef first_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the first occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first_occurrence(arr, mid+1, high, x)\n        else:\n            return first_occurrence(arr, low, mid-1, x)\n    return -1\ndef last_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the last occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == len(arr)-1 or x < arr[mid+1]) and arr[mid] == x:\n            return mid\n        elif x < arr[mid]:\n            return last_occurrence(arr, low, mid-1, x)\n        else:\n            return last_occurrence(arr, mid+1, high, x)\n    return -1\narr = [1, 2, 3, 3, 3, 3, 10]\nn = len(arr)\nx = 3"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Test the function"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    result = ''\n    for i, char in enumerate(string):\n        if i % 2 == 0:  # Corrected the condition to check for even indices\n            result += char\n    return result"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def largest_n(nums, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(nums, reverse=True)[:n]\n\n# Test the function with the provided test case\nassert set(largest_n([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "from math import pi"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(l):\n  return l ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Iterate through all bits of the number\n    for i in range(0, 32, 2):  # Considering a 32-bit integer\n        # Set the even bit (0, 2, 4, ...) by using the OR operator with 1 shifted to the i-th position\n        n |= (1 << i)\n    return n"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    occurrences = {}\n    for item in lst:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences\n\n# Test the function with the provided test case\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1].strip():  # Corrected variable name 'i' to 'j'\n                count += 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Base case: if n is 0, there's only one way to form a sequence\n    if n == 0:\n        return 1\n    # Initialize count to 0\n    count = 0\n    # Loop through possible values of i\n    for i in range(1, m+1):\n        # Check if i is within the valid range\n        if i >= 2 and i <= m:\n            # Recursively call the function with updated parameters\n            count += get_total_number_of_sequences(i, n-1)\n    return count"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Replace the last element of list1 with all elements of list2\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_characters(string):\n    # Corrected the function to return the length of the string\n    return len(string)\n\n# Test the function\nassert count_characters(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(n):\n    # Calculate the square root of n\n    root = math.sqrt(n)\n    # Round up to the nearest integer\n    root = math.ceil(root)\n    # Return the square of the rounded-up root\n    return root ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    max_sum = inc[0] + dec[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, inc[i] + dec[i])\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, x): \n    return tup.count(x)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    return lst + [elem]"}
{"task_id": "Mbpp/252", "solution": "import math\ndef convert(z):\n    return (abs(z), math.atan2(z.imag, z.real))"}
{"task_id": "Mbpp/253", "solution": "def count_integer(list1):\n    return sum(isinstance(x, int) for x in list1)"}
{"task_id": "Mbpp/255", "solution": "import itertools\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))\ncolors = ['Red', 'Green', 'Blue']\nn = 2"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tup1, tup2):\n    # Corrected the function to properly compare and return the maximum elements\n    return tuple(max(pair1, pair2) for pair1, pair2 in zip(tup1, tup2))\ntup1 = ([1, 3], [4, 5], [2, 9], [1, 10])\ntup2 = ([6, 7], [3, 9], [1, 1], [7, 3])"}
{"task_id": "Mbpp/260", "solution": "import sympy\ndef newman_prime(n):\n    def nswp(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return 2 * nswp(k - 1) + nswp(k - 2)\n\n    count = 0\n    k = 0\n    while True:\n        candidate = nswp(k)\n        if sympy.isprime(candidate):\n            count += 1\n            if count == n:\n                return candidate\n        k += 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate over the elements of the tuples using zip\n    for x, y in zip(tuple1, tuple2):\n        # Check if the divisor is not zero to avoid division by zero error\n        if y != 0:\n            # Perform division and append the result to the list\n            result.append(x / y)\n        else:\n            # If divisor is zero, append None or handle it as needed\n            result.append(None)\n    # Return the list of results\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(l, L):\n    return ([l[:L], l[L:]])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    # Corrected the function to return the correct dog age calculation\n    return human_age * 7"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    # Start with the first odd number\n    odd_number = 1\n    # Loop n times to find the sum of squares of the first n odd numbers\n    for _ in range(n):\n        # Add the square of the current odd number to the sum\n        sum_of_squares += odd_number ** 2\n        # Move to the next odd number\n        odd_number += 2\n    # Return the calculated sum of squares\n    return sum_of_squares\n\n# Test the function with the provided test case\nassert square_sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    # Initialize the first star number\n    star_num = 1\n    # Initialize the count of star numbers found\n    count = 1\n    # Initialize the increment for the next star number\n    increment = 1\n\n    # Loop until we find the n'th star number\n    while count < n:\n        # Increment the star number by the current increment\n        star_num += increment\n        # Increment the count of star numbers found\n        count += 1\n        # Increment the increment for the next star number\n        increment += 1\n\n    return star_num"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(k):\n  return ord(k) + 1"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    # Calculate the sum of even numbers in the list\n    sum_even = sum(i for i in lst if i % 2 == 0)\n    # Calculate the sum of elements at even indices\n    sum_even_index = sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n    # Return the sum of both\n    return sum_even + sum_even_index"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through numbers from 0 to n-1\n    for i in range(0, n):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Add the fifth power of the number to the sum\n            sum += i ** 5\n    # Return the calculated sum\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [i[2] for i in lst]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    # Ensure both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    \n    # Calculate the difference between corresponding elements\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function with the provided test case\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_coeff_sum(n):\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    total_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            total_sum += binomial_coefficient(n, i)\n    \n    return total_sum\n\n# Test the function with the provided test case\nassert even_binomial_coeff_sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height\nradius = 10\nheight = 5"}
{"task_id": "Mbpp/277", "solution": "def filter_dict(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\n# Test the function\ntest_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nn = 2\nfiltered_dict = filter_dict(test_dict, n)"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (7 * n - 5) == 0"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(dlist, item):\n    if item in dlist:\n        return True, dlist.index(item)\n    else:\n        return False, -1"}
{"task_id": "Mbpp/281", "solution": "def all_unique(test_list):\n    # Corrected the logic to check if all elements are unique\n    return len(test_list) == len(set(test_list))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    return result\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    if num < 0:\n        return False\n    \n    count = 0\n    temp_num = num\n    while temp_num > 0:\n        count += 1\n        temp_num = temp_num // 10\n    \n    while num > 0:\n        digit = num % 10\n        if digit > count:\n            return False\n        num = num // 10\n    \n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    # Corrected the function to return True if the element is in the list, otherwise False\n    return element in lst"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    # Corrected the logical operator from 'or' to 'and' to ensure both conditions must be true\n    if (text.count('a') == 1 and text.count('b') == 2) and (text.count('a') == 1 and text.count('b') == 3):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, m):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k == 1:\n        return max(arr)\n\n    for i in range(1, k):\n        for j in range(len(arr)):\n            arr[j] = arr[j] + arr[j]\n\n    max_sum = float('-inf')\n    for i in range(len(arr)):\n        if i + m < len(arr):\n            max_sum = max(max_sum, sum(arr[i:i + m]))\n        else:\n            max_sum = max(max_sum, sum(arr[i:]))\n\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the square of the current even number and add it to the sum\n        sum_of_squares += (2*i)**2\n    \n    # Return the total sum of squares\n    return sum_of_squares\n\n# Test the function with the provided test case\nassert square_sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_length = 0\n    max_list = []\n    for i in list_of_lists:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_length, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(n, m):\n    # Corrected the function to handle division by zero and ensure correct rounding\n    if m == 0:\n        return 0  # Return 0 if m is 0 to avoid division by zero\n    return (n + m - 1) // m  # Use integer division with adjustment for correct rounding"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(opposite, adjacent):\n    # Calculate the hypotenuse using the Pythagorean theorem\n    hypotenuse = math.sqrt(opposite**2 + adjacent**2)\n    # Round the result to 2 decimal places\n    return round(hypotenuse, 2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Check if the list is empty to avoid IndexError\n    if not lst:\n        return None  # or raise an exception, depending on the requirements\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray\n            # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\ndef get_Inv_Count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += get_Inv_Count(arr, temp_arr, left, mid)\n        inv_count += get_Inv_Count(arr, temp_arr, mid + 1, right)\n\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\narr = [1, 20, 6, 4, 5]"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(l):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for item in l:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(list_of_tuples):\n    \"\"\"\n    Return the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Group by the first element of the tuple and sum the second elements\n    from collections import defaultdict\n    grouped = defaultdict(int)\n    for item in list_of_tuples:\n        grouped[item[0]] += item[1]\n    \n    # Find the maximum aggregate\n    return max(grouped.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    # Base case: if n is 0, there is only one possible binary sequence\n    if n == 0:\n        return 1\n\n    # Recursive case: count the number of binary sequences by summing the counts of two subproblems\n    return 2 * count_binary_seq(n - 1)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d, level=1):\n    if not isinstance(d, dict) or not d:\n        return level\n    return max(dict_depth(v, level + 1) for k, v in d.items())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate over each word in the input list\n    for word in words:\n        # Check if the word starts with 'p' or 'P'\n        if word.startswith('p') or word.startswith('P'):\n            # Split the word into parts\n            parts = word.split()\n            # Append the first and second part to the result list\n            result.append((parts[0], parts[1]))\n    # Return the list of tuples\n    return result"}
{"task_id": "Mbpp/306", "solution": "import bisect\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize DP array\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    # Fill dp array with maximum sum values\n    for j in range(1, n):\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n            else:\n                dp[j] = max(dp[j], arr[j])\n\n    # Include the kth element in the sum\n    max_sum_with_k = dp[i] + arr[k]\n\n    # Find the maximum sum until the ith index\n    max_sum_until_i = max(dp[:i+1])\n\n    # The result is the max of the sum until i or the sum with k\n    result = max(max_sum_until_i, max_sum_with_k)\n    return result\narr = [1, 101, 2, 3, 100, 4, 5]\nn = len(arr)\ni = 4\nk = 6"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    # Sort both lists in ascending order\n    list1.sort()\n    list2.sort()\n    # Reverse the first list to make it descending\n    list1.reverse()\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the first 'num' elements of both lists\n    for i in range(num):\n        # Multiply the corresponding elements and append to the result list\n        result.append(list1[i] * list2[i])\n    # Return the final result list\n    return result"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return max(a, b)"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    # Split the input string by spaces and convert each part to a tuple\n    return tuple(input_string.split())"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    m = n\n    mask = 1\n    # Find the leftmost unset bit\n    while m & mask:\n        mask = mask << 1\n    # Set the leftmost unset bit\n    return n | mask"}
{"task_id": "Mbpp/312", "solution": "def volume_cone(radius, height):\n    return (1 / 3) * 3.14 * (radius ** 2) * height\nradius = 5\nheight = 12"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return 2 ** (n.bit_length() - 1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n): \n    if (n == 0): \n        return 2\n    elif (n == 1): \n        return 1\n    else: \n        a, b = 2, 1\n        for i in range(2, n + 1): \n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def apply_format(lst, format_str):\n    \"\"\"\n    Applies a given format string to all of the elements in a list.\n    :param lst: list of elements\n    :param format_str: format string with placeholders\n    :return: list with formatted elements\n    \"\"\"\n    # Corrected variable name from 'I' to 'i' to match the parameter 'lst'\n    return [format_str.format(i) for i in lst]\n\n# Test the function with the provided test case\nassert apply_format([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(student_id, student_name, student_score):\n    result = {}\n    for i in range(len(student_id)):\n        result[student_id[i]] = {}\n        result[student_id[i]]['name'] = student_name[i]\n        result[student_id[i]]['score'] = student_score[i]\n    return result\nstudent_id = ['S001', 'S002', 'S003', 'S004']\nstudent_name = ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards']\nstudent_score = [85, 98, 89, 92]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Create a dictionary to store computed values to avoid redundant calculations\n    memo = {0: 0, 1: 1}\n    \n    def helper(x):\n        if x not in memo:\n            memo[x] = max(helper(x//2), helper(x//3), helper(x//4), helper(x//5), x)\n        return memo[x]\n    \n    return helper(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(test_tup):\n    # Convert the tuple to a set to remove duplicates and compare lengths\n    return len(test_tup) != len(set(test_tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for ch in str1:\n        if ch in char_count:\n            char_count[ch] += 1\n        else:\n            char_count[ch] = 1\n    \n    # Find the first character with a count of 1\n    for ch in str1:\n        if char_count[ch] == 1:\n            return ch\n    \n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    # Calculate the sum of the three numbers\n    total_sum = a + b + c\n    # Return the average of the three numbers\n    return total_sum / 3"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    # Filter out non-integer values and calculate the sum of digits for each integer\n    return sum(sum(int(digit) for digit in str(number)) for number in numbers if isinstance(number, int))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element): \n  return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    # Check if the number is even\n    if num % 2 == 0:\n        return True\n    # If the number is not even, it is odd\n    else:\n        return False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    \"\"\"\n    # Filter out tuples where the first element is not less than the second\n    valid_tuples = [(a, b) for a, b in lst if a[0] < a[1] and b[0] < b[1]]\n    \n    # Calculate the product of each valid tuple\n    products = [a * b for a, b in valid_tuples]\n    \n    # Return the minimum product\n    return min(products)"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Initialize the minimum value as the first element of the list\n    min_value = lst[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # Check if the current element is smaller than the minimum value\n        if lst[i] < min_value:\n            # Update the minimum value\n            min_value = lst[i]\n    \n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(l):\n    return [i for i in l if i % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    # Check if the index n is within the valid range of the list\n    if n < 0 or n >= len(lst):\n        return None  # Return None if the index is out of bounds\n    return lst[n]"}
{"task_id": "Mbpp/414", "solution": "def check_sequence(seq1, seq2):\n    \"\"\"\n    Function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n# Test the function\nassert check_sequence([1,2,3,4,5],[6,7,8,9]) == False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    # Sort the array in ascending order\n    arr.sort()\n    # Calculate the product of the two largest numbers\n    max_product = arr[-1] * arr[-2]\n    # Return the product and the largest number\n    return (max_product, arr[-1])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst): \n    return max(lst, key = len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(list_of_numbers):\n    total = 0\n    for number in list_of_numbers:\n        total += round(number)\n    return total"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    # Initialize the sum of cubes of even numbers\n    even_sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(1, n + 1):\n        # Calculate the cube of the current even number and add it to the sum\n        even_sum += (2 * i) ** 3\n    \n    # Return the total sum of cubes\n    return even_sum\n\n# Test the function with the provided test case\nassert cube_sum(2) == 72"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter=\"-\"):\n    # Convert all elements in the tuple to string before joining\n    return delimiter.join(str(element) for element in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    return (n*(n+1)*(n+2)) / 6\nn = 2"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(test_tuple):\n  return [ele[-1] for ele in test_tuple]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(list1, x): \n    return sum(x in sublist for sublist in list1)"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    # Split the date string into components\n    year, month, day = date.split('-')\n    # Reformat the date to the desired format\n    return f\"{year}{month}{day}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):  # Corrected variable name from 'I' to 'i'\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(map(lambda x, y: x and y, t1, t2))\nt1 = [10, 4, 6, 9]\nt2 = [5, 2, 3, 3]"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # The directrix of a parabola y=ax^2+bx+c is y = -D/4a\n    # where D is the discriminant of the quadratic equation ax^2 + bx + c = 0\n    # D = b^2 - 4ac\n    D = b**2 - 4*a*c\n    directrix_y = -D / (4*a)\n    return directrix_y"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    # Calculate the median of the three numbers\n    return sorted([a, b, c])[1]"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    This function checks if the entered number is greater than all the elements of the given array.\n\n    Args:\n    arr (list): The list of numbers.\n    num (int): The number to compare with.\n\n    Returns:\n    bool: True if the number is greater than all elements, False otherwise.\n\n    Example:\n    >>> check_greater([1, 2, 3, 4, 5], 4)\n    False\n    \"\"\"\n    for i in arr:\n        if i >= num:  # Corrected the comparison operator from <= to >=\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    return number % 10\n\n# Test the function with the provided test case\nassert last_digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(list1):\n    return [i for i in list1 if i < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    return \"\".join(filter(lambda x: x.isalpha() and x.islower(), string))"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    result = 0\n    for num in numbers:\n        result = result * 10 + num\n    return result"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverb = \"\"\n    positions = []\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith(\"ly\"):\n            adverb = word\n            positions.append(i)\n    return tuple(positions + [adverb])"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(l):\n    return 6 * l * l"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((a * b for a, b in zip(x, y)) for x, y in zip(tuple1, tuple2))\ntuple1 = ([1, 3], [4, 5], [2, 9], [1, 10])\ntuple2 = ([6, 7], [3, 9], [1, 1], [7, 3])"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(lst, tup):\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [n**3 for n in nums]"}
{"task_id": "Mbpp/448", "solution": "def perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 2) + perrin_number(n - 3)\ndef cal_sum(n):\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_number(i)\n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [string[-size:] for string in string_list]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.strip()"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):  # Corrected the range to include n\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    # Corrected regular expression to match words containing 'z'\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    elif month_number in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\""}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(list_of_strings):\n    # Reverse each string in the list\n    reversed_strings = [s[::-1] for s in list_of_strings]\n    # Reverse the order of the list\n    return reversed_strings[::-1]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(list):\n    min_length = len(list[0])\n    min_index = 0\n    for i in range(len(list)):\n        if len(list[i]) < min_length:\n            min_length = len(list[i])\n            min_index = i\n    return list[min_index]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(l, b):\n    return l * b"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    return ''.join([char for char in string if char.islower()])"}
{"task_id": "Mbpp/460", "solution": "def extract(lst):\n    # Use list comprehension to iterate through each sublist in the list\n    # and extract the first element of each sublist\n    return [sublist[0] for sublist in lst]\n\n# Test the function with the provided test case\nassert extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = min_product = result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(max_product * num, num)\n        min_product = min(min_product * num, num)\n        \n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1"}
{"task_id": "Mbpp/468", "solution": "import numpy as np\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize max_product array to store the maximum product till ith element\n    max_product_array = np.ones(n)\n\n    # Fill max_product_array[] in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product_array[i] = max(max_product_array[i], max_product_array[j] * arr[i])\n\n    # Return the maximum value from max_product_array[]\n    return int(max(max_product_array))"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise_corrected(tuple_):\n    if len(tuple_) == 0:\n        return tuple_\n    else:\n        return tuple_[:-1] + tuple_[-1:] + tuple_[:-1] + tuple_[-1:]\n\n# Test the function with the provided test case\ntest_case = (1, 5, 7, 8, 10)\nresult = add_pairwise_corrected(test_case)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:  # Corrected variable name from 'I' to 'i'\n        product = (product * i) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_consecutive(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return True\n    return False\n\n# Test the function with the provided test case\ntest_case = [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert tuples in list2 to sets for easy comparison\n    set_list2 = {frozenset(tup) for tup in list2}\n    # Find intersection by checking if tuple from list1 as set is in set_list2\n    intersection = {tuple(tup) for tup in list1 if frozenset(tup) in set_list2}\n    return intersection\nlist1 = [[4, 1], [7, 4], [11, 13], [17, 14]]\nlist2 = [[1, 4], [7, 4], [16, 12], [10, 13]]"}
{"task_id": "Mbpp/474", "solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)"}
{"task_id": "Mbpp/475", "solution": "def sort_dict_by_value(d):\n    # Corrected the lambda function to sort by value in descending order\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\n# Test the function"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return sum(sorted(arr, reverse=True))"}
{"task_id": "Mbpp/477", "solution": "def to_lower(s):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return s.lower()\n\n# Test the function\nassert to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    # Initialize an empty result string\n    result = \"\"\n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    # Convert the number to a string to easily access the first digit\n    number_str = str(number)\n    # Convert the first character of the string back to an integer\n    return int(number_str[0])\n\n# Test the function with the provided test case\nassert first_digit(123) == 1"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    # Use list comprehension to filter and return only odd numbers from the list\n    return [x for x in lst if x % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    return string.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to be able to iterate over each digit\n    num1_str = str(num1)\n    num2_str = str(num2)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over each digit in the numbers\n    for i in range(max(len(num1_str), len(num2_str))):\n        # Get the current digit from each number, or 0 if the number is shorter\n        digit1 = int(num1_str[i]) if i < len(num1_str) else 0\n        digit2 = int(num2_str[i]) if i < len(num2_str) else 0\n        \n        # Add the absolute difference of the digits to the sum\n        sum += abs(digit1 - digit2)\n    \n    # Return the final sum\n    return sum"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    \"\"\"\n    :param arr: list\n    :param k: int\n    :return: int\n    \"\"\"\n    if len(arr) < k:\n        return None  # Not enough elements to form a subarray of size k\n\n    max_sum = float('-inf')\n    current_sum = sum(arr[:k])\n    max_sum = max(max_sum, current_sum)\n\n    for i in range(k, len(arr)):\n        current_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    # Convert tuples to sets, find the union, convert back to sorted list\n    return sorted(set(tup1) | set(tup2))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(arr):\n    max_length = 0\n    current_length = 0\n    start = 0\n    for i in range(len(arr)):\n        if len(arr[i]) == 0:\n            continue\n        if i == 0 or len(arr[i-1]) == 0:\n            current_length = len(arr[i])\n            start = i\n        else:\n            if arr[i][0] == arr[i-1][-1]:\n                current_length += 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = len(arr[i])\n                start = i\n        if current_length > max_length:\n            max_length = current_length\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    # Split the string by commas\n    parts = string.split(\",\")\n    # Filter parts that start and end with a double quote\n    filtered_parts = [x for x in parts if x[0] == '\"' and x[-1] == '\"']\n    # Remove the double quotes from each filtered part\n    cleaned_parts = [x[1:-1] for x in filtered_parts]\n    return cleaned_parts"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, k):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] - lst[j]) == k:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(word): \n    return word.split(' ')"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n  return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    # Check if the list is sorted by comparing it to its sorted version\n    return lst == sorted(lst)\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(length):\n    return [{} for _ in range(length)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    # Initialize an empty list to store the sorted sublists\n    sorted_sublists = []\n    # Iterate over each index in the sublists\n    for i in range(len(lst[0])):\n        # Extract the i-th element from each sublist and sort them\n        sorted_elements = sorted(x[i] for x in lst)\n        # Append the sorted elements as a new sublist\n        sorted_sublists.append(sorted_elements)\n    # Return the list of sorted sublists\n    return sorted_sublists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    return list(set(lst))"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    # Convert the list to a set to remove duplicates, then convert back to a list\n    unique_lst = list(set(lst))\n    # Calculate the product of the unique elements\n    product = 1\n    for num in unique_lst:\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_sub_array(main_list, sub_list):\n    # Check if the sub_list is empty, which is a sublist of any list\n    if not sub_list:\n        return True\n    # Check if the sub_list is longer than the main_list, which cannot be a sublist\n    if len(sub_list) > len(main_list):\n        return False\n    # Iterate through the main_list to find the sub_list\n    for i in range(len(main_list) - len(sub_list) + 1):\n        # Check if the elements of sub_list match the elements in main_list starting at index i\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    # If no match is found, return False\n    return False\n\n# Test the function with the provided test case\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n            while fact % 10 == 0:\n                fact //= 10  # Use integer division to avoid floating point results\n        return int(str(fact)[-1])"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Initialize an empty list to store the result\n    result = []\n    # Determine the maximum length among the three lists\n    max_length = max(len(list1), len(list2), len(list3))\n    # Iterate up to the maximum length\n    for i in range(max_length):\n        # Append elements from each list if they exist at the current index\n        if i < len(list1):\n            result.append(list1[i])\n        if i < len(list2):\n            result.append(list2[i])\n        if i < len(list3):\n            result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    if isinstance(t, tuple):\n        # Use a generator expression to filter and extract even numbers\n        return tuple(x for x in t if isinstance(x, (int, float)) and x % 2 == 0)\n    elif isinstance(t, list):\n        # Recursively apply the function to lists\n        return [extract_even(x) for x in t if isinstance(x, (int, float)) and x % 2 == 0]\n    else:\n        # Return the element if it is an even number\n        return t if isinstance(t, (int, float)) and t % 2 == 0 else None"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base, height):\n    return (base * height) * 2\nbase = 3\nheight = 4"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return (2 * n - 1) * catalan_number(n - 1) // n"}
{"task_id": "Mbpp/585", "solution": "import heapq\ndef expensive_items(items, n):\n    # Corrected the key function to use 'price' instead of 'pr'\n    expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n    return expensive_items\nn = 1"}
{"task_id": "Mbpp/586", "solution": "def split_arr(arr, n):\n    # Split the array at the nth element and concatenate the second part with the first part\n    return arr[n:] + arr[:n]\n\n# Test the function with the provided test case\nassert split_arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(listx):\n  return tuple(listx + listx)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    # Calculate the difference between the maximum and minimum values in the list\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    This function finds perfect squares between two given numbers.\n\n    Args:\n    start (int): The start of the range.\n    end (int): The end of the range.\n\n    Returns:\n    list: A list of perfect squares in the range.\n\n    Example:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    return [i * i for i in range(int(start ** 0.5), int(end ** 0.5) + 1)]"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    rect_coord = (x, y)\n    \n    # Calculate the polar coordinates\n    polar_coord = cmath.polar(complex(x, y))\n    \n    return rect_coord, polar_coord"}
{"task_id": "Mbpp/591", "solution": "def swap_List(list1):\n    # Reverse the list using slicing\n    return list1[::-1]"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address by '.'\n    parts = ip.split('.')\n    # Filter out any empty strings that may result from leading/trailing zeros\n    parts = [part for part in parts if part]\n    # Join the parts back together with '.'\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n    return even - odd if even is not None and odd is not None else None"}
{"task_id": "Mbpp/596", "solution": "def tuple_size(tup):\n    return len(tup)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    elif arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        return arr1[mid1]\narr1 = [2, 3, 6, 7, 9]\narr2 = [1, 4, 8, 10]\nk = 5"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # initialize sum and number of digits\n    sum = 0\n    n = num\n    digit = 0\n    \n    # count the number of digits in the number\n    while n > 0:\n        digit += 1\n        n //= 10\n    \n    # calculate sum of the cube of each digit\n    n = num\n    while n > 0:\n        digit_sum = n % 10\n        sum += digit_sum ** digit\n        n //= 10\n    \n    # check if the sum is equal to the original number\n    if sum == num:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    return (n*(n+1)//2, n//2)"}
{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    # Check if the number is even\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test cases to verify the correctness of the function\ndef test_is_even():\n    assert is_even(2) == True, \"Test case 1 failed\"\n    assert is_even(3) == False, \"Test case 2 failed\"\n    assert is_even(0) == True, \"Test case 3 failed\"\n    assert is_even(-2) == True, \"Test case 4 failed\"\n    assert is_even(-3) == False, \"Test case 5 failed\"\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_is_even()"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_freq = {}\n    for char in s:\n        if char in char_freq:\n            return char\n        char_freq[char] = 1\n    return -1"}
{"task_id": "Mbpp/603", "solution": "import itertools\ndef get_ludic(n):\n    ludic = [1]\n    candidates = list(range(2, n + 1))\n    while candidates:\n        first = candidates[0]\n        ludic.append(first)\n        candidates = [c for i, c in enumerate(candidates) if (i + 1) % first != 0]\n    return ludic"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    words = string.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(num):\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    # Check for factors from 2 to the square root of num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degree):\n    return degree * (3.141592653589793 / 180)"}
{"task_id": "Mbpp/607", "solution": "def find_literals(string, pattern):\n    start = string.find(pattern)\n    if start == -1:\n        return pattern, -1, -1\n    end = start + len(pattern)\n    return pattern, start, end"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    # Initialize a 2D list (matrix) with zeros\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    # Set the base case for the Bell number\n    bell[0][0] = 1\n\n    # Iterate over each row in the matrix\n    for i in range(1, n+1):\n        # Set the first element of each row\n        bell[i][0] = bell[i-1][i-1]\n\n        # Iterate over each column in the row\n        for j in range(1, i+1):\n            # Calculate the Bell number using the recursive formula\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the nth Bell number\n    return bell[n][0]\n\n# Test the function with the provided test case\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Copy the list to avoid modifying the original list\n    new_lst = lst[:]\n    # Remove the k'th element\n    del new_lst[k]\n    return new_lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Check if the column index is valid\n    if n <= 0 or n > len(matrix[0]):\n        raise ValueError(\"Column index out of range\")\n    \n    # Extract the nth column and find the maximum value\n    nth_column = [row[n-1] for row in matrix]\n    return max(nth_column)\nmatrix = [[5, 6, 7], [1, 3, 5], [8, 9, 19]]\nn = 2"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [item for sublist in lst for item in sublist]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function with the provided test case\nassert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "import json\ndef average_tuple(tuples):\n    # Calculate the average of each tuple\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] % tuple2[i])\n    return tuple(result)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        if list2[i] != 0:  # Check to avoid division by zero\n            result.append(list1[i] / list2[i])\n        else:\n            result.append(None)  # Handle division by zero by appending None\n    return result\nlist1 = [4, 5, 6]\nlist2 = [1, 2, 3]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    for i in range(len(s)):\n        if s[i].isdigit():\n            nums.append(s[i])\n    s = ''.join(filter(lambda x: not x.isdigit(), s))\n    for i in range(len(nums)):\n        s += nums[i]\n    return s"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(arr):\n    arr.sort()\n    max_size = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            max_size += 1\n        else:\n            break\n    return max_size"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    # Merge the two lists and sort them\n    merged_list = sorted(list1 + list2)\n    \n    # Calculate the median based on the size of the merged list\n    if size % 2 == 0:\n        # If even, average the two middle numbers\n        median = (merged_list[size//2 - 1] + merged_list[size//2]) / 2\n    else:\n        # If odd, take the middle number\n        median = merged_list[size//2]\n    \n    return median\nlist1 = [1, 12, 15, 26, 38]\nlist2 = [2, 13, 17, 30, 45]\nsize = 5"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    # Corrected the variable name from nth_nums to nums\n    nums = list(map(lambda x: x * n, nums))\n    return nums\nn = 2"}
{"task_id": "Mbpp/624", "solution": "def to_upper(s):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return s.upper()\n\n# Test the function\nassert to_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    # The largest triangle inscribed in a semicircle is a right-angled triangle\n    # with the diameter as its base and the radius as its height.\n    # Area of a triangle = 0.5 * base * height\n    # Diameter of the semicircle = 2 * radius\n    # Therefore, the area of the triangle = 0.5 * (2 * radius) * radius\n    return 0.5 * 2 * radius * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def Split(nums):\n    # Initialize an empty list to store even numbers\n    even_nums = []\n    # Iterate through each number in the input list\n    for num in nums:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If even, append it to the list of even numbers\n            even_nums.append(num)\n    # Return the list of even numbers\n    return even_nums"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    return string.replace(' ', '_')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    zero_count = lst.count(0)\n    non_zero_lst = [i for i in lst if i != 0]\n    return non_zero_lst + [0] * zero_count"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum\n\n# Test the function with the provided test case\nassert pair_xor_sum([5, 9, 7, 6], 4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount1, amount2):\n    # Corrected the logic to return True when amount1 is not greater than amount2\n    if amount1 == amount2:\n        return False\n    elif amount1 > amount2:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "solution": "import math\ndef wind_chill(velocity, temperature):\n    # Corrected wind chill index formula for km/h and Celsius\n    if temperature > 10 or velocity < 4.8:\n        return None\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)\nvelocity = 120\ntemperature = 35"}
{"task_id": "Mbpp/639", "solution": "def sum_name_length(names):\n    # Corrected the condition to check if the first character is not lowercase\n    return sum(len(name) for name in names if not name[0].islower())\n\n# Test the function\nnames = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    :param n: int - an nth nonagonal number\n    :return: int - the nth nonagonal number\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    # Check if the text is empty or has less than 3 characters\n    if len(text) < 3:\n        return False\n    # Check if the first and last characters are not 'z'\n    if text[0] != 'z' and text[-1] != 'z':\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        return arr\n    else:\n        for i in range(k//2):\n            temp = arr[i]\n            arr[i] = arr[k-1-i]\n            arr[k-1-i] = temp\n        return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(input_tuple, input_dict):\n    # Convert dictionary values to a tuple and concatenate with the input tuple\n    return input_tuple + tuple(input_dict.values())"}
{"task_id": "Mbpp/721", "solution": "def max_average_of_path(matrix):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    if not matrix:\n        return 0\n\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = matrix[i][i]\n\n    for i in range(n - 1):\n        dp[i][i + 1] = matrix[i][i] + matrix[i + 1][i + 1]\n\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    return dp[n - 1][n - 1] / (n * n)\n\n# Test the function with the provided test case\nassert max_average_of_path([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    # Corrected the dictionary comprehension to use the correct tuple unpacking\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}\nstudents = {'Cierra Vega': [6.2, 70], 'Alden Cantrell': [5.9, 65], 'Kierra Gentry': [6.0, 68], 'Pierre Cox': [5.8, 66]}\nmin_height = 6.0\nmin_weight = 70"}
{"task_id": "Mbpp/723", "solution": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\nnums1 = [1, 2, 3, 4]\nnums2 = [1, 2, 3, 4]"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Initialize sum to 0\n    sum = 0\n    # Loop from 0 to power-1\n    for i in range(power):\n        # Add base to sum for each iteration\n        sum += base\n    # Return the final sum\n    return sum"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    # Split the string by double quotes\n    parts = string.split('\"')\n    # Filter out empty strings and extract the content within quotes\n    result = [part for part in parts[1::2] if part]\n    return result"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    # Initialize the result variable to 1 (since we are multiplying)\n    result = 1\n    # Iterate through each element in the tuple except the last one\n    for i in range(len(t) - 1):\n        # Multiply the current element to the result\n        result *= t[i]\n    # Return the final result\n    return result"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\nlist1 = [10, 20, 30]\nlist2 = [15, 25, 35]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if arr[0] == arr[1]:\n        return [arr[0]] + consecutive_duplicates(arr[2:])\n    else:\n        return [arr[0]] + consecutive_duplicates(arr[1:])"}
{"task_id": "Mbpp/731", "solution": "from math import pi\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    l = (r**2 + h**2)**0.5\n    # Calculate the lateral surface area of the cone\n    return pi * r * l"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    return string.replace(\" \",\":\").replace(\",\",\"::\").replace(\".\",\"::\")"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    \"\"\"\n    :param: arr - sorted array of integers\n          num - integer you're searching for\n    return: the index of the first occurrence of num in arr,\n            or -1 if num is not in arr\n    \"\"\"\n    # Your code here\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            result = mid\n            right = mid - 1  # Continue to search in the left half\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "import itertools\ndef sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for r in range(1, len(lst) + 1):\n        for sub in itertools.combinations(lst, r):\n            prod = 1\n            for num in sub:\n                prod *= num\n            total_sum += prod\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n\n    # Create a mask to toggle all bits except the first and the last\n    # For example, if num_bits = 4, mask will be 0110\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits\n    result = n ^ mask\n\n    # Ensure the first and last bits remain unchanged\n    first_bit = (n >> (num_bits - 1)) & 1\n    last_bit = n & 1\n    result = (first_bit << (num_bits - 1)) | (result & mask) | last_bit\n\n    return result"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left  # Corrected to return the insertion point"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    This function calculates the index based on the given formula.\n    The formula is derived from the pattern observed in the test cases.\n    \"\"\"\n    return n * (n * n - 1) // 2"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    d = {}\n    for i in range(len(tup)):\n        if i == 0:\n            d[tup[i]] = tup[i+1]\n        elif i == len(tup)-1:\n            d[tup[i-1]] = tup[i]\n        else:\n            d[tup[i-1]] = tup[i+1]\n    return d"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    # Convert the string to lowercase to ensure the comparison is case-insensitive\n    string = string.lower()\n    # Iterate through each character in the string\n    for i in range(len(string)):\n        # Compare the current character with the rest of the string\n        for j in range(i+1, len(string)):\n            if string[i] != string[j]:\n                return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(edge):\n    return (3**0.5) / 4 * edge**2\nedge = 3"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Ensure n is within the bounds of the list length\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(test_tup):\n  return any(ele is not None for ele in test_tup)\ntest_tup = [7, 8, 9, 11, 14]"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits if digit != 0):  # Ensure digit is not zero\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    # Split the string into words\n    words = string.split(\" \")\n    # Capitalize the first letter of each word and join them back with spaces\n    return \" \".join(word[0].upper() + word[1:] for word in words)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(list_of_numeric_strings):\n    # Convert each string to an integer for proper sorting\n    return sorted(list_of_numeric_strings, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return tuple(lst + tup)"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for _ in range(2, n+1):\n            c = 2*b + a\n            a = b\n            b = c\n        return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_list[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    # Use set intersection to find common elements in all three lists\n    common_elements = set(l1) & set(l2) & set(l3)\n    # Return a list of indices where the elements are in the common set\n    return [i for i, x in enumerate(l1) if x in common_elements]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    :param lst: list of numbers\n    :return: second smallest number\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))  # Remove duplicates\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i][::-1] == arr[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    d = {}\n    for i in lst:\n        # Convert each sublist to a tuple so it can be used as a dictionary key\n        i_tuple = tuple(i)\n        if i_tuple not in d:\n            d[i_tuple] = 1\n        else:\n            d[i_tuple] += 1\n    return d"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    # Check if there is exactly one dot in the string\n    if s.count(\".\") == 1:\n        # Split the string by the dot and check if both parts are digits\n        parts = s.split(\".\")\n        if parts[0].isdigit() and parts[1].isdigit():\n            return True\n    return False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(numbers):\n    # Convert the list to a set to remove duplicates and check if the length is 1\n    return len(set(numbers)) == 1\n\n# Test the function with the provided test case\nassert unique_element([1, 1, 1]) == True"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Find the minimum difference by comparing adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(str):\n    return len(str) - str.count(' ')"}
{"task_id": "Mbpp/765", "solution": "import math\ndef is_polite(n):\n    # Count the number of set bits in the binary representation of n\n    count_set_bits = bin(n).count('1')\n    # If there is only one set bit, it's a power of 2 and not polite\n    if count_set_bits == 1:\n        return False\n    return True"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i ** 4\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    # Define matching pairs for parentheses, brackets, and braces\n    matching = {')': '(', '}': '{', ']': '['}\n    stack = []\n    \n    for char in expression:\n        if char in matching.values():\n            stack.append(char)\n        elif char in matching:\n            if not stack or stack.pop() != matching[char]:\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    return ''.join([word for word in string.split() if len(word) != k])"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    # Check if the substring is in the string\n    if substring in string:\n        # Find the starting index of the substring\n        start = string.index(substring)\n        # Calculate the ending index of the substring\n        end = start + len(substring)\n        # Return the substring along with its start and end indices\n        return substring, start, end\n    else:\n        # Return None if the substring is not found\n        return None\n\n# Test the function with the provided test case\nassert occurrence_substring('python programming, python language', 'python') == ('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(num for num, count in freq.items() if count == 1)\n    return sum_non_repeated"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(l):\n    \"\"\"\n    This function takes a list of elements and returns a new list where consecutive duplicates are grouped into sublists.\n    \n    Args:\n    l (list): The input list of elements.\n    \n    Returns:\n    list: A new list with consecutive duplicates grouped into sublists.\n    \"\"\"\n    if not l:\n        return []\n    result = []\n    current_group = [l[0]]\n    for i in range(1, len(l)):\n        if l[i] == current_group[-1]:\n            current_group.append(l[i])\n        else:\n            result.append(current_group)\n            current_group = [l[i]]\n    result.append(current_group)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    \"\"\"\n    >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n    [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    return find_combinations_helper(tuples, 0, 0, [])\ndef find_combinations_helper(tuples, index, sum, result):\n    if index == len(tuples):\n        return result\n    if sum + tuples[index][0] <= tuples[index][1]:\n        result.append((sum + tuples[index][0], sum + tuples[index][1]))\n    return find_combinations_helper(tuples, index + 1, sum + tuples[index][0], result) + find_combinations_helper(tuples, index + 1, sum, result)"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = 1\n    odd = 1\n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return even * odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses and then split by comma\n    cleaned_str = tuple_str.strip('()')\n    return tuple(map(int, cleaned_str.split(',')))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    if len(arr) == 0:\n        return 0\n    if val < arr[0]:\n        return 0\n    if val > arr[-1]:\n        return len(arr)\n    for i in range(len(arr)):\n        if val > arr[i]:\n            continue\n        else:\n            return i"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(string, lst):\n    return tuple(string + [item for item in lst])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(len(lst)):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(input_list):\n    return sum(isinstance(e, list) for e in input_list)"}
{"task_id": "Mbpp/796", "solution": "def sum_dict(dictionary):\n    total = 0\n    for key, value in dictionary.items():\n        if isinstance(value, (int, float)):\n            total += value\n    return total\n\n# Test cases\nassert sum_dict({'a': 100, 'b': 200, 'c': 300}) == 600\nassert sum_dict({'apple': 1, 'banana': 2, 'cherry': 3}) == 6\nassert sum_dict({'x': 10, 'y': 20, 'z': 30}) == 60\nassert sum_dict({}) == 0\nassert sum_dict({'a': '10', 'b': '20', 'c': '30'}) == 0\nassert sum_dict({'a': -10, 'b': -20, 'c': -30}) == -60\nassert sum_dict({'a': 10.5, 'b': 20.25, 'c': 30.75}) == 61.5\nassert sum_dict({'a': 10, 'b': '20', 'c': 30.75}) == 40.75"}
{"task_id": "Mbpp/798", "solution": "def sum_array(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    # Convert the number to binary and get the length of the binary string\n    binary_num = bin(num)[2:]\n    binary_len = len(binary_num)\n    \n    # Calculate the number of bits to be rotated\n    rotate_bits = d % binary_len\n    \n    # Rotate the bits by shifting the binary string to the left by rotate_bits\n    rotated_binary = binary_num[rotate_bits:] + binary_num[:rotate_bits]\n    \n    # Convert the rotated binary string back to decimal and return the result\n    return int(rotated_binary, 2)"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(text):\n    return text.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/803", "solution": "import math\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt.is_integer()"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] > max_sum:\n                max_sum = lst[i][j]\n    return max_sum"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    max_run = 0\n    last_space_index = -1\n    for i in range(len(string)):\n        if string[i].isupper():\n            max_run = max(max_run, i - last_space_index)\n            last_space_index = i\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(nums):\n    # Corrected the condition to check for odd numbers instead of even numbers\n    first_odd = next((el for el in nums if el % 2 != 0), None)\n    return first_odd"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuple_list, k):\n    for i in tuple_list:\n        if k in i:\n            return True\n    return False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    # Iterate through each element in the tuples\n    for i in range(len(tup1)):\n        # Compare corresponding elements\n        if tup1[i] > tup2[i]:\n            # Return False if any element in tup1 is greater than in tup2\n            return False\n    # Return True if all elements in tup1 are less than or equal to those in tup2\n    return True"}
