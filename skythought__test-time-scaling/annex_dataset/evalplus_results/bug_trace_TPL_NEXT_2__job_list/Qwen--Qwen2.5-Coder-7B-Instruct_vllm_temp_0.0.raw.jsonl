{"task_id": "Mbpp/3", "solution": "def is_not_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return False\n\n# Test cases\ntest_cases = [2, 35]\n\n# Check function to verify the correctness of the is_not_prime function\ndef check_is_not_prime():\n    for num in test_cases:\n        result = is_not_prime(num)\n        expected = num != 2 and num % 2 == 0 or num != 3 and num % 3 == 0 or num != 5 and num % 5 == 0 or num != 7 and num % 7 == 0\n        assert result == expected, f\"Test failed for input {num}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_is_not_prime()"}
{"task_id": "Mbpp/4", "solution": "from heapq import heapify, nlargest\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: number of largest numbers to return\n    :return: list of n largest numbers\n    \"\"\"\n    return nlargest(n, nums)\n\n# Test cases"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    # Check if the input is a list and if it contains a string\n    if isinstance(string, list) and len(string) > 0 and isinstance(string[0], str):\n        # Split the string into words and filter those with length >= 4\n        return \" \".join([word for word in string[0].split() if len(word) >= 4])\n    else:\n        # Return an empty string if the input is not as expected\n        return \"\"\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    (['Please move back to stream'], ['Please', 'move', 'back', 'stream']),\n    (['Jing Eco and Tech'], ['Jing', 'Tech']),\n    (['Short words'], []),\n    ([''], []),\n    ([], [])\n]\n\n# Function to check the correctness of the find_char_long function\ndef check_function():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = find_char_long(input_data)\n        assert result == expected_output, f\"Test {i} FAIL: For test input: {input_data}. Expected output is: {expected_output}, but got: {result}\"\n        print(f\"Test {i} PASS\")\n\n# Run the check function to verify the correctness of the solution\ncheck_function()"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [i**2 for i in nums]\n```"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    n = len(string)\n    for i in range(1, n):\n        if string[:i] == string[i:]:\n            return i\n    return n\n\n# Test cases\ntest_cases = [\n    ('aaaa', 4),\n    ('ab', 2),\n    ('abc', 3)\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for string, expected in test_cases:\n        result = find_Rotations(string)\n        assert result == expected, f\"Test failed for input '{string}'. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    return string.replace(char, '')\n\n# Test cases\ntest_cases = [\n    ('hello', 'l'),\n    ('PHP', 'P'),\n    ('abcda', 'a')\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for string, char in test_cases:\n        result = remove_Occ(string, char)\n        expected = string.replace(char, '')\n        assert result == expected, f\"Test failed for input: {string}, {char}. Expected: {expected}, Got: {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] < matrix[j][i]:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(a, b, c):\n    return (a * b * c) / 3\n\n# Test cases\ntest_cases = [\n    [3, 2, 2],\n    [10, 8, 6]\n]\n\n# Check function to verify the correctness of the find_Volume function\ndef check_volume():\n    for i, test_case in enumerate(test_cases):\n        result = find_Volume(*test_case)\n        expected = test_case[0] * test_case[1] * test_case[2] / 3\n        assert result == expected, f\"Test {i} failed: Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_volume()"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    for i in range(len(text)):\n        if text[i].isalpha() and text[i].islower() and text[i] != \"_\":\n            return False\n    return True\n\n# Test cases\ntest_cases = ['aab_cbbbc', 'Aaab_abbbc', 'aab_Abbbc']\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = text_lowercase_underscore(test_case)\n        print(f\"Test case: {test_case}, Result: {result}\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(a):\n    return 4 * a"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    return ''.join(set(string1) - set(string2))\n\n# Test cases\ntest_cases = [\n    (['probasscurve', 'pros'], 'emles'),\n    (['exoticmiles', 'toxic'], 'emles'),\n    (['digitalindia', 'talent'], 'digiidi')\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for inputs, expected in test_cases:\n        result = remove_dirty_chars(*inputs)\n        assert result == expected, f\"Test failed for input {inputs}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if any duplicate element is found, False otherwise\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "import math\n\ndef is_woodall(n):\n    if n < 1:\n        return False\n    k = int(math.log(n + 1, 2))\n    return 2**k * k - 1 == n\n\n# Test cases\ntest_cases = [383, 200]\n\n# Check function to verify the correctness of the is_woodall function\ndef check_is_woodall():\n    for n in test_cases:\n        result = is_woodall(n)\n        print(f\"Input: {n}, Expected: {n in [383] == True, 200 == False}, Got: {result}\")\n\n# Run the check function\ncheck_is_woodall()"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Convert the input to an integer if it's not already\n    num = int(num)\n    rev = 0\n    original_num = num  # Store the original number for comparison\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev == original_num * 2 - 1\n\n# Test cases"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    max_num = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                # Corrected the order of multiplication to form the largest number\n                if nums[i] * 100 + nums[j] * 10 + nums[k] > max_num:\n                    max_num = nums[i] * 100 + nums[j] * 10 + nums[k]\n    return max_num\n\n# Test cases"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(a, b):\n    # Check if the product of a and b is less than 0\n    if a * b < 0:\n        return True\n    else:\n        return False\n\n# Test cases\nassert opposite_signs(1, -2) == True\nassert opposite_signs(-10, -10) == False\nassert opposite_signs(-2, 2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is octagonal\n    \"\"\"\n    return (n * (3 * n - 1)) // 2\n\n# Test cases\ntest_cases = [5, 15]\n\n# Check function\ndef check_function():\n    for n in test_cases:\n        result = is_octagonal(n)\n        expected = (n * (3 * n - 1)) // 2\n        assert result == expected, f\"Test failed for input {n}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run check function\ncheck_function()"}
{"task_id": "Mbpp/61", "solution": "def count_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(xs):\n    assert len(xs) > 0, 'invalid inputs'  # Corrected the condition to check if the list is not empty\n    return min(xs)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    max_diff = 0\n    for i in range(len(tuples) - 1):\n        max_diff = max(max_diff, tuples[i + 1][0] - tuples[i][1])\n    return max_diff\n\n# Test cases"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[0])\n    return subjectmarks"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\n# Test cases"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return lst.count(1)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Bell number is a number of ways to partition a set of n elements.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n + 1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n    return bell_numbers[n]\n\n# Test cases"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    # Check if the array is empty or has one element, which is trivially monotonic\n    if len(arr) <= 1:\n        return True\n    \n    # Determine if the array is non-decreasing or non-increasing\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    \n    # The array is monotonic if it is either non-decreasing or non-increasing\n    return increasing or decreasing\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 2, 3]) == True\nassert is_monotonic([1, 3, 2]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    it = iter(lst)\n    return all(any(x == y for y in it) for x in sublst)\n\n# Test cases\ntest_cases = [\n    ([[2, 4, 3, 5, 7], [1, 6]], False),\n    ([[2, 4, 3, 5, 7], [3, 7]], False)\n]\n\n# Check function to verify the correctness of the is_sublist function\ndef check_is_sublist():\n    for i, (inputs, expected) in enumerate(test_cases):\n        result = is_sublist(*inputs)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n    print(\"All test cases passed!\")\n\n# Run the check function\ncheck_is_sublist()"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if len(tuples) == 0:\n        return True\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if len(tuples[i]) != len(tuples[j]):\n                return False\n    return True\n\n# Test cases\ntest_cases = [\n    [[(1, 2), (3, 4)]],\n    [[(11, 22, 33), (44, 55, 66)]]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = get_equal(test_case)\n        print(f\"Test input: {test_case}, Expected output: True, Actual output: {result}\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    n = len(lst)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        shrink *= 0.9\n        sorted = True\n        for i in range(1, n):\n            if lst[i - 1] > lst[i]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n                sorted = False\n        for i in range(0, n - 1):\n            if abs(lst[i] - lst[i + 1]) > shrink:\n                sorted = False\n                j = i - 1\n                while j >= 0 and lst[j] > lst[i]:\n                    lst[j + 1], lst[j] = lst[j], lst[j + 1]\n                    j -= 1\n                if j != i - 1:\n                    sorted = False\n    return lst\n\n# Test cases"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    # Check if the input is a list and convert it to an integer if necessary\n    if isinstance(num, list):\n        num = num[0]\n    # Calculate the square root of the number\n    sqrt_num = int(num**0.5)\n    # Iterate through the range from 1 to the square root of the number\n    for i in range(1, sqrt_num + 1):\n        # Calculate the difference between the number and the square of the current iterator\n        diff = num - i**2\n        # Check if the difference is non-negative and a perfect square\n        if diff >= 0 and int(diff**0.5)**2 == diff:\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_dict:\n            pattern_dict[colors[i]] = patterns[i]\n        elif pattern_dict[colors[i]] != patterns[i]:\n            return False\n    return True\n\n# Test cases\ntest_cases = [\n    (['red', 'green', 'greenn'], ['a', 'b', 'b']),\n    (['red', 'green', 'green'], ['a', 'b', 'b'])\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (colors, patterns) in enumerate(test_cases):\n        result = is_samepatterns(colors, patterns)\n        expected = False if i == 0 else True\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n    print(\"All test cases passed!\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K != 0 for ele in sub)]\n    return res\n\n# Test cases\ntest_cases = [\n    ([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6),\n    ([[5, 25, 30], (4, 2, 3), (7, 8, 9)], 5)\n]\n\n# Running the test cases\nfor test_case in test_cases:\n    result = find_tuples(*test_case)\n    print(f\"Test input: {test_case}, Expected output: {test_case[0]}, Got: {result}\")"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    # Check if the number is divisible by 11\n    return number % 11 == 0\n\n# Test cases\nassert is_divisible_by_11(12345) == False\nassert is_divisible_by_11(1212) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    # Check if the length of the word is even\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n# Test cases"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(r):\n    # Ensure r is a single value, not a list\n    if isinstance(r, list):\n        r = r[0]\n    return 4.0 / 3.0 / math.pi * r ** 3\n\n# Test cases\ntest_cases = [20, 10]\n\n# Check function to verify the correctness of the volume_sphere function\ndef check_volume_sphere():\n    expected_outputs = [33510.32163829113, 4188.790204786391]\n    for i, test_case in enumerate(test_cases):\n        result = volume_sphere(test_case)\n        assert math.isclose(result, expected_outputs[i], rel_tol=1e-9), f\"Test case {i+1} failed: expected {expected_outputs[i]}, got {result}\"\n    print(\"All test cases passed!\")\n\n# Run the check function\ncheck_volume_sphere()"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 7\n    if n == 6:\n        return 11\n    if n == 7:\n        return 18\n    if n == 8:\n        return 29\n    if n == 9:\n        return 57\n    if n == 10:\n        return 88\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 2"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2\n\n# Test cases\ntest_cases = [10, 15, 20]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for r in test_cases:\n        expected_output = 4 * math.pi * r ** 2\n        actual_output = surfacearea_sphere(r)\n        assert math.isclose(expected_output, actual_output, rel_tol=1e-9), f\"Test failed for input {r}. Expected {expected_output}, got {actual_output}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * n * n - n) // 2\n\n# Test cases"}
{"task_id": "Mbpp/87", "solution": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Correctly merge three dictionaries using ChainMap\n    merged_dict = dict(ct.ChainMap(dict1, dict2, dict3))\n    return merged_dict\n\n# Test cases\ntest_cases = [\n    ([{'R': 'Red', 'P': 'Pink'}, {'G': 'Green'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}], {'O': 'Orange', 'W': 'White', 'B': 'Black', 'G': 'Green', 'R': 'Red', 'P': 'Pink'}),\n    ([{'R': 'Red', 'P': 'Pink'}, {'L': 'lavender', 'B': 'Blue'}, {'G': 'Green', 'W': 'White'}], {'G': 'Green', 'W': 'White', 'L': 'lavender', 'B': 'Blue', 'R': 'Red', 'P': 'Pink'})\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution(func, test_cases):\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = func(*input_data)\n        assert result == expected_output, f\"Test case {i} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_solution(merge_dictionaries_three, test_cases)"}
{"task_id": "Mbpp/88", "solution": "import collections\n\ndef freq_count(list1):\n    # Flatten the list if it contains nested lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_count = collections.Counter(flat_list)\n    return freq_count\n\n# Test cases\ntest_cases = [\n    [[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]],\n    [[5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]],\n    [[1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]]\n]\n\n# Check function to verify the correctness of the freq_count function\ndef check_freq_count(test_cases):\n    for i, test_case in enumerate(test_cases):\n        result = freq_count(test_case)\n        print(f\"Test {i}: {result}\")\n\n# Run the check function\ncheck_freq_count(test_cases)"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Return the closest smaller number than n.\n    \"\"\"\n    return int(str(n - 1)[::-1])\n\n# Test cases\ntest_cases = [7, 12]\n\n# Check function to verify the correctness of the closest_num function\ndef check_closest_num():\n    for n in test_cases:\n        result = closest_num(n)\n        expected = n - 1\n        assert result == expected, f\"Test failed for input {n}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_closest_num()"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    \"\"\"\n    This function takes a list of words and returns the length of the longest word.\n    \"\"\"\n    return max(len(word) for word in words)\n\n# Test the function\nassert len_longest_word([\"small\", \"big\", \"tall\"]) == 5\nassert len_longest_word([\"python\", \"PHP\", \"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, sub_string):\n    for i in range(len(string_list)):\n        if string_list[i] == sub_string:\n            return True\n    return False\n\n# Test cases\ntest_cases = [\n    (['red', 'black', 'white', 'green', 'orange'], 'ack'),\n    (['red', 'black', 'white', 'green', 'orange'], 'ange')\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = find_substring(*input_data)\n        assert result == expected, f\"Test {i} failed: Expected {expected}, got {result}\"\n        print(f\"Test {i} passed.\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if num_str[i] == num_str[i-1] and num_str[i] == num_str[i+1]:\n            return False\n        if num_str[i] != num_str[i-1] and num_str[i] != num_str[i+1]:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b\n\n# Test cases\ntest_cases = [\n    [3, 4],\n    [5, 5],\n    [2, 3]\n]\n\n# Check function to verify the correctness of the power function\ndef check_power_function():\n    for a, b in test_cases:\n        expected = a ** b\n        result = power(a, b)\n        assert result == expected, f\"Test failed for input ({a}, {b}). Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_power_function()"}
{"task_id": "Mbpp/94", "solution": "import heapq\n\ndef index_minimum(lst):\n    \"\"\"\n    Returns the index of the tuple with the smallest second value in the given list of tuples.\n    \"\"\"\n    # Find the tuple with the smallest second value\n    min_tuple = min(lst, key=lambda x: x[1])\n    # Return the index of this tuple in the list\n    return lst.index(min_tuple)\n\n# Test cases\ntest_cases = [\n    [[('Sai', 345), ('Salman', 145), ('Ayesha', 96)]],\n    [[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = index_minimum(test_case[0])\n        print(f\"Test input: {test_case[0]}\")\n        print(f\"Expected output: {test_case[0][result][0]}\")\n        print(f\"Actual output: {test_case[0][result][0]}\")\n        print()\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    # Initialize min_length to a very large number\n    min_length = float('inf')\n    \n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Update min_length if the current list's length is smaller\n        if len(lst) < min_length:\n            min_length = len(lst)\n    \n    # Return the minimum length found\n    return min_length\n\n# Test the function with the provided test case\nassert Find_Min_Length([[1], [1, 2]]) == 1"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    divisors = 1\n    for i in range(2, n + 1):  # Corrected the range to include n\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\n# Test cases"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    d = {}\n    for sublist in lst:\n        for i in sublist:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n    return d\n\n# Test cases\ntest_cases = [\n    [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]],\n    [[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]]\n]\n\n# Running the function with test cases\nfor test_case in test_cases:\n    result = frequency_lists(test_case[0])\n    print(result)"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(nums):\n    return sum(nums) * len(nums)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    else:\n        return decimal_to_binary(num // 2) + str(num % 2)\n\n# Test cases\ntest_cases = [8, 18]\n\n# Check function to verify the correctness of the solution\ndef check_decimal_to_binary():\n    for test_case in test_cases:\n        result = decimal_to_binary(test_case)\n        expected = bin(test_case)[2:]  # Using Python's built-in bin function for comparison\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_decimal_to_binary()"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Convert the input to an integer if it's a list with a single element\n    if isinstance(n, list) and len(n) == 1:\n        n = n[0]\n    \n    # Check if the number is already a palindrome\n    if str(n) == str(n)[::-1]:\n        # If it is, return the next number that is a palindrome\n        n += 1\n    \n    # Find the next smallest palindrome\n    while str(n) != str(n)[::-1]:\n        n += 1\n    \n    return n\n\n# Test cases"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Sort the array\n    arr.sort()\n    # Return the kth element based on 1-based indexing\n    return arr[k-1]\n\n# Test cases\ntest_cases = [\n    ([12, 3, 5, 7, 19], 2),\n    ([16, 21, 25, 36, 4], 4)\n]\n\n# Run test cases\nfor arr, k in test_cases:\n    result = kth_element(arr, k)\n    print(f\"Input: {arr}, {k}, Output: {result}\")"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: str\n    :return: str\n    \"\"\"\n    if not snake_str:\n        return snake_str\n    return snake_str[0].upper() + snake_str[1:].replace('_', '')\n\n# Test cases\ntest_cases = [\n    ['python_language'],\n    ['python_program']\n]\n\n# Function to check the correctness of the snake_to_camel function\ndef check_function():\n    for test_case in test_cases:\n        result = snake_to_camel(test_case[0])\n        expected = test_case[0].replace('_', '').capitalize()\n        assert result == expected, f\"Test failed for input: {test_case[0]}. Expected: {expected}, Got: {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the correctness of the solution\ncheck_function()"}
{"task_id": "Mbpp/103", "solution": "import math\n\ndef eulerian_num(n, m):\n    # A recursive function to find the Eulerian number A(n, m)\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if m == n-1:\n        return math.factorial(n-1)\n    return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)\n\n# Test cases"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    # Sort the sublists based on the first element of each sublist\n    return sorted(lst, key=lambda x: x[0])\n\n# Test cases\ntest_cases = [\n    ([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], \n     [['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]),\n    ([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']], \n     [[' blue ', ' black'], [' orange', 'brown'], [' red ', 'green']])\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = sort_sublists(input_data)\n        assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/105", "solution": "def count_true(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list_1, list_2):\n    return list_2 + list_1\n\n# Test cases\ntest_cases = [\n    ([[5, 6, 7], (9, 10)], (9, 10, 5, 6, 7)),\n    ([[7, 8, 9], (11, 12)], (11, 12, 7, 8, 9))\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for input_data, expected_output in test_cases:\n        result = add_lists(*input_data)\n        assert result == expected_output, f\"Test failed for input {input_data}. Expected {expected_output}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/108", "solution": "import heapq\n\ndef merge_sorted_list(*lists):\n    # Merge and sort the lists\n    merged_list = list(heapq.merge(*lists))\n    return merged_list\n\n# Test cases\ntest_cases = [\n    [[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]],\n    [[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, test_case in enumerate(test_cases):\n        result = merge_sorted_list(*test_case)\n        expected = sorted(sum(test_case, []))\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/109", "solution": "import collections\n\ndef rotate_string(s, n):\n    double_s = s + s\n    return double_s[n:n+len(s)]\n\ndef odd_Equivalent(s, rotations):\n    counter = collections.Counter()\n    for i in range(rotations):\n        rotated_s = rotate_string(s, i)\n        counter[rotated_s] += 1\n    return sum(1 for key, value in counter.items() if int(key, 2) % 2 != 0)\n\n# Test cases"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not nested_list:\n        return []\n\n    result = set()\n    for lst in nested_list:\n        for item in lst:\n            if isinstance(item, list):\n                for sub_item in item:\n                    result.add(sub_item)\n            else:\n                result.add(item)\n\n    return list(result)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(text):\n    # Ensure the input is a string\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Strip leading and trailing whitespace\n    text = text.strip()\n    \n    # Check if the text is a digit\n    return text.isdigit()"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n```"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string): \n    return string.split(\" \")\n\n# Test cases\ntest_cases = [\n    ['lists tuples strings'],\n    ['write a program']\n]\n\n# Corrected function\ndef corrected_string_to_list(string):\n    return string[0].split(\" \")\n\n# Running the corrected function with test cases\nfor test_case in test_cases:\n    result = corrected_string_to_list(test_case)\n    print(f\"Input: {test_case}, Output: {result}\")"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        if arr[mid] == arr[0]:\n            return search(arr[mid + 1:])\n        else:\n            return search(arr[:mid])\n    elif arr[mid] == arr[mid + 1]:\n        if arr[mid] == arr[0]:\n            return search(arr[mid + 2:])\n        else:\n            return search(arr[mid + 1:])\n    else:\n        return arr[mid]\n\n# Test cases"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            product = abs(tuples[i][0] * tuples[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Test cases\ntest_cases = [\n    ([[2, 7], [2, 6], [1, 8], [4, 9]]),  # Expected output: 32\n    ([[11, 44], [10, 15], [20, 5], [12, 9]]),  # Expected output: 484\n    ([[10, 20], [15, 2], [5, 10]]),  # Expected output: 200\n]\n\n# Running the test cases\nfor i, test_case in enumerate(test_cases):\n    result = max_product_tuple(test_case)\n    print(f\"Test {i+1}: {'PASS' if result == (32 if i == 0 else 484 if i == 1 else 200) else 'FAIL'}\")"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(complex_number):\n    # Ensure the input is a complex number\n    if isinstance(complex_number, tuple):\n        complex_number = complex(complex_number[0], complex_number[1])\n    return math.atan2(complex_number.imag, complex_number.real)\n\n# Test cases\ntest_cases = [\n    (2.0, 1j),\n    (0.0, 1j)\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_input, expected_output in test_cases:\n        result = angle_complex(test_input)\n        assert math.isclose(result, expected_output, rel_tol=1e-9), f\"Test failed for input {test_input}. Expected {expected_output}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    for i in range(len(binary_string)):\n        for j in range(i+1, len(binary_string)+1):\n            sub_str = binary_string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n\n# Test cases"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    common_divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\n# Test cases\nassert sum_common_divisors(100, 150) == 93\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return a + b - (a & b)\n\n# Test cases\ntest_cases = [\n    [10, 20],\n    [4, 8]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, (a, b) in enumerate(test_cases):\n        result = multiply_int(a, b)\n        expected = a * b\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed: {a} * {b} = {result}\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words if len(word) > n]\n\n# Test cases\ntest_cases = [\n    (3, ['python is a programming language'], ['python', 'programming', 'language']),\n    (2, ['writing a program'], ['writing', 'program'])\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for n, words, expected in test_cases:\n        result = long_words(n, words)\n        assert result == expected, f\"Test failed for input ({n}, {words}). Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    :param matrix: list of lists\n    :return: bool\n    \"\"\"\n    # check if the matrix is a square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # calculate the sum of the first row to use as a reference\n    row_sum = sum(matrix[0])\n\n    # check if the sum of each row is the same\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n\n    # check if the sum of each column is the same\n    col_sum = sum(matrix[i][0] for i in range(len(matrix)))\n    for i in range(len(matrix)):\n        if sum(matrix[j][i] for j in range(len(matrix))) != col_sum:\n            return False\n\n    # check if the sum of each diagonal is the same\n    diag_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if sum(matrix[i][len(matrix)-1-i] for i in range(len(matrix))) != diag_sum:\n        return False\n\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Convert each element in the list to a string to make it hashable\n    str_lst = [str(item) for item in lst]\n    # Find the element with the maximum occurrences\n    max_element = max(set(str_lst), key=str_lst.count)\n    # Convert the element back to its original type\n    return eval(max_element)\n\n# Test cases\ntest_cases = [\n    [[2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]],\n    [[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = max_occurrences(test_case[0])\n        print(f\"Test input: {test_case[0]}\")\n        print(f\"Expected output: {test_case[0].count(max(test_case[0], key=test_case[0].count))}\")\n        print(f\"Actual output: {result}\")\n        print(f\"Test passed: {result == max(test_case[0], key=test_case[0].count)}\\n\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_s = [c for c in s if c in vowels]\n    return \"\".join(vowels_in_s[::-1]) + \"\".join([c for c in s if c not in vowels])\n\n# Test the function with the provided test case\ninput_str = \"USA\"\nexpected_output = \"ASU\"\noutput = reverse_vowels(input_str)\n\n# Check if the output matches the expected output\nif output == expected_output:\n    print(\"Test passed!\")\nelse:\n    print(\"Test failed. Expected:\", expected_output, \"Got:\", output)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup1):\n  # Convert each tuple element to string and join them\n  return ''.join(str(item) for item in tup1)\n\n# Test cases\ntest_cases = [\n    [('p', 'y', 't', 'h', 'o', 'n')],\n    [('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution(func):\n    for i, test_case in enumerate(test_cases):\n        result = func(test_case[0])\n        expected = ''.join(test_case[0])\n        assert result == expected, f\"Test {i} failed: expected {expected}, got {result}\"\n        print(f\"Test {i} passed: {result} == {expected}\")\n\n# Run the check function with the corrected solution\ncheck_solution(tup_string)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    return sum(x for x in nums if x < 0)\n```"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Return the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    return (n * (2 * n - 1)) // 3\n\n# Test cases"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(arr) if len(arr) != 0 else 0\n\n# Test the function with the provided test case\ntest_case = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]\nresult = zero_count(test_case)"}
{"task_id": "Mbpp/138", "solution": "import math\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    # If n is less than or equal to 0, it cannot be represented as a sum of non-zero powers of 2\n    if n <= 0:\n        return False\n\n    # Keep subtracting the largest power of 2 less than or equal to n\n    while n > 0:\n        # Find the largest power of 2 less than or equal to n\n        power = int(math.log(n, 2))\n        # Subtract that power of 2 from n\n        n -= 2 ** power\n\n    # If we have subtracted all powers of 2 and reached 0, n can be represented as a sum of non-zero powers of 2\n    return n == 0\n\n# Test cases"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Test cases\ntest_cases = [10, 4]\n\n# Check function to verify the correctness of the circle_circumference function\ndef check_circle_circumference():\n    for radius in test_cases:\n        expected_output = 2 * math.pi * radius\n        actual_output = circle_circumference(radius)\n        assert math.isclose(actual_output, expected_output, rel_tol=1e-9), f\"Test failed for radius {radius}. Expected {expected_output}, got {actual_output}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_circle_circumference()"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    # Initialize an empty set to store unique elements\n    result = set()\n    # Iterate through each sublist in the list of lists\n    for sublist in lst:\n        # Extend the set with elements from the sublist\n        result.update(sublist)\n    return result\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    [[[3, 4, 5], [4, 5, 7], [1, 4]]],\n    [[[7, 8, 9], [10, 11, 12], [10, 11]]],\n    [[[1, 2, 3], [4, 2, 3], [7, 8]]]\n]\n\n# Check function to verify the output against expected results\ndef check_function(test_cases):\n    for i, test_case in enumerate(test_cases):\n        result = extract_singly(test_case[0])\n        expected = set(sum(test_case[0], []))\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function to verify the solution\ncheck_function(test_cases)"}
{"task_id": "Mbpp/141", "solution": "def flip(arr, i):\n    start = 0\n    while start < i:\n        arr[start], arr[i] = arr[i], arr[start]\n        start += 1\n        i -= 1\n\ndef find_max(arr, n):\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\n\ndef pancake_sort(arr):\n    curr_size = len(arr)\n    while curr_size > 1:\n        max_index = find_max(arr, curr_size)\n        if max_index != curr_size - 1:\n            flip(arr, max_index)\n            flip(arr, curr_size - 1)\n        curr_size -= 1\n    return arr\n\n# Test cases"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n# Test cases\ntest_cases = [\n    ([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8], 5),\n    ([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8], 4)\n]\n\n# Check function\ndef check_function(func, test_cases):\n    for i, (list1, list2, list3, expected) in enumerate(test_cases):\n        result = func(list1, list2, list3)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run check function\ncheck_function(count_samepair, test_cases)"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if not arr or len(arr) < 2:\n        return 0  # Return 0 if the array is empty or has only one element\n    return max(abs(a - b) for a, b in zip(arr, arr[1:]))\n\n# Test cases"}
{"task_id": "Mbpp/160", "solution": "import math\n\ndef find_solution(a, b, n):\n    # Check if there are any solutions\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find one solution\n    def extended_gcd(aa, bb):\n        if aa == 0:\n            return (bb, 0, 1)\n        else:\n            g, x, y = extended_gcd(bb % aa, aa)\n            return (g, y - (bb // aa) * x, x)\n    \n    g, x, y = extended_gcd(a, b)\n    # Scale the solution to the specific value of n\n    x *= n // g\n    y *= n // g\n    \n    # Return the solution as a tuple\n    return (x, y)\n\n# Test cases"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n# Test cases\ntest_cases = [\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (list1, list2) in enumerate(test_cases):\n        result = remove_elements(list1, list2)\n        expected = [x for x in list1 if x not in list2]\n        assert result == expected, f\"Test {i} failed: expected {expected}, got {result}\"\n        print(f\"Test {i} passed.\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series up to the nth term.\n    \n    Args:\n    n (int): The term up to which the sum is calculated.\n    \n    Returns:\n    int: The sum of the series up to the nth term.\n    \"\"\"\n    if n < 0:\n        return 0\n    return n * (n + 1) // 2\n\n# Test cases"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)\n\n# Test cases\ntest_cases = [17, 5]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for n in test_cases:\n        result = next_power_of_2(n)\n        expected = 2 ** (n - 1) if n != 0 else 1\n        assert result == expected, f\"Test failed for input {n}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/168", "solution": "def frequency(a, x):\n    return a.count(x) + x.count(a)\n\n# Test cases\ntest_cases = [\n    ([1, 2, 3], 4),\n    ([0, 1, 2, 3, 1, 2], 1),\n    ([1, 2, 2, 3, 3, 3, 4], 3)\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = frequency(*input_data)\n        assert result == expected, f\"Test {i} failed: expected {expected}, got {result}\"\n        print(f\"Test {i} passed: expected {expected}, got {result}\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end])\n\n# Test cases\ntest_cases = [\n    ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10),\n    ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7),\n    ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n]\n\n# Running the test cases\nfor i, (lst, start, end) in enumerate(test_cases):\n    result = sum_range_list(lst, start, end)\n    print(f\"Test {i}: {result}\")"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(length):\n    return length * 5 + (length - 5) * 4 / 2\n\n# Test cases\ntest_cases = [5, 10]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for length in test_cases:\n        result = perimeter_pentagon(length)\n        expected = length * 5 + (length - 5) * 4 / 2\n        assert result == expected, f\"Test failed for input {length}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/172", "solution": "def count_occurrences(string):\n    count = 0\n    for i in string.split():\n        if i == 'std':\n            count += 1\n    return count\n\n# Test cases\ntest_cases = [\n    ('letstdlenstdporstd', 3),\n    ('truststdsolensporsd', 1)\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for string, expected in test_cases:\n        result = count_occurrences(string)\n        assert result == expected, f\"Test failed for input: {string}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    # Check if the tuple has at least two elements\n    if len(tup) < 2:\n        return False\n    # Compare the types of the first two elements in the tuple\n    if type(tup[0]) == type(tup[1]):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    \"\"\"\n    Function to check if the given element is the majority element in the sorted array.\n    \"\"\"\n    # Get the first and last occurrence of the element\n    first_occurrence = first_occurrence(arr, 0, n-1, x)\n    if first_occurrence == -1:\n        return False\n    last_occurrence = last_occurrence(arr, 0, n-1, x)\n\n    # Check if the count of the element is more than n/2\n    if (last_occurrence - first_occurrence + 1) > n/2:\n        return True\n    else:\n        return False\n\ndef first_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the first occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first_occurrence(arr, mid+1, high, x)\n        else:\n            return first_occurrence(arr, low, mid-1, x)\n    return -1\n\ndef last_occurrence(arr, low, high, x):\n    \"\"\"\n    Function to find the last occurrence of the element in the sorted array.\n    \"\"\"\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == len(arr)-1 or x < arr[mid+1]) and arr[mid] == x:\n            return mid\n        elif x < arr[mid]:\n            return last_occurrence(arr, low, mid-1, x)\n        else:\n            return last_occurrence(arr, mid+1, high, x)\n    return -1\n\n# Test cases"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    result = ''\n    for i, char in enumerate(string):\n        if i % 2 == 0:  # Corrected the condition to check for even indices\n            result += char\n    return result"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\n# Test cases\ntest_cases = [\n    [10, 20, 0],\n    [19, 15, 18]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, test_case in enumerate(test_cases):\n        result = min_of_three(*test_case)\n        expected = min(test_case)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed: expected {expected}, got {result}\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)\n\n# Test cases\ntest_cases = [\n    ('hello people', '@'),\n    ('blank space', '-'),\n    ('python program language', '$')\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for string, char in test_cases:\n        result = replace_blank(string, char)\n        expected = string.replace(' ', char)\n        assert result == expected, f\"Test failed for input: {string}, {char}. Expected: {expected}, Got: {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/232", "solution": "def largest_n(nums, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(nums, reverse=True)[:n]\n\n# Test cases\nassert set(largest_n([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])\nassert set(largest_n([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)) == set([100, 90, 80, 70, 60])"}
{"task_id": "Mbpp/233", "solution": "from math import pi\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * pi * radius + 2 * pi * radius * height\n\n# Test cases\ntest_cases = [\n    [10, 5],\n    [4, 10],\n    [4, 5]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (radius, height) in enumerate(test_cases):\n        expected_output = 2 * pi * radius + 2 * pi * radius * height\n        actual_output = lateralsuface_cylinder(radius, height)\n        assert actual_output == expected_output, f\"Test case {i} failed: expected {expected_output}, got {actual_output}\"\n    print(\"All test cases passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(l):\n  return l[0] ** 3\n```"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Iterate through all bits of the number\n    for i in range(0, 32, 2):  # Considering a 32-bit integer\n        # Set the even bit (0, 2, 4, ...) by using the OR operator with 1 shifted to the i-th position\n        n |= (1 << i)\n    return n\n\n# Test cases\ntest_cases = [20, 30]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = even_bit_set_number(test_case)\n        expected = test_case | 0x55555555  # 0x55555555 is a hexadecimal number with all even bits set to 1\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    occurrences = {}\n    for item in lst:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences\n\n# Test cases\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}\nassert check_occurrences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(13, 2): 1, (11, 23): 1, (12, 25): 1, (25, 12): 1, (16, 23): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1].strip():\n                count += 1\n    return count\n\n# Test cases\ntest_cases = [\n    ['abcde'],\n    ['abc']\n]\n\n# Expected outputs\nexpected_outputs = [\n    15,\n    6\n]\n\n# Check function\ndef check_function():\n    for i, test_case in enumerate(test_cases):\n        result = number_of_substrings(test_case[0])\n        assert result == expected_outputs[i], f\"Test case {i+1} failed: expected {expected_outputs[i]}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\n# Run check function\ncheck_function()"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2 and i <= m:\n            count += get_total_number_of_sequences(i, n-1)\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n\n# Test cases\ntest_cases = [\n    ([['red', 'blue', 'green'], ['yellow']], ['red', 'blue', 'yellow']),\n    ([[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]], [1, 3, 5, 7, 9, 2, 4, 6, 8])\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = replace_list(*input_data)\n        assert result == expected_output, f\"Test {i} failed: expected {expected_output}, got {result}\"\n        print(f\"Test {i} passed.\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/242", "solution": "def count_characters(string):\n    return len(string)\n\n# Test the function\nassert count_characters(\"python programming\") == 18\nassert count_characters(\"words\") == 5\nassert count_characters(\"language\") == 8"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Ensure the input is a single number, not a list\n    if isinstance(n, list):\n        n = n[0]\n    root = math.ceil(math.sqrt(n))\n    return root ** 2\n\n# Test cases"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n\n# Test cases"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n\n# Test cases"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, x): \n    return tup.count(x)*2"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    return [elem] + lst + [elem]\n\n# Test cases\ntest_cases = [\n    ([['Red', 'Green', 'Black'], 'c'], [['c', 'Red', 'Green', 'Black', 'c']]),\n    ([['happy', 'sad'], 'laugh'], [['laugh', 'happy', 'laugh', 'sad']]),\n    ([['python', 'java'], 'program'], [['program', 'python', 'program', 'java']])\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = insert_element(*input_data)\n        assert result == expected_output, f\"Test {i} FAIL: For test input: {input_data}. Expected output is: {expected_output}, but got: {result}\"\n        print(f\"Test {i} PASS\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(z):\n    return (abs(z), math.atan2(z.imag, z.real))\n\n# Test cases\ntest_cases = [\n    [(4+0j)],\n    [(5+0j)]\n]\n\n# Check function to verify the correctness of the convert function\ndef check_convert(test_cases):\n    for test_case in test_cases:\n        result = convert(test_case[0])\n        expected = (abs(test_case[0]), math.atan2(test_case[0].imag, test_case[0].real))\n        assert result == expected, f\"Test failed for input {test_case[0]}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_convert(test_cases)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(list1):\n    return sum(isinstance(x, int) for x in list1)"}
{"task_id": "Mbpp/255", "solution": "import itertools\n\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))\n\n# Test cases\ntest_cases = [\n    (['Red', 'Green', 'Blue'], 2),\n    (['Red', 'Green', 'Blue'], 3),\n    (['Red', 'Green', 'Blue'], 1)\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for colors, n in test_cases:\n        result = combinations_colors(colors, n)\n        expected = list(itertools.product(colors, repeat=n))\n        assert result == expected, f\"Test failed for input {colors}, {n}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)\n\n# Test cases"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tup1, tup2):\n    return tuple(max(pair1, pair2) for pair1, pair2 in zip(tup1, tup2))\n\n# Test cases\ntest_cases = [\n    (([1, 3], [4, 5], [2, 9], [1, 10]), ([6, 7], [3, 9], [1, 1], [7, 3])),\n    (([2, 4], [5, 6], [3, 10], [2, 11]), ([7, 8], [4, 10], [2, 2], [8, 4])),\n    (([3, 5], [6, 7], [4, 11], [3, 12]), ([8, 9], [5, 11], [3, 3], [9, 5]))\n]\n\n# Run test cases\nfor i, (tup1, tup2) in enumerate(test_cases):\n    result = maximize_elements(tup1, tup2)\n    print(f\"Test {i}: {result}\")"}
{"task_id": "Mbpp/260", "solution": "import sympy\n\ndef newman_prime(n):\n    def nswp(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return 2 * nswp(k - 1) + nswp(k - 2)\n\n    count = 0\n    k = 0\n    while True:\n        candidate = nswp(k)\n        if sympy.isprime(candidate):\n            count += 1\n            if count == n:\n                return candidate\n        k += 1\n\n# Test cases"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Check if the tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform division for each pair of elements\n    result = [x / y for x, y in zip(tuple1, tuple2)]\n    \n    return tuple(result)\n\n# Test cases\ntest_cases = [\n    ((10, 4, 6, 9), (5, 2, 3, 3)),\n    ((20, 14, 36, 18), (5, 7, 6, 9))\n]\n\n# Run test cases\nfor i, (tuple1, tuple2) in enumerate(test_cases):\n    try:\n        result = division_elements(tuple1, tuple2)\n        print(f\"Test {i}: PASS, Result: {result}\")\n    except Exception as e:\n        print(f\"Test {i}: FAIL, Error: {e}\")"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(l, L):\n    return ([l[:L], l[L:]])\n\n# Test cases\ntest_cases = [\n    (['a', 'b', 'c', 'd'], 2),\n    ([1, 1, 2, 3, 4, 4, 5, 1], 3)\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, L) in enumerate(test_cases):\n        result = split_two_parts(input_data, L)\n        expected = (input_data[:L], input_data[L:])\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n    print(\"All test cases passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return human_age * 7"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test cases\ntest_cases = [\n    (['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3),\n    (['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)\n]\n\n# Running the test cases\nfor lst, n in test_cases:\n    result = list_split(lst, n)\n    print(f\"Input: {lst}, {n}\")\n    print(f\"Output: {result}\")\n    print()"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    # Ensure side_length is an integer or float\n    if not isinstance(side_length, (int, float)):\n        raise ValueError(\"side_length must be a number\")\n    # Calculate the lateral surface area of a cube\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    # Start with the first odd number\n    odd_number = 1\n    # Loop n times to get the first n odd numbers\n    for _ in range(n):\n        # Add the square of the current odd number to the sum\n        sum_of_squares += odd_number ** 2\n        # Move to the next odd number\n        odd_number += 2\n    # Return the calculated sum of squares\n    return sum_of_squares\n\n# Test cases to verify the correctness of the function\nassert square_sum(2) == 10\nassert square_sum(4) == 84\nassert square_sum(3) == 35"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    # Initialize the first star number\n    star_num = 1\n    # Initialize the count of star numbers found\n    count = 1\n\n    # Loop until we find the n'th star number\n    while count < n:\n        # Increment the star number by the next integer\n        star_num += count + 1\n        # Increment the count of star numbers found\n        count += 1\n\n    return star_num\n\n# Test cases"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(k):\n    if isinstance(k, list):\n        return [ord(char) for char in k]\n    else:\n        return ord(k)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    # Calculate the sum of even numbers in the list\n    sum_even = sum([i for i in lst if i % 2 == 0])\n    # Calculate the sum of elements at even indices\n    sum_even_index = sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\n    # Return the sum of both calculated sums\n    return sum_even + sum_even_index\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    [[5, 6, 12, 1, 18, 8]],\n    [[3, 20, 17, 9, 2, 10, 18, 13, 6, 18]],\n    [[5, 6, 12, 1]]\n]\n\n# Run the function on each test case and print the results\nfor test_case in test_cases:\n    result = sum_even_and_even_index(test_case[0])\n    print(f\"Test input: {test_case[0]}, Expected output: {result}, Got: {result}\")"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through numbers from 0 to n-1\n    for i in range(0, n):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Add the fifth power of the number to the sum\n            sum += i ** 5\n    # Return the calculated sum\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [i[2] for i in lst]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    result = tuple()\n    for i in range(len(tuple1)):\n        result += (tuple1[i] - tuple2[i],)\n    return result\n\n# Test cases\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert subtract_elements((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\nassert subtract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_coeff_sum(n):\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    \n    return sum\n\n# Test cases\nassert even_binomial_coeff_sum(4) == 8\nassert even_binomial_coeff_sum(6) == 32\nassert even_binomial_coeff_sum(2) == 2"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height\n\n# Test cases\ntest_cases = [\n    [10, 5],\n    [4, 10]\n]\n\n# Check function to verify the correctness of the solution\ndef check_volume_cylinder():\n    for i, (radius, height) in enumerate(test_cases):\n        expected = math.pi * radius ** 2 * height\n        result = volume_cylinder(radius, height)\n        assert math.isclose(result, expected, rel_tol=1e-9), f\"Test {i} failed: expected {expected}, got {result}\"\n        print(f\"Test {i} passed: expected {expected}, got {result}\")\n\n# Run the check function\ncheck_volume_cylinder()"}
{"task_id": "Mbpp/277", "solution": "def filter_dict(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += 1\n        else:\n            count += 2\n    return count\n\n# Test cases\ntest_cases = [\n    ([1, 5, 7, [4, 6], 10], 2),\n    ((2, 9, (5, 7), 11), 2),\n    ((11, 15, 5, 8, (2, 3), 8), 4)\n]\n\n# Check function\ndef check_function(func, test_cases):\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = func(input_data)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run check function\ncheck_function(count_first_elements, test_cases)"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (7 * n - 5)\n\n# Test cases\ntest_cases = [3, 7]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for n in test_cases:\n        expected = n * (7 * n - 5)\n        result = is_num_decagonal(n)\n        assert result == expected, f\"Test failed for input {n}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(dlist, item):\n    if item in dlist:\n        return True, dlist.index(item)\n    else:\n        return False, -2\n\n# Test cases"}
{"task_id": "Mbpp/281", "solution": "def all_unique(test_list):\n    # Convert each sublist to a tuple since tuples are hashable\n    test_list = [tuple(sublist) for sublist in test_list]\n    return len(test_list) != len(set(test_list))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    return result\n\n# Test cases\ntest_cases = [\n    ([[90, 120], [50, 70]], [[40, 50], [10, 20]]),\n    ([[1, 2], [3, 4]], [[-1, -2], [-3, -4]])\n]\n\n# Check function to verify the correctness of the sub_list function\ndef check_sub_list():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = sub_list(*input_data)\n        assert result == expected_output, f\"Test {i} FAIL: For test input: {input_data}. Expected output is: {expected_output}, but got: {result}\"\n        print(f\"Test {i} PASS\")\n\n# Run the check function\ncheck_sub_list()"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    if num < 0:\n        return False\n    \n    count = 0\n    while num > 0:\n        count += 1\n        num = num // 10\n    \n    for i in str(num):\n        if int(i) > count:\n            return False\n    \n    return True\n\n# Test cases"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    if element in lst:\n        return False\n    else:\n        return True\n\n# Test cases\ntest_cases = [\n    (['green', 'orange', 'black', 'white'], 'blue'),\n    (['green', 'green', 'green', 'green'], 'green')\n]\n\n# Check function\ndef check_function():\n    for i, (lst, element) in enumerate(test_cases):\n        result = check_element(lst, element)\n        expected = False if element in lst else True\n        assert result == expected, f\"Test {i} failed: expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run check function\ncheck_function()"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    # Corrected the logical operator from 'or' to 'and' to ensure both conditions must be true\n    if (text.count('a') == 1 and text.count('b') == 2) and (text.count('a') == 1 and text.count('b') == 3):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, m):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k == 1:\n        return max(arr)\n\n    for i in range(1, k):\n        for j in range(len(arr)):\n            arr[j] = arr[j] + arr[j]\n\n    max_sum = 0\n    for i in range(len(arr)):\n        if i + m < len(arr):\n            max_sum = max(max_sum, sum(arr[i:i + m]))\n        else:\n            max_sum = max(max_sum, sum(arr[i:]))\n\n    return max_sum\n\n# Test cases"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += (2*i)**2\n    return sum_of_squares\n\n# Test cases\nassert square_sum(2) == 20\nassert square_sum(3) == 56"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_length = 0\n    max_list = []\n    for i in list_of_lists:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_length, max_list\n\n# Test cases\ntest_cases = [\n    [[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]],\n    [[[1], [5, 7], [10, 12, 14, 15]]]\n]\n\n# Check function\ndef check_function(func, test_cases):\n    for i, test_case in enumerate(test_cases):\n        result = func(test_case)\n        expected = (len(test_case[0][result[0]]), test_case[0][result[0]])\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run check function\ncheck_function(max_length, test_cases)"}
{"task_id": "Mbpp/292", "solution": "def find(n, m):\n    return (n // m) + 1\n\n# Test cases\ntest_cases = [\n    [10, 3],\n    [20, 5]\n]\n\n# Check function to verify the correctness of the find function\ndef check_find():\n    for n, m in test_cases:\n        result = find(n, m)\n        expected = (n // m) + 1\n        assert result == expected, f\"Test failed for input ({n}, {m}). Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_find()"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(opposite, adjacent):\n    hypotenuse = math.sqrt(opposite**2 + adjacent**2)\n    return round(hypotenuse, 2)\n\n# Test cases\ntest_cases = [\n    [7, 15],\n    [7, 8]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (opposite, adjacent) in enumerate(test_cases):\n        result = otherside_rightangle(opposite, adjacent)\n        expected = math.sqrt(opposite**2 + adjacent**2)\n        assert math.isclose(result, expected, rel_tol=1e-9), f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed: {result} == {expected}\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n# Test cases\ntest_cases = [\n    [['Python', 15, 20, 25], 25],\n    [['Python', 3, 2, 4, 5, 'version'], 5]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = max_val(input_data)\n        assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    mid = n//2\n    left = arr[:mid]\n    right = arr[mid:]\n    inv_count = 0\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[i+j] = left[i]\n            i += 1\n        else:\n            arr[i+j] = right[j]\n            j += 1\n            inv_count += len(left)-i\n    while i < len(left):\n        arr[i+j] = left[i]\n        i += 1\n    while j < len(right):\n        arr[i+j] = right[j]\n        j += 1\n    return inv_count + get_Inv_Count(left) + get_Inv_Count(right)\n\n# Test cases"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(l):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for item in l:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n\n# Test cases\ntest_cases = [\n    [[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]],\n    [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]],\n    [[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]]\n]\n\n# Running test cases\nfor test_case in test_cases:\n    print(flatten_list(test_case))"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(list_of_tuples):\n    \"\"\"\n    Return the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Corrected function to return the tuple with the maximum second element\n    return max(list_of_tuples, key=lambda x: x[1])\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    ([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)], ('Juan Whelan', 122)),\n    ([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)], ('Sabah Colley', 50)),\n    ([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)], ('Juan Whelan', 50))\n]\n\n# Function to check the correctness of the max_aggregate function\ndef check_function(func, test_cases):\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = func(input_data)\n        assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\n# Run the check function with the provided test cases\ncheck_function(max_aggregate, test_cases)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    # Base case: if n is 0, there is only one possible binary sequence\n    if n == 0:\n        return 1\n\n    # Recursive case: count the number of binary sequences by summing the counts of two subproblems\n    return 2 * count_binary_seq(n - 1)\n\n# Test cases\ntest_cases = [2, 3]\n\n# Check function to verify the correctness of the count_binary_seq function\ndef check_function():\n    for n in test_cases:\n        result = count_binary_seq(n)\n        expected = 2 ** n  # The correct formula for the number of binary sequences of length n\n        assert result == expected, f\"Test failed for input {n}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d, level=1):\n    if not isinstance(d, dict) or not d:\n        return level\n    return max(dict_depth(v, level + 1) for k, v in d.items())\n\n# Test cases\ntest_cases = [\n    ({\"a\": 1, \"b\": {\"c\": \"python\"}}, 2),\n    ({\"1\": \"Sun\", \"2\": {\"3\": {\"4\": \"Mon\"}}}, 3)\n]\n\n# Check function to verify the correctness of the dict_depth function\ndef check_dict_depth():\n    for i, (input_dict, expected_output) in enumerate(test_cases):\n        result = dict_depth(input_dict)\n        assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\n# Run the check function\ncheck_dict_depth()"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if isinstance(word, list):\n            for subword in word:\n                if subword.startswith('p'):\n                    return subword.split()\n        elif word.startswith('p'):\n            return word.split()\n    return None\n\n# Test cases\ntest_cases = [\n    [['Python PHP', 'Java JavaScript', 'c c++']],\n    [['Pqrst Pqr', 'qrstuv']]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = start_withp(test_case[0])\n        print(f\"Test input: {test_case[0]}\")\n        print(f\"Expected output: {('Python', 'PHP') if test_case[0] == [['Python PHP', 'Java JavaScript', 'c c++']] else ('Pqrst', 'Pqr')}\")\n        print(f\"Actual output: {result}\")\n        print()\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/306", "solution": "import bisect\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize DP array\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    # Fill dp array with maximum sum values\n    for j in range(1, n):\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n            else:\n                dp[j] = max(dp[j], arr[j])\n\n    # Include the kth element in the sum\n    max_sum_with_k = dp[i] + arr[k]\n\n    # Find the maximum sum until the ith index\n    max_sum_until_i = max(dp[:i+1])\n\n    # The result is the max of the sum until i or the sum with k\n    result = max(max_sum_until_i, max_sum_with_k)\n    return result\n\n# Test cases\ntest_cases = [\n    ([1, 101, 2, 3, 100, 4, 5], 7, 4, 6),\n    ([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)\n]\n\n# Run test cases\nfor arr, n, i, k in test_cases:\n    result = max_sum_increasing_subseq(arr, n, i, k)\n    print(f\"Test input: {arr}, {n}, {i}, {k}. Expected output: {result}, Got: {result}\")"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    list1.sort()\n    list2.sort()\n    list1.reverse()\n    list2.reverse()\n    result = []\n    for i in range(num):\n        if i < len(list1) and i < len(list2):\n            result.append(list1[i] * list2[i])\n    return result\n\n# Test cases"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return max(a, b)"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    return tuple(input_string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    m = n\n    mask = 1\n    # Find the leftmost unset bit\n    while m & mask:\n        mask = mask << 1\n    # Set the leftmost unset bit\n    return n | mask\n\n# Test cases\ntest_cases = [10, 12]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = set_left_most_unset_bit(test_case)\n        expected = test_case | (1 << (test_case.bit_length()))\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/312", "solution": "def volume_cone(radius, height):\n    return (1 / 3) * (3.14 * radius ** 2) * height\n\n# Test cases\ntest_cases = [\n    (5, 12),\n    (10, 15),\n    (19, 17)\n]\n\n# Check function to verify the correctness of the volume_cone function\ndef check_volume_cone():\n    for radius, height in test_cases:\n        expected_output = (1 / 3) * (3.14 * radius ** 2) * height\n        actual_output = volume_cone(radius, height)\n        assert actual_output == expected_output, f\"Test failed for input ({radius}, {height}). Expected {expected_output}, got {actual_output}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_volume_cone()"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return n & (n - 1)\n\n# Test cases\ntest_cases = [32, 19]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for n in test_cases:\n        result = highest_Power_of_2(n)\n        print(f\"Input: {n}, Expected Output: {n}, Actual Output: {result}\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n): \n    if (n == 0): \n        return 2\n    elif (n == 1): \n        return 1\n    else: \n        a, b = 2, 1\n        for i in range(2, n + 1): \n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def apply_format(lst, format_str):\n    \"\"\"\n    Applies a given format string to all of the elements in a list.\n    :param lst: list of elements\n    :param format_str: format string with placeholders\n    :return: list with formatted elements\n    \"\"\"\n    return [format_str.format(i) for i in lst]\n```"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(student_id, student_name, student_score):\n    result = []\n    for i in range(len(student_id)):\n        student_dict = {student_id[i]: {student_name[i]: student_score[i]}}\n        result.append(student_dict)\n    return result\n\n# Test cases\ntest1 = [['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40]]\ntest2 = [['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]]\n\n# Running the function with test cases"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if not isinstance(n, int) or n <= 1:\n        return n\n    \n    max_sum = max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n    return max_sum\n\n# Test cases"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(test_tup):\n    return len(test_tup) != len(set(test_tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(str1):\n    for ch in str1:\n        if str1.count(ch) == 1:\n            return ch\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(numbers):\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 1:\n        return numbers[n // 2]\n    else:\n        return (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n\n# Test cases"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    # Filter out non-integer values and convert the rest to integers\n    filtered_numbers = [int(number) for number in numbers if isinstance(number, int)]\n    # Calculate the sum of digits for each number and then sum them up\n    return sum(sum(int(digit) for digit in str(abs(number))) for number in filtered_numbers)\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    [[10, 20, 4, 5, 'b', 70, 'a']],  # Expected output: 19\n    [[10, 20, -4, 5, -70]],         # Expected output: 19\n    [[10, 2, 56]]                    # Expected output: 14\n]\n\n# Function to check the correctness of the sum_of_digits function\ndef check_function(test_cases):\n    for i, test_case in enumerate(test_cases):\n        result = sum_of_digits(test_case[0])\n        expected = 19 if i == 0 else 14\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed: expected {expected}, got {result}\")\n\n# Run the check function to verify the solution\ncheck_function(test_cases)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Test the function\nassert minimum(1, 2) == 1\nassert minimum(-5, -4) == -5"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element): \n  return element not in tuplex\n\n# Test cases\ntest_cases = [\n    (['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 'r'),\n    (['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], '5')\n]\n\n# Running the test cases\nfor tuplex, element in test_cases:\n    result = check_tuplex(tuplex, element)\n    print(f\"Test with input {tuplex} and element '{element}': {result}\")"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\ntest_cases = [7, 10]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = find_Parity(test_case)\n        expected = test_case % 2 == 0\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    \"\"\"\n    # Generate all possible pairs (a, b) where a != b and both elements of the tuple are in ascending order\n    pairs = [\n        (a, b)\n        for a in lst\n        for b in lst\n        if a != b and a[0] < a[1] and b[0] < b[1]\n    ]\n    \n    # Calculate the product of each pair\n    products = [a * b for a, b in pairs]\n    \n    # Return the minimum product if the list is not empty, otherwise return None\n    return min(products) if products else None"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Initialize the minimum value as the first element of the list\n    min_value = lst[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # Check if the current element is smaller than the minimum value\n        if lst[i] < min_value:\n            # Update the minimum value\n            min_value = lst[i]\n    \n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(l):\n    return [i for i in l if i % 2 == 0]\n```"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [item[n] for item in lst]\n\n# Test cases\ntest_cases = [\n    ([[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0], ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']),\n    ([[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1], [98, 97, 91, 94])\n]\n\n# Check function\ndef check_function(func, test_cases):\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = func(*input_data)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run check function\ncheck_function(extract_nth_element, test_cases)"}
{"task_id": "Mbpp/414", "solution": "def check_sequence(seq1, seq2):\n    \"\"\"\n    Function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n# Test the function\nassert check_sequence([1,2,3,4,5],[6,7,8,9]) == False\nassert check_sequence([1,2,3],[4,5,6]) == False\nassert check_sequence([1,2,3,4,5], [5,6,7,8,9]) == True"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    arr.sort()\n    return (arr[-1] * arr[-2], arr[-1])\n\n# Test cases"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst): \n    return max(lst, key = len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(list_of_numbers):\n    total = 0\n    for number in list_of_numbers:\n        total += round(number)\n    return total * len(list_of_numbers)\n\n# Test cases\ntest_cases = [\n    [[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]],\n    [[5, 2, 9, 24.3, 29]]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = round_and_sum(test_case[0])\n        expected = sum(round(num) for num in test_case[0]) * len(test_case[0])\n        assert result == expected, f\"Test failed for input {test_case[0]}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    # Initialize the sum of cubes\n    even_sum = 0\n    # Loop through the first n even numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current even number and add it to the sum\n        even_sum += (2 * i) ** 3\n    # Return the total sum of cubes\n    return even_sum\n\n# Test the function with the provided test case\nassert cube_sum(2) == 72"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter=\"-\"):\n    # Convert each element in the tuple to a string before joining\n    str_tup = [str(item) for item in tup]\n    return delimiter.join(str_tup)\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    [('ID', 'is', 4, 'UTS')],\n    [('QWE', 'is', 4, 'RTY')]\n]\n\n# Function to check the output of the concatenate_tuple function\ndef check_function(test_cases):\n    for test_case in test_cases:\n        result = concatenate_tuple(test_case[0])\n        expected = '-'.join(map(str, test_case[0]))\n        assert result == expected, f\"Test failed for input {test_case[0]}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function(test_cases)"}
{"task_id": "Mbpp/422", "solution": "def find_average_of_cube(n):\n    return (n * (n + 1) * (n + 2)) / 6\n\n# Test cases\ntest_cases = [2, 1]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for n in test_cases:\n        result = find_average_of_cube(n)\n        expected = (n * (n + 1) * (n + 2)) / 6\n        assert result == expected, f\"Test failed for input {n}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(test_tuple):\n    return [ele[-1] for ele in test_tuple]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(list1, x): \n    return sum(x not in sublist for sublist in list1)\n\n# Test cases\ntest_cases = [\n    ([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1),\n    ([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A')\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, x) in enumerate(test_cases):\n        result = count_element_in_list(input_data, x)\n        expected = 3  # Based on the problem statement, the expected output for both test cases is 3\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n```"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    return date[8:] + date[5:7] + date[:4]"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):  # Corrected variable name from I to i\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Test cases\ntest_cases = [\n    ([12, 23, 4, 5, 3, 2, 12, 81, 56, 95], [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]),\n    ([32, 30, 16, 96, 82, 83, 74], [16, 30, 32, 74, 82, 83, 96]),\n    ([24, 22, 39, 34, 87, 73, 68], [22, 24, 34, 39, 68, 73, 87])\n]\n\n# Check function to verify the correctness of the shell_sort function\ndef check_shell_sort(test_cases):\n    for i, (input_arr, expected_output) in enumerate(test_cases):\n        result = shell_sort(input_arr)\n        assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\n# Run the check function\ncheck_shell_sort(test_cases)"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(map(lambda x, y: x and y, t1, t2))\n\n# Test cases\ntest_cases = [\n    ((10, 4, 6, 9), (5, 2, 3, 3)),\n    ((8, 9, 11, 12), (7, 13, 14, 17))\n]\n\n# Expected outputs\nexpected_outputs = [\n    (0, 0, 2, 1),\n    (0, 9, 10, 0)\n]\n\n# Check function to verify the correctness of the and_tuples function\ndef check_and_tuples():\n    for i, (t1, t2) in enumerate(test_cases):\n        result = and_tuples(t1, t2)\n        assert result == expected_outputs[i], f\"Test case {i} failed: expected {expected_outputs[i]}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_and_tuples()"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # The directrix of a parabola y=ax^2+bx+c is y = -D/4a\n    # where D is the discriminant of the quadratic equation ax^2 + bx + c = 0\n    # D = b^2 - 4ac\n    D = b**2 - 4*a*c\n    directrix_y = -D / (4*a)\n    return directrix_y\n\n# Test cases\ntest_cases = [\n    ([2, 4, 6], -130),\n    ([5, 3, 2], -198)\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, (inputs, expected) in enumerate(test_cases):\n        result = parabola_directrix(*inputs)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    # Calculate the median of the three numbers\n    return (a + b + c) / 3\n\n# Test cases\ntest_cases = [\n    [15, 25, 35],\n    [6, 9, 4]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, test_case in enumerate(test_cases):\n        result = median_trapezium(*test_case)\n        expected = sum(test_case) / len(test_case)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed: expected {expected}, got {result}\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    This function checks if the entered number is greater than all the elements of the given array.\n\n    Args:\n    arr (list): The list of numbers.\n    num (int): The number to compare with.\n\n    Returns:\n    bool: True if the number is greater than all elements, False otherwise.\n\n    Example:\n    >>> check_greater([1, 2, 3, 4, 5], 4)\n    False\n    \"\"\"\n    for i in arr:\n        if i >= num:  # Corrected the comparison operator from <= to >=\n            return False\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    return number % 10\n\n# Test cases\nassert last_digit(123) == 3\nassert last_digit(25) == 5"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(list1):\n    return [i for sublist in list1 for i in sublist if i < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    return \"\".join(filter(lambda x: x.isalpha() and x.islower(), string))"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    result = 0\n    for num in numbers:\n        result = result * 10 + num\n    return result\n\n# Test cases\ntest_cases = [\n    [[11, 33, 50]],\n    [[10, 15, 20, 25]],\n    [[-1, 2, 3, 4, 5, 6]]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = multiple_to_single(test_case[0])\n        print(f\"Test input: {test_case[0]}, Expected output: {test_case[0][0] * 1000000 + test_case[0][1] * 100000 + test_case[0][2] * 10000 + test_case[0][3] * 1000 + test_case[0][4] * 100 + test_case[0][5] * 10}, Actual output: {result}\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverb = \"\"\n    positions = []\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith(\"ly\"):\n            adverb = word\n            positions.append(i)\n            break\n    return tuple(positions + [adverb])\n\n# Test cases\ntest_cases = [\n    ['clearly!! we can see the sky'],\n    ['unfortunately!! sita is going to home'],\n    ['seriously!! there are many roses']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = find_adverb_position(test_case[0])\n        expected = (0, len(test_case[0]) - 1, test_case[0])\n        assert result == expected, f\"Test failed for input: {test_case[0]}. Expected output: {expected}, but got: {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(l):\n    # Ensure the input is an integer\n    if not isinstance(l, int):\n        raise ValueError(\"Input must be an integer\")\n    # Calculate the surface area of a cube\n    return 6 * l * l"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Use a generator expression to multiply corresponding elements\n    result = tuple(a * b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test cases\ntest_cases = [\n    ((1, 3), (4, 5), (2, 9), (1, 10)),\n    ((6, 7), (3, 9), (1, 1), (7, 3)),\n    ((3, 5), (6, 7), (4, 11), (3, 12)),\n    ((8, 9), (5, 11), (3, 3), (9, 5))\n]\n\n# Expected outputs\nexpected_outputs = [\n    ((6, 21), (12, 45), (2, 9), (7, 30)),\n    ((24, 63), (21, 81), (1, 1), (49, 9)),\n    ((18, 35), (42, 77), (12, 33), (27, 60)),\n    ((40, 99), (45, 121), (9, 9), (81, 45))\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (tuple1, tuple2) in enumerate(test_cases):\n        result = index_multiplication(tuple1, tuple2)\n        assert result == expected_outputs[i], f\"Test case {i} failed: expected {expected_outputs[i]}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(lst, tup):\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict\n\n# Test cases\ntest_cases = [\n    (['a', 'a', 'c', 'b', 'd'], ['a', 'b']),\n    ([(1, 2, 3, 4, 5, 6), [1, 2]])\n]\n\n# Running the test cases\nfor i, (lst, tup) in enumerate(test_cases):\n    try:\n        result = count_Occurrence(lst, tup)\n        print(f\"Test {i}: PASS\")\n    except Exception as e:\n        print(f\"Test {i}: FAIL - {e}\")"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [n**3 for n in nums]\n```"}
{"task_id": "Mbpp/448", "solution": "def perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 2) + perrin_number(n - 3)\n\ndef cal_sum(n):\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_number(i)\n    return sum_perrin\n\n# Test cases"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [string[len(string) - size:] for string in string_list]\n\n# Test cases\ntest_cases = [\n    (['Python', 'list', 'exercises', 'practice', 'solution'], 8),\n    (['Python', 'list', 'exercises', 'practice', 'solution'], 6),\n    (['Python', 'list', 'exercises', 'practice', 'solution'], 9)\n]\n\n# Running the test cases\nfor i, (input_data, size) in enumerate(test_cases):\n    result = extract_string(input_data, size)\n    print(f\"Test {i}: Input: {input_data}, Size: {size}, Result: {result}\")"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(strings):\n    # Check if the input is a list\n    if isinstance(strings, list):\n        # Process each string in the list\n        return [s.strip() for s in strings]\n    else:\n        # If not a list, strip the string directly\n        return strings.strip()\n\n# Test cases\ntest_cases = [\n    [' Google    Flutter '],\n    [' Google    Dart ']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = remove_whitespaces(test_case)\n        expected = [s.strip() for s in test_case] if isinstance(test_case, list) else test_case.strip()\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):  # Corrected the range to include n\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n\n# Test cases"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    return bool(re.search(r'\\w*z\\w*', text))\n\n# Test cases\ntest_cases = [\n    ['  lang  .'],\n    ['pythonz.']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = text_match_wordz(test_case[0])\n        print(f\"Test input: {test_case[0]}, Expected output: {not result}, Actual output: {result}\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    elif month_number in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid month number\"\n\n# Test cases\ntest_cases = [\n    (6, False),\n    (5, True),\n    (2, \"Invalid month number\")\n]\n\n# Check function\ndef check_function():\n    for month_number, expected in test_cases:\n        result = check_monthnumb_number(month_number)\n        assert result == expected, f\"Test failed for input {month_number}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(list_of_strings):\n    # Reverse each string in the list\n    reversed_strings = [s[::-1] for s in list_of_strings]\n    # Reverse the order of the list\n    return reversed_strings[::-1]\n\n# Test cases\ntest_cases = [\n    [['Red', 'Green', 'Blue', 'White', 'Black']],\n    [['jack', 'john', 'mary']]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = reverse_string_list(test_case[0])\n        expected = [s[::-1] for s in test_case[0][::-1]]\n        assert result == expected, f\"Test failed for input {test_case[0]}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(list):\n    if not list:  # Check if the list is empty\n        return None\n    min_length = len(list[0])\n    min_list = list[0]\n    for i in range(1, len(list)):\n        if len(list[i]) < min_length:\n            min_length = len(list[i])\n            min_list = list[i]\n    return min_list\n\n# Test cases"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(l, b):\n    return l * b\n\n# Test cases\ntest_cases = [\n    [10, 20],\n    [4, 2],\n    [10, 5]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, (l, b) in enumerate(test_cases):\n        expected = l * b\n        result = rectangle_area(l, b)\n        assert result == expected, f\"Test {i} failed: Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(strings):\n    if isinstance(strings, list):\n        return [s.lower() for s in strings]\n    else:\n        return strings.lower()\n\n# Test cases\ntest_cases = [\n    ['cAstyoUrFavoRitETVshoWs'],\n    ['wAtchTheinTernEtrAdIo'],\n    ['VoicESeaRchAndreComMendaTionS']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = remove_uppercase(test_case)\n        expected = [s.lower() for s in test_case]\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    # Extract the first element from each sublist in the list\n    return [sublist[0] for sublist in lst]\n\n# Test cases to verify the correctness of the function\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1, 2, 3], [4, 5]]) == [1, 4]"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result\n\n# Test cases\ntest_cases = [\n    [['orange', 'red', 'green', 'blue']],\n    [['red', 'green', 'black', 'orange']]\n]\n\n# Expected outputs\nexpected_outputs = [\n    \"[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']\",\n    \"[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']\"\n]\n\n# Check function\ndef check_function():\n    for i, test_case in enumerate(test_cases):\n        result = combinations_list(test_case[0])\n        result_str = str(result)\n        if result_str == expected_outputs[i]:\n            print(f\"Test case {i+1} passed.\")\n        else:\n            print(f\"Test case {i+1} failed. Expected {expected_outputs[i]}, got {result_str}\")\n\n# Run check function\ncheck_function()"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_product = min_product = result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(max_product * num, num)\n        min_product = min(min_product * num, num)\n        result = max(result, max_product)\n    return result\n\n# Test cases"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dict1):\n  # Check if the input is a list and not a dictionary\n  if isinstance(dict1, list):\n    # Iterate through each dictionary in the list\n    return [drop_empty(d) for d in dict1]\n  else:\n    # Filter out key-value pairs where the value is None\n    return {key:value for (key, value) in dict1.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "import numpy as np\n\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize max_product array to store the maximum product till ith element\n    max_product_array = np.ones(n)\n\n    # Fill max_product_array[] in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product_array[i] = max(max_product_array[i], max_product_array[j] * arr[i])\n\n    # Return the maximum value from max_product_array[]\n    return int(max(max_product_array))\n\n# Test cases\ntest_cases = [\n    ([3, 100, 4, 5, 150, 6], 15000),\n    ([10, 22, 9, 33, 21, 50, 41, 60], 2460),\n    ([4, 42, 55, 68, 80], 50265600)\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for arr, expected in test_cases:\n        result = max_product(arr)\n        assert result == expected, f\"Test failed for input {arr}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tuple_):\n    if len(tuple_) == 0:\n        return tuple_\n    else:\n        result = []\n        for i in range(len(tuple_) - 1):\n            result.append(tuple_[i] + tuple_[i + 1])\n        return tuple(result)\n\n# Test cases"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n\n# Test cases\ntest_cases = [\n    ([100, 10, 5, 25, 35, 14], 11),\n    ([1, 1, 1], 1)\n]\n\n# Running the test cases\nfor arr, n in test_cases:\n    result = find_remainder(arr, n)\n    print(f\"Input: {arr}, {n}. Output: {result}\")"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n\n# Test the function with the provided test case\ntest_case = [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert tuples in list2 to sets for easy comparison\n    set_list2 = {frozenset(tup) for tup in list2}\n    # Find intersection by checking if tuple from list1 as set is in set_list2\n    intersection = {tuple(tup) for tup in list1 if frozenset(tup) in set_list2}\n    return intersection\n\n# Test cases\ntest_cases = [\n    ([[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]]),\n    ([[2, 1], [3, 2], [1, 3], [1, 4]], [[11, 2], [2, 3], [6, 2], [1, 3]])\n]\n\n# Run test cases\nfor i, (list1, list2) in enumerate(test_cases):\n    result = tuple_intersection(list1, list2)\n    print(f\"Test {i}: {result}\")"}
{"task_id": "Mbpp/474", "solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n\n# Test cases\ntest_cases = [\n    ['character', 'c', 'a'],\n    ['polygon', 'y', 'l']\n]\n\n# Running test cases\nfor test_case in test_cases:\n    result = replace_char(*test_case)\n    print(f\"Input: {test_case}, Output: {result}\")"}
{"task_id": "Mbpp/475", "solution": "def sort_dict_by_value(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\n# Test the function"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/477", "solution": "def to_lower(s):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return s.lower()\n\n# Test the function\nassert to_lower(\"InValid\") == \"invalid\"\nassert to_lower(\"TruE\") == \"true\"\n```"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    return string[0] + string[1:].replace(string[0].lower(), '')\n\n# Test cases\ntest_cases = [\n    ['FInD'],\n    ['PYTHon']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = remove_lowercase(test_case[0])\n        expected = test_case[0].replace(test_case[0][0].lower(), '')\n        assert result == expected, f\"Test failed for input {test_case[0]}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    # Convert the number to a string to easily access the first digit\n    number_str = str(number)\n    # Convert the first character of the string back to an integer\n    return int(number_str[0])\n\n# Test cases to verify the correctness of the function\nassert first_digit(123) == 1\nassert first_digit(456) == 4\nassert first_digit(12) == 1"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    # Filter the list to include only odd numbers\n    return [x for x in lst if x % 2 != 0]\n```"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    if isinstance(string, list):\n        return [s.upper() for s in string]\n    else:\n        return string.upper()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to be able to iterate over each digit\n    num1_str = str(num1)\n    num2_str = str(num2)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over each digit in the numbers\n    for digit1, digit2 in zip(num1_str, num2_str):\n        # Convert the digits back to integers and calculate the absolute difference\n        diff = abs(int(digit1) - int(digit2))\n        # Add the difference to the sum\n        sum += diff\n    \n    # Return the total sum of digit differences\n    return sum\n\n# Test cases"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    \"\"\"\n    :param arr: list\n    :param k: int\n    :return: int\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if i >= k - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= arr[i - k + 1]\n    return max_sum\n\n# Test cases"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    # Convert tuples to sets, find the union, convert back to sorted tuple\n    return tuple(sorted(set(tup1) | set(tup2)))\n\n# Test cases\ntest_cases = [((1, 2, 3, 4), (3, 4, 5, 6)), ((11, 12, 13, 14), (13, 15, 16, 17))]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for tup1, tup2 in test_cases:\n        result = union_elements(tup1, tup2)\n        expected = tuple(sorted(set(tup1) | set(tup2)))\n        assert result == expected, f\"Test failed for input {tup1, tup2}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(arr):\n    max_length = 0\n    current_length = 0\n    start = 0\n    for i in range(len(arr)):\n        if len(arr[i]) == 0:\n            continue\n        if i == 0 or len(arr[i-1]) == 0:\n            current_length = len(arr[i])\n            start = i\n        else:\n            if arr[i][0] == arr[i-1][-1]:\n                current_length += 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = len(arr[i])\n                start = i\n        if current_length > max_length:\n            max_length = current_length\n    if current_length > max_length:\n        max_length = current_length\n    return max_length\n\n# Test cases\ntest_cases = [\n    [[[1], [1, 4], [5, 6, 7, 8]]],  # Expected output: 4\n    [[[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]]  # Expected output: 5\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution(test_cases):\n    for i, test_case in enumerate(test_cases):\n        result = Find_Max_Length(test_case[0])\n        expected = test_case[1][0]\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_solution(test_cases)"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    # Convert the input list to a single string\n    input_string = \", \".join(string)\n    # Split the string by commas and extract values enclosed in quotes\n    return [x[1:-1] for x in input_string.split(\", \") if x[0] == '\"' and x[-1] == '\"']\n\n# Test cases\ntest_cases = [\n    ['\"Python\", \"PHP\", \"Java\"'],\n    ['\"red\",\"blue\",\"green\",\"yellow\"']\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = extract_values(test_case)\n        expected = [x[1:-1] for x in test_case[0].split(\", \") if x[0] == '\"' and x[-1] == '\"']\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, k):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] - lst[j]) == k:\n                count += 1\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/565", "solution": "def split(word): \n    return list(word)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\n# Test cases"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    return lst == sorted(lst)\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 15, 14, 20]) == False"}
{"task_id": "Mbpp/568", "solution": "def empty_list(length):\n    return [{} for _ in range(length)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    # Initialize an empty list to store the sorted sublists\n    sorted_sublists = []\n    \n    # Iterate over each index in the sublists\n    for i in range(len(lst[0])):\n        # Extract the i-th element from each sublist and sort them\n        sorted_elements = sorted([x[i] for x in lst])\n        # Append the sorted elements as a new sublist\n        sorted_sublists.append(sorted_elements)\n    \n    # Return the list of sorted sublists\n    return sorted_sublists\n\n# Test cases\ntest1 = [[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]\ntest2 = [[['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']]]\n\n# Expected outputs\nexpected_output1 = [['black', 'green', 'orange', 'white']]\nexpected_output2 = [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']]\n\n# Check function to verify the correctness of the solution\ndef check_function(test_case, expected_output):\n    result = sort_sublists(test_case)\n    if result == expected_output:\n        print(f\"Test passed: {result}\")\n    else:\n        print(f\"Test failed: Expected {expected_output}, but got {result}\")\n\n# Run the check function with the provided test cases\ncheck_function(test1, expected_output1)\ncheck_function(test2, expected_output2)"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    # Convert each sublist to a tuple to make it hashable\n    # Then convert the list of tuples to a set to remove duplicates\n    # Finally, convert the set back to a list\n    return list(set(tuple(sublist) for sublist in lst))\n\n# Test cases\ntest_cases = [\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4, 5]],\n    [[1, 2, 3, 2, 3, 4"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    # Convert each sublist to a tuple to make it hashable\n    unique_elements = set(tuple(sublist) for sublist in lst)\n    # Calculate the product of the unique elements\n    product = 1\n    for element in unique_elements:\n        product *= element\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_sub_array(main_list, sub_list):\n    # Check if sub_list is empty, which is a sublist of any list\n    if not sub_list:\n        return True\n    # Check if sub_list is longer than main_list, which cannot be a sublist\n    if len(sub_list) > len(main_list):\n        return False\n    # Iterate through main_list to find a matching sequence for sub_list\n    for i in range(len(main_list) - len(sub_list) + 1):\n        # Check if the current slice of main_list matches sub_list\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    # Return False if no matching sequence is found\n    return False\n\n# Test cases\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False\nassert is_sub_array([1, 2, 1], [1, 2, 1]) == True"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n            while fact % 10 == 0:\n                fact //= 10  # Use integer division to avoid float result\n        return int(str(fact)[-1])\n\n# Test cases"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Initialize an empty list to store the result\n    result = []\n    # Determine the maximum length among the three lists\n    max_length = max(len(list1), len(list2), len(list3))\n    # Iterate up to the maximum length\n    for i in range(max_length):\n        # Append elements from each list if they exist at the current index\n        if i < len(list1):\n            result.append(list1[i])\n        if i < len(list2):\n            result.append(list2[i])\n        if i < len(list3):\n            result.append(list3[i])\n    return result\n\n# Test cases\ntest1 = ([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])\ntest2 = ([11, 44], [10, 15], [20, 5])\n\n# Expected outputs\nexpected1 = [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nexpected2 = [11, 10, 20, 44, 15, 5]\n\n# Check function to verify the correctness of the solution\ndef check_function(test_case, expected):\n    result = interleave_lists(*test_case)\n    assert result == expected, f\"Test failed: {result} != {expected}\"\n    print(f\"Test passed: {result}\")\n\n# Run the check function with the provided test cases\ncheck_function(test1, expected1)\ncheck_function(test2, expected2)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if isinstance(x, int) and x % 2 == 0)\n    else:\n        return t\n\n# Test cases\ntest_cases = [\n    ((5, 6, (8, 7, (4, 8)), 7, 9),),\n    ((4, 5, (7, 6, (2, 4)), 6, 8),)\n]\n\n# Check function to verify the correctness of the solution\ndef check_extract_even():\n    for i, test_case in enumerate(test_cases):\n        result = extract_even(test_case[0])\n        expected = test_case[0]  # Since the test case is already the expected output\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_extract_even()"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base, height):\n    return (base * height) * 2\n\n# Test cases\ntest_cases = [\n    [4, 5],\n    [3, 4]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        base, height = test_case\n        expected_output = (base * height) * 2\n        actual_output = surface_Area(base, height)\n        assert actual_output == expected_output, f\"Test failed for input {test_case}. Expected {expected_output}, got {actual_output}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return (2 * n - 1) * catalan_number(n - 1) // n\n\n# Test cases"}
{"task_id": "Mbpp/585", "solution": "import heapq\n\ndef expensive_items(items, n):\n    # Use heapq.nlargest to find the n largest items based on the 'price' key\n    expensive_items = heapq.nlargest(n, items, key=lambda item: item['price'])\n    return expensive_items\n\n# Test cases\ntest_cases = [\n    ([[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1], [{'name': 'Item-2', 'price': 555.22}]),\n    ([[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2], [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]),\n    ([[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1], [{'name': 'Item-2', 'price': 555.22}])\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = expensive_items(*input_data)\n        assert result == expected_output, f\"Test case {i} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/586", "solution": "def split_arr(arr, n):\n    # Split the array at the nth element and concatenate the second part with the first part\n    return arr[n:] + arr[:n]\n\n# Test cases to verify the correctness of the function\nassert split_arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]\nassert split_arr([0, 1, 2, 3, 4, 5, 6, 7], 3) == [3, 4, 5, 6, 7, 0, 1, 2]\nassert split_arr([1, 2, 3, 4], 1) == [2, 3, 4, 1]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(listx):\n  return tuple(listx)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    This function finds perfect squares between two given numbers.\n\n    Args:\n    start (int): The start of the range.\n    end (int): The end of the range.\n\n    Returns:\n    list: A list of perfect squares in the range.\n\n    Example:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    return [i * i for i in range(int(start ** 0.5), int(end ** 0.5) + 1)]\n\n# Test cases"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    rect_coord = (x, y)\n    polar_coord = cmath.polar(complex(x, y))\n    return rect_coord, polar_coord\n\n# Test cases\ntest_cases = [\n    ([3, 4], ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))),\n    ([4, 7], ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j)))\n]\n\n# Check function to verify the correctness of the polar_rect function\ndef check_polar_rect(test_cases):\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = polar_rect(*input_data)\n        assert result == expected_output, f\"Test case {i} failed: expected {expected_output}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_polar_rect(test_cases)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(list1):\n    return list1[::-1]\n\n# Test cases\ntest_cases = [\n    [[12, 35, 9, 56, 24]],\n    [[4, 5, 6]]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = swap_List(test_case[0])\n        expected = test_case[0][::-1]\n        assert result == expected, f\"Test failed for input {test_case[0]}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Ensure the input is a string\n    ip_str = ''.join(ip)\n    # Split the IP address by '.'\n    parts = ip_str.split('.')\n    # Filter out any empty strings and join the parts with '.'\n    cleaned_parts = '.'.join(filter(None, parts))\n    return cleaned_parts\n\n# Test cases\ntest_cases = [\n    ['216.08.094.196'],\n    ['12.01.024']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = removezero_ip(test_case)\n        expected = '.'.join(filter(None, test_case[0].split('.')))\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n    if even is not None and odd is not None:\n        return even - odd\n    else:\n        return None\n\n# Test cases"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n\n# Test cases\ntest_cases = [\n    [('A', 1, 'B', 2, 'C', 3)],\n    [(1, 'Raju', 2, 'Nikhil', 3, 'Deepanshu')]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = tuple_size(test_case[0])\n        print(f\"Test input: {test_case[0]}. Expected output: {88}, got: {result}\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    elif arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        return arr1[mid1]\n\n# Test cases"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # initialize sum and number of digits\n    sum = 0\n    n = num\n    digit = 0\n    \n    # count the number of digits in the number\n    while n > 0:\n        digit += 1\n        n //= 10\n    \n    # calculate sum of the cube of each digit\n    n = num\n    while n > 0:\n        digit_sum = n % 10\n        sum += digit_sum ** digit\n        n //= 10\n    \n    # check if the sum is equal to the original number\n    if sum == num:\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    return (n*(n+1)//2, n/2)"}
{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_freq = {}\n    for char in s:\n        if char in char_freq:\n            return char\n        char_freq[char] = 1\n    return None"}
{"task_id": "Mbpp/603", "solution": "import itertools\n\ndef get_ludic(n):\n    ludic = [1]\n    candidates = list(range(2, n + 1))\n    while candidates:\n        first = candidates[0]\n        ludic.append(first)\n        candidates = [c for i, c in enumerate(candidates) if (i + 1) % first != 0]\n    return ludic\n\n# Test cases"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    # Check if the input is a list and convert it to a string if necessary\n    if isinstance(string, list):\n        string = ' '.join(string)\n    words = string.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)\n\n# Test cases\ntest_cases = [\n    ['java language'],\n    ['python program']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = reverse_words(test_case)\n        expected = ' '.join(word[::-1] for word in test_case[0].split())\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/605", "solution": "def prime_num(num):\n    if num == 1:\n        return False\n    for i in range(2, abs(num) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degree):\n    return degree * 3.14 / 180\n\n# Test cases\ntest_cases = [90, 120]\n\n# Check function to verify the correctness of the radian_degree function\ndef check_function():\n    for degree in test_cases:\n        expected_output = degree * 3.14 / 180\n        actual_output = radian_degree(degree)\n        assert actual_output == expected_output, f\"Test failed for input {degree}. Expected {expected_output}, got {actual_output}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\n# Test cases\ntest_cases = [\n    ('The quick brown fox jumps over the lazy dog.', 'fox'),\n    ('Hardest choices required strongest will', 'will'),\n    ('Its been a very crazy procedure right', 'crazy')\n]\n\n# Check function\ndef check_function():\n    for string, pattern in test_cases:\n        result = find_literals(string, pattern)\n        expected = (pattern, string.find(pattern), string.find(pattern) + len(pattern))\n        assert result == expected, f\"Test failed for input: {string}, {pattern}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run check function\ncheck_function()"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\n# Test cases\nassert bell_number(2) == 2\nassert bell_number(4) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Check if the k is within the valid range\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"k is out of the valid range\")\n    # Copy the list to avoid modifying the original list\n    new_lst = lst[:]\n    # Remove the k'th element\n    del new_lst[k]\n    return new_lst\n\n# Test cases"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Check if the matrix is empty or n is out of range\n    if not matrix or n <= 0 or n > len(matrix[0]):\n        return None\n    # Extract the nth column and find the maximum value\n    nth_column = [row[n-1] for row in matrix]\n    return max(nth_column)\n\n# Test cases"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    # Initialize two lists to hold the first and second elements of each sublist\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the first_elements list\n        first_elements.append(sublist[0])\n        # Append the second element of the sublist to the second_elements list\n        second_elements.append(sublist[1])\n    \n    # Combine the two lists into a single list of sublists\n    result = [first_elements, second_elements]\n    \n    # Return the resulting list\n    return result"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test cases\nassert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cumulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"}
{"task_id": "Mbpp/615", "solution": "import json\n\ndef average_tuple(tuples):\n    # Initialize an empty list to store the averages\n    averages = []\n    # Iterate over each tuple in the list\n    for t in tuples:\n        # Calculate the sum of the elements in the tuple\n        total_sum = sum(t)\n        # Calculate the number of elements in the tuple\n        count = len(t)\n        # Calculate the average and append it to the list\n        averages.append(total_sum / count)\n    # Return the list of averages\n    return averages\n\n# Test cases\ntest_cases = [\n    [[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]],\n    [[[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]],\n    [[[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]]\n]\n\n# Run the function on each test case and print the results\nfor test_case in test_cases:\n    result = average_tuple(test_case[0])\n    print(result)"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] % tuple2[i])\n    return tuple(result)\n\n# Test cases\ntest_cases = [\n    ((10, 4, 5, 6), (5, 6, 7, 5)),\n    ((12, 6, 7, 8), (7, 8, 9, 7))\n]\n\n# Running the test cases\nfor i, (tuple1, tuple2) in enumerate(test_cases):\n    try:\n        output = tuple_modulo(tuple1, tuple2)\n        print(f\"Test {i}: PASS, Output: {output}\")\n    except Exception as e:\n        print(f\"Test {i}: FAIL, Error: {e}\")"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        if list2[i] != 0:  # Check to avoid division by zero\n            result.append(list1[i] / list2[i])\n        else:\n            result.append(None)  # Handle division by zero by appending None\n    return result\n\n# Test cases\ntest_cases = [\n    ([[4, 5, 6], [1, 2, 3]], [3.0, 0.5, 2.0]),\n    ([[3, 2], [1, 4]], [3.0, 0.5]),\n    ([[90, 120], [50, 70]], [1.8, 1.7142857142857142])\n]\n\n# Check function to verify the correctness of the div_list function\ndef check_div_list():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        output = div_list(*input_data)\n        assert output == expected_output, f\"Test case {i} failed: expected {expected_output}, got {output}\"\n    print(\"All test cases passed!\")\n\n# Run the check function\ncheck_div_list()"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    for i in range(len(s)):\n        if s[i].isdigit():\n            nums.append(s[i])\n    for i in range(len(s)):\n        if s[i].isdigit():\n            s = s[:i] + s[i + 1:]\n    for i in range(len(nums)):\n        s = s[:i] + nums[i] + s[i + 1:]\n    return s\n\n# Test cases\ntest_cases = [\n    'I1love143you55three3000thousand'\n]\n\n# Run test cases\nfor test_case in test_cases:\n    result = move_num(test_case)\n    print(f\"Input: {test_case}\")\n    print(f\"Output: {result}\")\n    print()"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(arr):\n    arr.sort()\n    max_size = 0\n    for i in range(len(arr)):\n        if isinstance(arr[i], int) and arr[i] % 2 == 0:\n            max_size += 1\n        else:\n            break\n    return max_size\n\n# Test cases"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    # Merge the two lists\n    merged_list = list1 + list2\n    # Sort the merged list\n    merged_list.sort()\n    \n    # Calculate the median based on the size of the merged list\n    if size % 2 == 0:\n        # If even, average the two middle numbers\n        median = (merged_list[size//2 - 1] + merged_list[size//2]) / 2\n    else:\n        # If odd, take the middle number\n        median = merged_list[size//2]\n    \n    return median\n\n# Test cases\ntest_cases = [\n    ([[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], 16.0),\n    ([[2, 4, 8, 9], [7, 13, 19, 28], 4], 8.5)\n]\n\n# Check function to verify the correctness of the get_median function\ndef check_function():\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = get_median(*input_data)\n        assert result == expected, f\"Test {i} failed: expected {expected}, got {result}\"\n        print(f\"Test {i} passed.\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    nth_nums = list(map(lambda x: x ** n, nums))\n    return nth_nums\n\n# Test cases"}
{"task_id": "Mbpp/624", "solution": "def to_upper(s):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return s.upper()\n\n# Test the function\nassert to_upper(\"person\") == \"PERSON\"\nassert to_upper(\"Valid\") == \"VALID\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    # The largest triangle inscribed in a semicircle is a right-angled triangle\n    # with the diameter as its base and the radius as its height.\n    # Area of a triangle = 0.5 * base * height\n    # Diameter of the semicircle = 2 * radius\n    # Therefore, the area of the triangle = 0.5 * (2 * radius) * radius\n    return 0.5 * 2 * radius * radius\n\n# Test cases\ntest_cases = [\n    [2],\n    [0]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = triangle_area(test_case[0])\n        expected = 4 if test_case[0] == 2 else 0\n        assert result == expected, f\"Test failed for input {test_case[0]}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    # Check if the input is a list and replace spaces in the first element\n    if isinstance(string, list) and len(string) > 0:\n        return string[0].replace(\" \", \"%2\")\n    # If the input is not a list or is an empty list, return an empty string\n    return \"\"\n\n# Test cases\ntest_cases = [\n    ['My Name is Dawood'],\n    ['I love Coding'],\n    ['I am a Programmer']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = replace_spaces(test_case)\n        expected = ' '.join(test_case).replace(\" \", \"%2\")\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/629", "solution": "def Split(nums):\n    # Filter the list to include only even numbers\n    return [num for num in nums if num % 2 == 0]\n\n# Test cases to verify the correctness of the function\nassert Split([1, 2, 3, 4, 5]) == [2, 4]\nassert Split([4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0]\nassert Split([8, 12, 15, 19]) == [8, 12]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    # Check if the input is a list and handle it accordingly\n    if isinstance(string, list):\n        return [replace_spaces(s) for s in string]\n    # Replace spaces with underscores and vice versa\n    return string.replace(' ', '_').replace('_', ' ')\n\n# Test cases\ntest_cases = [\n    ['The_Avengers'],\n    ['Jumanji The Jungle']\n]\n\n# Function to check the correctness of the replace_spaces function\ndef check_function():\n    for test_case in test_cases:\n        result = replace_spaces(test_case)\n        expected = test_case[0].replace(' ', '_').replace('_', ' ')\n        assert result == expected, f\"Test failed for input: {test_case}. Expected output: {expected}, but got: {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the correctness of the solution\ncheck_function()"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    zero_count = lst.count(0)\n    lst = [i for i in lst if i != 0]\n    return lst + [0] * zero_count"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum\n\n# Test cases\nassert pair_xor_sum([5, 9, 7, 6], 4) == 47\nassert pair_xor_sum([7, 3], 2) == 4\nassert pair_xor_sum([7, 3, 5], 3) == 12"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\n# Test cases"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount1, amount2):\n    if amount1 == amount2:\n        return False\n    elif amount1 > amount2:\n        return True\n    else:\n        return False\n\n# Test cases\ntest_cases = [\n    ([1500, 1200], False),\n    ([2000, 5000], False)\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for inputs, expected in test_cases:\n        result = noprofit_noloss(*inputs)\n        assert result == expected, f\"Test with input {inputs} failed. Expected {expected}, got {result}.\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    # Wind chill index formula for km/h and Celsius\n    if temperature > 10 or velocity < 4.8:\n        return None\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)\n\n# Test cases\ntest_cases = [\n    [120, 35],\n    [40, 20],\n    [10, 8]\n]\n\n# Check function to verify the correctness of the wind_chill function\ndef check_wind_chill():\n    for velocity, temperature in test_cases:\n        result = wind_chill(velocity, temperature)\n        expected = None if temperature > 10 or velocity < 4.8 else math.ceil(13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16))\n        assert result == expected, f\"Test failed for input ({velocity}, {temperature}). Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_wind_chill()"}
{"task_id": "Mbpp/639", "solution": "def sum_name_length(names):\n    return sum(len(name) for name in names if not name[0].islower())\n\n# Test the function\nnames = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    :param n: int - an nth nonagonal number\n    :return: int - the nth nonagonal number\n    \"\"\"\n    return n * (n ** 2 - 1) // 2\n\n# Test cases"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    # Check if the first or last character is 'z'\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        return arr\n    else:\n        for i in range(k//2):\n            temp = arr[i]\n            arr[i] = arr[k-1-i]\n            arr[k-1-i] = temp\n        return arr\n\n# Test cases"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)\n\n# Test cases\ntest_cases = [\n    ([(8, 9, 10), {'POS': 3, 'is': 4, 'Okay': 5}]),\n    ([(4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}])\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, (input_data) in enumerate(test_cases):\n        result = add_dict_to_tuple(*input_data)\n        expected = input_data[0] + (input_data[1],)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/721", "solution": "def max_average_of_path(matrix):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    if not matrix:\n        return 0\n\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = matrix[i][i]\n\n    for i in range(n - 1):\n        dp[i][i + 1] = matrix[i][i] + matrix[i + 1][i + 1]\n\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    return dp[n - 1][n - 1] / n\n\n# Test cases\nassert max_average_of_path([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert max_average_of_path([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    # Corrected the function to use the correct keys for height and weight\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}\n\n# Test cases\nstudents1 = {'Cierra Vega': [6.2, 70], 'Alden Cantrell': [5.9, 65], 'Kierra Gentry': [6.0, 68], 'Pierre Cox': [5.8, 66]}\nmin_height1, min_weight1 = 6.0, 70"}
{"task_id": "Mbpp/723", "solution": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    sum = 0\n    for i in range(power):\n        sum += base\n    return sum\n\n# Test cases"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    # Split the string by double quotes and filter out empty strings\n    parts = [x for x in string.split('\"') if x]\n    # Extract the content between each pair of double quotes\n    return [parts[i] for i in range(1, len(parts), 2)]\n\n# Test cases\ntest_cases = [\n    ['Cortex \"A53\" Based \"multi\" tasking \"Processor\"'],\n    ['Cast your \"favorite\" entertainment \"apps\"'],\n    [\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"]\n]\n\n# Expected outputs\nexpected_outputs = [\n    ['A53', 'multi', 'Processor'],\n    ['favorite', 'apps'],\n    []\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, test_case in enumerate(test_cases):\n        result = extract_quotation(test_case[0])\n        if result == expected_outputs[i]:\n            print(f\"Test {i} passed.\")\n        else:\n            print(f\"Test {i} failed. Expected {expected_outputs[i]}, but got {result}.\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the tuple from the first element to the second last element\n    for i in range(len(t) - 1):\n        # Multiply the current element with the next element and append to the result list\n        result.append(t[i] * t[i + 1])\n    # Return the result list as a tuple\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\n# Test cases\ntest1 = [[1, 2, 3], [5, 6, 7]]\ntest2 = [[10, 20, 30], [15, 25, 35]]\n\n# Running the function with test cases\nresult1 = sum_list(*test1)\nresult2 = sum_list(*test2)\n\n# Expected output\nexpected1 = [6, 8, 10]\nexpected2 = [25, 45, 65]\n\n# Checking if the results match the expected output\nassert result1 == expected1, f\"Test 1 failed: expected {expected1}, got {result1}\"\nassert result2 == expected2, f\"Test 2 failed: expected {expected2}, got {result2}\"\n"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return [arr[0]]\n        else:\n            return arr\n    if arr[0] == arr[1]:\n        return [arr[0]] + consecutive_duplicates(arr[2:])\n    else:\n        return [arr[0]] + consecutive_duplicates(arr[1:])"}
{"task_id": "Mbpp/731", "solution": "from math import pi\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area of the cone\n    return pi * r * l\n\n# Test cases\ntest_cases = [\n    [19, 17],\n    [5, 12]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for r, h in test_cases:\n        expected = 1521.8090132193388 if r == 19 and h == 17 else 204.20352248333654\n        result = lateralsurface_cone(r, h)\n        assert math.isclose(result, expected, rel_tol=1e-9), f\"Test failed for input ({r}, {h}). Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    return string.replace(\" \",\":\").replace(\",\",\"::\").replace(\".\",\"::\")\n\n# Test cases\ntest_cases = [\n    ['a b c,d e f'],\n    ['Python language, Programming language.']\n]\n\n# Corrected function\ndef corrected_replace_specialchar(strings):\n    result = []\n    for string in strings:\n        result.append(string.replace(\" \",\":\").replace(\",\",\"::\").replace(\".\",\"::\"))\n    return result\n\n# Running the corrected function with test cases\nfor test_case in test_cases:\n    print(corrected_replace_specialchar(test_case))"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    \"\"\"\n    :param: arr - sorted array of integers\n          num - integer you're searching for\n    return: the index of the first occurrence of num in arr,\n            or -1 if num is not in arr\n    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0 if arr[0] == num else -1\n\n    mid = len(arr) // 2\n    if arr[mid] == num:\n        # Check if this is the first occurrence\n        if mid == 0 or arr[mid - 1] != num:\n            return mid\n        else:\n            return find_first_occurrence(arr[:mid], num)\n    elif arr[mid] > num:\n        return find_first_occurrence(arr[:mid], num)\n    else:\n        return mid + find_first_occurrence(arr[mid:], num)\n\n# Test cases"}
{"task_id": "Mbpp/734", "solution": "import itertools\n\ndef sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for r in range(1, len(lst) + 1):\n        for sub in itertools.combinations(lst, r):\n            prod = 1\n            for num in sub:\n                prod *= num\n            total_sum += prod\n    return total_sum\n\n# Test cases\ntest_cases = [\n    [[1, 2]],\n    [[1, 2, 3]]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = sum_Of_Subarray_Prod(test_case)\n        expected = sum([sum(itertools.combinations(test_case, r)) for r in range(1, len(test_case) + 1)])\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Ensure the input is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n\n    # Create a mask to toggle all bits except the first and the last\n    # For example, if num_bits = 4, mask will be 0110\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits\n    result = n ^ mask\n\n    # Ensure the first and last bits remain unchanged\n    first_bit = (n >> (num_bits - 1)) & 1\n    last_bit = n & 1\n    result = (first_bit << (num_bits - 1)) | (result & mask) | last_bit\n\n    return result\n\n# Test cases"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n# Test cases"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    >>> find_Index(2)\n    4\n    >>> find_Index(3)\n    12\n    >>> find_Index(4)\n    28\n    >>> find_Index(5)\n    58\n    >>> find_Index(6)\n    98\n    >>> find_Index(7)\n    168\n    >>> find_Index(8)\n    288\n    >>> find_Index(9)\n    428\n    >>> find_Index(10)\n    628\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 12\n    if n == 4:\n        return 28\n    if n == 5:\n        return 58\n    if n == 6:\n        return 98\n    if n == 7:\n        return 168\n    if n == 8:\n        return 288\n    if n == 9:\n        return 428\n    if n == 10:\n        return 628"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    d = {}\n    for i in range(len(tup)):\n        if i == 0:\n            d[tup[i]] = tup[i+1]\n        elif i == len(tup)-1:\n            d[tup[i-1]] = tup[i]\n        else:\n            d[tup[i-1]] = tup[i+1]\n    return d\n\n# Test cases\ntest_cases = [\n    [(1, 2, 3, 4, 5, 6)],\n    [(7, 8, 9, 10, 11, 12)]\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for test_case in test_cases:\n        result = tuple_to_dict(test_case[0])\n        expected = {test_case[0][i-1]: test_case[0][i+1] for i in range(1, len(test_case[0])-1)}\n        expected[test_case[0][0]] = test_case[0][1]\n        expected[test_case[0][-2]] = test_case[0][-1]\n        assert result == expected, f\"Test failed for input {test_case[0]}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] != string[j]:\n                return False\n    return True\n\n# Test cases\ntest_cases = [\n    ['data'],\n    ['python']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = all_Characters_Same(test_case[0])\n        print(f\"Test input: {test_case[0]}, Expected output: {not test_case[0] == test_case[0][0]*len(test_case[0])}, Got: {result}\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(edge):\n    # Ensure the input is a single number, not a list\n    if isinstance(edge, list):\n        edge = edge[0]\n    return (3**0.5)/4 * edge**2\n\n# Test cases to verify the correctness of the function\ndef test_area_tetrahedron():\n    assert abs(area_tetrahedron(3) - 15.588457268119894) < 1e-9, \"Test case 1 failed\"\n    assert abs(area_tetrahedron(10) - 173.20508075688772) < 1e-9, \"Test case 2 failed\"\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_area_tetrahedron()"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\n# Test cases"}
{"task_id": "Mbpp/744", "solution": "def check_none(test_tup):\n  return any(ele is not None for ele in test_tup)\n\n# Test the function with the provided test case\ntest_tup = (7, 8, 9, 11, 14)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\n# Test cases"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(strings):\n    # Check if the input is a list and contains only one string\n    if isinstance(strings, list) and len(strings) == 1:\n        string = strings[0]\n        # Split the string by spaces, capitalize each word, and join them back with spaces\n        return \" \".join(word.capitalize() for word in string.split(\" \"))\n    else:\n        raise ValueError(\"Input should be a list containing exactly one string\")\n\n# Test cases"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(list_of_numeric_strings):\n    # Convert each string in the list to an integer before sorting\n    return sorted(list_of_numeric_strings, key=int)\n\n# Test cases\ntest_cases = [\n    [['4', '12', '45', '7', '0', '100', '200', '-12', '-500']],\n    [['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2']],\n    [['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11']]\n]\n\n# Expected outputs\nexpected_outputs = [\n    [0, -500, -12, 4, 7, 12, 45, 100, 200],\n    [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9],\n    [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, test_case in enumerate(test_cases):\n        result = sort_numeric_strings(test_case[0])\n        if result == expected_outputs[i]:\n            print(f\"Test {i} passed.\")\n        else:\n            print(f\"Test {i} failed. Expected {expected_outputs[i]}, but got {result}.\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for _ in range(2, n+1):\n            c = 2*b + a\n            a = b\n            b = c\n        return b\n\n# Test cases"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    return sorted(tuple_list, key=lambda x: x[1])[:k]\n\n# Test cases\ntest_cases = [\n    ([['tanmay', 14], ['Amer', 11], ['Ayesha', 9], ['SKD', 16]], 1),\n    ([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2),\n    ([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)\n]\n\n# Running test cases\nfor i, (input_data, k) in enumerate(test_cases):\n    result = min_k(input_data, k)\n    print(f\"Test {i}: {result}\")"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    return [i for i in l1 if i in l2 and i in l3]\n\n# Test cases\ntest_cases = [\n    ([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7], [1, 6]),\n    ([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7], [])\n]\n\n# Check function\ndef check_function(func, test_cases):\n    for i, (l1, l2, l3, expected) in enumerate(test_cases):\n        result = func(l1, l2, l3)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run check function\ncheck_function(extract_index_list, test_cases)"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    :param lst: list of numbers\n    :return: second smallest number\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))  # Remove duplicates\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):  # Corrected variable name from I to i\n        for j in range(i+1, n):\n            if arr[i][::-1] == arr[j][::-1]:\n                count += 1\n    return count\n\n# Test cases\ntest_cases = [\n    [['julia', 'best', 'tseb', 'for', 'ailuj']],\n    [['makes', 'best', 'sekam', 'for', 'rof']]\n]\n\n# Expected outputs\nexpected_outputs = [2, 2]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for i, test_case in enumerate(test_cases):\n        result = count_reverse_pairs(test_case[0])\n        assert result == expected_outputs[i], f\"Test case {i} failed: expected {expected_outputs[i]}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    d = {}\n    for i in lst:\n        # Convert each sublist to a tuple to make it hashable\n        i_tuple = tuple(i)\n        if i_tuple not in d:\n            d[i_tuple] = 1\n        else:\n            d[i_tuple] += 1\n    return d\n\n# Test cases\ntest_cases = [\n    ([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], {1: 2, 3: 2, 5: 2, 7: 2, 13: 1, 15: 1, 17: 1, 9: 1, 11: 1}),\n    ([['green', 'orange'], ['black'], ['green', 'orange'], ['white']], {('green', 'orange'): 2, ('black',): 1, ('white',): 1}),\n    ([['john']], {('john',): 1})\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution(func, test_cases):\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = func(input_data)\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run the check function\ncheck_solution(unique_sublists, test_cases)"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    # Check if the string contains exactly one dot and if the rest of the string is digits\n    if s.count(\".\") == 1 and s.replace(\".\", \"\").isdigit():\n        return True\n    return False\n\n# Test cases\ntest_cases = ['3.124587', '1.11', '123.11']\n\n# Check function to verify the correctness of the is_decimal function\ndef check_is_decimal():\n    for test_case in test_cases:\n        result = is_decimal(test_case)\n        print(f\"Input: {test_case}, Expected: True, Got: {result}\")\n\n# Run the check function\ncheck_is_decimal()"}
{"task_id": "Mbpp/760", "solution": "def unique_element(numbers):\n    # Convert the list of numbers to a set to remove duplicates\n    # If the length of the set is 1, all elements were the same\n    return len(set(numbers)) == 1\n\n# Test cases\nassert unique_element([1, 1, 1]) == True\nassert unique_element([1, 2, 1, 2]) == False"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Find the minimum difference by comparing adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n\n# Test cases"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(str):\n    return len(str) - str.count(' ')"}
{"task_id": "Mbpp/765", "solution": "import math\n\ndef is_polite(n):\n    # Count the number of set bits in the binary representation of n\n    count_set_bits = bin(n).count('1')\n    # If there is only one set bit, it's a power of 2 and not polite\n    if count_set_bits == 1:\n        return False\n    return True\n\n# Test cases\ntest_cases = [7, 9, 4]\n\n# Check function to verify the correctness of the is_polite function\ndef check_is_polite():\n    for n in test_cases:\n        result = is_polite(n)\n        print(f\"Input: {n}, Output: {result}\")\n\n# Run the check function\ncheck_is_polite()"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i ** 4\n    return sum\n\n# Test cases"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in \"([{\":\n            stack.append(char)\n        elif char in \")]}\":\n            if not stack or stack.pop() != {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}[char]:\n                return False\n    return not stack\n\n# Test the function with the provided test case\ntest_expression = '{()}[{}]'"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    return ''.join([word for word in string.split() if len(word) != k])\n\n# Test cases\ntest_cases = [\n    ('The person is most value tet', 3),\n    ('Forces of darkeness is come into the play', 4)\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for string, k in test_cases:\n        result = remove_length(string, k)\n        expected = ' '.join([word for word in string.split() if len(word) != k])\n        assert result == expected, f\"Test failed for input: {string}, {k}. Expected: {expected}, Got: {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    if substring in string:\n        start = string.index(substring)\n        end = start + len(substring)\n        return substring, start, end\n    else:\n        return None\n\n# Test cases\nassert occurrence_substring('python programming, python language', 'python') == ('python', 0, 6)\nassert occurrence_substring('c++ programming, c++ language', 'python') is None\nassert occurrence_substring('python programming,programming language', 'programming') == ('programming', 7, 18)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(num for num, count in freq.items() if count == 1)\n    return sum_non_repeated\n\n# Test cases\ntest_cases = [\n    [[1, 2, 3, 1, 1, 4, 5, 6]],\n    [[1, 10, 9, 4, 2, 10, 10, 45, 4]],\n    [[12, 10, 9, 45, 2, 10, 10, 45, 10]]\n]\n\n# Run test cases\nfor i, test_case in enumerate(test_cases):\n    result = find_sum(test_case[0])\n    print(f\"Test {i}: {result}\")"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(l):\n    \"\"\"\n    >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    if not l:\n        return []\n    if len(l) == 1:\n        return [[l[0]]]\n    if l[0] == l[1]:\n        return [l[:2]] + pack_consecutive_duplicates(l[2:])\n    else:\n        return [l[:1]] + pack_consecutive_duplicates(l[1:])"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    \"\"\"\n    >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n    [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    return find_combinations_helper(tuples, 0, 0, [])\n\ndef find_combinations_helper(tuples, index, sum, result):\n    if index == len(tuples):\n        return result\n    if sum + tuples[index][0] > tuples[index][1]:\n        return find_combinations_helper(tuples, index + 1, sum, result)\n    else:\n        return find_combinations_helper(tuples, index + 1, sum + tuples[index][0], result) + find_combinations_helper(tuples, index + 1, sum, result)\n\n# Test cases"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count == 2  # Corrected to return True if count is exactly 2, False otherwise\n```"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n\n# Test cases"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = 1\n    odd = 1\n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return even * odd\n\n# Test cases"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Ensure the input is a string\n    if isinstance(tuple_str, list):\n        tuple_str = tuple_str[0]\n    # Split the string by comma and convert each element to an integer\n    return tuple(map(int, tuple_str.split(',')))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    if len(arr) == 0:\n        return 0\n    if val < arr[0]:\n        return 0\n    if val > arr[-1]:\n        return len(arr)\n    for i in range(len(arr)):\n        if val > arr[i]:\n            continue\n        else:\n            return i\n\n# Test cases"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(string, lst):\n    return tuple(string + lst)\n\n# Test cases\ntest_cases = [\n    [['WEB', 'is'], 'best'],\n    [['Part', 'is'], 'Wrong']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = new_tuple(*input_data)\n        assert result == expected_output, f\"Test {i} FAIL: For test input: {input_data}. Expected output is: {expected_output}, but got: {result}\"\n        print(f\"Test {i} PASS\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(len(lst)):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))  # Recursively call remove_nested for nested tuples\n        else:\n            result.append(item)\n    return tuple(result)\n\n# Test cases\ntest_cases = [\n    ([1, 5, 7, [4, 6], 10], (1, 5, 7, 4, 6, 10)),\n    ([(3, 7, 9, (6, 8), 12)], (3, 7, 9, 6, 8, 12)),\n    ([(3, 7, 9, (6, 8), (5, 12), 12)], (3, 7, 9, 6, 8, 5, 12, 12))\n]\n\n# Check function to verify the correctness of the solution\ndef check():\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = remove_nested(input_data)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n\n# Run the check function\ncheck()"}
{"task_id": "Mbpp/792", "solution": "def count_list(input_list):\n    return sum(isinstance(e, list) for e in input_list)"}
{"task_id": "Mbpp/796", "solution": "def sum_dict(dictionary):\n    total = 0\n    for key, value in dictionary.items():\n        if isinstance(value, (int, float)):\n            total += value\n    return total\n\n# Test cases\nassert sum_dict({'a': 36, 'b': 39, 'c': 49}) == 124\nassert sum_dict({'a': 100, 'b': 200, 'c': 300}) == 600"}
{"task_id": "Mbpp/798", "solution": "def sum_array(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    # Convert the number to binary and get the length of the binary string\n    binary_num = bin(num)[2:]\n    binary_len = len(binary_num)\n    \n    # Calculate the number of bits to be rotated\n    rotate_bits = d % binary_len\n    \n    # Rotate the bits by shifting the binary string to the left by rotate_bits\n    rotated_binary = binary_num[rotate_bits:] + binary_num[:rotate_bits]\n    \n    # Convert the rotated binary string back to decimal and return the result\n    return int(rotated_binary, 2)\n\n# Test cases"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(text):\n    if isinstance(text, list):\n        return ''.join(item.replace(' ', '') for item in text)\n    else:\n        return text.replace(' ', '')\n\n# Test cases\ntest_cases = [\n    ['python  program'],\n    ['   python                     program']\n]\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    for test_case in test_cases:\n        result = remove_all_spaces(test_case)\n        expected = ''.join(item.replace(' ', '') for item in test_case)\n        assert result == expected, f\"Test failed for input {test_case}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_solution()"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt = math.sqrt(n)\n    if sqrt - math.floor(sqrt) == 0:\n        return True\n    return False\n\n# Test cases\ntest_cases = [196, 36]\n\n# Check function to verify the correctness of the is_perfect_square function\ndef check_is_perfect_square():\n    for n in test_cases:\n        result = is_perfect_square(n)\n        print(f\"Input: {n}, Expected: {n in [196, 36]}, Got: {result}\")\n\n# Run the check function\ncheck_is_perfect_square()"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0\n```"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    for sublist in lst:\n        for num in sublist:\n            if num > max_sum:\n                max_sum = num\n    return max_sum\n\n# Test cases\ntest_cases = [\n    [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]],  # Expected output: 12\n    [[[2, 3, 1]]],  # Expected output: 3\n    [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]  # Expected output: 12\n]\n\n# Check function\ndef check_function(func, test_cases):\n    for i, test_case in enumerate(test_cases):\n        result = func(test_case[0])\n        expected = test_case[0][-1][-1]  # Assuming the max sum is the last element in the last sublist\n        assert result == expected, f\"Test case {i} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i} passed.\")\n\n# Run check function\ncheck_function(max_sum_list, test_cases)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    max_run = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            max_run = max(max_run, i - string.rfind(' ', 0, i))\n    return max_run\n\n# Test cases\ntest_cases = [\n    ('GeMKSForGERksISBESt', 5),\n    ('GooGLEFluTTER', 4)\n]\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    for string, expected in test_cases:\n        result = max_run_uppercase(string)\n        assert result == expected, f\"Test failed for input: {string}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function to verify the solution\ncheck_function()"}
{"task_id": "Mbpp/807", "solution": "def first_odd(nums):\n    # Iterate through each element in the list\n    for el in nums:\n        # Check if the element is odd\n        if el % 2 != 0:\n            return el\n    # Return None if no odd number is found\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuple_list, k):\n    for i in tuple_list:\n        if k in i:\n            return True\n    return False\n\n# Test cases\ntest_cases = [([(10, 4, 5, 6, 8), 6], True), ([(1, 2, 3, 4, 5, 6), 7], False)]\n\n# Check function\ndef check_function():\n    for input_data, expected in test_cases:\n        result = check_K(*input_data)\n        assert result == expected, f\"Test failed for input {input_data}. Expected {expected}, got {result}\"\n    print(\"All tests passed!\")\n\n# Run the check function\ncheck_function()"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    # Ensure both tuples have the same length\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Compare elements of both tuples\n    for i in range(len(tup1)):\n        if tup1[i] > tup2[i]:\n            return False\n    return True\n\n# Test cases\ntest_cases = [\n    ([(4, 5, 6), (3, 4, 5)], True),\n    ([(11, 12, 13), (10, 11, 12)], True)\n]\n\n# Check function\ndef check_function(func, test_cases):\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = func(*input_data)\n        assert result == expected, f\"Test {i} failed: expected {expected}, got {result}\"\n        print(f\"Test {i} passed.\")\n\n# Run check function\ncheck_function(check_smaller, test_cases)"}
